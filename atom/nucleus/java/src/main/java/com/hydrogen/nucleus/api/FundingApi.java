/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.BankLink;
import com.hydrogen.nucleus.model.ExternalAccountTransfer;
import com.hydrogen.nucleus.model.Funding;
import com.hydrogen.nucleus.model.FundingTransaction;
import com.hydrogen.nucleus.model.PageBankLink;
import com.hydrogen.nucleus.model.PageExternalAccountTransfer;
import com.hydrogen.nucleus.model.PageFunding;
import com.hydrogen.nucleus.model.PageFundingTransaction;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FundingApi {
    private ApiClient apiClient;

    public FundingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FundingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBankLinkUsingPost
     * @param bankLinkInfoRequest bankLinkInfoRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPostCall(BankLink bankLinkInfoRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bankLinkInfoRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBankLinkUsingPostValidateBeforeCall(BankLink bankLinkInfoRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLinkInfoRequest' is set
        if (bankLinkInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'bankLinkInfoRequest' when calling createBankLinkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBankLinkUsingPostCall(bankLinkInfoRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a bank link
     * Create a new bank link for an account.
     * @param bankLinkInfoRequest bankLinkInfoRequest (required)
     * @return BankLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BankLink createBankLinkUsingPost(BankLink bankLinkInfoRequest) throws ApiException {
        ApiResponse<BankLink> resp = createBankLinkUsingPostWithHttpInfo(bankLinkInfoRequest);
        return resp.getData();
    }

    /**
     * Create a bank link
     * Create a new bank link for an account.
     * @param bankLinkInfoRequest bankLinkInfoRequest (required)
     * @return ApiResponse&lt;BankLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BankLink> createBankLinkUsingPostWithHttpInfo(BankLink bankLinkInfoRequest) throws ApiException {
        com.squareup.okhttp.Call call = createBankLinkUsingPostValidateBeforeCall(bankLinkInfoRequest, null, null);
        Type localVarReturnType = new TypeToken<BankLink>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a bank link (asynchronously)
     * Create a new bank link for an account.
     * @param bankLinkInfoRequest bankLinkInfoRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBankLinkUsingPostAsync(BankLink bankLinkInfoRequest, final ApiCallback<BankLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBankLinkUsingPostValidateBeforeCall(bankLinkInfoRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BankLink>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFundingTransactionUsingPost
     * @param fundingTransactionRequest fundingTransactionRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFundingTransactionUsingPostCall(FundingTransaction fundingTransactionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fundingTransactionRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFundingTransactionUsingPostValidateBeforeCall(FundingTransaction fundingTransactionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingTransactionRequest' is set
        if (fundingTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'fundingTransactionRequest' when calling createFundingTransactionUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createFundingTransactionUsingPostCall(fundingTransactionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a funding transaction request
     * Create a new funding transaction request for an account.
     * @param fundingTransactionRequest fundingTransactionRequest (required)
     * @return FundingTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FundingTransaction createFundingTransactionUsingPost(FundingTransaction fundingTransactionRequest) throws ApiException {
        ApiResponse<FundingTransaction> resp = createFundingTransactionUsingPostWithHttpInfo(fundingTransactionRequest);
        return resp.getData();
    }

    /**
     * Create a funding transaction request
     * Create a new funding transaction request for an account.
     * @param fundingTransactionRequest fundingTransactionRequest (required)
     * @return ApiResponse&lt;FundingTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FundingTransaction> createFundingTransactionUsingPostWithHttpInfo(FundingTransaction fundingTransactionRequest) throws ApiException {
        com.squareup.okhttp.Call call = createFundingTransactionUsingPostValidateBeforeCall(fundingTransactionRequest, null, null);
        Type localVarReturnType = new TypeToken<FundingTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a funding transaction request (asynchronously)
     * Create a new funding transaction request for an account.
     * @param fundingTransactionRequest fundingTransactionRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFundingTransactionUsingPostAsync(FundingTransaction fundingTransactionRequest, final ApiCallback<FundingTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFundingTransactionUsingPostValidateBeforeCall(fundingTransactionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FundingTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFundingUsingPost
     * @param fundingRequest fundingRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFundingUsingPostCall(Funding fundingRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fundingRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFundingUsingPostValidateBeforeCall(Funding fundingRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingRequest' is set
        if (fundingRequest == null) {
            throw new ApiException("Missing the required parameter 'fundingRequest' when calling createFundingUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createFundingUsingPostCall(fundingRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a funding request
     * Create a new funding request for an account. 
     * @param fundingRequest fundingRequest (required)
     * @return Funding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Funding createFundingUsingPost(Funding fundingRequest) throws ApiException {
        ApiResponse<Funding> resp = createFundingUsingPostWithHttpInfo(fundingRequest);
        return resp.getData();
    }

    /**
     * Create a funding request
     * Create a new funding request for an account. 
     * @param fundingRequest fundingRequest (required)
     * @return ApiResponse&lt;Funding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Funding> createFundingUsingPostWithHttpInfo(Funding fundingRequest) throws ApiException {
        com.squareup.okhttp.Call call = createFundingUsingPostValidateBeforeCall(fundingRequest, null, null);
        Type localVarReturnType = new TypeToken<Funding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a funding request (asynchronously)
     * Create a new funding request for an account. 
     * @param fundingRequest fundingRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFundingUsingPostAsync(Funding fundingRequest, final ApiCallback<Funding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFundingUsingPostValidateBeforeCall(fundingRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Funding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTransferUsingPost
     * @param externalAccountTransferRequest externalAccountTransferRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTransferUsingPostCall(ExternalAccountTransfer externalAccountTransferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = externalAccountTransferRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTransferUsingPostValidateBeforeCall(ExternalAccountTransfer externalAccountTransferRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'externalAccountTransferRequest' is set
        if (externalAccountTransferRequest == null) {
            throw new ApiException("Missing the required parameter 'externalAccountTransferRequest' when calling createTransferUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createTransferUsingPostCall(externalAccountTransferRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a transfer requests
     * Create a new external account transfer for a client account.
     * @param externalAccountTransferRequest externalAccountTransferRequest (required)
     * @return ExternalAccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalAccountTransfer createTransferUsingPost(ExternalAccountTransfer externalAccountTransferRequest) throws ApiException {
        ApiResponse<ExternalAccountTransfer> resp = createTransferUsingPostWithHttpInfo(externalAccountTransferRequest);
        return resp.getData();
    }

    /**
     * Create a transfer requests
     * Create a new external account transfer for a client account.
     * @param externalAccountTransferRequest externalAccountTransferRequest (required)
     * @return ApiResponse&lt;ExternalAccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalAccountTransfer> createTransferUsingPostWithHttpInfo(ExternalAccountTransfer externalAccountTransferRequest) throws ApiException {
        com.squareup.okhttp.Call call = createTransferUsingPostValidateBeforeCall(externalAccountTransferRequest, null, null);
        Type localVarReturnType = new TypeToken<ExternalAccountTransfer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a transfer requests (asynchronously)
     * Create a new external account transfer for a client account.
     * @param externalAccountTransferRequest externalAccountTransferRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTransferUsingPostAsync(ExternalAccountTransfer externalAccountTransferRequest, final ApiCallback<ExternalAccountTransfer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTransferUsingPostValidateBeforeCall(externalAccountTransferRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalAccountTransfer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBankLinkUsingDelete
     * @param bankLinkId UUID bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDeleteCall(UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link/{bank_link_id}"
            .replaceAll("\\{" + "bank_link_id" + "\\}", apiClient.escapeString(bankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBankLinkUsingDeleteValidateBeforeCall(UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLinkId' is set
        if (bankLinkId == null) {
            throw new ApiException("Missing the required parameter 'bankLinkId' when calling deleteBankLinkUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteCall(bankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a bank link
     * Permanently delete a bank link defined for an account.
     * @param bankLinkId UUID bank_link_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBankLinkUsingDelete(UUID bankLinkId) throws ApiException {
        deleteBankLinkUsingDeleteWithHttpInfo(bankLinkId);
    }

    /**
     * Delete a bank link
     * Permanently delete a bank link defined for an account.
     * @param bankLinkId UUID bank_link_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBankLinkUsingDeleteWithHttpInfo(UUID bankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteValidateBeforeCall(bankLinkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a bank link (asynchronously)
     * Permanently delete a bank link defined for an account.
     * @param bankLinkId UUID bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBankLinkUsingDeleteAsync(UUID bankLinkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBankLinkUsingDeleteValidateBeforeCall(bankLinkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFundingTransactionUsingDelete
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFundingTransactionUsingDeleteCall(UUID fundingTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}"
            .replaceAll("\\{" + "funding_transaction_id" + "\\}", apiClient.escapeString(fundingTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFundingTransactionUsingDeleteValidateBeforeCall(UUID fundingTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingTransactionId' is set
        if (fundingTransactionId == null) {
            throw new ApiException("Missing the required parameter 'fundingTransactionId' when calling deleteFundingTransactionUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFundingTransactionUsingDeleteCall(fundingTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a funding transaction request
     * Permanently delete a funding transaction request for an account.
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFundingTransactionUsingDelete(UUID fundingTransactionId) throws ApiException {
        deleteFundingTransactionUsingDeleteWithHttpInfo(fundingTransactionId);
    }

    /**
     * Delete a funding transaction request
     * Permanently delete a funding transaction request for an account.
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFundingTransactionUsingDeleteWithHttpInfo(UUID fundingTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFundingTransactionUsingDeleteValidateBeforeCall(fundingTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a funding transaction request (asynchronously)
     * Permanently delete a funding transaction request for an account.
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFundingTransactionUsingDeleteAsync(UUID fundingTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFundingTransactionUsingDeleteValidateBeforeCall(fundingTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFundingUsingDelete
     * @param fundingId UUID funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFundingUsingDeleteCall(UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding/{funding_id}"
            .replaceAll("\\{" + "funding_id" + "\\}", apiClient.escapeString(fundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFundingUsingDeleteValidateBeforeCall(UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingId' is set
        if (fundingId == null) {
            throw new ApiException("Missing the required parameter 'fundingId' when calling deleteFundingUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFundingUsingDeleteCall(fundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a funding request
     * Permanently delete a funding request defined for an account.
     * @param fundingId UUID funding_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFundingUsingDelete(UUID fundingId) throws ApiException {
        deleteFundingUsingDeleteWithHttpInfo(fundingId);
    }

    /**
     * Delete a funding request
     * Permanently delete a funding request defined for an account.
     * @param fundingId UUID funding_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFundingUsingDeleteWithHttpInfo(UUID fundingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFundingUsingDeleteValidateBeforeCall(fundingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a funding request (asynchronously)
     * Permanently delete a funding request defined for an account.
     * @param fundingId UUID funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFundingUsingDeleteAsync(UUID fundingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFundingUsingDeleteValidateBeforeCall(fundingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTransferUsingDelete
     * @param transferId UUID external_account_transfer_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTransferUsingDeleteCall(UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer/{transfer_id}"
            .replaceAll("\\{" + "transfer_id" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTransferUsingDeleteValidateBeforeCall(UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling deleteTransferUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTransferUsingDeleteCall(transferId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a transfer request
     * Permanently delete a external account transfer from a client account.
     * @param transferId UUID external_account_transfer_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTransferUsingDelete(UUID transferId) throws ApiException {
        deleteTransferUsingDeleteWithHttpInfo(transferId);
    }

    /**
     * Delete a transfer request
     * Permanently delete a external account transfer from a client account.
     * @param transferId UUID external_account_transfer_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTransferUsingDeleteWithHttpInfo(UUID transferId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransferUsingDeleteValidateBeforeCall(transferId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a transfer request (asynchronously)
     * Permanently delete a external account transfer from a client account.
     * @param transferId UUID external_account_transfer_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTransferUsingDeleteAsync(UUID transferId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransferUsingDeleteValidateBeforeCall(transferId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBankLinkAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBankLinkAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinkAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBankLinkAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all bank links
     * Get all bank links defined for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageBankLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageBankLink getBankLinkAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageBankLink> resp = getBankLinkAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all bank links
     * Get all bank links defined for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageBankLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageBankLink> getBankLinkAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinkAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageBankLink>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all bank links (asynchronously)
     * Get all bank links defined for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBankLinkAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageBankLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinkAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageBankLink>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBankLinkUsingGet
     * @param bankLinkId UUID bank_link_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGetCall(UUID bankLinkId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link/{bank_link_id}"
            .replaceAll("\\{" + "bank_link_id" + "\\}", apiClient.escapeString(bankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinkUsingGetValidateBeforeCall(UUID bankLinkId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLinkId' is set
        if (bankLinkId == null) {
            throw new ApiException("Missing the required parameter 'bankLinkId' when calling getBankLinkUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBankLinkUsingGetCall(bankLinkId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a bank link
     * Retrieve the information for a bank link for an account.
     * @param bankLinkId UUID bank_link_id (required)
     * @param currencyConversion USD (optional)
     * @return BankLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BankLink getBankLinkUsingGet(UUID bankLinkId, String currencyConversion) throws ApiException {
        ApiResponse<BankLink> resp = getBankLinkUsingGetWithHttpInfo(bankLinkId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a bank link
     * Retrieve the information for a bank link for an account.
     * @param bankLinkId UUID bank_link_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;BankLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BankLink> getBankLinkUsingGetWithHttpInfo(UUID bankLinkId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinkUsingGetValidateBeforeCall(bankLinkId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<BankLink>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a bank link (asynchronously)
     * Retrieve the information for a bank link for an account.
     * @param bankLinkId UUID bank_link_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBankLinkUsingGetAsync(UUID bankLinkId, String currencyConversion, final ApiCallback<BankLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinkUsingGetValidateBeforeCall(bankLinkId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BankLink>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFundingAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all funding requests 
     * Get the information for all funding requests defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageFunding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageFunding getFundingAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageFunding> resp = getFundingAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all funding requests 
     * Get the information for all funding requests defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageFunding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageFunding> getFundingAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getFundingAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageFunding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all funding requests  (asynchronously)
     * Get the information for all funding requests defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageFunding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageFunding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingTransactionAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingTransactionAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingTransactionAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFundingTransactionAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all funding transaction requests
     * Get the information for all funding transaction requests for all clients.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageFundingTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageFundingTransaction getFundingTransactionAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageFundingTransaction> resp = getFundingTransactionAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all funding transaction requests
     * Get the information for all funding transaction requests for all clients.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageFundingTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageFundingTransaction> getFundingTransactionAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getFundingTransactionAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageFundingTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all funding transaction requests (asynchronously)
     * Get the information for all funding transaction requests for all clients.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingTransactionAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageFundingTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingTransactionAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageFundingTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingTransactionUsingGet
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingTransactionUsingGetCall(UUID fundingTransactionId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}"
            .replaceAll("\\{" + "funding_transaction_id" + "\\}", apiClient.escapeString(fundingTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingTransactionUsingGetValidateBeforeCall(UUID fundingTransactionId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingTransactionId' is set
        if (fundingTransactionId == null) {
            throw new ApiException("Missing the required parameter 'fundingTransactionId' when calling getFundingTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingTransactionUsingGetCall(fundingTransactionId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a funding transaction request
     * Retrieve the information for a funding transaction request for an account.
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @return FundingTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FundingTransaction getFundingTransactionUsingGet(UUID fundingTransactionId, String currencyConversion) throws ApiException {
        ApiResponse<FundingTransaction> resp = getFundingTransactionUsingGetWithHttpInfo(fundingTransactionId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a funding transaction request
     * Retrieve the information for a funding transaction request for an account.
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;FundingTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FundingTransaction> getFundingTransactionUsingGetWithHttpInfo(UUID fundingTransactionId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getFundingTransactionUsingGetValidateBeforeCall(fundingTransactionId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<FundingTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a funding transaction request (asynchronously)
     * Retrieve the information for a funding transaction request for an account.
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingTransactionUsingGetAsync(UUID fundingTransactionId, String currencyConversion, final ApiCallback<FundingTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingTransactionUsingGetValidateBeforeCall(fundingTransactionId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FundingTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingUsingGet
     * @param fundingId UUID funding_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFundingUsingGetCall(UUID fundingId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding/{funding_id}"
            .replaceAll("\\{" + "funding_id" + "\\}", apiClient.escapeString(fundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingUsingGetValidateBeforeCall(UUID fundingId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingId' is set
        if (fundingId == null) {
            throw new ApiException("Missing the required parameter 'fundingId' when calling getFundingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingUsingGetCall(fundingId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a funding request
     * Retrieve the information for a funding request for an account.
     * @param fundingId UUID funding_id (required)
     * @param currencyConversion USD (optional)
     * @return Funding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Funding getFundingUsingGet(UUID fundingId, String currencyConversion) throws ApiException {
        ApiResponse<Funding> resp = getFundingUsingGetWithHttpInfo(fundingId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a funding request
     * Retrieve the information for a funding request for an account.
     * @param fundingId UUID funding_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;Funding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Funding> getFundingUsingGetWithHttpInfo(UUID fundingId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getFundingUsingGetValidateBeforeCall(fundingId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<Funding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a funding request (asynchronously)
     * Retrieve the information for a funding request for an account.
     * @param fundingId UUID funding_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFundingUsingGetAsync(UUID fundingId, String currencyConversion, final ApiCallback<Funding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingUsingGetValidateBeforeCall(fundingId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Funding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransferAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransferAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransferAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTransferAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all transfer requests
     * Get the information for all external account transfers defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageExternalAccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageExternalAccountTransfer getTransferAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageExternalAccountTransfer> resp = getTransferAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all transfer requests
     * Get the information for all external account transfers defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageExternalAccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageExternalAccountTransfer> getTransferAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getTransferAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageExternalAccountTransfer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all transfer requests (asynchronously)
     * Get the information for all external account transfers defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransferAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageExternalAccountTransfer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransferAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageExternalAccountTransfer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransferUsingGet
     * @param transferId UUID external_account_transfer_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransferUsingGetCall(UUID transferId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer/{transfer_id}"
            .replaceAll("\\{" + "transfer_id" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransferUsingGetValidateBeforeCall(UUID transferId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling getTransferUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransferUsingGetCall(transferId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a transfer request
     * Retrieve the information for a external account transfer for an account.
     * @param transferId UUID external_account_transfer_id (required)
     * @param currencyConversion USD (optional)
     * @return ExternalAccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalAccountTransfer getTransferUsingGet(UUID transferId, String currencyConversion) throws ApiException {
        ApiResponse<ExternalAccountTransfer> resp = getTransferUsingGetWithHttpInfo(transferId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a transfer request
     * Retrieve the information for a external account transfer for an account.
     * @param transferId UUID external_account_transfer_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;ExternalAccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalAccountTransfer> getTransferUsingGetWithHttpInfo(UUID transferId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getTransferUsingGetValidateBeforeCall(transferId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<ExternalAccountTransfer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a transfer request (asynchronously)
     * Retrieve the information for a external account transfer for an account.
     * @param transferId UUID external_account_transfer_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransferUsingGetAsync(UUID transferId, String currencyConversion, final ApiCallback<ExternalAccountTransfer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransferUsingGetValidateBeforeCall(transferId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalAccountTransfer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankLinkBulkUsingPut
     * @param bankLinkList bankLinkList (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkBulkUsingPutCall(List<Object> bankLinkList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bankLinkList;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk_bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankLinkBulkUsingPutValidateBeforeCall(List<Object> bankLinkList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLinkList' is set
        if (bankLinkList == null) {
            throw new ApiException("Missing the required parameter 'bankLinkList' when calling updateBankLinkBulkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankLinkBulkUsingPutCall(bankLinkList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update list of bank link
     * Update bank link list for an account.
     * @param bankLinkList bankLinkList (required)
     * @return List&lt;BankLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BankLink> updateBankLinkBulkUsingPut(List<Object> bankLinkList) throws ApiException {
        ApiResponse<List<BankLink>> resp = updateBankLinkBulkUsingPutWithHttpInfo(bankLinkList);
        return resp.getData();
    }

    /**
     * Update list of bank link
     * Update bank link list for an account.
     * @param bankLinkList bankLinkList (required)
     * @return ApiResponse&lt;List&lt;BankLink&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BankLink>> updateBankLinkBulkUsingPutWithHttpInfo(List<Object> bankLinkList) throws ApiException {
        com.squareup.okhttp.Call call = updateBankLinkBulkUsingPutValidateBeforeCall(bankLinkList, null, null);
        Type localVarReturnType = new TypeToken<List<BankLink>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update list of bank link (asynchronously)
     * Update bank link list for an account.
     * @param bankLinkList bankLinkList (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkBulkUsingPutAsync(List<Object> bankLinkList, final ApiCallback<List<BankLink>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankLinkBulkUsingPutValidateBeforeCall(bankLinkList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BankLink>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankLinkUsingPut
     * @param bankLink bank_link (required)
     * @param bankLinkId UUID bank_link_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPutCall(Object bankLink, UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = bankLink;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link/{bank_link_id}"
            .replaceAll("\\{" + "bank_link_id" + "\\}", apiClient.escapeString(bankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankLinkUsingPutValidateBeforeCall(Object bankLink, UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLink' is set
        if (bankLink == null) {
            throw new ApiException("Missing the required parameter 'bankLink' when calling updateBankLinkUsingPut(Async)");
        }
        
        // verify the required parameter 'bankLinkId' is set
        if (bankLinkId == null) {
            throw new ApiException("Missing the required parameter 'bankLinkId' when calling updateBankLinkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankLinkUsingPutCall(bankLink, bankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a bank link
     * Update the information for a bank link for an account.
     * @param bankLink bank_link (required)
     * @param bankLinkId UUID bank_link_id (required)
     * @return BankLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BankLink updateBankLinkUsingPut(Object bankLink, UUID bankLinkId) throws ApiException {
        ApiResponse<BankLink> resp = updateBankLinkUsingPutWithHttpInfo(bankLink, bankLinkId);
        return resp.getData();
    }

    /**
     * Update a bank link
     * Update the information for a bank link for an account.
     * @param bankLink bank_link (required)
     * @param bankLinkId UUID bank_link_id (required)
     * @return ApiResponse&lt;BankLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BankLink> updateBankLinkUsingPutWithHttpInfo(Object bankLink, UUID bankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = updateBankLinkUsingPutValidateBeforeCall(bankLink, bankLinkId, null, null);
        Type localVarReturnType = new TypeToken<BankLink>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a bank link (asynchronously)
     * Update the information for a bank link for an account.
     * @param bankLink bank_link (required)
     * @param bankLinkId UUID bank_link_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBankLinkUsingPutAsync(Object bankLink, UUID bankLinkId, final ApiCallback<BankLink> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankLinkUsingPutValidateBeforeCall(bankLink, bankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BankLink>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFundingTransactionUsingPut
     * @param fundingTransaction fundingTransaction (required)
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFundingTransactionUsingPutCall(Object fundingTransaction, UUID fundingTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fundingTransaction;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}"
            .replaceAll("\\{" + "funding_transaction_id" + "\\}", apiClient.escapeString(fundingTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFundingTransactionUsingPutValidateBeforeCall(Object fundingTransaction, UUID fundingTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingTransaction' is set
        if (fundingTransaction == null) {
            throw new ApiException("Missing the required parameter 'fundingTransaction' when calling updateFundingTransactionUsingPut(Async)");
        }
        
        // verify the required parameter 'fundingTransactionId' is set
        if (fundingTransactionId == null) {
            throw new ApiException("Missing the required parameter 'fundingTransactionId' when calling updateFundingTransactionUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFundingTransactionUsingPutCall(fundingTransaction, fundingTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a funding transaction request
     * Update the information for a funding transaction request for an account.
     * @param fundingTransaction fundingTransaction (required)
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @return FundingTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FundingTransaction updateFundingTransactionUsingPut(Object fundingTransaction, UUID fundingTransactionId) throws ApiException {
        ApiResponse<FundingTransaction> resp = updateFundingTransactionUsingPutWithHttpInfo(fundingTransaction, fundingTransactionId);
        return resp.getData();
    }

    /**
     * Update a funding transaction request
     * Update the information for a funding transaction request for an account.
     * @param fundingTransaction fundingTransaction (required)
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @return ApiResponse&lt;FundingTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FundingTransaction> updateFundingTransactionUsingPutWithHttpInfo(Object fundingTransaction, UUID fundingTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = updateFundingTransactionUsingPutValidateBeforeCall(fundingTransaction, fundingTransactionId, null, null);
        Type localVarReturnType = new TypeToken<FundingTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a funding transaction request (asynchronously)
     * Update the information for a funding transaction request for an account.
     * @param fundingTransaction fundingTransaction (required)
     * @param fundingTransactionId UUID funding_transaction_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFundingTransactionUsingPutAsync(Object fundingTransaction, UUID fundingTransactionId, final ApiCallback<FundingTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFundingTransactionUsingPutValidateBeforeCall(fundingTransaction, fundingTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FundingTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFundingUsingPut
     * @param funding funding (required)
     * @param fundingId UUID funding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFundingUsingPutCall(Object funding, UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = funding;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding/{funding_id}"
            .replaceAll("\\{" + "funding_id" + "\\}", apiClient.escapeString(fundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFundingUsingPutValidateBeforeCall(Object funding, UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'funding' is set
        if (funding == null) {
            throw new ApiException("Missing the required parameter 'funding' when calling updateFundingUsingPut(Async)");
        }
        
        // verify the required parameter 'fundingId' is set
        if (fundingId == null) {
            throw new ApiException("Missing the required parameter 'fundingId' when calling updateFundingUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFundingUsingPutCall(funding, fundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a funding request
     * Update the information for a funding request for an account.
     * @param funding funding (required)
     * @param fundingId UUID funding_id (required)
     * @return Funding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Funding updateFundingUsingPut(Object funding, UUID fundingId) throws ApiException {
        ApiResponse<Funding> resp = updateFundingUsingPutWithHttpInfo(funding, fundingId);
        return resp.getData();
    }

    /**
     * Update a funding request
     * Update the information for a funding request for an account.
     * @param funding funding (required)
     * @param fundingId UUID funding_id (required)
     * @return ApiResponse&lt;Funding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Funding> updateFundingUsingPutWithHttpInfo(Object funding, UUID fundingId) throws ApiException {
        com.squareup.okhttp.Call call = updateFundingUsingPutValidateBeforeCall(funding, fundingId, null, null);
        Type localVarReturnType = new TypeToken<Funding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a funding request (asynchronously)
     * Update the information for a funding request for an account.
     * @param funding funding (required)
     * @param fundingId UUID funding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFundingUsingPutAsync(Object funding, UUID fundingId, final ApiCallback<Funding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFundingUsingPutValidateBeforeCall(funding, fundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Funding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransferUsingPut
     * @param transfer transfer (required)
     * @param transferId UUID external_account_transfer_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransferUsingPutCall(Object transfer, UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transfer;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer/{transfer_id}"
            .replaceAll("\\{" + "transfer_id" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransferUsingPutValidateBeforeCall(Object transfer, UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transfer' is set
        if (transfer == null) {
            throw new ApiException("Missing the required parameter 'transfer' when calling updateTransferUsingPut(Async)");
        }
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling updateTransferUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTransferUsingPutCall(transfer, transferId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a transfer request
     * Update the information for a external account transfer for a client account. 
     * @param transfer transfer (required)
     * @param transferId UUID external_account_transfer_id (required)
     * @return ExternalAccountTransfer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExternalAccountTransfer updateTransferUsingPut(Object transfer, UUID transferId) throws ApiException {
        ApiResponse<ExternalAccountTransfer> resp = updateTransferUsingPutWithHttpInfo(transfer, transferId);
        return resp.getData();
    }

    /**
     * Update a transfer request
     * Update the information for a external account transfer for a client account. 
     * @param transfer transfer (required)
     * @param transferId UUID external_account_transfer_id (required)
     * @return ApiResponse&lt;ExternalAccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExternalAccountTransfer> updateTransferUsingPutWithHttpInfo(Object transfer, UUID transferId) throws ApiException {
        com.squareup.okhttp.Call call = updateTransferUsingPutValidateBeforeCall(transfer, transferId, null, null);
        Type localVarReturnType = new TypeToken<ExternalAccountTransfer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a transfer request (asynchronously)
     * Update the information for a external account transfer for a client account. 
     * @param transfer transfer (required)
     * @param transferId UUID external_account_transfer_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransferUsingPutAsync(Object transfer, UUID transferId, final ApiCallback<ExternalAccountTransfer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransferUsingPutValidateBeforeCall(transfer, transferId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExternalAccountTransfer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
