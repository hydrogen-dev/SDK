/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// GoalWithdrawalConfig
    /// </summary>
    [DataContract]
    public partial class GoalWithdrawalConfig :  IEquatable<GoalWithdrawalConfig>, IValidatableObject
    {
        /// <summary>
        /// Defines WithFrequency
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WithFrequencyEnum
        {
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 1,
            
            /// <summary>
            /// Enum Sixmonths for value: six_months
            /// </summary>
            [EnumMember(Value = "six_months")]
            Sixmonths = 2,
            
            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 3,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 4,
            
            /// <summary>
            /// Enum Twoweeks for value: two_weeks
            /// </summary>
            [EnumMember(Value = "two_weeks")]
            Twoweeks = 5,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 6,
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 7
        }

        /// <summary>
        /// Gets or Sets WithFrequency
        /// </summary>
        [DataMember(Name="with_frequency", EmitDefaultValue=false)]
        public WithFrequencyEnum? WithFrequency { get; set; }
        /// <summary>
        /// Defines WithEndReference
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WithEndReferenceEnum
        {
            
            /// <summary>
            /// Enum Aend for value: a_end
            /// </summary>
            [EnumMember(Value = "a_end")]
            Aend = 1,
            
            /// <summary>
            /// Enum Dend for value: d_end
            /// </summary>
            [EnumMember(Value = "d_end")]
            Dend = 2
        }

        /// <summary>
        /// Gets or Sets WithEndReference
        /// </summary>
        [DataMember(Name="with_end_reference", EmitDefaultValue=false)]
        public WithEndReferenceEnum? WithEndReference { get; set; }
        /// <summary>
        /// Defines WithStartReference
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WithStartReferenceEnum
        {
            
            /// <summary>
            /// Enum Aend for value: a_end
            /// </summary>
            [EnumMember(Value = "a_end")]
            Aend = 1,
            
            /// <summary>
            /// Enum Dend for value: d_end
            /// </summary>
            [EnumMember(Value = "d_end")]
            Dend = 2
        }

        /// <summary>
        /// Gets or Sets WithStartReference
        /// </summary>
        [DataMember(Name="with_start_reference", EmitDefaultValue=false)]
        public WithStartReferenceEnum? WithStartReference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GoalWithdrawalConfig" /> class.
        /// </summary>
        /// <param name="withInflation">withInflation (default to 0.0F).</param>
        /// <param name="withFrequency">withFrequency (default to WithFrequencyEnum.Year).</param>
        /// <param name="withEndReference">withEndReference (default to WithEndReferenceEnum.Dend).</param>
        /// <param name="withStartReference">withStartReference (default to WithStartReferenceEnum.Aend).</param>
        /// <param name="withEndPeriod">withEndPeriod (default to 0).</param>
        /// <param name="withAmount">withAmount.</param>
        /// <param name="withStartPeriod">withStartPeriod (default to 0).</param>
        public GoalWithdrawalConfig(float? withInflation = 0.0F, WithFrequencyEnum? withFrequency = WithFrequencyEnum.Year, WithEndReferenceEnum? withEndReference = WithEndReferenceEnum.Dend, WithStartReferenceEnum? withStartReference = WithStartReferenceEnum.Aend, int? withEndPeriod = 0, decimal? withAmount = default(decimal?), int? withStartPeriod = 0)
        {
            // use default value if no "withInflation" provided
            if (withInflation == null)
            {
                this.WithInflation = 0.0F;
            }
            else
            {
                this.WithInflation = withInflation;
            }
            // use default value if no "withFrequency" provided
            if (withFrequency == null)
            {
                this.WithFrequency = WithFrequencyEnum.Year;
            }
            else
            {
                this.WithFrequency = withFrequency;
            }
            // use default value if no "withEndReference" provided
            if (withEndReference == null)
            {
                this.WithEndReference = WithEndReferenceEnum.Dend;
            }
            else
            {
                this.WithEndReference = withEndReference;
            }
            // use default value if no "withStartReference" provided
            if (withStartReference == null)
            {
                this.WithStartReference = WithStartReferenceEnum.Aend;
            }
            else
            {
                this.WithStartReference = withStartReference;
            }
            // use default value if no "withEndPeriod" provided
            if (withEndPeriod == null)
            {
                this.WithEndPeriod = 0;
            }
            else
            {
                this.WithEndPeriod = withEndPeriod;
            }
            this.WithAmount = withAmount;
            // use default value if no "withStartPeriod" provided
            if (withStartPeriod == null)
            {
                this.WithStartPeriod = 0;
            }
            else
            {
                this.WithStartPeriod = withStartPeriod;
            }
        }
        
        /// <summary>
        /// Gets or Sets WithInflation
        /// </summary>
        [DataMember(Name="with_inflation", EmitDefaultValue=false)]
        public float? WithInflation { get; set; }




        /// <summary>
        /// Gets or Sets WithEndPeriod
        /// </summary>
        [DataMember(Name="with_end_period", EmitDefaultValue=false)]
        public int? WithEndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets WithAmount
        /// </summary>
        [DataMember(Name="with_amount", EmitDefaultValue=false)]
        public decimal? WithAmount { get; set; }

        /// <summary>
        /// Gets or Sets WithStartPeriod
        /// </summary>
        [DataMember(Name="with_start_period", EmitDefaultValue=false)]
        public int? WithStartPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoalWithdrawalConfig {\n");
            sb.Append("  WithInflation: ").Append(WithInflation).Append("\n");
            sb.Append("  WithFrequency: ").Append(WithFrequency).Append("\n");
            sb.Append("  WithEndReference: ").Append(WithEndReference).Append("\n");
            sb.Append("  WithStartReference: ").Append(WithStartReference).Append("\n");
            sb.Append("  WithEndPeriod: ").Append(WithEndPeriod).Append("\n");
            sb.Append("  WithAmount: ").Append(WithAmount).Append("\n");
            sb.Append("  WithStartPeriod: ").Append(WithStartPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoalWithdrawalConfig);
        }

        /// <summary>
        /// Returns true if GoalWithdrawalConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of GoalWithdrawalConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoalWithdrawalConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WithInflation == input.WithInflation ||
                    (this.WithInflation != null &&
                    this.WithInflation.Equals(input.WithInflation))
                ) && 
                (
                    this.WithFrequency == input.WithFrequency ||
                    (this.WithFrequency != null &&
                    this.WithFrequency.Equals(input.WithFrequency))
                ) && 
                (
                    this.WithEndReference == input.WithEndReference ||
                    (this.WithEndReference != null &&
                    this.WithEndReference.Equals(input.WithEndReference))
                ) && 
                (
                    this.WithStartReference == input.WithStartReference ||
                    (this.WithStartReference != null &&
                    this.WithStartReference.Equals(input.WithStartReference))
                ) && 
                (
                    this.WithEndPeriod == input.WithEndPeriod ||
                    (this.WithEndPeriod != null &&
                    this.WithEndPeriod.Equals(input.WithEndPeriod))
                ) && 
                (
                    this.WithAmount == input.WithAmount ||
                    (this.WithAmount != null &&
                    this.WithAmount.Equals(input.WithAmount))
                ) && 
                (
                    this.WithStartPeriod == input.WithStartPeriod ||
                    (this.WithStartPeriod != null &&
                    this.WithStartPeriod.Equals(input.WithStartPeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WithInflation != null)
                    hashCode = hashCode * 59 + this.WithInflation.GetHashCode();
                if (this.WithFrequency != null)
                    hashCode = hashCode * 59 + this.WithFrequency.GetHashCode();
                if (this.WithEndReference != null)
                    hashCode = hashCode * 59 + this.WithEndReference.GetHashCode();
                if (this.WithStartReference != null)
                    hashCode = hashCode * 59 + this.WithStartReference.GetHashCode();
                if (this.WithEndPeriod != null)
                    hashCode = hashCode * 59 + this.WithEndPeriod.GetHashCode();
                if (this.WithAmount != null)
                    hashCode = hashCode * 59 + this.WithAmount.GetHashCode();
                if (this.WithStartPeriod != null)
                    hashCode = hashCode * 59 + this.WithStartPeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WithInflation (float?) minimum
            if(this.WithInflation < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithInflation, must be a value greater than or equal to -1.", new [] { "WithInflation" });
            }

            // WithAmount (decimal?) minimum
            if(this.WithAmount < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WithAmount, must be a value greater than or equal to 0.", new [] { "WithAmount" });
            }

            yield break;
        }
    }

}
