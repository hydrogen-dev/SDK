/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SecondaryId', 'model/SupportTicketCommentPayload', 'model/SupportTicketCommentPayloadSupportTicketDocument'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SecondaryId'), require('./SupportTicketCommentPayload'), require('./SupportTicketCommentPayloadSupportTicketDocument'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.CreateSupportTicketCommentResponse = factory(root.atom_api.ApiClient, root.atom_api.SecondaryId, root.atom_api.SupportTicketCommentPayload, root.atom_api.SupportTicketCommentPayloadSupportTicketDocument);
  }
}(this, function(ApiClient, SecondaryId, SupportTicketCommentPayload, SupportTicketCommentPayloadSupportTicketDocument) {
  'use strict';




  /**
   * The CreateSupportTicketCommentResponse model module.
   * @module model/CreateSupportTicketCommentResponse
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>CreateSupportTicketCommentResponse</code>.
   * @alias module:model/CreateSupportTicketCommentResponse
   * @class
   * @implements module:model/SupportTicketCommentPayload
   * @param supportTicketId {String} The ID of the support ticket to which the comment belongs
   */
  var exports = function(supportTicketId) {
    var _this = this;

    SupportTicketCommentPayload.call(_this, supportTicketId);


  };

  /**
   * Constructs a <code>CreateSupportTicketCommentResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateSupportTicketCommentResponse} obj Optional instance to populate.
   * @return {module:model/CreateSupportTicketCommentResponse} The populated <code>CreateSupportTicketCommentResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      SupportTicketCommentPayload.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('create_date')) {
        obj['create_date'] = ApiClient.convertToType(data['create_date'], 'String');
      }
    }
    return obj;
  }

  /**
   * The ID of the support ticket comment
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Datetime the support ticket comment was created
   * @member {String} create_date
   */
  exports.prototype['create_date'] = undefined;

  // Implement SupportTicketCommentPayload interface:
  /**
   * The ID of the support ticket to which the comment belongs
   * @member {String} support_ticket_id
   */
exports.prototype['support_ticket_id'] = undefined;

  /**
   * Details and description of the information included in the support ticket comment
   * @member {String} description
   */
exports.prototype['description'] = undefined;

  /**
   * Indicates if the comment has a document attached. Defaults to false which indicates it does not have an attachment
   * @member {Boolean} has_attachment
   * @default false
   */
exports.prototype['has_attachment'] = false;

  /**
   * Indicates if the support ticket comment has been added by an internal administrator (as opposed to a client). Defaults to false which indicates that it has not been added by an administrator
   * @member {Boolean} is_admin
   * @default false
   */
exports.prototype['is_admin'] = false;

  /**
   * Indicates if the support ticket comment has been read by the internal user to whom the support ticket is assigned for resolution. Defaults to false which indicates that it has not been read
   * @member {Boolean} is_read
   * @default false
   */
exports.prototype['is_read'] = false;

  /**
   * @member {Array.<module:model/SupportTicketCommentPayloadSupportTicketDocument>} support_ticket_document
   */
exports.prototype['support_ticket_document'] = undefined;

  /**
   * @member {module:model/SecondaryId} secondary_id
   */
exports.prototype['secondary_id'] = undefined;



  return exports;
}));


