# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WalletKeyCreateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'key_id': 'str',
        'key_server': 'str',
        'address': 'str',
        'private_key': 'str',
        'create_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'key_id': 'key_id',
        'key_server': 'key_server',
        'address': 'address',
        'private_key': 'private_key',
        'create_date': 'create_date'
    }

    def __init__(self, id=None, key_id=None, key_server=None, address=None, private_key=None, create_date=None):  # noqa: E501
        """WalletKeyCreateResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._key_id = None
        self._key_server = None
        self._address = None
        self._private_key = None
        self._create_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key_id is not None:
            self.key_id = key_id
        if key_server is not None:
            self.key_server = key_server
        if address is not None:
            self.address = address
        if private_key is not None:
            self.private_key = private_key
        if create_date is not None:
            self.create_date = create_date

    @property
    def id(self):
        """Gets the id of this WalletKeyCreateResponse.  # noqa: E501

        ID of the wallet key record  # noqa: E501

        :return: The id of this WalletKeyCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WalletKeyCreateResponse.

        ID of the wallet key record  # noqa: E501

        :param id: The id of this WalletKeyCreateResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key_id(self):
        """Gets the key_id of this WalletKeyCreateResponse.  # noqa: E501

        The ID of the associated key within the Key Server  # noqa: E501

        :return: The key_id of this WalletKeyCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this WalletKeyCreateResponse.

        The ID of the associated key within the Key Server  # noqa: E501

        :param key_id: The key_id of this WalletKeyCreateResponse.  # noqa: E501
        :type: str
        """

        self._key_id = key_id

    @property
    def key_server(self):
        """Gets the key_server of this WalletKeyCreateResponse.  # noqa: E501

        Name of the Key Server in use by the client  # noqa: E501

        :return: The key_server of this WalletKeyCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._key_server

    @key_server.setter
    def key_server(self, key_server):
        """Sets the key_server of this WalletKeyCreateResponse.

        Name of the Key Server in use by the client  # noqa: E501

        :param key_server: The key_server of this WalletKeyCreateResponse.  # noqa: E501
        :type: str
        """

        self._key_server = key_server

    @property
    def address(self):
        """Gets the address of this WalletKeyCreateResponse.  # noqa: E501

        Public address of the key pair getting stored  # noqa: E501

        :return: The address of this WalletKeyCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WalletKeyCreateResponse.

        Public address of the key pair getting stored  # noqa: E501

        :param address: The address of this WalletKeyCreateResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def private_key(self):
        """Gets the private_key of this WalletKeyCreateResponse.  # noqa: E501

        Private key of the key pair getting stored  # noqa: E501

        :return: The private_key of this WalletKeyCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this WalletKeyCreateResponse.

        Private key of the key pair getting stored  # noqa: E501

        :param private_key: The private_key of this WalletKeyCreateResponse.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def create_date(self):
        """Gets the create_date of this WalletKeyCreateResponse.  # noqa: E501

        Datetime the wallet key record was created  # noqa: E501

        :return: The create_date of this WalletKeyCreateResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this WalletKeyCreateResponse.

        Datetime the wallet key record was created  # noqa: E501

        :param create_date: The create_date of this WalletKeyCreateResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletKeyCreateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletKeyCreateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
