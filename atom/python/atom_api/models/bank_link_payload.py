# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class BankLinkPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'bank_account_holder': 'str',
        'bank_account_number': 'str',
        'name': 'str',
        'routing': 'str',
        'routing_wire': 'str',
        'bank_account_name': 'str',
        'currency_code': 'str',
        'balance': 'str',
        'available_balance': 'str',
        'type': 'str',
        'is_active': 'bool',
        'is_link_verified': 'bool',
        'link_verified_date': 'date',
        'metadata': 'object',
        'secondary_id': 'SecondaryId'
    }

    attribute_map = {
        'account_id': 'account_id',
        'bank_account_holder': 'bank_account_holder',
        'bank_account_number': 'bank_account_number',
        'name': 'name',
        'routing': 'routing',
        'routing_wire': 'routing_wire',
        'bank_account_name': 'bank_account_name',
        'currency_code': 'currency_code',
        'balance': 'balance',
        'available_balance': 'available_balance',
        'type': 'type',
        'is_active': 'is_active',
        'is_link_verified': 'is_link_verified',
        'link_verified_date': 'link_verified_date',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id'
    }

    def __init__(self, account_id=None, bank_account_holder=None, bank_account_number=None, name=None, routing=None, routing_wire=None, bank_account_name=None, currency_code=None, balance=None, available_balance=None, type=None, is_active=True, is_link_verified=False, link_verified_date=None, metadata=None, secondary_id=None):  # noqa: E501
        """BankLinkPayload - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._bank_account_holder = None
        self._bank_account_number = None
        self._name = None
        self._routing = None
        self._routing_wire = None
        self._bank_account_name = None
        self._currency_code = None
        self._balance = None
        self._available_balance = None
        self._type = None
        self._is_active = None
        self._is_link_verified = None
        self._link_verified_date = None
        self._metadata = None
        self._secondary_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        self.bank_account_holder = bank_account_holder
        self.bank_account_number = bank_account_number
        self.name = name
        self.routing = routing
        if routing_wire is not None:
            self.routing_wire = routing_wire
        if bank_account_name is not None:
            self.bank_account_name = bank_account_name
        if currency_code is not None:
            self.currency_code = currency_code
        if balance is not None:
            self.balance = balance
        if available_balance is not None:
            self.available_balance = available_balance
        if type is not None:
            self.type = type
        if is_active is not None:
            self.is_active = is_active
        if is_link_verified is not None:
            self.is_link_verified = is_link_verified
        if link_verified_date is not None:
            self.link_verified_date = link_verified_date
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id

    @property
    def account_id(self):
        """Gets the account_id of this BankLinkPayload.  # noqa: E501

        The ID for the account to which the bank link belongs  # noqa: E501

        :return: The account_id of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankLinkPayload.

        The ID for the account to which the bank link belongs  # noqa: E501

        :param account_id: The account_id of this BankLinkPayload.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def bank_account_holder(self):
        """Gets the bank_account_holder of this BankLinkPayload.  # noqa: E501

        Name of the individual that owns the bank account  # noqa: E501

        :return: The bank_account_holder of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_holder

    @bank_account_holder.setter
    def bank_account_holder(self, bank_account_holder):
        """Sets the bank_account_holder of this BankLinkPayload.

        Name of the individual that owns the bank account  # noqa: E501

        :param bank_account_holder: The bank_account_holder of this BankLinkPayload.  # noqa: E501
        :type: str
        """
        if bank_account_holder is None:
            raise ValueError("Invalid value for `bank_account_holder`, must not be `None`")  # noqa: E501

        self._bank_account_holder = bank_account_holder

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this BankLinkPayload.  # noqa: E501

        Account number of the bank account  # noqa: E501

        :return: The bank_account_number of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this BankLinkPayload.

        Account number of the bank account  # noqa: E501

        :param bank_account_number: The bank_account_number of this BankLinkPayload.  # noqa: E501
        :type: str
        """
        if bank_account_number is None:
            raise ValueError("Invalid value for `bank_account_number`, must not be `None`")  # noqa: E501

        self._bank_account_number = bank_account_number

    @property
    def name(self):
        """Gets the name of this BankLinkPayload.  # noqa: E501

        Name of the bank for the bank link, e.g. HSBC  # noqa: E501

        :return: The name of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankLinkPayload.

        Name of the bank for the bank link, e.g. HSBC  # noqa: E501

        :param name: The name of this BankLinkPayload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def routing(self):
        """Gets the routing of this BankLinkPayload.  # noqa: E501

        Routing number of the bank for the bank link  # noqa: E501

        :return: The routing of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._routing

    @routing.setter
    def routing(self, routing):
        """Sets the routing of this BankLinkPayload.

        Routing number of the bank for the bank link  # noqa: E501

        :param routing: The routing of this BankLinkPayload.  # noqa: E501
        :type: str
        """
        if routing is None:
            raise ValueError("Invalid value for `routing`, must not be `None`")  # noqa: E501

        self._routing = routing

    @property
    def routing_wire(self):
        """Gets the routing_wire of this BankLinkPayload.  # noqa: E501

        Routing number of the bank for the bank link used for wire transfers  # noqa: E501

        :return: The routing_wire of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._routing_wire

    @routing_wire.setter
    def routing_wire(self, routing_wire):
        """Sets the routing_wire of this BankLinkPayload.

        Routing number of the bank for the bank link used for wire transfers  # noqa: E501

        :param routing_wire: The routing_wire of this BankLinkPayload.  # noqa: E501
        :type: str
        """

        self._routing_wire = routing_wire

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this BankLinkPayload.  # noqa: E501

        Name of the bank account, e.g. Mike’s HSBC Checking  # noqa: E501

        :return: The bank_account_name of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this BankLinkPayload.

        Name of the bank account, e.g. Mike’s HSBC Checking  # noqa: E501

        :param bank_account_name: The bank_account_name of this BankLinkPayload.  # noqa: E501
        :type: str
        """

        self._bank_account_name = bank_account_name

    @property
    def currency_code(self):
        """Gets the currency_code of this BankLinkPayload.  # noqa: E501

        Alphabetic currency code for the base currency of the bank account linked, limited to 3 characters  # noqa: E501

        :return: The currency_code of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BankLinkPayload.

        Alphabetic currency code for the base currency of the bank account linked, limited to 3 characters  # noqa: E501

        :param currency_code: The currency_code of this BankLinkPayload.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def balance(self):
        """Gets the balance of this BankLinkPayload.  # noqa: E501

        Current balance of the bank account  # noqa: E501

        :return: The balance of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BankLinkPayload.

        Current balance of the bank account  # noqa: E501

        :param balance: The balance of this BankLinkPayload.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def available_balance(self):
        """Gets the available_balance of this BankLinkPayload.  # noqa: E501

        Available balance of the bank account, usually taking into consideration pending transactions or available overdraft  # noqa: E501

        :return: The available_balance of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this BankLinkPayload.

        Available balance of the bank account, usually taking into consideration pending transactions or available overdraft  # noqa: E501

        :param available_balance: The available_balance of this BankLinkPayload.  # noqa: E501
        :type: str
        """

        self._available_balance = available_balance

    @property
    def type(self):
        """Gets the type of this BankLinkPayload.  # noqa: E501

        Used to indicate the type of bank account for this bank link such as a ‘savings’ account  # noqa: E501

        :return: The type of this BankLinkPayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankLinkPayload.

        Used to indicate the type of bank account for this bank link such as a ‘savings’ account  # noqa: E501

        :param type: The type of this BankLinkPayload.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def is_active(self):
        """Gets the is_active of this BankLinkPayload.  # noqa: E501

        Indicates if the bank link is active. Defaults to true which indicates it is active  # noqa: E501

        :return: The is_active of this BankLinkPayload.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this BankLinkPayload.

        Indicates if the bank link is active. Defaults to true which indicates it is active  # noqa: E501

        :param is_active: The is_active of this BankLinkPayload.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_link_verified(self):
        """Gets the is_link_verified of this BankLinkPayload.  # noqa: E501

        Indicates if the bank link has been verified. Defaults to false which indicates it has not been verified  # noqa: E501

        :return: The is_link_verified of this BankLinkPayload.  # noqa: E501
        :rtype: bool
        """
        return self._is_link_verified

    @is_link_verified.setter
    def is_link_verified(self, is_link_verified):
        """Sets the is_link_verified of this BankLinkPayload.

        Indicates if the bank link has been verified. Defaults to false which indicates it has not been verified  # noqa: E501

        :param is_link_verified: The is_link_verified of this BankLinkPayload.  # noqa: E501
        :type: bool
        """

        self._is_link_verified = is_link_verified

    @property
    def link_verified_date(self):
        """Gets the link_verified_date of this BankLinkPayload.  # noqa: E501

        Date and time that the bank link was verified  # noqa: E501

        :return: The link_verified_date of this BankLinkPayload.  # noqa: E501
        :rtype: date
        """
        return self._link_verified_date

    @link_verified_date.setter
    def link_verified_date(self, link_verified_date):
        """Sets the link_verified_date of this BankLinkPayload.

        Date and time that the bank link was verified  # noqa: E501

        :param link_verified_date: The link_verified_date of this BankLinkPayload.  # noqa: E501
        :type: date
        """

        self._link_verified_date = link_verified_date

    @property
    def metadata(self):
        """Gets the metadata of this BankLinkPayload.  # noqa: E501

        Custom information associated with the bank link in the format key:value  # noqa: E501

        :return: The metadata of this BankLinkPayload.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BankLinkPayload.

        Custom information associated with the bank link in the format key:value  # noqa: E501

        :param metadata: The metadata of this BankLinkPayload.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this BankLinkPayload.  # noqa: E501


        :return: The secondary_id of this BankLinkPayload.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this BankLinkPayload.


        :param secondary_id: The secondary_id of this BankLinkPayload.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankLinkPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankLinkPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
