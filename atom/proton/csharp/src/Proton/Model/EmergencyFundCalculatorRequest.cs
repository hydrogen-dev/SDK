/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// EmergencyFundCalculatorRequest
    /// </summary>
    [DataContract]
    public partial class EmergencyFundCalculatorRequest :  IEquatable<EmergencyFundCalculatorRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines FrequencyUnit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyUnitEnum
        {
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 1,
            
            /// <summary>
            /// Enum Sixmonths for value: six_months
            /// </summary>
            [EnumMember(Value = "six_months")]
            Sixmonths = 2,
            
            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 3,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 4,
            
            /// <summary>
            /// Enum Twoweeks for value: two_weeks
            /// </summary>
            [EnumMember(Value = "two_weeks")]
            Twoweeks = 5,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 6
        }

        /// <summary>
        /// Gets or Sets FrequencyUnit
        /// </summary>
        [DataMember(Name="frequency_unit", EmitDefaultValue=false)]
        public FrequencyUnitEnum? FrequencyUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmergencyFundCalculatorRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmergencyFundCalculatorRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmergencyFundCalculatorRequest" /> class.
        /// </summary>
        /// <param name="clientId">clientId.</param>
        /// <param name="savingsHorizon">savingsHorizon.</param>
        /// <param name="housingCost">housingCost (default to 0.0F).</param>
        /// <param name="otherExpenses">otherExpenses.</param>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="utilityPayments">utilityPayments (default to 0.0F).</param>
        /// <param name="foodCosts">foodCosts (default to 0.0F).</param>
        /// <param name="debtPayments">debtPayments (default to 0.0F).</param>
        /// <param name="lookbackPeriods">lookbackPeriods (default to 3).</param>
        /// <param name="frequencyUnit">frequencyUnit (default to FrequencyUnitEnum.Month).</param>
        /// <param name="currentEmergencyFundBalance">currentEmergencyFundBalance (default to 0.0F).</param>
        /// <param name="insurancePayments">insurancePayments (default to 0.0F).</param>
        /// <param name="telecomPayments">telecomPayments (default to 0.0F).</param>
        /// <param name="transportationCosts">transportationCosts (default to 0.0F).</param>
        /// <param name="interestRate">interestRate (default to 0.0F).</param>
        /// <param name="emergencyFundDuration">emergencyFundDuration (required).</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        public EmergencyFundCalculatorRequest(Guid? clientId = default(Guid?), List<int?> savingsHorizon = default(List<int?>), float? housingCost = 0.0F, Object otherExpenses = default(Object), List<Guid?> accountIds = default(List<Guid?>), float? utilityPayments = 0.0F, float? foodCosts = 0.0F, float? debtPayments = 0.0F, int? lookbackPeriods = 3, FrequencyUnitEnum? frequencyUnit = FrequencyUnitEnum.Month, float? currentEmergencyFundBalance = 0.0F, float? insurancePayments = 0.0F, float? telecomPayments = 0.0F, float? transportationCosts = 0.0F, float? interestRate = 0.0F, int? emergencyFundDuration = default(int?), List<Guid?> aggregationAccountIds = default(List<Guid?>))
        {
            // to ensure "emergencyFundDuration" is required (not null)
            if (emergencyFundDuration == null)
            {
                throw new InvalidDataException("emergencyFundDuration is a required property for EmergencyFundCalculatorRequest and cannot be null");
            }
            else
            {
                this.EmergencyFundDuration = emergencyFundDuration;
            }
            this.ClientId = clientId;
            this.SavingsHorizon = savingsHorizon;
            // use default value if no "housingCost" provided
            if (housingCost == null)
            {
                this.HousingCost = 0.0F;
            }
            else
            {
                this.HousingCost = housingCost;
            }
            this.OtherExpenses = otherExpenses;
            this.AccountIds = accountIds;
            // use default value if no "utilityPayments" provided
            if (utilityPayments == null)
            {
                this.UtilityPayments = 0.0F;
            }
            else
            {
                this.UtilityPayments = utilityPayments;
            }
            // use default value if no "foodCosts" provided
            if (foodCosts == null)
            {
                this.FoodCosts = 0.0F;
            }
            else
            {
                this.FoodCosts = foodCosts;
            }
            // use default value if no "debtPayments" provided
            if (debtPayments == null)
            {
                this.DebtPayments = 0.0F;
            }
            else
            {
                this.DebtPayments = debtPayments;
            }
            // use default value if no "lookbackPeriods" provided
            if (lookbackPeriods == null)
            {
                this.LookbackPeriods = 3;
            }
            else
            {
                this.LookbackPeriods = lookbackPeriods;
            }
            // use default value if no "frequencyUnit" provided
            if (frequencyUnit == null)
            {
                this.FrequencyUnit = FrequencyUnitEnum.Month;
            }
            else
            {
                this.FrequencyUnit = frequencyUnit;
            }
            // use default value if no "currentEmergencyFundBalance" provided
            if (currentEmergencyFundBalance == null)
            {
                this.CurrentEmergencyFundBalance = 0.0F;
            }
            else
            {
                this.CurrentEmergencyFundBalance = currentEmergencyFundBalance;
            }
            // use default value if no "insurancePayments" provided
            if (insurancePayments == null)
            {
                this.InsurancePayments = 0.0F;
            }
            else
            {
                this.InsurancePayments = insurancePayments;
            }
            // use default value if no "telecomPayments" provided
            if (telecomPayments == null)
            {
                this.TelecomPayments = 0.0F;
            }
            else
            {
                this.TelecomPayments = telecomPayments;
            }
            // use default value if no "transportationCosts" provided
            if (transportationCosts == null)
            {
                this.TransportationCosts = 0.0F;
            }
            else
            {
                this.TransportationCosts = transportationCosts;
            }
            // use default value if no "interestRate" provided
            if (interestRate == null)
            {
                this.InterestRate = 0.0F;
            }
            else
            {
                this.InterestRate = interestRate;
            }
            this.AggregationAccountIds = aggregationAccountIds;
        }
        
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets SavingsHorizon
        /// </summary>
        [DataMember(Name="savings_horizon", EmitDefaultValue=false)]
        public List<int?> SavingsHorizon { get; set; }

        /// <summary>
        /// Gets or Sets HousingCost
        /// </summary>
        [DataMember(Name="housing_cost", EmitDefaultValue=false)]
        public float? HousingCost { get; set; }

        /// <summary>
        /// Gets or Sets OtherExpenses
        /// </summary>
        [DataMember(Name="other_expenses", EmitDefaultValue=false)]
        public Object OtherExpenses { get; set; }

        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }

        /// <summary>
        /// Gets or Sets UtilityPayments
        /// </summary>
        [DataMember(Name="utility_payments", EmitDefaultValue=false)]
        public float? UtilityPayments { get; set; }

        /// <summary>
        /// Gets or Sets FoodCosts
        /// </summary>
        [DataMember(Name="food_costs", EmitDefaultValue=false)]
        public float? FoodCosts { get; set; }

        /// <summary>
        /// Gets or Sets DebtPayments
        /// </summary>
        [DataMember(Name="debt_payments", EmitDefaultValue=false)]
        public float? DebtPayments { get; set; }

        /// <summary>
        /// Gets or Sets LookbackPeriods
        /// </summary>
        [DataMember(Name="lookback_periods", EmitDefaultValue=false)]
        public int? LookbackPeriods { get; set; }


        /// <summary>
        /// Gets or Sets CurrentEmergencyFundBalance
        /// </summary>
        [DataMember(Name="current_emergency_fund_balance", EmitDefaultValue=false)]
        public float? CurrentEmergencyFundBalance { get; set; }

        /// <summary>
        /// Gets or Sets InsurancePayments
        /// </summary>
        [DataMember(Name="insurance_payments", EmitDefaultValue=false)]
        public float? InsurancePayments { get; set; }

        /// <summary>
        /// Gets or Sets TelecomPayments
        /// </summary>
        [DataMember(Name="telecom_payments", EmitDefaultValue=false)]
        public float? TelecomPayments { get; set; }

        /// <summary>
        /// Gets or Sets TransportationCosts
        /// </summary>
        [DataMember(Name="transportation_costs", EmitDefaultValue=false)]
        public float? TransportationCosts { get; set; }

        /// <summary>
        /// Gets or Sets InterestRate
        /// </summary>
        [DataMember(Name="interest_rate", EmitDefaultValue=false)]
        public float? InterestRate { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyFundDuration
        /// </summary>
        [DataMember(Name="emergency_fund_duration", EmitDefaultValue=false)]
        public int? EmergencyFundDuration { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmergencyFundCalculatorRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SavingsHorizon: ").Append(SavingsHorizon).Append("\n");
            sb.Append("  HousingCost: ").Append(HousingCost).Append("\n");
            sb.Append("  OtherExpenses: ").Append(OtherExpenses).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  UtilityPayments: ").Append(UtilityPayments).Append("\n");
            sb.Append("  FoodCosts: ").Append(FoodCosts).Append("\n");
            sb.Append("  DebtPayments: ").Append(DebtPayments).Append("\n");
            sb.Append("  LookbackPeriods: ").Append(LookbackPeriods).Append("\n");
            sb.Append("  FrequencyUnit: ").Append(FrequencyUnit).Append("\n");
            sb.Append("  CurrentEmergencyFundBalance: ").Append(CurrentEmergencyFundBalance).Append("\n");
            sb.Append("  InsurancePayments: ").Append(InsurancePayments).Append("\n");
            sb.Append("  TelecomPayments: ").Append(TelecomPayments).Append("\n");
            sb.Append("  TransportationCosts: ").Append(TransportationCosts).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  EmergencyFundDuration: ").Append(EmergencyFundDuration).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmergencyFundCalculatorRequest);
        }

        /// <summary>
        /// Returns true if EmergencyFundCalculatorRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmergencyFundCalculatorRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmergencyFundCalculatorRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.SavingsHorizon == input.SavingsHorizon ||
                    this.SavingsHorizon != null &&
                    this.SavingsHorizon.SequenceEqual(input.SavingsHorizon)
                ) && 
                (
                    this.HousingCost == input.HousingCost ||
                    (this.HousingCost != null &&
                    this.HousingCost.Equals(input.HousingCost))
                ) && 
                (
                    this.OtherExpenses == input.OtherExpenses ||
                    (this.OtherExpenses != null &&
                    this.OtherExpenses.Equals(input.OtherExpenses))
                ) && 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.UtilityPayments == input.UtilityPayments ||
                    (this.UtilityPayments != null &&
                    this.UtilityPayments.Equals(input.UtilityPayments))
                ) && 
                (
                    this.FoodCosts == input.FoodCosts ||
                    (this.FoodCosts != null &&
                    this.FoodCosts.Equals(input.FoodCosts))
                ) && 
                (
                    this.DebtPayments == input.DebtPayments ||
                    (this.DebtPayments != null &&
                    this.DebtPayments.Equals(input.DebtPayments))
                ) && 
                (
                    this.LookbackPeriods == input.LookbackPeriods ||
                    (this.LookbackPeriods != null &&
                    this.LookbackPeriods.Equals(input.LookbackPeriods))
                ) && 
                (
                    this.FrequencyUnit == input.FrequencyUnit ||
                    (this.FrequencyUnit != null &&
                    this.FrequencyUnit.Equals(input.FrequencyUnit))
                ) && 
                (
                    this.CurrentEmergencyFundBalance == input.CurrentEmergencyFundBalance ||
                    (this.CurrentEmergencyFundBalance != null &&
                    this.CurrentEmergencyFundBalance.Equals(input.CurrentEmergencyFundBalance))
                ) && 
                (
                    this.InsurancePayments == input.InsurancePayments ||
                    (this.InsurancePayments != null &&
                    this.InsurancePayments.Equals(input.InsurancePayments))
                ) && 
                (
                    this.TelecomPayments == input.TelecomPayments ||
                    (this.TelecomPayments != null &&
                    this.TelecomPayments.Equals(input.TelecomPayments))
                ) && 
                (
                    this.TransportationCosts == input.TransportationCosts ||
                    (this.TransportationCosts != null &&
                    this.TransportationCosts.Equals(input.TransportationCosts))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.EmergencyFundDuration == input.EmergencyFundDuration ||
                    (this.EmergencyFundDuration != null &&
                    this.EmergencyFundDuration.Equals(input.EmergencyFundDuration))
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.SavingsHorizon != null)
                    hashCode = hashCode * 59 + this.SavingsHorizon.GetHashCode();
                if (this.HousingCost != null)
                    hashCode = hashCode * 59 + this.HousingCost.GetHashCode();
                if (this.OtherExpenses != null)
                    hashCode = hashCode * 59 + this.OtherExpenses.GetHashCode();
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.UtilityPayments != null)
                    hashCode = hashCode * 59 + this.UtilityPayments.GetHashCode();
                if (this.FoodCosts != null)
                    hashCode = hashCode * 59 + this.FoodCosts.GetHashCode();
                if (this.DebtPayments != null)
                    hashCode = hashCode * 59 + this.DebtPayments.GetHashCode();
                if (this.LookbackPeriods != null)
                    hashCode = hashCode * 59 + this.LookbackPeriods.GetHashCode();
                if (this.FrequencyUnit != null)
                    hashCode = hashCode * 59 + this.FrequencyUnit.GetHashCode();
                if (this.CurrentEmergencyFundBalance != null)
                    hashCode = hashCode * 59 + this.CurrentEmergencyFundBalance.GetHashCode();
                if (this.InsurancePayments != null)
                    hashCode = hashCode * 59 + this.InsurancePayments.GetHashCode();
                if (this.TelecomPayments != null)
                    hashCode = hashCode * 59 + this.TelecomPayments.GetHashCode();
                if (this.TransportationCosts != null)
                    hashCode = hashCode * 59 + this.TransportationCosts.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.EmergencyFundDuration != null)
                    hashCode = hashCode * 59 + this.EmergencyFundDuration.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HousingCost (float?) minimum
            if(this.HousingCost < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HousingCost, must be a value greater than or equal to 0.", new [] { "HousingCost" });
            }

            // UtilityPayments (float?) minimum
            if(this.UtilityPayments < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UtilityPayments, must be a value greater than or equal to 0.", new [] { "UtilityPayments" });
            }

            // FoodCosts (float?) minimum
            if(this.FoodCosts < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FoodCosts, must be a value greater than or equal to 0.", new [] { "FoodCosts" });
            }

            // DebtPayments (float?) minimum
            if(this.DebtPayments < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DebtPayments, must be a value greater than or equal to 0.", new [] { "DebtPayments" });
            }

            // LookbackPeriods (int?) minimum
            if(this.LookbackPeriods < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LookbackPeriods, must be a value greater than or equal to 1.", new [] { "LookbackPeriods" });
            }

            // CurrentEmergencyFundBalance (float?) minimum
            if(this.CurrentEmergencyFundBalance < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentEmergencyFundBalance, must be a value greater than or equal to 0.", new [] { "CurrentEmergencyFundBalance" });
            }

            // InsurancePayments (float?) minimum
            if(this.InsurancePayments < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InsurancePayments, must be a value greater than or equal to 0.", new [] { "InsurancePayments" });
            }

            // TelecomPayments (float?) minimum
            if(this.TelecomPayments < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TelecomPayments, must be a value greater than or equal to 0.", new [] { "TelecomPayments" });
            }

            // TransportationCosts (float?) minimum
            if(this.TransportationCosts < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransportationCosts, must be a value greater than or equal to 0.", new [] { "TransportationCosts" });
            }

            // InterestRate (float?) minimum
            if(this.InterestRate < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InterestRate, must be a value greater than or equal to 0.", new [] { "InterestRate" });
            }

            // EmergencyFundDuration (int?) minimum
            if(this.EmergencyFundDuration < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmergencyFundDuration, must be a value greater than or equal to 1.", new [] { "EmergencyFundDuration" });
            }

            yield break;
        }
    }

}
