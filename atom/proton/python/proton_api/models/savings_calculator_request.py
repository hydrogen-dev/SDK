# coding: utf-8

"""
    Hydrogen Proton API

    Financial engineering module of Hydrogen Atom  # noqa: E501

    OpenAPI spec version: 1.9.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from proton_api.configuration import Configuration


class SavingsCalculatorRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inflation_rate': 'float',
        'account_ids': 'list[str]',
        'tax_rate': 'float',
        'horizon_frequency_interval': 'str',
        'deposit_schedule': 'list[SavingsDepositSchedule]',
        'horizon': 'int',
        'return_schedule': 'list[float]',
        'create_log': 'bool',
        'initial_balance': 'float',
        'aggregation_account_ids': 'list[str]'
    }

    attribute_map = {
        'inflation_rate': 'inflation_rate',
        'account_ids': 'account_ids',
        'tax_rate': 'tax_rate',
        'horizon_frequency_interval': 'horizon_frequency_interval',
        'deposit_schedule': 'deposit_schedule',
        'horizon': 'horizon',
        'return_schedule': 'return_schedule',
        'create_log': 'create_log',
        'initial_balance': 'initial_balance',
        'aggregation_account_ids': 'aggregation_account_ids'
    }

    def __init__(self, inflation_rate=0.0, account_ids=None, tax_rate=0.0, horizon_frequency_interval='year', deposit_schedule=None, horizon=None, return_schedule=None, create_log=False, initial_balance=None, aggregation_account_ids=None, _configuration=None):  # noqa: E501
        """SavingsCalculatorRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._inflation_rate = None
        self._account_ids = None
        self._tax_rate = None
        self._horizon_frequency_interval = None
        self._deposit_schedule = None
        self._horizon = None
        self._return_schedule = None
        self._create_log = None
        self._initial_balance = None
        self._aggregation_account_ids = None
        self.discriminator = None

        if inflation_rate is not None:
            self.inflation_rate = inflation_rate
        if account_ids is not None:
            self.account_ids = account_ids
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if horizon_frequency_interval is not None:
            self.horizon_frequency_interval = horizon_frequency_interval
        if deposit_schedule is not None:
            self.deposit_schedule = deposit_schedule
        self.horizon = horizon
        self.return_schedule = return_schedule
        if create_log is not None:
            self.create_log = create_log
        if initial_balance is not None:
            self.initial_balance = initial_balance
        if aggregation_account_ids is not None:
            self.aggregation_account_ids = aggregation_account_ids

    @property
    def inflation_rate(self):
        """Gets the inflation_rate of this SavingsCalculatorRequest.  # noqa: E501


        :return: The inflation_rate of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: float
        """
        return self._inflation_rate

    @inflation_rate.setter
    def inflation_rate(self, inflation_rate):
        """Sets the inflation_rate of this SavingsCalculatorRequest.


        :param inflation_rate: The inflation_rate of this SavingsCalculatorRequest.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                inflation_rate is not None and inflation_rate < -1):  # noqa: E501
            raise ValueError("Invalid value for `inflation_rate`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._inflation_rate = inflation_rate

    @property
    def account_ids(self):
        """Gets the account_ids of this SavingsCalculatorRequest.  # noqa: E501


        :return: The account_ids of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this SavingsCalculatorRequest.


        :param account_ids: The account_ids of this SavingsCalculatorRequest.  # noqa: E501
        :type: list[str]
        """

        self._account_ids = account_ids

    @property
    def tax_rate(self):
        """Gets the tax_rate of this SavingsCalculatorRequest.  # noqa: E501


        :return: The tax_rate of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this SavingsCalculatorRequest.


        :param tax_rate: The tax_rate of this SavingsCalculatorRequest.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                tax_rate is not None and tax_rate > 1):  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must be a value less than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tax_rate is not None and tax_rate < 0):  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tax_rate = tax_rate

    @property
    def horizon_frequency_interval(self):
        """Gets the horizon_frequency_interval of this SavingsCalculatorRequest.  # noqa: E501


        :return: The horizon_frequency_interval of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: str
        """
        return self._horizon_frequency_interval

    @horizon_frequency_interval.setter
    def horizon_frequency_interval(self, horizon_frequency_interval):
        """Sets the horizon_frequency_interval of this SavingsCalculatorRequest.


        :param horizon_frequency_interval: The horizon_frequency_interval of this SavingsCalculatorRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["year", "quarter", "month", "week", "day"]  # noqa: E501
        if (self._configuration.client_side_validation and
                horizon_frequency_interval not in allowed_values):
            raise ValueError(
                "Invalid value for `horizon_frequency_interval` ({0}), must be one of {1}"  # noqa: E501
                .format(horizon_frequency_interval, allowed_values)
            )

        self._horizon_frequency_interval = horizon_frequency_interval

    @property
    def deposit_schedule(self):
        """Gets the deposit_schedule of this SavingsCalculatorRequest.  # noqa: E501


        :return: The deposit_schedule of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: list[SavingsDepositSchedule]
        """
        return self._deposit_schedule

    @deposit_schedule.setter
    def deposit_schedule(self, deposit_schedule):
        """Sets the deposit_schedule of this SavingsCalculatorRequest.


        :param deposit_schedule: The deposit_schedule of this SavingsCalculatorRequest.  # noqa: E501
        :type: list[SavingsDepositSchedule]
        """

        self._deposit_schedule = deposit_schedule

    @property
    def horizon(self):
        """Gets the horizon of this SavingsCalculatorRequest.  # noqa: E501


        :return: The horizon of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: int
        """
        return self._horizon

    @horizon.setter
    def horizon(self, horizon):
        """Sets the horizon of this SavingsCalculatorRequest.


        :param horizon: The horizon of this SavingsCalculatorRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and horizon is None:
            raise ValueError("Invalid value for `horizon`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                horizon is not None and horizon < 0):  # noqa: E501
            raise ValueError("Invalid value for `horizon`, must be a value greater than or equal to `0`")  # noqa: E501

        self._horizon = horizon

    @property
    def return_schedule(self):
        """Gets the return_schedule of this SavingsCalculatorRequest.  # noqa: E501


        :return: The return_schedule of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._return_schedule

    @return_schedule.setter
    def return_schedule(self, return_schedule):
        """Sets the return_schedule of this SavingsCalculatorRequest.


        :param return_schedule: The return_schedule of this SavingsCalculatorRequest.  # noqa: E501
        :type: list[float]
        """
        if self._configuration.client_side_validation and return_schedule is None:
            raise ValueError("Invalid value for `return_schedule`, must not be `None`")  # noqa: E501

        self._return_schedule = return_schedule

    @property
    def create_log(self):
        """Gets the create_log of this SavingsCalculatorRequest.  # noqa: E501


        :return: The create_log of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_log

    @create_log.setter
    def create_log(self, create_log):
        """Sets the create_log of this SavingsCalculatorRequest.


        :param create_log: The create_log of this SavingsCalculatorRequest.  # noqa: E501
        :type: bool
        """

        self._create_log = create_log

    @property
    def initial_balance(self):
        """Gets the initial_balance of this SavingsCalculatorRequest.  # noqa: E501


        :return: The initial_balance of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: float
        """
        return self._initial_balance

    @initial_balance.setter
    def initial_balance(self, initial_balance):
        """Sets the initial_balance of this SavingsCalculatorRequest.


        :param initial_balance: The initial_balance of this SavingsCalculatorRequest.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                initial_balance is not None and initial_balance < 0):  # noqa: E501
            raise ValueError("Invalid value for `initial_balance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._initial_balance = initial_balance

    @property
    def aggregation_account_ids(self):
        """Gets the aggregation_account_ids of this SavingsCalculatorRequest.  # noqa: E501


        :return: The aggregation_account_ids of this SavingsCalculatorRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._aggregation_account_ids

    @aggregation_account_ids.setter
    def aggregation_account_ids(self, aggregation_account_ids):
        """Sets the aggregation_account_ids of this SavingsCalculatorRequest.


        :param aggregation_account_ids: The aggregation_account_ids of this SavingsCalculatorRequest.  # noqa: E501
        :type: list[str]
        """

        self._aggregation_account_ids = aggregation_account_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SavingsCalculatorRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavingsCalculatorRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SavingsCalculatorRequest):
            return True

        return self.to_dict() != other.to_dict()
