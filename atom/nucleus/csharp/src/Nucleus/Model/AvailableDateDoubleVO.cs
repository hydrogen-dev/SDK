/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Available Date-Double Mapping Object
    /// </summary>
    [DataContract]
    public partial class AvailableDateDoubleVO :  IEquatable<AvailableDateDoubleVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableDateDoubleVO" /> class.
        /// </summary>
        /// <param name="additions">additions.</param>
        /// <param name="cashFlow">cashFlow.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="date">date.</param>
        /// <param name="value">value.</param>
        /// <param name="valueAvailable">valueAvailable.</param>
        /// <param name="valuePending">valuePending.</param>
        public AvailableDateDoubleVO(double? additions = default(double?), double? cashFlow = default(double?), string currencyCode = default(string), string date = default(string), double? value = default(double?), double? valueAvailable = default(double?), double? valuePending = default(double?))
        {
            this.Additions = additions;
            this.CashFlow = cashFlow;
            this.CurrencyCode = currencyCode;
            this.Date = date;
            this.Value = value;
            this.ValueAvailable = valueAvailable;
            this.ValuePending = valuePending;
        }
        
        /// <summary>
        /// additions
        /// </summary>
        /// <value>additions</value>
        [DataMember(Name="additions", EmitDefaultValue=false)]
        public double? Additions { get; set; }

        /// <summary>
        /// cashFlow
        /// </summary>
        /// <value>cashFlow</value>
        [DataMember(Name="cash_flow", EmitDefaultValue=false)]
        public double? CashFlow { get; set; }

        /// <summary>
        /// currencyCode
        /// </summary>
        /// <value>currencyCode</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// date
        /// </summary>
        /// <value>date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// value
        /// </summary>
        /// <value>value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// valueAvailable
        /// </summary>
        /// <value>valueAvailable</value>
        [DataMember(Name="value_available", EmitDefaultValue=false)]
        public double? ValueAvailable { get; set; }

        /// <summary>
        /// valuePending
        /// </summary>
        /// <value>valuePending</value>
        [DataMember(Name="value_pending", EmitDefaultValue=false)]
        public double? ValuePending { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableDateDoubleVO {\n");
            sb.Append("  Additions: ").Append(Additions).Append("\n");
            sb.Append("  CashFlow: ").Append(CashFlow).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueAvailable: ").Append(ValueAvailable).Append("\n");
            sb.Append("  ValuePending: ").Append(ValuePending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailableDateDoubleVO);
        }

        /// <summary>
        /// Returns true if AvailableDateDoubleVO instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableDateDoubleVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableDateDoubleVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Additions == input.Additions ||
                    (this.Additions != null &&
                    this.Additions.Equals(input.Additions))
                ) && 
                (
                    this.CashFlow == input.CashFlow ||
                    (this.CashFlow != null &&
                    this.CashFlow.Equals(input.CashFlow))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ValueAvailable == input.ValueAvailable ||
                    (this.ValueAvailable != null &&
                    this.ValueAvailable.Equals(input.ValueAvailable))
                ) && 
                (
                    this.ValuePending == input.ValuePending ||
                    (this.ValuePending != null &&
                    this.ValuePending.Equals(input.ValuePending))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Additions != null)
                    hashCode = hashCode * 59 + this.Additions.GetHashCode();
                if (this.CashFlow != null)
                    hashCode = hashCode * 59 + this.CashFlow.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueAvailable != null)
                    hashCode = hashCode * 59 + this.ValueAvailable.GetHashCode();
                if (this.ValuePending != null)
                    hashCode = hashCode * 59 + this.ValuePending.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
