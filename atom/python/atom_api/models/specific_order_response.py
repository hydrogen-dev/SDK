# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.create_order_response import CreateOrderResponse  # noqa: F401,E501


class SpecificOrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_date': 'str',
        'transaction_code_id': 'str',
        'quantity': 'float',
        'security_id': 'str',
        '_date': 'date',
        'price': 'float',
        'order_bulk_id': 'str',
        'is_read': 'bool',
        'order_type': 'str',
        'order_ticket_id': 'str',
        'portfolio_id': 'str',
        'account_id': 'str',
        'model_id': 'str',
        'metadata': 'object',
        'update_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'create_date',
        'transaction_code_id': 'transaction_code_id',
        'quantity': 'quantity',
        'security_id': 'security_id',
        '_date': 'date',
        'price': 'price',
        'order_bulk_id': 'order_bulk_id',
        'is_read': 'is_read',
        'order_type': 'order_type',
        'order_ticket_id': 'order_ticket_id',
        'portfolio_id': 'portfolio_id',
        'account_id': 'account_id',
        'model_id': 'model_id',
        'metadata': 'metadata',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, create_date=None, transaction_code_id=None, quantity=None, security_id=None, _date=None, price=None, order_bulk_id=None, is_read=False, order_type=None, order_ticket_id=None, portfolio_id=None, account_id=None, model_id=None, metadata=None, update_date=None):  # noqa: E501
        """SpecificOrderResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._transaction_code_id = None
        self._quantity = None
        self._security_id = None
        self.__date = None
        self._price = None
        self._order_bulk_id = None
        self._is_read = None
        self._order_type = None
        self._order_ticket_id = None
        self._portfolio_id = None
        self._account_id = None
        self._model_id = None
        self._metadata = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        self.transaction_code_id = transaction_code_id
        self.quantity = quantity
        self.security_id = security_id
        self._date = _date
        if price is not None:
            self.price = price
        if order_bulk_id is not None:
            self.order_bulk_id = order_bulk_id
        if is_read is not None:
            self.is_read = is_read
        if order_type is not None:
            self.order_type = order_type
        if order_ticket_id is not None:
            self.order_ticket_id = order_ticket_id
        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        if account_id is not None:
            self.account_id = account_id
        if model_id is not None:
            self.model_id = model_id
        if metadata is not None:
            self.metadata = metadata
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this SpecificOrderResponse.  # noqa: E501

        ID of the order record  # noqa: E501

        :return: The id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpecificOrderResponse.

        ID of the order record  # noqa: E501

        :param id: The id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this SpecificOrderResponse.  # noqa: E501

        Datetime the order record was created  # noqa: E501

        :return: The create_date of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this SpecificOrderResponse.

        Datetime the order record was created  # noqa: E501

        :param create_date: The create_date of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def transaction_code_id(self):
        """Gets the transaction_code_id of this SpecificOrderResponse.  # noqa: E501

        The ID referring to the transaction codes defined by your firm  # noqa: E501

        :return: The transaction_code_id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code_id

    @transaction_code_id.setter
    def transaction_code_id(self, transaction_code_id):
        """Sets the transaction_code_id of this SpecificOrderResponse.

        The ID referring to the transaction codes defined by your firm  # noqa: E501

        :param transaction_code_id: The transaction_code_id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """
        if transaction_code_id is None:
            raise ValueError("Invalid value for `transaction_code_id`, must not be `None`")  # noqa: E501

        self._transaction_code_id = transaction_code_id

    @property
    def quantity(self):
        """Gets the quantity of this SpecificOrderResponse.  # noqa: E501

        The number of shares of security being bought or sold  # noqa: E501

        :return: The quantity of this SpecificOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SpecificOrderResponse.

        The number of shares of security being bought or sold  # noqa: E501

        :param quantity: The quantity of this SpecificOrderResponse.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def security_id(self):
        """Gets the security_id of this SpecificOrderResponse.  # noqa: E501

        The ID of the security being bought or sold  # noqa: E501

        :return: The security_id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this SpecificOrderResponse.

        The ID of the security being bought or sold  # noqa: E501

        :param security_id: The security_id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """
        if security_id is None:
            raise ValueError("Invalid value for `security_id`, must not be `None`")  # noqa: E501

        self._security_id = security_id

    @property
    def _date(self):
        """Gets the _date of this SpecificOrderResponse.  # noqa: E501

        Date for when the order was generated  # noqa: E501

        :return: The _date of this SpecificOrderResponse.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SpecificOrderResponse.

        Date for when the order was generated  # noqa: E501

        :param _date: The _date of this SpecificOrderResponse.  # noqa: E501
        :type: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def price(self):
        """Gets the price of this SpecificOrderResponse.  # noqa: E501

        Price of the security at the time the order is created. Should be provided to use the rebalancing functionality  # noqa: E501

        :return: The price of this SpecificOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SpecificOrderResponse.

        Price of the security at the time the order is created. Should be provided to use the rebalancing functionality  # noqa: E501

        :param price: The price of this SpecificOrderResponse.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def order_bulk_id(self):
        """Gets the order_bulk_id of this SpecificOrderResponse.  # noqa: E501

        In the case that the order is part of a bulk order, the ID of the bulk order  # noqa: E501

        :return: The order_bulk_id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_bulk_id

    @order_bulk_id.setter
    def order_bulk_id(self, order_bulk_id):
        """Sets the order_bulk_id of this SpecificOrderResponse.

        In the case that the order is part of a bulk order, the ID of the bulk order  # noqa: E501

        :param order_bulk_id: The order_bulk_id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_bulk_id = order_bulk_id

    @property
    def is_read(self):
        """Gets the is_read of this SpecificOrderResponse.  # noqa: E501

        Indicator for whether or not the order record has been read. Defaults to false which indicates that it has not been read  # noqa: E501

        :return: The is_read of this SpecificOrderResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this SpecificOrderResponse.

        Indicator for whether or not the order record has been read. Defaults to false which indicates that it has not been read  # noqa: E501

        :param is_read: The is_read of this SpecificOrderResponse.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def order_type(self):
        """Gets the order_type of this SpecificOrderResponse.  # noqa: E501

        Type of the order transaction  # noqa: E501

        :return: The order_type of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this SpecificOrderResponse.

        Type of the order transaction  # noqa: E501

        :param order_type: The order_type of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_type = order_type

    @property
    def order_ticket_id(self):
        """Gets the order_ticket_id of this SpecificOrderResponse.  # noqa: E501

        The ID that reflects all orders generated during a rebalance  # noqa: E501

        :return: The order_ticket_id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_ticket_id

    @order_ticket_id.setter
    def order_ticket_id(self, order_ticket_id):
        """Sets the order_ticket_id of this SpecificOrderResponse.

        The ID that reflects all orders generated during a rebalance  # noqa: E501

        :param order_ticket_id: The order_ticket_id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_ticket_id = order_ticket_id

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this SpecificOrderResponse.  # noqa: E501

        The ID of the portfolio that the order falls under. Used when aggregating order records into Bulk Order  # noqa: E501

        :return: The portfolio_id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this SpecificOrderResponse.

        The ID of the portfolio that the order falls under. Used when aggregating order records into Bulk Order  # noqa: E501

        :param portfolio_id: The portfolio_id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._portfolio_id = portfolio_id

    @property
    def account_id(self):
        """Gets the account_id of this SpecificOrderResponse.  # noqa: E501

        The ID of the account that the order falls under. Used when aggregating order records into Bulk Order  # noqa: E501

        :return: The account_id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SpecificOrderResponse.

        The ID of the account that the order falls under. Used when aggregating order records into Bulk Order  # noqa: E501

        :param account_id: The account_id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def model_id(self):
        """Gets the model_id of this SpecificOrderResponse.  # noqa: E501

        The ID of the model with which the order is associated. Used when aggregating order records into Bulk Order  # noqa: E501

        :return: The model_id of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this SpecificOrderResponse.

        The ID of the model with which the order is associated. Used when aggregating order records into Bulk Order  # noqa: E501

        :param model_id: The model_id of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def metadata(self):
        """Gets the metadata of this SpecificOrderResponse.  # noqa: E501

        Custom information associated with the order record in the format key:value  # noqa: E501

        :return: The metadata of this SpecificOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SpecificOrderResponse.

        Custom information associated with the order record in the format key:value  # noqa: E501

        :param metadata: The metadata of this SpecificOrderResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def update_date(self):
        """Gets the update_date of this SpecificOrderResponse.  # noqa: E501

        Datetime the order record was last updated  # noqa: E501

        :return: The update_date of this SpecificOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this SpecificOrderResponse.

        Datetime the order record was last updated  # noqa: E501

        :param update_date: The update_date of this SpecificOrderResponse.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecificOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecificOrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
