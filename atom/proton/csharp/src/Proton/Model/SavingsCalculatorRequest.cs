/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// SavingsCalculatorRequest
    /// </summary>
    [DataContract]
    public partial class SavingsCalculatorRequest :  IEquatable<SavingsCalculatorRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines HorizonFrequencyInterval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HorizonFrequencyIntervalEnum
        {
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 1,
            
            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 4,
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 5
        }

        /// <summary>
        /// Gets or Sets HorizonFrequencyInterval
        /// </summary>
        [DataMember(Name="horizon_frequency_interval", EmitDefaultValue=false)]
        public HorizonFrequencyIntervalEnum? HorizonFrequencyInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SavingsCalculatorRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SavingsCalculatorRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SavingsCalculatorRequest" /> class.
        /// </summary>
        /// <param name="inflationRate">inflationRate (default to 0.0F).</param>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="taxRate">taxRate (default to 0.0F).</param>
        /// <param name="horizonFrequencyInterval">horizonFrequencyInterval (default to HorizonFrequencyIntervalEnum.Year).</param>
        /// <param name="depositSchedule">depositSchedule.</param>
        /// <param name="horizon">horizon (required).</param>
        /// <param name="returnSchedule">returnSchedule (required).</param>
        /// <param name="createLog">createLog (default to false).</param>
        /// <param name="initialBalance">initialBalance.</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        public SavingsCalculatorRequest(float? inflationRate = 0.0F, List<Guid?> accountIds = default(List<Guid?>), float? taxRate = 0.0F, HorizonFrequencyIntervalEnum? horizonFrequencyInterval = HorizonFrequencyIntervalEnum.Year, List<SavingsDepositSchedule> depositSchedule = default(List<SavingsDepositSchedule>), int? horizon = default(int?), List<float?> returnSchedule = default(List<float?>), bool? createLog = false, decimal? initialBalance = default(decimal?), List<Guid?> aggregationAccountIds = default(List<Guid?>))
        {
            // to ensure "horizon" is required (not null)
            if (horizon == null)
            {
                throw new InvalidDataException("horizon is a required property for SavingsCalculatorRequest and cannot be null");
            }
            else
            {
                this.Horizon = horizon;
            }
            // to ensure "returnSchedule" is required (not null)
            if (returnSchedule == null)
            {
                throw new InvalidDataException("returnSchedule is a required property for SavingsCalculatorRequest and cannot be null");
            }
            else
            {
                this.ReturnSchedule = returnSchedule;
            }
            // use default value if no "inflationRate" provided
            if (inflationRate == null)
            {
                this.InflationRate = 0.0F;
            }
            else
            {
                this.InflationRate = inflationRate;
            }
            this.AccountIds = accountIds;
            // use default value if no "taxRate" provided
            if (taxRate == null)
            {
                this.TaxRate = 0.0F;
            }
            else
            {
                this.TaxRate = taxRate;
            }
            // use default value if no "horizonFrequencyInterval" provided
            if (horizonFrequencyInterval == null)
            {
                this.HorizonFrequencyInterval = HorizonFrequencyIntervalEnum.Year;
            }
            else
            {
                this.HorizonFrequencyInterval = horizonFrequencyInterval;
            }
            this.DepositSchedule = depositSchedule;
            // use default value if no "createLog" provided
            if (createLog == null)
            {
                this.CreateLog = false;
            }
            else
            {
                this.CreateLog = createLog;
            }
            this.InitialBalance = initialBalance;
            this.AggregationAccountIds = aggregationAccountIds;
        }
        
        /// <summary>
        /// Gets or Sets InflationRate
        /// </summary>
        [DataMember(Name="inflation_rate", EmitDefaultValue=false)]
        public float? InflationRate { get; set; }

        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public float? TaxRate { get; set; }


        /// <summary>
        /// Gets or Sets DepositSchedule
        /// </summary>
        [DataMember(Name="deposit_schedule", EmitDefaultValue=false)]
        public List<SavingsDepositSchedule> DepositSchedule { get; set; }

        /// <summary>
        /// Gets or Sets Horizon
        /// </summary>
        [DataMember(Name="horizon", EmitDefaultValue=false)]
        public int? Horizon { get; set; }

        /// <summary>
        /// Gets or Sets ReturnSchedule
        /// </summary>
        [DataMember(Name="return_schedule", EmitDefaultValue=false)]
        public List<float?> ReturnSchedule { get; set; }

        /// <summary>
        /// Gets or Sets CreateLog
        /// </summary>
        [DataMember(Name="create_log", EmitDefaultValue=false)]
        public bool? CreateLog { get; set; }

        /// <summary>
        /// Gets or Sets InitialBalance
        /// </summary>
        [DataMember(Name="initial_balance", EmitDefaultValue=false)]
        public decimal? InitialBalance { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SavingsCalculatorRequest {\n");
            sb.Append("  InflationRate: ").Append(InflationRate).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  HorizonFrequencyInterval: ").Append(HorizonFrequencyInterval).Append("\n");
            sb.Append("  DepositSchedule: ").Append(DepositSchedule).Append("\n");
            sb.Append("  Horizon: ").Append(Horizon).Append("\n");
            sb.Append("  ReturnSchedule: ").Append(ReturnSchedule).Append("\n");
            sb.Append("  CreateLog: ").Append(CreateLog).Append("\n");
            sb.Append("  InitialBalance: ").Append(InitialBalance).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SavingsCalculatorRequest);
        }

        /// <summary>
        /// Returns true if SavingsCalculatorRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SavingsCalculatorRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavingsCalculatorRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InflationRate == input.InflationRate ||
                    (this.InflationRate != null &&
                    this.InflationRate.Equals(input.InflationRate))
                ) && 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.HorizonFrequencyInterval == input.HorizonFrequencyInterval ||
                    (this.HorizonFrequencyInterval != null &&
                    this.HorizonFrequencyInterval.Equals(input.HorizonFrequencyInterval))
                ) && 
                (
                    this.DepositSchedule == input.DepositSchedule ||
                    this.DepositSchedule != null &&
                    this.DepositSchedule.SequenceEqual(input.DepositSchedule)
                ) && 
                (
                    this.Horizon == input.Horizon ||
                    (this.Horizon != null &&
                    this.Horizon.Equals(input.Horizon))
                ) && 
                (
                    this.ReturnSchedule == input.ReturnSchedule ||
                    this.ReturnSchedule != null &&
                    this.ReturnSchedule.SequenceEqual(input.ReturnSchedule)
                ) && 
                (
                    this.CreateLog == input.CreateLog ||
                    (this.CreateLog != null &&
                    this.CreateLog.Equals(input.CreateLog))
                ) && 
                (
                    this.InitialBalance == input.InitialBalance ||
                    (this.InitialBalance != null &&
                    this.InitialBalance.Equals(input.InitialBalance))
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InflationRate != null)
                    hashCode = hashCode * 59 + this.InflationRate.GetHashCode();
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.HorizonFrequencyInterval != null)
                    hashCode = hashCode * 59 + this.HorizonFrequencyInterval.GetHashCode();
                if (this.DepositSchedule != null)
                    hashCode = hashCode * 59 + this.DepositSchedule.GetHashCode();
                if (this.Horizon != null)
                    hashCode = hashCode * 59 + this.Horizon.GetHashCode();
                if (this.ReturnSchedule != null)
                    hashCode = hashCode * 59 + this.ReturnSchedule.GetHashCode();
                if (this.CreateLog != null)
                    hashCode = hashCode * 59 + this.CreateLog.GetHashCode();
                if (this.InitialBalance != null)
                    hashCode = hashCode * 59 + this.InitialBalance.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InflationRate (float?) minimum
            if(this.InflationRate < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InflationRate, must be a value greater than or equal to -1.", new [] { "InflationRate" });
            }

            // TaxRate (float?) maximum
            if(this.TaxRate > (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRate, must be a value less than or equal to 1.", new [] { "TaxRate" });
            }

            // TaxRate (float?) minimum
            if(this.TaxRate < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRate, must be a value greater than or equal to 0.", new [] { "TaxRate" });
            }

            // Horizon (int?) minimum
            if(this.Horizon < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Horizon, must be a value greater than or equal to 0.", new [] { "Horizon" });
            }

            // InitialBalance (decimal?) minimum
            if(this.InitialBalance < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InitialBalance, must be a value greater than or equal to 0.", new [] { "InitialBalance" });
            }

            yield break;
        }
    }

}
