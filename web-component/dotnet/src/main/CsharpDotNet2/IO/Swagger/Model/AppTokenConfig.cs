/* 
 * Hydrogen Admin API
 *
 * The Hydrogen Admin API
 *
 * OpenAPI spec version: 1.4.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{

    /// <summary>
    /// AppTokenConfig
    /// </summary>
    [DataContract]
    public partial class AppTokenConfig
    {
        ///<Summary>
        /// clientId
        ///</Summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string clientId { get; set; }

        ///<Summary>
        /// clientSecret
        ///</Summary>
        [DataMember(Name="client_secret", EmitDefaultValue=false)]
        public string clientSecret { get; set; }

        ///<Summary>
        /// username
        ///</Summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string username { get; set; }

        ///<Summary>
        /// password
        ///</Summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string password { get; set; }

        ///<Summary>
        /// publicKey
        ///</Summary>
        [DataMember(Name="public_key", EmitDefaultValue=false)]
        public string publicKey { get; set; }

        ///<Summary>
        /// userAccessToken
        ///</Summary>
        [DataMember(Name="user_access_token", EmitDefaultValue=false)]
        public string userAccessToken { get; set; }

        ///<Summary>
        /// basePath
        ///</Summary>
        [DataMember(Name="base_path", EmitDefaultValue=false)]
        public string basePath { get; set; }

        ///<Summary>
        /// isCredsPassed
        ///</Summary>
        [DataMember(Name="is_creds_passed", EmitDefaultValue=false)]
        public bool isCredsPassed { get; set; }

        ///<Summary>
        /// isEmbed
        ///</Summary>
        [DataMember(Name="is_embed", EmitDefaultValue=false)]
        public bool isEmbed { get; set; }

        ///<Summary>
        /// appNames
        ///</Summary>
        [DataMember(Name="app_names", EmitDefaultValue=false)]
        public List<AppConfig> appNames { get; set; }

        ///<Summary>
        /// attributes
        ///</Summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<TagAttributes> attributes { get; set; }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="AppTokenConfig" /> class.
        /// </summary>
        /// <param name="clientId">clientId.</param>
        /// <param name="clientSecret">clientSecret.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="publicKey">publicKey.</param>
        /// <param name="userAccessToken">userAccessToken.</param>
        /// <param name="basePath">basePath.</param>
        /// <param name="isCredsPassed">isCredsPassed.</param>
        /// <param name="isEmbed">isEmbed.</param>
        /// <param name="appNames">appNames.</param>
        /// <param name="attributes">attributes.</param>
        public AppTokenConfig(string clientId = default(string), string clientSecret = default(string)
        , string username = default(string), string password = default(string), string publicKey = default(string)
        , string userAccessToken = default(string), string basePath = default(string), bool? isCredsPassed = default(bool?)
        , bool? isEmbed = default(bool?), List<AppConfig> appNames = default(List<AppConfig>)
        , List<TagAttributes> attributes = default(List<TagAttributes>))
        {
            this.clientId = clientId;
            this.clientSecret = clientSecret;
            this.username = username;
            this.password = password;
            this.publicKey = publicKey;
            this.userAccessToken = userAccessToken;
            this.basePath = basePath;
            this.isCredsPassed = isCredsPassed?? false;
            this.isEmbed = isEmbed?? false;
            this.appNames = appNames;
            this.attributes = attributes;
        }
        
       
    }

}
