/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Proton.Client;
using Proton.ModelEntity;

namespace Proton.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Backtest
        /// </summary>
        /// <remarks>
        /// Run a historical analysis for a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> Backtest (BacktestRequest backtestRequest);

        /// <summary>
        /// Backtest
        /// </summary>
        /// <remarks>
        /// Run a historical analysis for a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> BacktestWithHttpInfo (BacktestRequest backtestRequest);
        /// <summary>
        /// Event Study
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against key historical events
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> EventStudy (EventStudyRequest eventStudyRequest);

        /// <summary>
        /// Event Study
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against key historical events
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> EventStudyWithHttpInfo (EventStudyRequest eventStudyRequest);
        /// <summary>
        /// Monte Carlo
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> MonteCarlo (MonteCarloRequest monteCarloRequest);

        /// <summary>
        /// Monte Carlo
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> MonteCarloWithHttpInfo (MonteCarloRequest monteCarloRequest);
        /// <summary>
        /// Porfolio What-If
        /// </summary>
        /// <remarks>
        /// Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> PortfolioWhatIf (PortfolioWhatIfRequest portfolioWhatIfRequest);

        /// <summary>
        /// Porfolio What-If
        /// </summary>
        /// <remarks>
        /// Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> PortfolioWhatIfWithHttpInfo (PortfolioWhatIfRequest portfolioWhatIfRequest);
        /// <summary>
        /// Savings Calculator
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a simple savings account
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> SavingsCalculator (SavingsCalculatorRequest savingsCalculatorRequest);

        /// <summary>
        /// Savings Calculator
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a simple savings account
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> SavingsCalculatorWithHttpInfo (SavingsCalculatorRequest savingsCalculatorRequest);
        /// <summary>
        /// Scenario Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against a series of external economic factors
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> ScenarioAnalysis (ScenarioAnalysisRequest scnearioAnalysisRequest);

        /// <summary>
        /// Scenario Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against a series of external economic factors
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> ScenarioAnalysisWithHttpInfo (ScenarioAnalysisRequest scnearioAnalysisRequest);
        /// <summary>
        /// Sensitivity Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against an external economic factor
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> SensitivityAnalysis (SensitivityAnalysisRequest sensitivityAnalysisRequest);

        /// <summary>
        /// Sensitivity Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against an external economic factor
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> SensitivityAnalysisWithHttpInfo (SensitivityAnalysisRequest sensitivityAnalysisRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Backtest
        /// </summary>
        /// <remarks>
        /// Run a historical analysis for a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> BacktestAsync (BacktestRequest backtestRequest);

        /// <summary>
        /// Backtest
        /// </summary>
        /// <remarks>
        /// Run a historical analysis for a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> BacktestAsyncWithHttpInfo (BacktestRequest backtestRequest);
        /// <summary>
        /// Event Study
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against key historical events
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> EventStudyAsync (EventStudyRequest eventStudyRequest);

        /// <summary>
        /// Event Study
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against key historical events
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EventStudyAsyncWithHttpInfo (EventStudyRequest eventStudyRequest);
        /// <summary>
        /// Monte Carlo
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> MonteCarloAsync (MonteCarloRequest monteCarloRequest);

        /// <summary>
        /// Monte Carlo
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MonteCarloAsyncWithHttpInfo (MonteCarloRequest monteCarloRequest);
        /// <summary>
        /// Porfolio What-If
        /// </summary>
        /// <remarks>
        /// Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> PortfolioWhatIfAsync (PortfolioWhatIfRequest portfolioWhatIfRequest);

        /// <summary>
        /// Porfolio What-If
        /// </summary>
        /// <remarks>
        /// Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PortfolioWhatIfAsyncWithHttpInfo (PortfolioWhatIfRequest portfolioWhatIfRequest);
        /// <summary>
        /// Savings Calculator
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a simple savings account
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> SavingsCalculatorAsync (SavingsCalculatorRequest savingsCalculatorRequest);

        /// <summary>
        /// Savings Calculator
        /// </summary>
        /// <remarks>
        /// Simulate the future growth of a simple savings account
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> SavingsCalculatorAsyncWithHttpInfo (SavingsCalculatorRequest savingsCalculatorRequest);
        /// <summary>
        /// Scenario Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against a series of external economic factors
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> ScenarioAnalysisAsync (ScenarioAnalysisRequest scnearioAnalysisRequest);

        /// <summary>
        /// Scenario Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against a series of external economic factors
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ScenarioAnalysisAsyncWithHttpInfo (ScenarioAnalysisRequest scnearioAnalysisRequest);
        /// <summary>
        /// Sensitivity Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against an external economic factor
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> SensitivityAnalysisAsync (SensitivityAnalysisRequest sensitivityAnalysisRequest);

        /// <summary>
        /// Sensitivity Analysis
        /// </summary>
        /// <remarks>
        /// Analyze a group of investments against an external economic factor
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> SensitivityAnalysisAsyncWithHttpInfo (SensitivityAnalysisRequest sensitivityAnalysisRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SimulationsApi : ISimulationsApi
    {
        private Proton.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationsApi(String basePath)
        {
            this.Configuration = new Proton.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SimulationsApi(Proton.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Proton.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Proton.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Proton.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Backtest Run a historical analysis for a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> Backtest (BacktestRequest backtestRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = BacktestWithHttpInfo(backtestRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Backtest Run a historical analysis for a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > BacktestWithHttpInfo (BacktestRequest backtestRequest)
        {
            // verify the required parameter 'backtestRequest' is set
            if (backtestRequest == null)
                throw new ApiException(400, "Missing required parameter 'backtestRequest' when calling SimulationsApi->Backtest");

            var localVarPath = "/backtest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (backtestRequest != null && backtestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(backtestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backtestRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Backtest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Backtest Run a historical analysis for a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> BacktestAsync (BacktestRequest backtestRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await BacktestAsyncWithHttpInfo(backtestRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Backtest Run a historical analysis for a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backtestRequest">Request payload for Backtest</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> BacktestAsyncWithHttpInfo (BacktestRequest backtestRequest)
        {
            // verify the required parameter 'backtestRequest' is set
            if (backtestRequest == null)
                throw new ApiException(400, "Missing required parameter 'backtestRequest' when calling SimulationsApi->Backtest");

            var localVarPath = "/backtest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (backtestRequest != null && backtestRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(backtestRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backtestRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Backtest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Event Study Analyze a group of investments against key historical events
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> EventStudy (EventStudyRequest eventStudyRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = EventStudyWithHttpInfo(eventStudyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Event Study Analyze a group of investments against key historical events
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > EventStudyWithHttpInfo (EventStudyRequest eventStudyRequest)
        {
            // verify the required parameter 'eventStudyRequest' is set
            if (eventStudyRequest == null)
                throw new ApiException(400, "Missing required parameter 'eventStudyRequest' when calling SimulationsApi->EventStudy");

            var localVarPath = "/event_study";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (eventStudyRequest != null && eventStudyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(eventStudyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventStudyRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventStudy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Event Study Analyze a group of investments against key historical events
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> EventStudyAsync (EventStudyRequest eventStudyRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await EventStudyAsyncWithHttpInfo(eventStudyRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Event Study Analyze a group of investments against key historical events
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventStudyRequest">Request payload for Event Study</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EventStudyAsyncWithHttpInfo (EventStudyRequest eventStudyRequest)
        {
            // verify the required parameter 'eventStudyRequest' is set
            if (eventStudyRequest == null)
                throw new ApiException(400, "Missing required parameter 'eventStudyRequest' when calling SimulationsApi->EventStudy");

            var localVarPath = "/event_study";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (eventStudyRequest != null && eventStudyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(eventStudyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventStudyRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventStudy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Monte Carlo Simulate the future growth of a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> MonteCarlo (MonteCarloRequest monteCarloRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = MonteCarloWithHttpInfo(monteCarloRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Monte Carlo Simulate the future growth of a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > MonteCarloWithHttpInfo (MonteCarloRequest monteCarloRequest)
        {
            // verify the required parameter 'monteCarloRequest' is set
            if (monteCarloRequest == null)
                throw new ApiException(400, "Missing required parameter 'monteCarloRequest' when calling SimulationsApi->MonteCarlo");

            var localVarPath = "/monte_carlo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (monteCarloRequest != null && monteCarloRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(monteCarloRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monteCarloRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonteCarlo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Monte Carlo Simulate the future growth of a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> MonteCarloAsync (MonteCarloRequest monteCarloRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await MonteCarloAsyncWithHttpInfo(monteCarloRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Monte Carlo Simulate the future growth of a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="monteCarloRequest">Request payload for Monte Carlo</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MonteCarloAsyncWithHttpInfo (MonteCarloRequest monteCarloRequest)
        {
            // verify the required parameter 'monteCarloRequest' is set
            if (monteCarloRequest == null)
                throw new ApiException(400, "Missing required parameter 'monteCarloRequest' when calling SimulationsApi->MonteCarlo");

            var localVarPath = "/monte_carlo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (monteCarloRequest != null && monteCarloRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(monteCarloRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monteCarloRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MonteCarlo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Porfolio What-If Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> PortfolioWhatIf (PortfolioWhatIfRequest portfolioWhatIfRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = PortfolioWhatIfWithHttpInfo(portfolioWhatIfRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Porfolio What-If Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > PortfolioWhatIfWithHttpInfo (PortfolioWhatIfRequest portfolioWhatIfRequest)
        {
            // verify the required parameter 'portfolioWhatIfRequest' is set
            if (portfolioWhatIfRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioWhatIfRequest' when calling SimulationsApi->PortfolioWhatIf");

            var localVarPath = "/portfolio_what_if";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (portfolioWhatIfRequest != null && portfolioWhatIfRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioWhatIfRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioWhatIfRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioWhatIf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Porfolio What-If Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> PortfolioWhatIfAsync (PortfolioWhatIfRequest portfolioWhatIfRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await PortfolioWhatIfAsyncWithHttpInfo(portfolioWhatIfRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Porfolio What-If Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioWhatIfRequest">Request payload for Portfolio What-If</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PortfolioWhatIfAsyncWithHttpInfo (PortfolioWhatIfRequest portfolioWhatIfRequest)
        {
            // verify the required parameter 'portfolioWhatIfRequest' is set
            if (portfolioWhatIfRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioWhatIfRequest' when calling SimulationsApi->PortfolioWhatIf");

            var localVarPath = "/portfolio_what_if";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (portfolioWhatIfRequest != null && portfolioWhatIfRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioWhatIfRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioWhatIfRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortfolioWhatIf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Savings Calculator Simulate the future growth of a simple savings account
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> SavingsCalculator (SavingsCalculatorRequest savingsCalculatorRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = SavingsCalculatorWithHttpInfo(savingsCalculatorRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Savings Calculator Simulate the future growth of a simple savings account
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > SavingsCalculatorWithHttpInfo (SavingsCalculatorRequest savingsCalculatorRequest)
        {
            // verify the required parameter 'savingsCalculatorRequest' is set
            if (savingsCalculatorRequest == null)
                throw new ApiException(400, "Missing required parameter 'savingsCalculatorRequest' when calling SimulationsApi->SavingsCalculator");

            var localVarPath = "/savings_calculator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (savingsCalculatorRequest != null && savingsCalculatorRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savingsCalculatorRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savingsCalculatorRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavingsCalculator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Savings Calculator Simulate the future growth of a simple savings account
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> SavingsCalculatorAsync (SavingsCalculatorRequest savingsCalculatorRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await SavingsCalculatorAsyncWithHttpInfo(savingsCalculatorRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Savings Calculator Simulate the future growth of a simple savings account
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savingsCalculatorRequest">Request payload for Savings Calculator</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> SavingsCalculatorAsyncWithHttpInfo (SavingsCalculatorRequest savingsCalculatorRequest)
        {
            // verify the required parameter 'savingsCalculatorRequest' is set
            if (savingsCalculatorRequest == null)
                throw new ApiException(400, "Missing required parameter 'savingsCalculatorRequest' when calling SimulationsApi->SavingsCalculator");

            var localVarPath = "/savings_calculator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (savingsCalculatorRequest != null && savingsCalculatorRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(savingsCalculatorRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = savingsCalculatorRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavingsCalculator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Scenario Analysis Analyze a group of investments against a series of external economic factors
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> ScenarioAnalysis (ScenarioAnalysisRequest scnearioAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = ScenarioAnalysisWithHttpInfo(scnearioAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scenario Analysis Analyze a group of investments against a series of external economic factors
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > ScenarioAnalysisWithHttpInfo (ScenarioAnalysisRequest scnearioAnalysisRequest)
        {
            // verify the required parameter 'scnearioAnalysisRequest' is set
            if (scnearioAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'scnearioAnalysisRequest' when calling SimulationsApi->ScenarioAnalysis");

            var localVarPath = "/scenario_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (scnearioAnalysisRequest != null && scnearioAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scnearioAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scnearioAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScenarioAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Scenario Analysis Analyze a group of investments against a series of external economic factors
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> ScenarioAnalysisAsync (ScenarioAnalysisRequest scnearioAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await ScenarioAnalysisAsyncWithHttpInfo(scnearioAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scenario Analysis Analyze a group of investments against a series of external economic factors
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scnearioAnalysisRequest">Request payload for Scenario Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ScenarioAnalysisAsyncWithHttpInfo (ScenarioAnalysisRequest scnearioAnalysisRequest)
        {
            // verify the required parameter 'scnearioAnalysisRequest' is set
            if (scnearioAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'scnearioAnalysisRequest' when calling SimulationsApi->ScenarioAnalysis");

            var localVarPath = "/scenario_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (scnearioAnalysisRequest != null && scnearioAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scnearioAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scnearioAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScenarioAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Sensitivity Analysis Analyze a group of investments against an external economic factor
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> SensitivityAnalysis (SensitivityAnalysisRequest sensitivityAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = SensitivityAnalysisWithHttpInfo(sensitivityAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sensitivity Analysis Analyze a group of investments against an external economic factor
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > SensitivityAnalysisWithHttpInfo (SensitivityAnalysisRequest sensitivityAnalysisRequest)
        {
            // verify the required parameter 'sensitivityAnalysisRequest' is set
            if (sensitivityAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'sensitivityAnalysisRequest' when calling SimulationsApi->SensitivityAnalysis");

            var localVarPath = "/sensitivity_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (sensitivityAnalysisRequest != null && sensitivityAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sensitivityAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sensitivityAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SensitivityAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Sensitivity Analysis Analyze a group of investments against an external economic factor
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> SensitivityAnalysisAsync (SensitivityAnalysisRequest sensitivityAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await SensitivityAnalysisAsyncWithHttpInfo(sensitivityAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sensitivity Analysis Analyze a group of investments against an external economic factor
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensitivityAnalysisRequest">Request payload for Sensitivity Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> SensitivityAnalysisAsyncWithHttpInfo (SensitivityAnalysisRequest sensitivityAnalysisRequest)
        {
            // verify the required parameter 'sensitivityAnalysisRequest' is set
            if (sensitivityAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'sensitivityAnalysisRequest' when calling SimulationsApi->SensitivityAnalysis");

            var localVarPath = "/sensitivity_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (sensitivityAnalysisRequest != null && sensitivityAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sensitivityAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sensitivityAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SensitivityAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

    }
}
