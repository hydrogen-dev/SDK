# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nucleus_api.api_client import ApiClient


class UtilsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_application_using_post(self, application, **kwargs):  # noqa: E501
        """Create an application  # noqa: E501

        Create an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_using_post(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Application application: application (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_using_post_with_http_info(application, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_using_post_with_http_info(application, **kwargs)  # noqa: E501
            return data

    def create_application_using_post_with_http_info(self, application, **kwargs):  # noqa: E501
        """Create an application  # noqa: E501

        Create an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_using_post_with_http_info(application, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Application application: application (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `create_application_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/application', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_audit_log_using_post(self, audit_log, **kwargs):  # noqa: E501
        """Create a audit log  # noqa: E501

        Create a new audit log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_audit_log_using_post(audit_log, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLog audit_log: auditLog (required)
        :return: AuditLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_audit_log_using_post_with_http_info(audit_log, **kwargs)  # noqa: E501
        else:
            (data) = self.create_audit_log_using_post_with_http_info(audit_log, **kwargs)  # noqa: E501
            return data

    def create_audit_log_using_post_with_http_info(self, audit_log, **kwargs):  # noqa: E501
        """Create a audit log  # noqa: E501

        Create a new audit log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_audit_log_using_post_with_http_info(audit_log, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLog audit_log: auditLog (required)
        :return: AuditLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audit_log']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_audit_log_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audit_log' is set
        if self.api_client.client_side_validation and ('audit_log' not in params or
                                                       params['audit_log'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `audit_log` when calling `create_audit_log_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'audit_log' in params:
            body_params = params['audit_log']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/audit_log', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuditLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_feature_track_using_post(self, feature_track, **kwargs):  # noqa: E501
        """Create a Feature Track  # noqa: E501

        Create a new feature track.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_track_using_post(feature_track, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTrack feature_track: featureTrack (required)
        :return: FeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_feature_track_using_post_with_http_info(feature_track, **kwargs)  # noqa: E501
        else:
            (data) = self.create_feature_track_using_post_with_http_info(feature_track, **kwargs)  # noqa: E501
            return data

    def create_feature_track_using_post_with_http_info(self, feature_track, **kwargs):  # noqa: E501
        """Create a Feature Track  # noqa: E501

        Create a new feature track.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_track_using_post_with_http_info(feature_track, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeatureTrack feature_track: featureTrack (required)
        :return: FeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_track']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_feature_track_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_track' is set
        if self.api_client.client_side_validation and ('feature_track' not in params or
                                                       params['feature_track'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_track` when calling `create_feature_track_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_track' in params:
            body_params = params['feature_track']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature_track', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureTrack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_feature_using_post(self, feature, **kwargs):  # noqa: E501
        """Create a  Feature  # noqa: E501

        Create a new feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_using_post(feature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Feature feature: feature (required)
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_feature_using_post_with_http_info(feature, **kwargs)  # noqa: E501
        else:
            (data) = self.create_feature_using_post_with_http_info(feature, **kwargs)  # noqa: E501
            return data

    def create_feature_using_post_with_http_info(self, feature, **kwargs):  # noqa: E501
        """Create a  Feature  # noqa: E501

        Create a new feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_feature_using_post_with_http_info(feature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Feature feature: feature (required)
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_feature_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature' is set
        if self.api_client.client_side_validation and ('feature' not in params or
                                                       params['feature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature` when calling `create_feature_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature' in params:
            body_params = params['feature']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_notification_client_using_post(self, notification_client, **kwargs):  # noqa: E501
        """Create a Notification Client  # noqa: E501

        Create a new Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_client_using_post(notification_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationClient notification_client: notificationClient (required)
        :return: NotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_notification_client_using_post_with_http_info(notification_client, **kwargs)  # noqa: E501
        else:
            (data) = self.create_notification_client_using_post_with_http_info(notification_client, **kwargs)  # noqa: E501
            return data

    def create_notification_client_using_post_with_http_info(self, notification_client, **kwargs):  # noqa: E501
        """Create a Notification Client  # noqa: E501

        Create a new Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_client_using_post_with_http_info(notification_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationClient notification_client: notificationClient (required)
        :return: NotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_client']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_notification_client_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_client' is set
        if self.api_client.client_side_validation and ('notification_client' not in params or
                                                       params['notification_client'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_client` when calling `create_notification_client_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification_client' in params:
            body_params = params['notification_client']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_client', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_notification_setting_using_post(self, notification_setting, **kwargs):  # noqa: E501
        """Create a Notification Setting  # noqa: E501

        Create a new Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_setting_using_post(notification_setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationSetting notification_setting: notificationSetting (required)
        :return: NotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_notification_setting_using_post_with_http_info(notification_setting, **kwargs)  # noqa: E501
        else:
            (data) = self.create_notification_setting_using_post_with_http_info(notification_setting, **kwargs)  # noqa: E501
            return data

    def create_notification_setting_using_post_with_http_info(self, notification_setting, **kwargs):  # noqa: E501
        """Create a Notification Setting  # noqa: E501

        Create a new Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_setting_using_post_with_http_info(notification_setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationSetting notification_setting: notificationSetting (required)
        :return: NotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_setting']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_notification_setting_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_setting' is set
        if self.api_client.client_side_validation and ('notification_setting' not in params or
                                                       params['notification_setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_setting` when calling `create_notification_setting_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification_setting' in params:
            body_params = params['notification_setting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_setting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_notification_using_post(self, notification, **kwargs):  # noqa: E501
        """Create a Notification  # noqa: E501

        Create a new Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_using_post(notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Notification notification: notification (required)
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_notification_using_post_with_http_info(notification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_notification_using_post_with_http_info(notification, **kwargs)  # noqa: E501
            return data

    def create_notification_using_post_with_http_info(self, notification, **kwargs):  # noqa: E501
        """Create a Notification  # noqa: E501

        Create a new Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_notification_using_post_with_http_info(notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Notification notification: notification (required)
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_notification_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification' is set
        if self.api_client.client_side_validation and ('notification' not in params or
                                                       params['notification'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification` when calling `create_notification_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification' in params:
            body_params = params['notification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Notification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_reason_code_using_post(self, reason_code_request, **kwargs):  # noqa: E501
        """Create a reason code  # noqa: E501

        Create a new reason code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_reason_code_using_post(reason_code_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReasonCode reason_code_request: reasonCodeRequest (required)
        :return: ReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_reason_code_using_post_with_http_info(reason_code_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_reason_code_using_post_with_http_info(reason_code_request, **kwargs)  # noqa: E501
            return data

    def create_reason_code_using_post_with_http_info(self, reason_code_request, **kwargs):  # noqa: E501
        """Create a reason code  # noqa: E501

        Create a new reason code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_reason_code_using_post_with_http_info(reason_code_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReasonCode reason_code_request: reasonCodeRequest (required)
        :return: ReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_code_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reason_code_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_code_request' is set
        if self.api_client.client_side_validation and ('reason_code_request' not in params or
                                                       params['reason_code_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason_code_request` when calling `create_reason_code_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reason_code_request' in params:
            body_params = params['reason_code_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/reason_code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReasonCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_stage_using_post(self, stage_request, **kwargs):  # noqa: E501
        """Create an account stage  # noqa: E501

        Create a new account stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stage_using_post(stage_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Stage stage_request: stageRequest (required)
        :return: Stage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_stage_using_post_with_http_info(stage_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_stage_using_post_with_http_info(stage_request, **kwargs)  # noqa: E501
            return data

    def create_stage_using_post_with_http_info(self, stage_request, **kwargs):  # noqa: E501
        """Create an account stage  # noqa: E501

        Create a new account stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stage_using_post_with_http_info(stage_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Stage stage_request: stageRequest (required)
        :return: Stage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stage_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stage_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stage_request' is set
        if self.api_client.client_side_validation and ('stage_request' not in params or
                                                       params['stage_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stage_request` when calling `create_stage_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stage_request' in params:
            body_params = params['stage_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/stage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_transaction_code_using_post(self, transaction_request, **kwargs):  # noqa: E501
        """Create a transaction code  # noqa: E501

        Create a new transaction code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transaction_code_using_post(transaction_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionCode transaction_request: transactionRequest (required)
        :return: TransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_transaction_code_using_post_with_http_info(transaction_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_transaction_code_using_post_with_http_info(transaction_request, **kwargs)  # noqa: E501
            return data

    def create_transaction_code_using_post_with_http_info(self, transaction_request, **kwargs):  # noqa: E501
        """Create a transaction code  # noqa: E501

        Create a new transaction code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transaction_code_using_post_with_http_info(transaction_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionCode transaction_request: transactionRequest (required)
        :return: TransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transaction_code_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_request' is set
        if self.api_client.client_side_validation and ('transaction_request' not in params or
                                                       params['transaction_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transaction_request` when calling `create_transaction_code_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction_request' in params:
            body_params = params['transaction_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/transaction_code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_using_delete(self, application_id, **kwargs):  # noqa: E501
        """Delete an Application  # noqa: E501

        Permanently delete an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_using_delete(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: UUID application_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_using_delete_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_using_delete_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def delete_application_using_delete_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Delete an Application  # noqa: E501

        Permanently delete an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_using_delete_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: UUID application_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `delete_application_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['application_id'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/application/{application_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_feature_track_using_delete(self, feature_track_id, **kwargs):  # noqa: E501
        """Delete a Feature Track  # noqa: E501

        Permanently delete a feature track registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_track_using_delete(feature_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_track_id: UUID feature_track_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_feature_track_using_delete_with_http_info(feature_track_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_feature_track_using_delete_with_http_info(feature_track_id, **kwargs)  # noqa: E501
            return data

    def delete_feature_track_using_delete_with_http_info(self, feature_track_id, **kwargs):  # noqa: E501
        """Delete a Feature Track  # noqa: E501

        Permanently delete a feature track registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_track_using_delete_with_http_info(feature_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_track_id: UUID feature_track_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_track_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature_track_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_track_id' is set
        if self.api_client.client_side_validation and ('feature_track_id' not in params or
                                                       params['feature_track_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_track_id` when calling `delete_feature_track_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_track_id' in params:
            path_params['feature_track_id'] = params['feature_track_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature_track/{feature_track_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_feature_using_delete(self, feature_id, **kwargs):  # noqa: E501
        """Delete a Feature  # noqa: E501

        Permanently delete a  feature registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_using_delete(feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_id: UUID feature_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_feature_using_delete_with_http_info(feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_feature_using_delete_with_http_info(feature_id, **kwargs)  # noqa: E501
            return data

    def delete_feature_using_delete_with_http_info(self, feature_id, **kwargs):  # noqa: E501
        """Delete a Feature  # noqa: E501

        Permanently delete a  feature registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_feature_using_delete_with_http_info(feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_id: UUID feature_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_id' is set
        if self.api_client.client_side_validation and ('feature_id' not in params or
                                                       params['feature_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_id` when calling `delete_feature_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_id' in params:
            path_params['feature_id'] = params['feature_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature/{feature_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notification_client_using_delete(self, notification_client_id, **kwargs):  # noqa: E501
        """Delete a Notification Client  # noqa: E501

        Permanently Delete Notification Client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_client_using_delete(notification_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_client_id: notification_client_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_notification_client_using_delete_with_http_info(notification_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notification_client_using_delete_with_http_info(notification_client_id, **kwargs)  # noqa: E501
            return data

    def delete_notification_client_using_delete_with_http_info(self, notification_client_id, **kwargs):  # noqa: E501
        """Delete a Notification Client  # noqa: E501

        Permanently Delete Notification Client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_client_using_delete_with_http_info(notification_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_client_id: notification_client_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notification_client_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_client_id' is set
        if self.api_client.client_side_validation and ('notification_client_id' not in params or
                                                       params['notification_client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_client_id` when calling `delete_notification_client_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_client_id' in params:
            path_params['notification_client_id'] = params['notification_client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_client/{notification_client_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notification_setting_using_delete(self, notification_setting_id, **kwargs):  # noqa: E501
        """Delete a Notification Setting  # noqa: E501

        Permanently Delete Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_setting_using_delete(notification_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_setting_id: notification_setting_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_notification_setting_using_delete_with_http_info(notification_setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notification_setting_using_delete_with_http_info(notification_setting_id, **kwargs)  # noqa: E501
            return data

    def delete_notification_setting_using_delete_with_http_info(self, notification_setting_id, **kwargs):  # noqa: E501
        """Delete a Notification Setting  # noqa: E501

        Permanently Delete Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_setting_using_delete_with_http_info(notification_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_setting_id: notification_setting_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notification_setting_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_setting_id' is set
        if self.api_client.client_side_validation and ('notification_setting_id' not in params or
                                                       params['notification_setting_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_setting_id` when calling `delete_notification_setting_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_setting_id' in params:
            path_params['notification_setting_id'] = params['notification_setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_setting/{notification_setting_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notification_using_delete(self, notification_id, **kwargs):  # noqa: E501
        """Delete a Notification  # noqa: E501

        Permanently Delete a Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_using_delete(notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_id: UUID notification_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_notification_using_delete_with_http_info(notification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notification_using_delete_with_http_info(notification_id, **kwargs)  # noqa: E501
            return data

    def delete_notification_using_delete_with_http_info(self, notification_id, **kwargs):  # noqa: E501
        """Delete a Notification  # noqa: E501

        Permanently Delete a Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_notification_using_delete_with_http_info(notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_id: UUID notification_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notification_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_id' is set
        if self.api_client.client_side_validation and ('notification_id' not in params or
                                                       params['notification_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_id` when calling `delete_notification_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_id' in params:
            path_params['notification_id'] = params['notification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification/{notification_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_reason_code_using_delete(self, reason_code_id, **kwargs):  # noqa: E501
        """Delete a reason code  # noqa: E501

        Permanently delete a reason code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reason_code_using_delete(reason_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_code_id: UUID reason_code_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_reason_code_using_delete_with_http_info(reason_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_reason_code_using_delete_with_http_info(reason_code_id, **kwargs)  # noqa: E501
            return data

    def delete_reason_code_using_delete_with_http_info(self, reason_code_id, **kwargs):  # noqa: E501
        """Delete a reason code  # noqa: E501

        Permanently delete a reason code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reason_code_using_delete_with_http_info(reason_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_code_id: UUID reason_code_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reason_code_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_code_id' is set
        if self.api_client.client_side_validation and ('reason_code_id' not in params or
                                                       params['reason_code_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason_code_id` when calling `delete_reason_code_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_code_id' in params:
            path_params['reason_code_id'] = params['reason_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/reason_code/{reason_code_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_stage_using_delete(self, stage_id, **kwargs):  # noqa: E501
        """Delete an account stage  # noqa: E501

        Permanently delete an account stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_stage_using_delete(stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stage_id: UUID stage_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_stage_using_delete_with_http_info(stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_stage_using_delete_with_http_info(stage_id, **kwargs)  # noqa: E501
            return data

    def delete_stage_using_delete_with_http_info(self, stage_id, **kwargs):  # noqa: E501
        """Delete an account stage  # noqa: E501

        Permanently delete an account stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_stage_using_delete_with_http_info(stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stage_id: UUID stage_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_stage_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stage_id' is set
        if self.api_client.client_side_validation and ('stage_id' not in params or
                                                       params['stage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stage_id` when calling `delete_stage_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stage_id' in params:
            path_params['stage_id'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/stage/{stage_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_transaction_code_using_delete(self, transaction_code_id, **kwargs):  # noqa: E501
        """Delete a transaction code  # noqa: E501

        Permanently delete a transaction code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transaction_code_using_delete(transaction_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code_id: UUID transaction_code_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_transaction_code_using_delete_with_http_info(transaction_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_transaction_code_using_delete_with_http_info(transaction_code_id, **kwargs)  # noqa: E501
            return data

    def delete_transaction_code_using_delete_with_http_info(self, transaction_code_id, **kwargs):  # noqa: E501
        """Delete a transaction code  # noqa: E501

        Permanently delete a transaction code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transaction_code_using_delete_with_http_info(transaction_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code_id: UUID transaction_code_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_transaction_code_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_code_id' is set
        if self.api_client.client_side_validation and ('transaction_code_id' not in params or
                                                       params['transaction_code_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transaction_code_id` when calling `delete_transaction_code_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_code_id' in params:
            path_params['transaction_code_id'] = params['transaction_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/transaction_code/{transaction_code_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_all_using_get(self, **kwargs):  # noqa: E501
        """List all Application  # noqa: E501

        Get details for all Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_application_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_application_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all Application  # noqa: E501

        Get details for all Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageApplication
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/application', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageApplication',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_using_get(self, application_id, **kwargs):  # noqa: E501
        """Retrieve an Application  # noqa: E501

        Retrieve the information for an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_using_get(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: UUID application_id (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_using_get_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_using_get_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def get_application_using_get_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Retrieve an Application  # noqa: E501

        Retrieve the information for an Application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_using_get_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: UUID application_id (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `get_application_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['application_id'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/application/{application_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_audit_log_all_using_get(self, **kwargs):  # noqa: E501
        """List all audit log  # noqa: E501

        Get details for all audit log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_log_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAuditLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audit_log_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_audit_log_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_audit_log_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all audit log  # noqa: E501

        Get details for all audit log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_log_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAuditLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audit_log_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/audit_log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageAuditLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_audit_log_using_get(self, audit_log_id, **kwargs):  # noqa: E501
        """Retrieve a audit log  # noqa: E501

        Retrieve the information for a audit log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_log_using_get(audit_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str audit_log_id: UUID audit_log_id (required)
        :return: AuditLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audit_log_using_get_with_http_info(audit_log_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_audit_log_using_get_with_http_info(audit_log_id, **kwargs)  # noqa: E501
            return data

    def get_audit_log_using_get_with_http_info(self, audit_log_id, **kwargs):  # noqa: E501
        """Retrieve a audit log  # noqa: E501

        Retrieve the information for a audit log.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_log_using_get_with_http_info(audit_log_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str audit_log_id: UUID audit_log_id (required)
        :return: AuditLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['audit_log_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audit_log_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'audit_log_id' is set
        if self.api_client.client_side_validation and ('audit_log_id' not in params or
                                                       params['audit_log_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `audit_log_id` when calling `get_audit_log_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'audit_log_id' in params:
            path_params['audit_log_id'] = params['audit_log_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/audit_log/{audit_log_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuditLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_all_using_get(self, **kwargs):  # noqa: E501
        """List all Feature  # noqa: E501

        Get details for all features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageFeature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_feature_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all Feature  # noqa: E501

        Get details for all features.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageFeature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageFeature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_track_all_using_get(self, **kwargs):  # noqa: E501
        """List all Feature track  # noqa: E501

        Get details for all feature track.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_track_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageFeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_track_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_track_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_feature_track_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all Feature track  # noqa: E501

        Get details for all feature track.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_track_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageFeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_track_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature_track', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageFeatureTrack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_track_using_get(self, feature_track_id, **kwargs):  # noqa: E501
        """Retrieve a Feature track  # noqa: E501

        Retrieve the information for a Feature track.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_track_using_get(feature_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_track_id: UUID feature_track_id (required)
        :return: FeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_track_using_get_with_http_info(feature_track_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_track_using_get_with_http_info(feature_track_id, **kwargs)  # noqa: E501
            return data

    def get_feature_track_using_get_with_http_info(self, feature_track_id, **kwargs):  # noqa: E501
        """Retrieve a Feature track  # noqa: E501

        Retrieve the information for a Feature track.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_track_using_get_with_http_info(feature_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_track_id: UUID feature_track_id (required)
        :return: FeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_track_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_track_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_track_id' is set
        if self.api_client.client_side_validation and ('feature_track_id' not in params or
                                                       params['feature_track_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_track_id` when calling `get_feature_track_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_track_id' in params:
            path_params['feature_track_id'] = params['feature_track_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature_track/{feature_track_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureTrack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_using_get(self, feature_id, **kwargs):  # noqa: E501
        """Retrieve a Feature  # noqa: E501

        Retrieve the information for a Feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_using_get(feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_id: UUID feature_id (required)
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_feature_using_get_with_http_info(feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_using_get_with_http_info(feature_id, **kwargs)  # noqa: E501
            return data

    def get_feature_using_get_with_http_info(self, feature_id, **kwargs):  # noqa: E501
        """Retrieve a Feature  # noqa: E501

        Retrieve the information for a Feature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_feature_using_get_with_http_info(feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str feature_id: UUID feature_id (required)
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_id' is set
        if self.api_client.client_side_validation and ('feature_id' not in params or
                                                       params['feature_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_id` when calling `get_feature_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_id' in params:
            path_params['feature_id'] = params['feature_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature/{feature_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_all_using_get(self, **kwargs):  # noqa: E501
        """Get All Notifications  # noqa: E501

        Get All Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notification_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_notification_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Notifications  # noqa: E501

        Get All Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_client_all_using_get(self, **kwargs):  # noqa: E501
        """List all Notification Client  # noqa: E501

        List all Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_client_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageNotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notification_client_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_client_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_notification_client_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all Notification Client  # noqa: E501

        List all Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_client_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageNotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_client_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_client', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageNotificationClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_client_using_get(self, notification_client_id, **kwargs):  # noqa: E501
        """Retrieve a Notification Client  # noqa: E501

        Retrieve a  Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_client_using_get(notification_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_client_id: notification_client_id (required)
        :return: NotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notification_client_using_get_with_http_info(notification_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_client_using_get_with_http_info(notification_client_id, **kwargs)  # noqa: E501
            return data

    def get_notification_client_using_get_with_http_info(self, notification_client_id, **kwargs):  # noqa: E501
        """Retrieve a Notification Client  # noqa: E501

        Retrieve a  Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_client_using_get_with_http_info(notification_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_client_id: notification_client_id (required)
        :return: NotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_client_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_client_id' is set
        if self.api_client.client_side_validation and ('notification_client_id' not in params or
                                                       params['notification_client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_client_id` when calling `get_notification_client_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_client_id' in params:
            path_params['notification_client_id'] = params['notification_client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_client/{notification_client_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_setting_all_using_get(self, **kwargs):  # noqa: E501
        """List all Notification Setting  # noqa: E501

        List all Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_setting_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageNotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notification_setting_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_setting_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_notification_setting_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all Notification Setting  # noqa: E501

        List all Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_setting_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageNotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_setting_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_setting', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageNotificationSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_setting_using_get(self, notification_setting_id, **kwargs):  # noqa: E501
        """Retrieve a Notification Setting  # noqa: E501

        Retrieve a  Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_setting_using_get(notification_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_setting_id: notification_setting_id (required)
        :return: NotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notification_setting_using_get_with_http_info(notification_setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_setting_using_get_with_http_info(notification_setting_id, **kwargs)  # noqa: E501
            return data

    def get_notification_setting_using_get_with_http_info(self, notification_setting_id, **kwargs):  # noqa: E501
        """Retrieve a Notification Setting  # noqa: E501

        Retrieve a  Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_setting_using_get_with_http_info(notification_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_setting_id: notification_setting_id (required)
        :return: NotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_setting_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_setting_id' is set
        if self.api_client.client_side_validation and ('notification_setting_id' not in params or
                                                       params['notification_setting_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_setting_id` when calling `get_notification_setting_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_setting_id' in params:
            path_params['notification_setting_id'] = params['notification_setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_setting/{notification_setting_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_using_get(self, notification_id, **kwargs):  # noqa: E501
        """Get a Notification  # noqa: E501

        Get a Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_using_get(notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_id: notification_id (required)
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notification_using_get_with_http_info(notification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_using_get_with_http_info(notification_id, **kwargs)  # noqa: E501
            return data

    def get_notification_using_get_with_http_info(self, notification_id, **kwargs):  # noqa: E501
        """Get a Notification  # noqa: E501

        Get a Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_using_get_with_http_info(notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str notification_id: notification_id (required)
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_id' is set
        if self.api_client.client_side_validation and ('notification_id' not in params or
                                                       params['notification_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_id` when calling `get_notification_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_id' in params:
            path_params['notification_id'] = params['notification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification/{notification_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Notification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reason_code_all_using_get(self, **kwargs):  # noqa: E501
        """List all reason codes  # noqa: E501

        Get the information for all reason codes defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reason_code_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reason_code_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_reason_code_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_reason_code_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all reason codes  # noqa: E501

        Get the information for all reason codes defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reason_code_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reason_code_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/reason_code', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageReasonCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reason_code_using_get(self, reason_code_id, **kwargs):  # noqa: E501
        """Retrieve a reason code  # noqa: E501

        Retrieve the information for a reason code defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reason_code_using_get(reason_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_code_id: UUID reason_code_id (required)
        :return: ReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reason_code_using_get_with_http_info(reason_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reason_code_using_get_with_http_info(reason_code_id, **kwargs)  # noqa: E501
            return data

    def get_reason_code_using_get_with_http_info(self, reason_code_id, **kwargs):  # noqa: E501
        """Retrieve a reason code  # noqa: E501

        Retrieve the information for a reason code defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reason_code_using_get_with_http_info(reason_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reason_code_id: UUID reason_code_id (required)
        :return: ReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reason_code_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_code_id' is set
        if self.api_client.client_side_validation and ('reason_code_id' not in params or
                                                       params['reason_code_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason_code_id` when calling `get_reason_code_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_code_id' in params:
            path_params['reason_code_id'] = params['reason_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/reason_code/{reason_code_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReasonCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stage_all_using_get(self, **kwargs):  # noqa: E501
        """List all account stages  # noqa: E501

        Get the information for all possible account stages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stage_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageStage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stage_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_stage_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_stage_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all account stages  # noqa: E501

        Get the information for all possible account stages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stage_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageStage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stage_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/stage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageStage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stage_using_get(self, stage_id, **kwargs):  # noqa: E501
        """Retrieve an account stage  # noqa: E501

        Retrieve the information for a specific account stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stage_using_get(stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stage_id: UUID stage_id (required)
        :return: Stage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stage_using_get_with_http_info(stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_stage_using_get_with_http_info(stage_id, **kwargs)  # noqa: E501
            return data

    def get_stage_using_get_with_http_info(self, stage_id, **kwargs):  # noqa: E501
        """Retrieve an account stage  # noqa: E501

        Retrieve the information for a specific account stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stage_using_get_with_http_info(stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str stage_id: UUID stage_id (required)
        :return: Stage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stage_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stage_id' is set
        if self.api_client.client_side_validation and ('stage_id' not in params or
                                                       params['stage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stage_id` when calling `get_stage_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stage_id' in params:
            path_params['stage_id'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/stage/{stage_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_code_all_using_get(self, **kwargs):  # noqa: E501
        """List all transaction codes  # noqa: E501

        Get the information for all transaction codes defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_code_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageTransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_code_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_code_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_transaction_code_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all transaction codes  # noqa: E501

        Get the information for all transaction codes defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_code_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageTransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_code_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/transaction_code', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageTransactionCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_code_using_get(self, transaction_code_id, **kwargs):  # noqa: E501
        """Retrieve a transaction code  # noqa: E501

        Retrieve the information for a transaction code defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_code_using_get(transaction_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code_id: UUID transaction_code_id (required)
        :return: TransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_code_using_get_with_http_info(transaction_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_code_using_get_with_http_info(transaction_code_id, **kwargs)  # noqa: E501
            return data

    def get_transaction_code_using_get_with_http_info(self, transaction_code_id, **kwargs):  # noqa: E501
        """Retrieve a transaction code  # noqa: E501

        Retrieve the information for a transaction code defined by your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_code_using_get_with_http_info(transaction_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transaction_code_id: UUID transaction_code_id (required)
        :return: TransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_code_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_code_id' is set
        if self.api_client.client_side_validation and ('transaction_code_id' not in params or
                                                       params['transaction_code_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transaction_code_id` when calling `get_transaction_code_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_code_id' in params:
            path_params['transaction_code_id'] = params['transaction_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/transaction_code/{transaction_code_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_application_using_put(self, application, application_id, **kwargs):  # noqa: E501
        """Update an Application  # noqa: E501

        Update the information for an Application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_using_put(application, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object application: application (required)
        :param str application_id: UUID application_id (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_application_using_put_with_http_info(application, application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_application_using_put_with_http_info(application, application_id, **kwargs)  # noqa: E501
            return data

    def update_application_using_put_with_http_info(self, application, application_id, **kwargs):  # noqa: E501
        """Update an Application  # noqa: E501

        Update the information for an Application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_using_put_with_http_info(application, application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object application: application (required)
        :param str application_id: UUID application_id (required)
        :return: Application
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application', 'application_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if self.api_client.client_side_validation and ('application' not in params or
                                                       params['application'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application` when calling `update_application_using_put`")  # noqa: E501
        # verify the required parameter 'application_id' is set
        if self.api_client.client_side_validation and ('application_id' not in params or
                                                       params['application_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `application_id` when calling `update_application_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application_id' in params:
            path_params['application_id'] = params['application_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'application' in params:
            body_params = params['application']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/application/{application_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Application',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_feature_track_using_put(self, feature_track, feature_track_id, **kwargs):  # noqa: E501
        """Update a Feature Track  # noqa: E501

        Update the information for a Feature track registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_feature_track_using_put(feature_track, feature_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object feature_track: feature_track (required)
        :param str feature_track_id: UUID feature_track_id (required)
        :return: FeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_feature_track_using_put_with_http_info(feature_track, feature_track_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_feature_track_using_put_with_http_info(feature_track, feature_track_id, **kwargs)  # noqa: E501
            return data

    def update_feature_track_using_put_with_http_info(self, feature_track, feature_track_id, **kwargs):  # noqa: E501
        """Update a Feature Track  # noqa: E501

        Update the information for a Feature track registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_feature_track_using_put_with_http_info(feature_track, feature_track_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object feature_track: feature_track (required)
        :param str feature_track_id: UUID feature_track_id (required)
        :return: FeatureTrack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_track', 'feature_track_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_feature_track_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_track' is set
        if self.api_client.client_side_validation and ('feature_track' not in params or
                                                       params['feature_track'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_track` when calling `update_feature_track_using_put`")  # noqa: E501
        # verify the required parameter 'feature_track_id' is set
        if self.api_client.client_side_validation and ('feature_track_id' not in params or
                                                       params['feature_track_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_track_id` when calling `update_feature_track_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_track_id' in params:
            path_params['feature_track_id'] = params['feature_track_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature_track' in params:
            body_params = params['feature_track']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature_track/{feature_track_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeatureTrack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_feature_using_put(self, feature, feature_id, **kwargs):  # noqa: E501
        """Update a Feature  # noqa: E501

        Update the information for a Feature registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_feature_using_put(feature, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object feature: feature (required)
        :param str feature_id: UUID feature_id (required)
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_feature_using_put_with_http_info(feature, feature_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_feature_using_put_with_http_info(feature, feature_id, **kwargs)  # noqa: E501
            return data

    def update_feature_using_put_with_http_info(self, feature, feature_id, **kwargs):  # noqa: E501
        """Update a Feature  # noqa: E501

        Update the information for a Feature registered with your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_feature_using_put_with_http_info(feature, feature_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object feature: feature (required)
        :param str feature_id: UUID feature_id (required)
        :return: Feature
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature', 'feature_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_feature_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature' is set
        if self.api_client.client_side_validation and ('feature' not in params or
                                                       params['feature'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature` when calling `update_feature_using_put`")  # noqa: E501
        # verify the required parameter 'feature_id' is set
        if self.api_client.client_side_validation and ('feature_id' not in params or
                                                       params['feature_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feature_id` when calling `update_feature_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_id' in params:
            path_params['feature_id'] = params['feature_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'feature' in params:
            body_params = params['feature']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/feature/{feature_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Feature',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_notification_client_using_put(self, notification_client, notification_client_id, **kwargs):  # noqa: E501
        """Update a Notification Client  # noqa: E501

        Update a  Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notification_client_using_put(notification_client, notification_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object notification_client: notification_client (required)
        :param str notification_client_id: UUID notification_client_id (required)
        :return: NotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_notification_client_using_put_with_http_info(notification_client, notification_client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notification_client_using_put_with_http_info(notification_client, notification_client_id, **kwargs)  # noqa: E501
            return data

    def update_notification_client_using_put_with_http_info(self, notification_client, notification_client_id, **kwargs):  # noqa: E501
        """Update a Notification Client  # noqa: E501

        Update a  Notification Client.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notification_client_using_put_with_http_info(notification_client, notification_client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object notification_client: notification_client (required)
        :param str notification_client_id: UUID notification_client_id (required)
        :return: NotificationClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_client', 'notification_client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_notification_client_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_client' is set
        if self.api_client.client_side_validation and ('notification_client' not in params or
                                                       params['notification_client'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_client` when calling `update_notification_client_using_put`")  # noqa: E501
        # verify the required parameter 'notification_client_id' is set
        if self.api_client.client_side_validation and ('notification_client_id' not in params or
                                                       params['notification_client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_client_id` when calling `update_notification_client_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_client_id' in params:
            path_params['notification_client_id'] = params['notification_client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification_client' in params:
            body_params = params['notification_client']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_client/{notification_client_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_notification_setting_using_put(self, notification_setting, notification_setting_id, **kwargs):  # noqa: E501
        """Update a Notification Setting  # noqa: E501

        Update a  Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notification_setting_using_put(notification_setting, notification_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object notification_setting: notification_setting (required)
        :param str notification_setting_id: UUID notification_setting_id (required)
        :return: NotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_notification_setting_using_put_with_http_info(notification_setting, notification_setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notification_setting_using_put_with_http_info(notification_setting, notification_setting_id, **kwargs)  # noqa: E501
            return data

    def update_notification_setting_using_put_with_http_info(self, notification_setting, notification_setting_id, **kwargs):  # noqa: E501
        """Update a Notification Setting  # noqa: E501

        Update a  Notification Setting.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notification_setting_using_put_with_http_info(notification_setting, notification_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object notification_setting: notification_setting (required)
        :param str notification_setting_id: UUID notification_setting_id (required)
        :return: NotificationSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification_setting', 'notification_setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_notification_setting_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification_setting' is set
        if self.api_client.client_side_validation and ('notification_setting' not in params or
                                                       params['notification_setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_setting` when calling `update_notification_setting_using_put`")  # noqa: E501
        # verify the required parameter 'notification_setting_id' is set
        if self.api_client.client_side_validation and ('notification_setting_id' not in params or
                                                       params['notification_setting_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_setting_id` when calling `update_notification_setting_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_setting_id' in params:
            path_params['notification_setting_id'] = params['notification_setting_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification_setting' in params:
            body_params = params['notification_setting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification_setting/{notification_setting_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_notification_using_put(self, notification, notification_id, **kwargs):  # noqa: E501
        """Update a Notification  # noqa: E501

        Update a Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notification_using_put(notification, notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object notification: notification (required)
        :param str notification_id: UUID notification_id (required)
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_notification_using_put_with_http_info(notification, notification_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notification_using_put_with_http_info(notification, notification_id, **kwargs)  # noqa: E501
            return data

    def update_notification_using_put_with_http_info(self, notification, notification_id, **kwargs):  # noqa: E501
        """Update a Notification  # noqa: E501

        Update a Notification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_notification_using_put_with_http_info(notification, notification_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object notification: notification (required)
        :param str notification_id: UUID notification_id (required)
        :return: Notification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['notification', 'notification_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_notification_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'notification' is set
        if self.api_client.client_side_validation and ('notification' not in params or
                                                       params['notification'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification` when calling `update_notification_using_put`")  # noqa: E501
        # verify the required parameter 'notification_id' is set
        if self.api_client.client_side_validation and ('notification_id' not in params or
                                                       params['notification_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_id` when calling `update_notification_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'notification_id' in params:
            path_params['notification_id'] = params['notification_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'notification' in params:
            body_params = params['notification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/notification/{notification_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Notification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_reason_code_using_put(self, reason_code, reason_code_id, **kwargs):  # noqa: E501
        """Update a reason code  # noqa: E501

        Update a reason code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_reason_code_using_put(reason_code, reason_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object reason_code: reason_code (required)
        :param str reason_code_id: UUID reason_code_id (required)
        :return: ReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_reason_code_using_put_with_http_info(reason_code, reason_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_reason_code_using_put_with_http_info(reason_code, reason_code_id, **kwargs)  # noqa: E501
            return data

    def update_reason_code_using_put_with_http_info(self, reason_code, reason_code_id, **kwargs):  # noqa: E501
        """Update a reason code  # noqa: E501

        Update a reason code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_reason_code_using_put_with_http_info(reason_code, reason_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object reason_code: reason_code (required)
        :param str reason_code_id: UUID reason_code_id (required)
        :return: ReasonCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reason_code', 'reason_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_reason_code_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reason_code' is set
        if self.api_client.client_side_validation and ('reason_code' not in params or
                                                       params['reason_code'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason_code` when calling `update_reason_code_using_put`")  # noqa: E501
        # verify the required parameter 'reason_code_id' is set
        if self.api_client.client_side_validation and ('reason_code_id' not in params or
                                                       params['reason_code_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason_code_id` when calling `update_reason_code_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'reason_code_id' in params:
            path_params['reason_code_id'] = params['reason_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reason_code' in params:
            body_params = params['reason_code']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/reason_code/{reason_code_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReasonCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_stage_using_put(self, stage, stage_id, **kwargs):  # noqa: E501
        """Update an account stage  # noqa: E501

        Update the information for an account stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stage_using_put(stage, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object stage: stage (required)
        :param str stage_id: UUID stage_id (required)
        :return: Stage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_stage_using_put_with_http_info(stage, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_stage_using_put_with_http_info(stage, stage_id, **kwargs)  # noqa: E501
            return data

    def update_stage_using_put_with_http_info(self, stage, stage_id, **kwargs):  # noqa: E501
        """Update an account stage  # noqa: E501

        Update the information for an account stage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stage_using_put_with_http_info(stage, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object stage: stage (required)
        :param str stage_id: UUID stage_id (required)
        :return: Stage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stage', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stage_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stage' is set
        if self.api_client.client_side_validation and ('stage' not in params or
                                                       params['stage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stage` when calling `update_stage_using_put`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if self.api_client.client_side_validation and ('stage_id' not in params or
                                                       params['stage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `stage_id` when calling `update_stage_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stage_id' in params:
            path_params['stage_id'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stage' in params:
            body_params = params['stage']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/stage/{stage_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Stage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_transaction_code_using_put(self, transaction_code, transaction_code_id, **kwargs):  # noqa: E501
        """Update a transaction code  # noqa: E501

        Update a transaction code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transaction_code_using_put(transaction_code, transaction_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object transaction_code: transaction_code (required)
        :param str transaction_code_id: UUID transaction_code_id (required)
        :return: TransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_transaction_code_using_put_with_http_info(transaction_code, transaction_code_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_transaction_code_using_put_with_http_info(transaction_code, transaction_code_id, **kwargs)  # noqa: E501
            return data

    def update_transaction_code_using_put_with_http_info(self, transaction_code, transaction_code_id, **kwargs):  # noqa: E501
        """Update a transaction code  # noqa: E501

        Update a transaction code for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transaction_code_using_put_with_http_info(transaction_code, transaction_code_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object transaction_code: transaction_code (required)
        :param str transaction_code_id: UUID transaction_code_id (required)
        :return: TransactionCode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_code', 'transaction_code_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_transaction_code_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_code' is set
        if self.api_client.client_side_validation and ('transaction_code' not in params or
                                                       params['transaction_code'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transaction_code` when calling `update_transaction_code_using_put`")  # noqa: E501
        # verify the required parameter 'transaction_code_id' is set
        if self.api_client.client_side_validation and ('transaction_code_id' not in params or
                                                       params['transaction_code_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transaction_code_id` when calling `update_transaction_code_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transaction_code_id' in params:
            path_params['transaction_code_id'] = params['transaction_code_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction_code' in params:
            body_params = params['transaction_code']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/transaction_code/{transaction_code_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionCode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
