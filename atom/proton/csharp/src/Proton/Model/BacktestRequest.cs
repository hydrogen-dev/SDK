/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// BacktestRequest
    /// </summary>
    [DataContract]
    public partial class BacktestRequest :  IEquatable<BacktestRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BacktestRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BacktestRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BacktestRequest" /> class.
        /// </summary>
        /// <param name="endDate">endDate (required).</param>
        /// <param name="trades">trades (default to true).</param>
        /// <param name="modelId">modelId.</param>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="stats">stats (default to true).</param>
        /// <param name="initialWeights">initialWeights.</param>
        /// <param name="settings">settings.</param>
        /// <param name="assetSize">assetSize.</param>
        /// <param name="assetSizes">assetSizes (default to true).</param>
        /// <param name="holdings">holdings (default to true).</param>
        public BacktestRequest(DateTime? endDate = default(DateTime?), bool? trades = true, Guid? modelId = default(Guid?), DateTime? startDate = default(DateTime?), bool? stats = true, Object initialWeights = default(Object), Settings settings = default(Settings), decimal? assetSize = default(decimal?), bool? assetSizes = true, bool? holdings = true)
        {
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new InvalidDataException("endDate is a required property for BacktestRequest and cannot be null");
            }
            else
            {
                this.EndDate = endDate;
            }
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for BacktestRequest and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            // use default value if no "trades" provided
            if (trades == null)
            {
                this.Trades = true;
            }
            else
            {
                this.Trades = trades;
            }
            this.ModelId = modelId;
            // use default value if no "stats" provided
            if (stats == null)
            {
                this.Stats = true;
            }
            else
            {
                this.Stats = stats;
            }
            this.InitialWeights = initialWeights;
            this.Settings = settings;
            this.AssetSize = assetSize;
            // use default value if no "assetSizes" provided
            if (assetSizes == null)
            {
                this.AssetSizes = true;
            }
            else
            {
                this.AssetSizes = assetSizes;
            }
            // use default value if no "holdings" provided
            if (holdings == null)
            {
                this.Holdings = true;
            }
            else
            {
                this.Holdings = holdings;
            }
        }
        
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets Trades
        /// </summary>
        [DataMember(Name="trades", EmitDefaultValue=false)]
        public bool? Trades { get; set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name="model_id", EmitDefaultValue=false)]
        public Guid? ModelId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public bool? Stats { get; set; }

        /// <summary>
        /// Gets or Sets InitialWeights
        /// </summary>
        [DataMember(Name="initial_weights", EmitDefaultValue=false)]
        public Object InitialWeights { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public Settings Settings { get; set; }

        /// <summary>
        /// Gets or Sets AssetSize
        /// </summary>
        [DataMember(Name="asset_size", EmitDefaultValue=false)]
        public decimal? AssetSize { get; set; }

        /// <summary>
        /// Gets or Sets AssetSizes
        /// </summary>
        [DataMember(Name="asset_sizes", EmitDefaultValue=false)]
        public bool? AssetSizes { get; set; }

        /// <summary>
        /// Gets or Sets Holdings
        /// </summary>
        [DataMember(Name="holdings", EmitDefaultValue=false)]
        public bool? Holdings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BacktestRequest {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Trades: ").Append(Trades).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  InitialWeights: ").Append(InitialWeights).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  AssetSize: ").Append(AssetSize).Append("\n");
            sb.Append("  AssetSizes: ").Append(AssetSizes).Append("\n");
            sb.Append("  Holdings: ").Append(Holdings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BacktestRequest);
        }

        /// <summary>
        /// Returns true if BacktestRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BacktestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BacktestRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Trades == input.Trades ||
                    (this.Trades != null &&
                    this.Trades.Equals(input.Trades))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.InitialWeights == input.InitialWeights ||
                    (this.InitialWeights != null &&
                    this.InitialWeights.Equals(input.InitialWeights))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.AssetSize == input.AssetSize ||
                    (this.AssetSize != null &&
                    this.AssetSize.Equals(input.AssetSize))
                ) && 
                (
                    this.AssetSizes == input.AssetSizes ||
                    (this.AssetSizes != null &&
                    this.AssetSizes.Equals(input.AssetSizes))
                ) && 
                (
                    this.Holdings == input.Holdings ||
                    (this.Holdings != null &&
                    this.Holdings.Equals(input.Holdings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Trades != null)
                    hashCode = hashCode * 59 + this.Trades.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Stats != null)
                    hashCode = hashCode * 59 + this.Stats.GetHashCode();
                if (this.InitialWeights != null)
                    hashCode = hashCode * 59 + this.InitialWeights.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.AssetSize != null)
                    hashCode = hashCode * 59 + this.AssetSize.GetHashCode();
                if (this.AssetSizes != null)
                    hashCode = hashCode * 59 + this.AssetSizes.GetHashCode();
                if (this.Holdings != null)
                    hashCode = hashCode * 59 + this.Holdings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssetSize (decimal?) minimum
            if(this.AssetSize < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetSize, must be a value greater than or equal to 0.", new [] { "AssetSize" });
            }

            yield break;
        }
    }

}
