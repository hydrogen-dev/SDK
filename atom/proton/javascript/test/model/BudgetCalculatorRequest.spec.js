/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BudgetCalculatorRequest', function() {
      beforeEach(function() {
        instance = new HydrogenProtonApi.BudgetCalculatorRequest();
      });

      it('should create an instance of BudgetCalculatorRequest', function() {
        // TODO: update the code to test BudgetCalculatorRequest
        expect(instance).to.be.a(HydrogenProtonApi.BudgetCalculatorRequest);
      });

      it('should have the property scope (base name: "scope")', function() {
        // TODO: update the code to test the property scope
        expect(instance).to.have.property('scope');
        // expect(instance.scope).to.be(expectedValueLiteral);
      });

      it('should have the property currencyConversion (base name: "currency_conversion")', function() {
        // TODO: update the code to test the property currencyConversion
        expect(instance).to.have.property('currencyConversion');
        // expect(instance.currencyConversion).to.be(expectedValueLiteral);
      });

      it('should have the property relativeLookback (base name: "relative_lookback")', function() {
        // TODO: update the code to test the property relativeLookback
        expect(instance).to.have.property('relativeLookback');
        // expect(instance.relativeLookback).to.be(expectedValueLiteral);
      });

      it('should have the property budgetId (base name: "budget_id")', function() {
        // TODO: update the code to test the property budgetId
        expect(instance).to.have.property('budgetId');
        // expect(instance.budgetId).to.be(expectedValueLiteral);
      });

      it('should have the property asOfDate (base name: "as_of_date")', function() {
        // TODO: update the code to test the property asOfDate
        expect(instance).to.have.property('asOfDate');
        // expect(instance.asOfDate).to.be(expectedValueLiteral);
      });

      it('should have the property showAverageSpend (base name: "show_average_spend")', function() {
        // TODO: update the code to test the property showAverageSpend
        expect(instance).to.have.property('showAverageSpend');
        // expect(instance.showAverageSpend).to.be(expectedValueLiteral);
      });

      it('should have the property lookbackPeriods (base name: "lookback_periods")', function() {
        // TODO: update the code to test the property lookbackPeriods
        expect(instance).to.have.property('lookbackPeriods');
        // expect(instance.lookbackPeriods).to.be(expectedValueLiteral);
      });

      it('should have the property budgetDetails (base name: "budget_details")', function() {
        // TODO: update the code to test the property budgetDetails
        expect(instance).to.have.property('budgetDetails');
        // expect(instance.budgetDetails).to.be(expectedValueLiteral);
      });

      it('should have the property transactionStatusScope (base name: "transaction_status_scope")', function() {
        // TODO: update the code to test the property transactionStatusScope
        expect(instance).to.have.property('transactionStatusScope');
        // expect(instance.transactionStatusScope).to.be(expectedValueLiteral);
      });

      it('should have the property onlyCleansed (base name: "only_cleansed")', function() {
        // TODO: update the code to test the property onlyCleansed
        expect(instance).to.have.property('onlyCleansed');
        // expect(instance.onlyCleansed).to.be(expectedValueLiteral);
      });

      it('should have the property showBudgetTrack (base name: "show_budget_track")', function() {
        // TODO: update the code to test the property showBudgetTrack
        expect(instance).to.have.property('showBudgetTrack');
        // expect(instance.showBudgetTrack).to.be(expectedValueLiteral);
      });

    });
  });

}));
