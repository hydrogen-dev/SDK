/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.AvailableDateDoubleVO;
import com.hydrogen.nucleus.model.Business;
import org.threeten.bp.LocalDate;
import com.hydrogen.nucleus.model.PageBusiness;
import com.hydrogen.nucleus.model.PagePortfolioHoldingAgg;
import com.hydrogen.nucleus.model.PagePortfolioTransaction;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessApi {
    private ApiClient apiClient;

    public BusinessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBusinessUsingPost
     * @param businessRequest businessRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBusinessUsingPostCall(Business businessRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBusinessUsingPostValidateBeforeCall(Business businessRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessRequest' is set
        if (businessRequest == null) {
            throw new ApiException("Missing the required parameter 'businessRequest' when calling createBusinessUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBusinessUsingPostCall(businessRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a business
     * Create a new business, or register a new business.
     * @param businessRequest businessRequest (required)
     * @return Business
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Business createBusinessUsingPost(Business businessRequest) throws ApiException {
        ApiResponse<Business> resp = createBusinessUsingPostWithHttpInfo(businessRequest);
        return resp.getData();
    }

    /**
     * Create a business
     * Create a new business, or register a new business.
     * @param businessRequest businessRequest (required)
     * @return ApiResponse&lt;Business&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Business> createBusinessUsingPostWithHttpInfo(Business businessRequest) throws ApiException {
        com.squareup.okhttp.Call call = createBusinessUsingPostValidateBeforeCall(businessRequest, null, null);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a business (asynchronously)
     * Create a new business, or register a new business.
     * @param businessRequest businessRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBusinessUsingPostAsync(Business businessRequest, final ApiCallback<Business> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBusinessUsingPostValidateBeforeCall(businessRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBusinessUsingDelete
     * @param businessId UUID business_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessUsingDeleteCall(UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business/{business_id}"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBusinessUsingDeleteValidateBeforeCall(UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling deleteBusinessUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBusinessUsingDeleteCall(businessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a business
     * Permanently delete a business.
     * @param businessId UUID business_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBusinessUsingDelete(UUID businessId) throws ApiException {
        deleteBusinessUsingDeleteWithHttpInfo(businessId);
    }

    /**
     * Delete a business
     * Permanently delete a business.
     * @param businessId UUID business_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBusinessUsingDeleteWithHttpInfo(UUID businessId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBusinessUsingDeleteValidateBeforeCall(businessId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a business (asynchronously)
     * Permanently delete a business.
     * @param businessId UUID business_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBusinessUsingDeleteAsync(UUID businessId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBusinessUsingDeleteValidateBeforeCall(businessId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBusinessAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBusinessAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all business
     * Get details for all business.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageBusiness
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageBusiness getBusinessAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageBusiness> resp = getBusinessAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all business
     * Get details for all business.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageBusiness&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageBusiness> getBusinessAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageBusiness>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all business (asynchronously)
     * Get details for all business.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageBusiness> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageBusiness>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessAssetSizeUsingGet
     * @param businessId UUID business_id (required)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessAssetSizeUsingGetCall(UUID businessId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business/{business_id}/asset_size"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (excludeSubledger != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_subledger", excludeSubledger));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_type", sortType));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessAssetSizeUsingGetValidateBeforeCall(UUID businessId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling getBusinessAssetSizeUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessAssetSizeUsingGetCall(businessId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all business asset sizes
     * Get a list of asset sizes per date for a business.
     * @param businessId UUID business_id (required)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @return List&lt;AvailableDateDoubleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AvailableDateDoubleVO> getBusinessAssetSizeUsingGet(UUID businessId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        ApiResponse<List<AvailableDateDoubleVO>> resp = getBusinessAssetSizeUsingGetWithHttpInfo(businessId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
        return resp.getData();
    }

    /**
     * List all business asset sizes
     * Get a list of asset sizes per date for a business.
     * @param businessId UUID business_id (required)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @return ApiResponse&lt;List&lt;AvailableDateDoubleVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AvailableDateDoubleVO>> getBusinessAssetSizeUsingGetWithHttpInfo(UUID businessId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessAssetSizeUsingGetValidateBeforeCall(businessId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all business asset sizes (asynchronously)
     * Get a list of asset sizes per date for a business.
     * @param businessId UUID business_id (required)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger exclude_subledger (optional, default to false)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessAssetSizeUsingGetAsync(UUID businessId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ApiCallback<List<AvailableDateDoubleVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessAssetSizeUsingGetValidateBeforeCall(businessId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessClientTransactionAllUsingGet
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessClientTransactionAllUsingGetCall(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, String orderBy, Integer page, Integer size, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business/{business_id}/transaction"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessClientTransactionAllUsingGetValidateBeforeCall(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, String orderBy, Integer page, Integer size, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling getBusinessClientTransactionAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessClientTransactionAllUsingGetCall(businessId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all business transactions
     * Get the information for all transactions under all client registered with your business.
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return PagePortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioTransaction getBusinessClientTransactionAllUsingGet(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, String orderBy, Integer page, Integer size, String startDate) throws ApiException {
        ApiResponse<PagePortfolioTransaction> resp = getBusinessClientTransactionAllUsingGetWithHttpInfo(businessId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all business transactions
     * Get the information for all transactions under all client registered with your business.
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return ApiResponse&lt;PagePortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioTransaction> getBusinessClientTransactionAllUsingGetWithHttpInfo(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, String orderBy, Integer page, Integer size, String startDate) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessClientTransactionAllUsingGetValidateBeforeCall(businessId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all business transactions (asynchronously)
     * Get the information for all transactions under all client registered with your business.
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessClientTransactionAllUsingGetAsync(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, String orderBy, Integer page, Integer size, String startDate, final ApiCallback<PagePortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessClientTransactionAllUsingGetValidateBeforeCall(businessId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessHoldingUsingGet
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoldingUsingGetCall(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business/{business_id}/holding"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessHoldingUsingGetValidateBeforeCall(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling getBusinessHoldingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessHoldingUsingGetCall(businessId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all business holdings
     * Get a list of holdings for a business.
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return PagePortfolioHoldingAgg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioHoldingAgg getBusinessHoldingUsingGet(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate) throws ApiException {
        ApiResponse<PagePortfolioHoldingAgg> resp = getBusinessHoldingUsingGetWithHttpInfo(businessId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all business holdings
     * Get a list of holdings for a business.
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return ApiResponse&lt;PagePortfolioHoldingAgg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioHoldingAgg> getBusinessHoldingUsingGetWithHttpInfo(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessHoldingUsingGetValidateBeforeCall(businessId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingAgg>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all business holdings (asynchronously)
     * Get a list of holdings for a business.
     * @param businessId UUID business_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion Currency Code (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessHoldingUsingGetAsync(UUID businessId, Boolean ascending, String currencyConversion, String endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, String startDate, final ApiCallback<PagePortfolioHoldingAgg> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessHoldingUsingGetValidateBeforeCall(businessId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingAgg>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBusinessUsingGet
     * @param businessId UUID business_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBusinessUsingGetCall(UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business/{business_id}"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBusinessUsingGetValidateBeforeCall(UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling getBusinessUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBusinessUsingGetCall(businessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a business
     * Retrieve the information for a business.
     * @param businessId UUID business_id (required)
     * @return Business
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Business getBusinessUsingGet(UUID businessId) throws ApiException {
        ApiResponse<Business> resp = getBusinessUsingGetWithHttpInfo(businessId);
        return resp.getData();
    }

    /**
     * Retrieve a business
     * Retrieve the information for a business.
     * @param businessId UUID business_id (required)
     * @return ApiResponse&lt;Business&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Business> getBusinessUsingGetWithHttpInfo(UUID businessId) throws ApiException {
        com.squareup.okhttp.Call call = getBusinessUsingGetValidateBeforeCall(businessId, null, null);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a business (asynchronously)
     * Retrieve the information for a business.
     * @param businessId UUID business_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBusinessUsingGetAsync(UUID businessId, final ApiCallback<Business> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBusinessUsingGetValidateBeforeCall(businessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBusinessUsingPut
     * @param business business (required)
     * @param businessId UUID business_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBusinessUsingPutCall(Object business, UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = business;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business/{business_id}"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBusinessUsingPutValidateBeforeCall(Object business, UUID businessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'business' is set
        if (business == null) {
            throw new ApiException("Missing the required parameter 'business' when calling updateBusinessUsingPut(Async)");
        }
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling updateBusinessUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBusinessUsingPutCall(business, businessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a business
     * Update the information for a business.
     * @param business business (required)
     * @param businessId UUID business_id (required)
     * @return Business
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Business updateBusinessUsingPut(Object business, UUID businessId) throws ApiException {
        ApiResponse<Business> resp = updateBusinessUsingPutWithHttpInfo(business, businessId);
        return resp.getData();
    }

    /**
     * Update a business
     * Update the information for a business.
     * @param business business (required)
     * @param businessId UUID business_id (required)
     * @return ApiResponse&lt;Business&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Business> updateBusinessUsingPutWithHttpInfo(Object business, UUID businessId) throws ApiException {
        com.squareup.okhttp.Call call = updateBusinessUsingPutValidateBeforeCall(business, businessId, null, null);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a business (asynchronously)
     * Update the information for a business.
     * @param business business (required)
     * @param businessId UUID business_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBusinessUsingPutAsync(Object business, UUID businessId, final ApiCallback<Business> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBusinessUsingPutValidateBeforeCall(business, businessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Business>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
