/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import atom_api.ApiCallback;
import atom_api.ApiClient;
import atom_api.ApiException;
import atom_api.ApiResponse;
import atom_api.Configuration;
import atom_api.Pair;
import atom_api.ProgressRequestBody;
import atom_api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AccountAllocationPayload;
import io.swagger.client.model.AccountCreatePayload;
import io.swagger.client.model.AccountPermissionPayload;
import io.swagger.client.model.AccountRebalanceBuyOnlyOrderPayload;
import io.swagger.client.model.AccountRebalanceOrderPayload;
import io.swagger.client.model.AccountRebalanceSellOnlyOrderPayload;
import io.swagger.client.model.AccountStagePayload;
import io.swagger.client.model.AccountStatusPayload;
import io.swagger.client.model.AccountSubscribePayload;
import io.swagger.client.model.AccountTransactionResponse;
import io.swagger.client.model.AccountTypePayload;
import io.swagger.client.model.AggregationAccountBalancePayload;
import io.swagger.client.model.AggregationAccountPayload;
import io.swagger.client.model.AllocationAssetSizeResponse;
import io.swagger.client.model.AllocationCompositionPayload;
import io.swagger.client.model.AllocationHoldingsResponse;
import io.swagger.client.model.AllocationPayload;
import io.swagger.client.model.AllocationTransactionResponse;
import io.swagger.client.model.BankLinkPayload;
import io.swagger.client.model.BenchmarkAssetSizeResponse;
import io.swagger.client.model.BenchmarkPayload;
import io.swagger.client.model.BulkOrderAccountPayload;
import io.swagger.client.model.BulkOrderClientPayload;
import io.swagger.client.model.BulkOrderFirmPayload;
import io.swagger.client.model.BulkOrderFirmclientaccountResponse;
import io.swagger.client.model.ChangeModelCompositionResponse;
import io.swagger.client.model.ClientAssetSizeResponse;
import io.swagger.client.model.ClientHoldingsResponse;
import io.swagger.client.model.ClientHydroPayload;
import io.swagger.client.model.ClientPayload;
import io.swagger.client.model.ClientResponsePayload;
import io.swagger.client.model.ClientTransactionResponse;
import io.swagger.client.model.CreateAccountResponse;
import io.swagger.client.model.CreateAccountStatusResponse;
import io.swagger.client.model.CreateAggregationAccountBalanceResponse;
import io.swagger.client.model.CreateAggregationAccountResponse;
import io.swagger.client.model.CreateAllocationCompositionResponse;
import io.swagger.client.model.CreateAllocationResponse;
import io.swagger.client.model.CreateBankLinkResponse;
import io.swagger.client.model.CreateBenchmarkResponse;
import io.swagger.client.model.CreateClientHydroResponse;
import io.swagger.client.model.CreateClientResponse;
import io.swagger.client.model.CreateClientResponseResponse;
import io.swagger.client.model.CreateDecisionTreeResponse;
import io.swagger.client.model.CreateDepositRequestResponse;
import io.swagger.client.model.CreateFundingRequestResponse;
import io.swagger.client.model.CreateGoalResponse;
import io.swagger.client.model.CreateGoalTrackResponse;
import io.swagger.client.model.CreateModelAssetSizeResponse;
import io.swagger.client.model.CreateModelCommentResponse;
import io.swagger.client.model.CreateModelHoldingResponse;
import io.swagger.client.model.CreateModelResponse;
import io.swagger.client.model.CreateModelTransactionResponse;
import io.swagger.client.model.CreateNodeRelationshipResponse;
import io.swagger.client.model.CreateNodeResponse;
import io.swagger.client.model.CreateOrderResponse;
import io.swagger.client.model.CreateOrderStatusResponse;
import io.swagger.client.model.CreateOrderTrackResponse;
import io.swagger.client.model.CreatePortfolioAssetSizeResponse;
import io.swagger.client.model.CreatePortfolioCommentResponse;
import io.swagger.client.model.CreatePortfolioHoldingResponse;
import io.swagger.client.model.CreatePortfolioResponse;
import io.swagger.client.model.CreatePortfolioTransactionResponse;
import io.swagger.client.model.CreateQuestionnaireResponse;
import io.swagger.client.model.CreateScoreResponse;
import io.swagger.client.model.CreateSecurityExclusionResponse;
import io.swagger.client.model.CreateSecurityPriceResponse;
import io.swagger.client.model.CreateSecurityResponse;
import io.swagger.client.model.CreateTransactionCodeResponse;
import io.swagger.client.model.CreateTransferResponse;
import io.swagger.client.model.CreateWithdrawalResponse;
import io.swagger.client.model.DecisionTreePayload;
import io.swagger.client.model.DepositRequestPayload;
import io.swagger.client.model.FundingRequestPayload;
import io.swagger.client.model.GetAccountAllocationResponse;
import io.swagger.client.model.GetAccountAssetSizeResponse;
import io.swagger.client.model.GetAccountHoldingResponse;
import io.swagger.client.model.GetAccountPermissionsResponse;
import io.swagger.client.model.GetAccountResponse;
import io.swagger.client.model.GetAccountStageResponse;
import io.swagger.client.model.GetAccountStatusResponse;
import io.swagger.client.model.GetAccountTypeResponse;
import io.swagger.client.model.GetAccountTypeSubresponse;
import io.swagger.client.model.GetAggregationAccountBalanceResponse;
import io.swagger.client.model.GetAggregationAccountsResponse;
import io.swagger.client.model.GetAllocationCompositionResponse;
import io.swagger.client.model.GetAllocationResponse;
import io.swagger.client.model.GetBankLinkResponse;
import io.swagger.client.model.GetBenchmarkResponse;
import io.swagger.client.model.GetBulkOrderResponse;
import io.swagger.client.model.GetClientHydroResponse;
import io.swagger.client.model.GetClientResponse;
import io.swagger.client.model.GetClientResponseResponse;
import io.swagger.client.model.GetDecisionTreeResponse;
import io.swagger.client.model.GetDepositRequestResponse;
import io.swagger.client.model.GetFundingRequestResponse;
import io.swagger.client.model.GetGoalResponse;
import io.swagger.client.model.GetGoalTrackResponse;
import io.swagger.client.model.GetModelAssetSizeResponse;
import io.swagger.client.model.GetModelCommentResponse;
import io.swagger.client.model.GetModelHoldingResponse;
import io.swagger.client.model.GetModelResponse;
import io.swagger.client.model.GetModelTransactionResponse;
import io.swagger.client.model.GetNodeRelationshipResponse;
import io.swagger.client.model.GetNodeResponse;
import io.swagger.client.model.GetOrderResponse;
import io.swagger.client.model.GetOrderStatusResponse;
import io.swagger.client.model.GetOrderTrackResponse;
import io.swagger.client.model.GetPortfolioAssetSizeResponse;
import io.swagger.client.model.GetPortfolioCommentResponse;
import io.swagger.client.model.GetPortfolioHoldingResponse;
import io.swagger.client.model.GetPortfolioResponse;
import io.swagger.client.model.GetPortfolioTransactionResponse;
import io.swagger.client.model.GetQuestionnaireResponse;
import io.swagger.client.model.GetScoreResponse;
import io.swagger.client.model.GetSecurityExclusionResponse;
import io.swagger.client.model.GetSecurityPriceResponse;
import io.swagger.client.model.GetSecurityResponse;
import io.swagger.client.model.GetTransactionCodeResponse;
import io.swagger.client.model.GetTransferResponse;
import io.swagger.client.model.GetWithdrawalResponse;
import io.swagger.client.model.GoalAssetSizeResponse;
import io.swagger.client.model.GoalHoldingsResponse;
import io.swagger.client.model.GoalPayload;
import io.swagger.client.model.GoalTrackPayload;
import io.swagger.client.model.GoalTransactionsResponse;
import io.swagger.client.model.ModelAssetSizePayload;
import io.swagger.client.model.ModelCommentPayload;
import io.swagger.client.model.ModelCompositionPayload;
import io.swagger.client.model.ModelHoldingPayload;
import io.swagger.client.model.ModelPayload;
import io.swagger.client.model.ModelTransactionPayload;
import io.swagger.client.model.NodePayload;
import io.swagger.client.model.NodeRelationshipPayload;
import io.swagger.client.model.OrderPayload;
import io.swagger.client.model.OrderStatusPayload;
import io.swagger.client.model.OrderTrackPayload;
import io.swagger.client.model.PerformanceResponse;
import io.swagger.client.model.PortfolioAssetSizePayload;
import io.swagger.client.model.PortfolioCommentPayload;
import io.swagger.client.model.PortfolioHoldingPayload;
import io.swagger.client.model.PortfolioPayload;
import io.swagger.client.model.PortfolioRebalanceBuyOnlyOrderPayload;
import io.swagger.client.model.PortfolioRebalanceOrderPayload;
import io.swagger.client.model.PortfolioRebalanceSellOnlyOrderPayload;
import io.swagger.client.model.PortfolioTransactionPayload;
import io.swagger.client.model.QuestionnairePayload;
import io.swagger.client.model.ScorePayload;
import io.swagger.client.model.SecurityExclusionPayload;
import io.swagger.client.model.SecurityPayload;
import io.swagger.client.model.SecurityPricePayload;
import io.swagger.client.model.SellAllAccountPayload;
import io.swagger.client.model.SellAllAccountResponse;
import io.swagger.client.model.SellAllPortfolioPayload;
import io.swagger.client.model.SellAllPortfolioResponse;
import io.swagger.client.model.SpecificAccountAllocationResponse;
import io.swagger.client.model.SpecificAccountPermissionResponse;
import io.swagger.client.model.SpecificAccountResponse;
import io.swagger.client.model.SpecificAccountStageResponse;
import io.swagger.client.model.SpecificAccountStatusResponse;
import io.swagger.client.model.SpecificAggregationAccountBalanceResponse;
import io.swagger.client.model.SpecificAggregationAccountResponse;
import io.swagger.client.model.SpecificAllocationCompositionResponse;
import io.swagger.client.model.SpecificAllocationResponse;
import io.swagger.client.model.SpecificBankLinkResponse;
import io.swagger.client.model.SpecificBenchmarkResponse;
import io.swagger.client.model.SpecificClientHydroResponse;
import io.swagger.client.model.SpecificClientResponse;
import io.swagger.client.model.SpecificClientResponseResponse;
import io.swagger.client.model.SpecificDecisionTreeResponse;
import io.swagger.client.model.SpecificDepositRequestResponse;
import io.swagger.client.model.SpecificFundingRequestResponse;
import io.swagger.client.model.SpecificGoalResponse;
import io.swagger.client.model.SpecificGoalTrackResponse;
import io.swagger.client.model.SpecificModelAssetSizeResponse;
import io.swagger.client.model.SpecificModelCommentResponse;
import io.swagger.client.model.SpecificModelHoldingResponse;
import io.swagger.client.model.SpecificModelResponse;
import io.swagger.client.model.SpecificModelTransactionResponse;
import io.swagger.client.model.SpecificNodeRelationshipResponse;
import io.swagger.client.model.SpecificNodeResponse;
import io.swagger.client.model.SpecificOrderResponse;
import io.swagger.client.model.SpecificOrderStatusResponse;
import io.swagger.client.model.SpecificOrderTrackResponse;
import io.swagger.client.model.SpecificPortfolioAssetSizeResponse;
import io.swagger.client.model.SpecificPortfolioCommentResponse;
import io.swagger.client.model.SpecificPortfolioHoldingResponse;
import io.swagger.client.model.SpecificPortfolioResponse;
import io.swagger.client.model.SpecificPortfolioTransactionResponse;
import io.swagger.client.model.SpecificQuestionnaireResponse;
import io.swagger.client.model.SpecificScoreResponse;
import io.swagger.client.model.SpecificSecurityExclusionResponse;
import io.swagger.client.model.SpecificSecurityPriceResponse;
import io.swagger.client.model.SpecificSecurityResponse;
import io.swagger.client.model.SpecificTransactionCodeResponse;
import io.swagger.client.model.SpecificTransferResponse;
import io.swagger.client.model.SpecificWithdrawalResponse;
import io.swagger.client.model.SubscribeAccountResponse;
import io.swagger.client.model.TransactionCodePayload;
import io.swagger.client.model.TransferRequestPayload;
import java.util.UUID;
import io.swagger.client.model.WithdrawalPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NucleusApi {
    private ApiClient apiClient;

    public NucleusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NucleusApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAccount
     * @param accountId UUID of an account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account">Delete an account Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account
     * 
     * @param accountId UUID of an account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account">Delete an account Documentation</a>
     */
    public void deleteAccount(UUID accountId) throws ApiException {
        deleteAccountWithHttpInfo(accountId);
    }

    /**
     * Delete an account
     * 
     * @param accountId UUID of an account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account">Delete an account Documentation</a>
     */
    public ApiResponse<Void> deleteAccountWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountValidateBeforeCall(accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account">Delete an account Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountAsync(UUID accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountValidateBeforeCall(accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountAllocation
     * @param accountAllocationId UUID of an account allocation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-allocation">Delete an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountAllocationCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}"
            .replaceAll("\\{" + "account_allocation_id" + "\\}", apiClient.escapeString(accountAllocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountAllocationValidateBeforeCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountAllocationId' is set
        if (accountAllocationId == null) {
            throw new ApiException("Missing the required parameter 'accountAllocationId' when calling deleteAccountAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountAllocationCall(accountAllocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account allocation
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-allocation">Delete an account allocation Documentation</a>
     */
    public void deleteAccountAllocation(UUID accountAllocationId) throws ApiException {
        deleteAccountAllocationWithHttpInfo(accountAllocationId);
    }

    /**
     * Delete an account allocation
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-allocation">Delete an account allocation Documentation</a>
     */
    public ApiResponse<Void> deleteAccountAllocationWithHttpInfo(UUID accountAllocationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountAllocationValidateBeforeCall(accountAllocationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account allocation (asynchronously)
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-allocation">Delete an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountAllocationAsync(UUID accountAllocationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountAllocationValidateBeforeCall(accountAllocationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountPermission
     * @param accountId UUID of an account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account%E2%80%99s-permissions">Delete an account&#39;s permissions Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountPermissionCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountPermissionValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountPermissionCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account&#39;s permissions
     * 
     * @param accountId UUID of an account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account%E2%80%99s-permissions">Delete an account&#39;s permissions Documentation</a>
     */
    public void deleteAccountPermission(UUID accountId) throws ApiException {
        deleteAccountPermissionWithHttpInfo(accountId);
    }

    /**
     * Delete an account&#39;s permissions
     * 
     * @param accountId UUID of an account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account%E2%80%99s-permissions">Delete an account&#39;s permissions Documentation</a>
     */
    public ApiResponse<Void> deleteAccountPermissionWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountPermissionValidateBeforeCall(accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account&#39;s permissions (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account%E2%80%99s-permissions">Delete an account&#39;s permissions Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountPermissionAsync(UUID accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountPermissionValidateBeforeCall(accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountStage
     * @param stageId UUID of an account stage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-stage">Delete an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountStageCall(UUID stageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/stage/{stage_id}"
            .replaceAll("\\{" + "stage_id" + "\\}", apiClient.escapeString(stageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountStageValidateBeforeCall(UUID stageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stageId' is set
        if (stageId == null) {
            throw new ApiException("Missing the required parameter 'stageId' when calling deleteAccountStage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountStageCall(stageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account stage
     * 
     * @param stageId UUID of an account stage (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-stage">Delete an account stage Documentation</a>
     */
    public void deleteAccountStage(UUID stageId) throws ApiException {
        deleteAccountStageWithHttpInfo(stageId);
    }

    /**
     * Delete an account stage
     * 
     * @param stageId UUID of an account stage (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-stage">Delete an account stage Documentation</a>
     */
    public ApiResponse<Void> deleteAccountStageWithHttpInfo(UUID stageId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountStageValidateBeforeCall(stageId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account stage (asynchronously)
     * 
     * @param stageId UUID of an account stage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-stage">Delete an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountStageAsync(UUID stageId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountStageValidateBeforeCall(stageId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountStatus
     * @param accountStatusId UUID of an account status (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-status">Delete an account status Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountStatusCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status/{account_status_id}"
            .replaceAll("\\{" + "account_status_id" + "\\}", apiClient.escapeString(accountStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountStatusValidateBeforeCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountStatusId' is set
        if (accountStatusId == null) {
            throw new ApiException("Missing the required parameter 'accountStatusId' when calling deleteAccountStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountStatusCall(accountStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account status
     * 
     * @param accountStatusId UUID of an account status (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-status">Delete an account status Documentation</a>
     */
    public void deleteAccountStatus(UUID accountStatusId) throws ApiException {
        deleteAccountStatusWithHttpInfo(accountStatusId);
    }

    /**
     * Delete an account status
     * 
     * @param accountStatusId UUID of an account status (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-status">Delete an account status Documentation</a>
     */
    public ApiResponse<Void> deleteAccountStatusWithHttpInfo(UUID accountStatusId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountStatusValidateBeforeCall(accountStatusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account status (asynchronously)
     * 
     * @param accountStatusId UUID of an account status (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-status">Delete an account status Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountStatusAsync(UUID accountStatusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountStatusValidateBeforeCall(accountStatusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountType
     * @param accountTypeId UUID of an account type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-type">Delete an account type Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountTypeCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type/{account_type_id}"
            .replaceAll("\\{" + "account_type_id" + "\\}", apiClient.escapeString(accountTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountTypeValidateBeforeCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountTypeId' is set
        if (accountTypeId == null) {
            throw new ApiException("Missing the required parameter 'accountTypeId' when calling deleteAccountType(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountTypeCall(accountTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account type
     * 
     * @param accountTypeId UUID of an account type (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-type">Delete an account type Documentation</a>
     */
    public void deleteAccountType(UUID accountTypeId) throws ApiException {
        deleteAccountTypeWithHttpInfo(accountTypeId);
    }

    /**
     * Delete an account type
     * 
     * @param accountTypeId UUID of an account type (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-type">Delete an account type Documentation</a>
     */
    public ApiResponse<Void> deleteAccountTypeWithHttpInfo(UUID accountTypeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountTypeValidateBeforeCall(accountTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account type (asynchronously)
     * 
     * @param accountTypeId UUID of an account type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-account-type">Delete an account type Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAccountTypeAsync(UUID accountTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountTypeValidateBeforeCall(accountTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAggregationAccount
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account">Delete an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAggregationAccountCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}"
            .replaceAll("\\{" + "aggregation_account_id" + "\\}", apiClient.escapeString(aggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAggregationAccountValidateBeforeCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountId' is set
        if (aggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountId' when calling deleteAggregationAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAggregationAccountCall(aggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an aggregation account
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account">Delete an aggregation account Documentation</a>
     */
    public void deleteAggregationAccount(UUID aggregationAccountId) throws ApiException {
        deleteAggregationAccountWithHttpInfo(aggregationAccountId);
    }

    /**
     * Delete an aggregation account
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account">Delete an aggregation account Documentation</a>
     */
    public ApiResponse<Void> deleteAggregationAccountWithHttpInfo(UUID aggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAggregationAccountValidateBeforeCall(aggregationAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an aggregation account (asynchronously)
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account">Delete an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAggregationAccountAsync(UUID aggregationAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAggregationAccountValidateBeforeCall(aggregationAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAggregationAccountBalance
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account-balance">Delete an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAggregationAccountBalanceCall(UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}"
            .replaceAll("\\{" + "aggregation_account_balance_id" + "\\}", apiClient.escapeString(aggregationAccountBalanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAggregationAccountBalanceValidateBeforeCall(UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalanceId' is set
        if (aggregationAccountBalanceId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalanceId' when calling deleteAggregationAccountBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAggregationAccountBalanceCall(aggregationAccountBalanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an aggregation account balance
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account-balance">Delete an aggregation account balance Documentation</a>
     */
    public void deleteAggregationAccountBalance(UUID aggregationAccountBalanceId) throws ApiException {
        deleteAggregationAccountBalanceWithHttpInfo(aggregationAccountBalanceId);
    }

    /**
     * Delete an aggregation account balance
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account-balance">Delete an aggregation account balance Documentation</a>
     */
    public ApiResponse<Void> deleteAggregationAccountBalanceWithHttpInfo(UUID aggregationAccountBalanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAggregationAccountBalanceValidateBeforeCall(aggregationAccountBalanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an aggregation account balance (asynchronously)
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-aggregation-account-balance">Delete an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAggregationAccountBalanceAsync(UUID aggregationAccountBalanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAggregationAccountBalanceValidateBeforeCall(aggregationAccountBalanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAllocation
     * @param allocationId UUID of an allocation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation">Delete an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAllocationCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllocationValidateBeforeCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling deleteAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAllocationCall(allocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an allocation
     * 
     * @param allocationId UUID of an allocation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation">Delete an allocation Documentation</a>
     */
    public void deleteAllocation(UUID allocationId) throws ApiException {
        deleteAllocationWithHttpInfo(allocationId);
    }

    /**
     * Delete an allocation
     * 
     * @param allocationId UUID of an allocation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation">Delete an allocation Documentation</a>
     */
    public ApiResponse<Void> deleteAllocationWithHttpInfo(UUID allocationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllocationValidateBeforeCall(allocationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an allocation (asynchronously)
     * 
     * @param allocationId UUID of an allocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation">Delete an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAllocationAsync(UUID allocationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllocationValidateBeforeCall(allocationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAllocationComposition
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation-composition">Delete an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAllocationCompositionCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}"
            .replaceAll("\\{" + "allocation_composition_id" + "\\}", apiClient.escapeString(allocationCompositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllocationCompositionValidateBeforeCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationCompositionId' is set
        if (allocationCompositionId == null) {
            throw new ApiException("Missing the required parameter 'allocationCompositionId' when calling deleteAllocationComposition(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAllocationCompositionCall(allocationCompositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an allocation composition
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation-composition">Delete an allocation composition Documentation</a>
     */
    public void deleteAllocationComposition(UUID allocationCompositionId) throws ApiException {
        deleteAllocationCompositionWithHttpInfo(allocationCompositionId);
    }

    /**
     * Delete an allocation composition
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation-composition">Delete an allocation composition Documentation</a>
     */
    public ApiResponse<Void> deleteAllocationCompositionWithHttpInfo(UUID allocationCompositionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllocationCompositionValidateBeforeCall(allocationCompositionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an allocation composition (asynchronously)
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-allocation-composition">Delete an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call deleteAllocationCompositionAsync(UUID allocationCompositionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllocationCompositionValidateBeforeCall(allocationCompositionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBankLink
     * @param bankLinkId UUID of a bank link (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-bank-link">Delete a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call deleteBankLinkCall(UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link/{bank_link_id}"
            .replaceAll("\\{" + "bank_link_id" + "\\}", apiClient.escapeString(bankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBankLinkValidateBeforeCall(UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLinkId' is set
        if (bankLinkId == null) {
            throw new ApiException("Missing the required parameter 'bankLinkId' when calling deleteBankLink(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBankLinkCall(bankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a bank link
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-bank-link">Delete a bank link Documentation</a>
     */
    public void deleteBankLink(UUID bankLinkId) throws ApiException {
        deleteBankLinkWithHttpInfo(bankLinkId);
    }

    /**
     * Delete a bank link
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-bank-link">Delete a bank link Documentation</a>
     */
    public ApiResponse<Void> deleteBankLinkWithHttpInfo(UUID bankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBankLinkValidateBeforeCall(bankLinkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a bank link (asynchronously)
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-bank-link">Delete a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call deleteBankLinkAsync(UUID bankLinkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBankLinkValidateBeforeCall(bankLinkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteBenchmark
     * @param benchmarkId UUID of a benchmark (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-benchmark">Delete a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call deleteBenchmarkCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBenchmarkValidateBeforeCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling deleteBenchmark(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBenchmarkCall(benchmarkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a benchmark
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-benchmark">Delete a benchmark Documentation</a>
     */
    public void deleteBenchmark(UUID benchmarkId) throws ApiException {
        deleteBenchmarkWithHttpInfo(benchmarkId);
    }

    /**
     * Delete a benchmark
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-benchmark">Delete a benchmark Documentation</a>
     */
    public ApiResponse<Void> deleteBenchmarkWithHttpInfo(UUID benchmarkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBenchmarkValidateBeforeCall(benchmarkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a benchmark (asynchronously)
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-benchmark">Delete a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call deleteBenchmarkAsync(UUID benchmarkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBenchmarkValidateBeforeCall(benchmarkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteClient
     * @param clientId UUID of a client (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client">Delete a client Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientValidateBeforeCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteClient(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a client
     * 
     * @param clientId UUID of a client (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client">Delete a client Documentation</a>
     */
    public void deleteClient(UUID clientId) throws ApiException {
        deleteClientWithHttpInfo(clientId);
    }

    /**
     * Delete a client
     * 
     * @param clientId UUID of a client (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client">Delete a client Documentation</a>
     */
    public ApiResponse<Void> deleteClientWithHttpInfo(UUID clientId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientValidateBeforeCall(clientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a client (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client">Delete a client Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientAsync(UUID clientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientValidateBeforeCall(clientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteClientHydro
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-hydro-relationship">Delete a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientHydroCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_hydro/{client_hydro_id}"
            .replaceAll("\\{" + "client_hydro_id" + "\\}", apiClient.escapeString(clientHydroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientHydroValidateBeforeCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientHydroId' is set
        if (clientHydroId == null) {
            throw new ApiException("Missing the required parameter 'clientHydroId' when calling deleteClientHydro(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientHydroCall(clientHydroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a client-hydro relationship
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-hydro-relationship">Delete a client-hydro relationship Documentation</a>
     */
    public void deleteClientHydro(UUID clientHydroId) throws ApiException {
        deleteClientHydroWithHttpInfo(clientHydroId);
    }

    /**
     * Delete a client-hydro relationship
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-hydro-relationship">Delete a client-hydro relationship Documentation</a>
     */
    public ApiResponse<Void> deleteClientHydroWithHttpInfo(UUID clientHydroId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientHydroValidateBeforeCall(clientHydroId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a client-hydro relationship (asynchronously)
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-hydro-relationship">Delete a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientHydroAsync(UUID clientHydroId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientHydroValidateBeforeCall(clientHydroId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteClientResponse
     * @param clientResponseId UUID of a client response (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-response">Delete a client response Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientResponseCall(UUID clientResponseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_response/{client_response_id}"
            .replaceAll("\\{" + "client_response_id" + "\\}", apiClient.escapeString(clientResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientResponseValidateBeforeCall(UUID clientResponseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientResponseId' is set
        if (clientResponseId == null) {
            throw new ApiException("Missing the required parameter 'clientResponseId' when calling deleteClientResponse(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientResponseCall(clientResponseId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a client response
     * 
     * @param clientResponseId UUID of a client response (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-response">Delete a client response Documentation</a>
     */
    public void deleteClientResponse(UUID clientResponseId) throws ApiException {
        deleteClientResponseWithHttpInfo(clientResponseId);
    }

    /**
     * Delete a client response
     * 
     * @param clientResponseId UUID of a client response (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-response">Delete a client response Documentation</a>
     */
    public ApiResponse<Void> deleteClientResponseWithHttpInfo(UUID clientResponseId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientResponseValidateBeforeCall(clientResponseId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a client response (asynchronously)
     * 
     * @param clientResponseId UUID of a client response (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-client-response">Delete a client response Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientResponseAsync(UUID clientResponseId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientResponseValidateBeforeCall(clientResponseId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDecisionTree
     * @param decisionTreeId UUID of a decision tree (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-decision-tree">Delete a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call deleteDecisionTreeCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}"
            .replaceAll("\\{" + "decision_tree_id" + "\\}", apiClient.escapeString(decisionTreeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDecisionTreeValidateBeforeCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTreeId' is set
        if (decisionTreeId == null) {
            throw new ApiException("Missing the required parameter 'decisionTreeId' when calling deleteDecisionTree(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDecisionTreeCall(decisionTreeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a decision tree
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-decision-tree">Delete a decision tree Documentation</a>
     */
    public void deleteDecisionTree(UUID decisionTreeId) throws ApiException {
        deleteDecisionTreeWithHttpInfo(decisionTreeId);
    }

    /**
     * Delete a decision tree
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-decision-tree">Delete a decision tree Documentation</a>
     */
    public ApiResponse<Void> deleteDecisionTreeWithHttpInfo(UUID decisionTreeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDecisionTreeValidateBeforeCall(decisionTreeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a decision tree (asynchronously)
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-decision-tree">Delete a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call deleteDecisionTreeAsync(UUID decisionTreeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDecisionTreeValidateBeforeCall(decisionTreeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDepositRequest
     * @param depositId UUID of a deposit record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-deposit-request">Delete a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteDepositRequestCall(UUID depositId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/deposit/{deposit_id}"
            .replaceAll("\\{" + "deposit_id" + "\\}", apiClient.escapeString(depositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDepositRequestValidateBeforeCall(UUID depositId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'depositId' is set
        if (depositId == null) {
            throw new ApiException("Missing the required parameter 'depositId' when calling deleteDepositRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDepositRequestCall(depositId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a deposit request
     * 
     * @param depositId UUID of a deposit record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-deposit-request">Delete a deposit request Documentation</a>
     */
    public void deleteDepositRequest(UUID depositId) throws ApiException {
        deleteDepositRequestWithHttpInfo(depositId);
    }

    /**
     * Delete a deposit request
     * 
     * @param depositId UUID of a deposit record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-deposit-request">Delete a deposit request Documentation</a>
     */
    public ApiResponse<Void> deleteDepositRequestWithHttpInfo(UUID depositId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDepositRequestValidateBeforeCall(depositId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a deposit request (asynchronously)
     * 
     * @param depositId UUID of a deposit record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-deposit-request">Delete a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteDepositRequestAsync(UUID depositId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDepositRequestValidateBeforeCall(depositId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFundingRequest
     * @param fundingId UUID of a funding record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-funding-request">Delete a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteFundingRequestCall(UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding/{funding_id}"
            .replaceAll("\\{" + "funding_id" + "\\}", apiClient.escapeString(fundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFundingRequestValidateBeforeCall(UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingId' is set
        if (fundingId == null) {
            throw new ApiException("Missing the required parameter 'fundingId' when calling deleteFundingRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFundingRequestCall(fundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a funding request
     * 
     * @param fundingId UUID of a funding record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-funding-request">Delete a funding request Documentation</a>
     */
    public void deleteFundingRequest(UUID fundingId) throws ApiException {
        deleteFundingRequestWithHttpInfo(fundingId);
    }

    /**
     * Delete a funding request
     * 
     * @param fundingId UUID of a funding record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-funding-request">Delete a funding request Documentation</a>
     */
    public ApiResponse<Void> deleteFundingRequestWithHttpInfo(UUID fundingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFundingRequestValidateBeforeCall(fundingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a funding request (asynchronously)
     * 
     * @param fundingId UUID of a funding record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-funding-request">Delete a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteFundingRequestAsync(UUID fundingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFundingRequestValidateBeforeCall(fundingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGoal
     * @param goalId UUID of a goal (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal">Delete a goal Documentation</a>
     */
    public com.squareup.okhttp.Call deleteGoalCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal/{goal_id}"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGoalValidateBeforeCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling deleteGoal(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGoalCall(goalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a goal
     * 
     * @param goalId UUID of a goal (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal">Delete a goal Documentation</a>
     */
    public void deleteGoal(UUID goalId) throws ApiException {
        deleteGoalWithHttpInfo(goalId);
    }

    /**
     * Delete a goal
     * 
     * @param goalId UUID of a goal (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal">Delete a goal Documentation</a>
     */
    public ApiResponse<Void> deleteGoalWithHttpInfo(UUID goalId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGoalValidateBeforeCall(goalId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a goal (asynchronously)
     * 
     * @param goalId UUID of a goal (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal">Delete a goal Documentation</a>
     */
    public com.squareup.okhttp.Call deleteGoalAsync(UUID goalId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGoalValidateBeforeCall(goalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteGoalTrackRecord
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal-track-record">Delete a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteGoalTrackRecordCall(UUID goalTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal_track/{goal_track_id}"
            .replaceAll("\\{" + "goal_track_id" + "\\}", apiClient.escapeString(goalTrackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGoalTrackRecordValidateBeforeCall(UUID goalTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalTrackId' is set
        if (goalTrackId == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId' when calling deleteGoalTrackRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGoalTrackRecordCall(goalTrackId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a goal track record
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal-track-record">Delete a goal track record Documentation</a>
     */
    public void deleteGoalTrackRecord(UUID goalTrackId) throws ApiException {
        deleteGoalTrackRecordWithHttpInfo(goalTrackId);
    }

    /**
     * Delete a goal track record
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal-track-record">Delete a goal track record Documentation</a>
     */
    public ApiResponse<Void> deleteGoalTrackRecordWithHttpInfo(UUID goalTrackId) throws ApiException {
        com.squareup.okhttp.Call call = deleteGoalTrackRecordValidateBeforeCall(goalTrackId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a goal track record (asynchronously)
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-goal-track-record">Delete a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteGoalTrackRecordAsync(UUID goalTrackId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGoalTrackRecordValidateBeforeCall(goalTrackId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteModel
     * @param modelId UUID of a model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model">Delete a model Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelCall(UUID modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model/{model_id}"
            .replaceAll("\\{" + "model_id" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelValidateBeforeCall(UUID modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deleteModel(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelCall(modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a model
     * 
     * @param modelId UUID of a model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model">Delete a model Documentation</a>
     */
    public void deleteModel(UUID modelId) throws ApiException {
        deleteModelWithHttpInfo(modelId);
    }

    /**
     * Delete a model
     * 
     * @param modelId UUID of a model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model">Delete a model Documentation</a>
     */
    public ApiResponse<Void> deleteModelWithHttpInfo(UUID modelId) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelValidateBeforeCall(modelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a model (asynchronously)
     * 
     * @param modelId UUID of a model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model">Delete a model Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelAsync(UUID modelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelValidateBeforeCall(modelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteModelAssetSize
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-asset-size">Delete a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelAssetSizeCall(UUID modelAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}"
            .replaceAll("\\{" + "model_asset_size_id" + "\\}", apiClient.escapeString(modelAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelAssetSizeValidateBeforeCall(UUID modelAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelAssetSizeId' is set
        if (modelAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'modelAssetSizeId' when calling deleteModelAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelAssetSizeCall(modelAssetSizeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a model asset size
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-asset-size">Delete a model asset size Documentation</a>
     */
    public void deleteModelAssetSize(UUID modelAssetSizeId) throws ApiException {
        deleteModelAssetSizeWithHttpInfo(modelAssetSizeId);
    }

    /**
     * Delete a model asset size
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-asset-size">Delete a model asset size Documentation</a>
     */
    public ApiResponse<Void> deleteModelAssetSizeWithHttpInfo(UUID modelAssetSizeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelAssetSizeValidateBeforeCall(modelAssetSizeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a model asset size (asynchronously)
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-asset-size">Delete a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelAssetSizeAsync(UUID modelAssetSizeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelAssetSizeValidateBeforeCall(modelAssetSizeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteModelComment
     * @param modelCommentId UUID of a model comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-commentary">Delete a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelCommentCall(UUID modelCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_comment/{model_comment_id}"
            .replaceAll("\\{" + "model_comment_id" + "\\}", apiClient.escapeString(modelCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelCommentValidateBeforeCall(UUID modelCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelCommentId' is set
        if (modelCommentId == null) {
            throw new ApiException("Missing the required parameter 'modelCommentId' when calling deleteModelComment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelCommentCall(modelCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a model commentary
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-commentary">Delete a model commentary Documentation</a>
     */
    public void deleteModelComment(UUID modelCommentId) throws ApiException {
        deleteModelCommentWithHttpInfo(modelCommentId);
    }

    /**
     * Delete a model commentary
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-commentary">Delete a model commentary Documentation</a>
     */
    public ApiResponse<Void> deleteModelCommentWithHttpInfo(UUID modelCommentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelCommentValidateBeforeCall(modelCommentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a model commentary (asynchronously)
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-commentary">Delete a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelCommentAsync(UUID modelCommentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelCommentValidateBeforeCall(modelCommentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteModelHolding
     * @param modelHoldingId UUID of a model holding record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-holding">Delete a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelHoldingCall(UUID modelHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_holding/{model_holding_id}"
            .replaceAll("\\{" + "model_holding_id" + "\\}", apiClient.escapeString(modelHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelHoldingValidateBeforeCall(UUID modelHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHoldingId' is set
        if (modelHoldingId == null) {
            throw new ApiException("Missing the required parameter 'modelHoldingId' when calling deleteModelHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelHoldingCall(modelHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a model holding
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-holding">Delete a model holding Documentation</a>
     */
    public void deleteModelHolding(UUID modelHoldingId) throws ApiException {
        deleteModelHoldingWithHttpInfo(modelHoldingId);
    }

    /**
     * Delete a model holding
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-holding">Delete a model holding Documentation</a>
     */
    public ApiResponse<Void> deleteModelHoldingWithHttpInfo(UUID modelHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelHoldingValidateBeforeCall(modelHoldingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a model holding (asynchronously)
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-holding">Delete a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelHoldingAsync(UUID modelHoldingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelHoldingValidateBeforeCall(modelHoldingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteModelTransaction
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-transaction">Delete a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelTransactionCall(UUID modelTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}"
            .replaceAll("\\{" + "model_transaction_id" + "\\}", apiClient.escapeString(modelTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModelTransactionValidateBeforeCall(UUID modelTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelTransactionId' is set
        if (modelTransactionId == null) {
            throw new ApiException("Missing the required parameter 'modelTransactionId' when calling deleteModelTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModelTransactionCall(modelTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a model transaction
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-transaction">Delete a model transaction Documentation</a>
     */
    public void deleteModelTransaction(UUID modelTransactionId) throws ApiException {
        deleteModelTransactionWithHttpInfo(modelTransactionId);
    }

    /**
     * Delete a model transaction
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-transaction">Delete a model transaction Documentation</a>
     */
    public ApiResponse<Void> deleteModelTransactionWithHttpInfo(UUID modelTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteModelTransactionValidateBeforeCall(modelTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a model transaction (asynchronously)
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-model-transaction">Delete a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call deleteModelTransactionAsync(UUID modelTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModelTransactionValidateBeforeCall(modelTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNode
     * @param nodeId UUID of a node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node">Delete a node Documentation</a>
     */
    public com.squareup.okhttp.Call deleteNodeCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node/{node_id}"
            .replaceAll("\\{" + "node_id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNodeValidateBeforeCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteNode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNodeCall(nodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a node
     * 
     * @param nodeId UUID of a node (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node">Delete a node Documentation</a>
     */
    public void deleteNode(UUID nodeId) throws ApiException {
        deleteNodeWithHttpInfo(nodeId);
    }

    /**
     * Delete a node
     * 
     * @param nodeId UUID of a node (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node">Delete a node Documentation</a>
     */
    public ApiResponse<Void> deleteNodeWithHttpInfo(UUID nodeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNodeValidateBeforeCall(nodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a node (asynchronously)
     * 
     * @param nodeId UUID of a node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node">Delete a node Documentation</a>
     */
    public com.squareup.okhttp.Call deleteNodeAsync(UUID nodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNodeValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNodeRelationship
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node-relationship">Delete a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call deleteNodeRelationshipCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}"
            .replaceAll("\\{" + "node_relationship_id" + "\\}", apiClient.escapeString(nodeRelationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNodeRelationshipValidateBeforeCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeRelationshipId' is set
        if (nodeRelationshipId == null) {
            throw new ApiException("Missing the required parameter 'nodeRelationshipId' when calling deleteNodeRelationship(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNodeRelationshipCall(nodeRelationshipId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a node relationship
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node-relationship">Delete a node relationship Documentation</a>
     */
    public void deleteNodeRelationship(UUID nodeRelationshipId) throws ApiException {
        deleteNodeRelationshipWithHttpInfo(nodeRelationshipId);
    }

    /**
     * Delete a node relationship
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node-relationship">Delete a node relationship Documentation</a>
     */
    public ApiResponse<Void> deleteNodeRelationshipWithHttpInfo(UUID nodeRelationshipId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNodeRelationshipValidateBeforeCall(nodeRelationshipId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a node relationship (asynchronously)
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-node-relationship">Delete a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call deleteNodeRelationshipAsync(UUID nodeRelationshipId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNodeRelationshipValidateBeforeCall(nodeRelationshipId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderRecord
     * @param orderId UUID of an order record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-record">Delete an order record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteOrderRecordCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderRecordValidateBeforeCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrderRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderRecordCall(orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an order record
     * 
     * @param orderId UUID of an order record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-record">Delete an order record Documentation</a>
     */
    public void deleteOrderRecord(UUID orderId) throws ApiException {
        deleteOrderRecordWithHttpInfo(orderId);
    }

    /**
     * Delete an order record
     * 
     * @param orderId UUID of an order record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-record">Delete an order record Documentation</a>
     */
    public ApiResponse<Void> deleteOrderRecordWithHttpInfo(UUID orderId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderRecordValidateBeforeCall(orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an order record (asynchronously)
     * 
     * @param orderId UUID of an order record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-record">Delete an order record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteOrderRecordAsync(UUID orderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderRecordValidateBeforeCall(orderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderStatus
     * @param orderStatusId UUID of an order status record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-status">Delete an order status Documentation</a>
     */
    public com.squareup.okhttp.Call deleteOrderStatusCall(UUID orderStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_status/{order_status_id}"
            .replaceAll("\\{" + "order_status_id" + "\\}", apiClient.escapeString(orderStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderStatusValidateBeforeCall(UUID orderStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderStatusId' is set
        if (orderStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderStatusId' when calling deleteOrderStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderStatusCall(orderStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an order status
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-status">Delete an order status Documentation</a>
     */
    public void deleteOrderStatus(UUID orderStatusId) throws ApiException {
        deleteOrderStatusWithHttpInfo(orderStatusId);
    }

    /**
     * Delete an order status
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-status">Delete an order status Documentation</a>
     */
    public ApiResponse<Void> deleteOrderStatusWithHttpInfo(UUID orderStatusId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderStatusValidateBeforeCall(orderStatusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an order status (asynchronously)
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-status">Delete an order status Documentation</a>
     */
    public com.squareup.okhttp.Call deleteOrderStatusAsync(UUID orderStatusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderStatusValidateBeforeCall(orderStatusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOrderTrackingRecord
     * @param orderTrackId UUID of an order tracking record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-tracking-record">Delete an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteOrderTrackingRecordCall(UUID orderTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_track/{order_track_id}"
            .replaceAll("\\{" + "order_track_id" + "\\}", apiClient.escapeString(orderTrackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderTrackingRecordValidateBeforeCall(UUID orderTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderTrackId' is set
        if (orderTrackId == null) {
            throw new ApiException("Missing the required parameter 'orderTrackId' when calling deleteOrderTrackingRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOrderTrackingRecordCall(orderTrackId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an order tracking record
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-tracking-record">Delete an order tracking record Documentation</a>
     */
    public void deleteOrderTrackingRecord(UUID orderTrackId) throws ApiException {
        deleteOrderTrackingRecordWithHttpInfo(orderTrackId);
    }

    /**
     * Delete an order tracking record
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-tracking-record">Delete an order tracking record Documentation</a>
     */
    public ApiResponse<Void> deleteOrderTrackingRecordWithHttpInfo(UUID orderTrackId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderTrackingRecordValidateBeforeCall(orderTrackId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an order tracking record (asynchronously)
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-an-order-tracking-record">Delete an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteOrderTrackingRecordAsync(UUID orderTrackId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderTrackingRecordValidateBeforeCall(orderTrackId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolio
     * @param portfolioId UUID of a portfolio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio">Delete a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioValidateBeforeCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling deletePortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio">Delete a portfolio Documentation</a>
     */
    public void deletePortfolio(UUID portfolioId) throws ApiException {
        deletePortfolioWithHttpInfo(portfolioId);
    }

    /**
     * Delete a portfolio
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio">Delete a portfolio Documentation</a>
     */
    public ApiResponse<Void> deletePortfolioWithHttpInfo(UUID portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioValidateBeforeCall(portfolioId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio">Delete a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioAsync(UUID portfolioId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioAssetSize
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-asset-size">Delete a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioAssetSizeCall(UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}"
            .replaceAll("\\{" + "portfolio_asset_size_id" + "\\}", apiClient.escapeString(portfolioAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioAssetSizeValidateBeforeCall(UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioAssetSizeId' is set
        if (portfolioAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSizeId' when calling deletePortfolioAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioAssetSizeCall(portfolioAssetSizeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio asset size
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-asset-size">Delete a portfolio asset size Documentation</a>
     */
    public void deletePortfolioAssetSize(UUID portfolioAssetSizeId) throws ApiException {
        deletePortfolioAssetSizeWithHttpInfo(portfolioAssetSizeId);
    }

    /**
     * Delete a portfolio asset size
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-asset-size">Delete a portfolio asset size Documentation</a>
     */
    public ApiResponse<Void> deletePortfolioAssetSizeWithHttpInfo(UUID portfolioAssetSizeId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioAssetSizeValidateBeforeCall(portfolioAssetSizeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio asset size (asynchronously)
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-asset-size">Delete a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioAssetSizeAsync(UUID portfolioAssetSizeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioAssetSizeValidateBeforeCall(portfolioAssetSizeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioComment
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-commentary">Delete a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioCommentCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}"
            .replaceAll("\\{" + "portfolio_comment_id" + "\\}", apiClient.escapeString(portfolioCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioCommentValidateBeforeCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioCommentId' is set
        if (portfolioCommentId == null) {
            throw new ApiException("Missing the required parameter 'portfolioCommentId' when calling deletePortfolioComment(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioCommentCall(portfolioCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio commentary
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-commentary">Delete a portfolio commentary Documentation</a>
     */
    public void deletePortfolioComment(UUID portfolioCommentId) throws ApiException {
        deletePortfolioCommentWithHttpInfo(portfolioCommentId);
    }

    /**
     * Delete a portfolio commentary
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-commentary">Delete a portfolio commentary Documentation</a>
     */
    public ApiResponse<Void> deletePortfolioCommentWithHttpInfo(UUID portfolioCommentId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioCommentValidateBeforeCall(portfolioCommentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio commentary (asynchronously)
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-commentary">Delete a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioCommentAsync(UUID portfolioCommentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioCommentValidateBeforeCall(portfolioCommentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioHolding
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-holding">Delete a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioHoldingCall(UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}"
            .replaceAll("\\{" + "portfolio_holding_id" + "\\}", apiClient.escapeString(portfolioHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioHoldingValidateBeforeCall(UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioHoldingId' is set
        if (portfolioHoldingId == null) {
            throw new ApiException("Missing the required parameter 'portfolioHoldingId' when calling deletePortfolioHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioHoldingCall(portfolioHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio holding
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-holding">Delete a portfolio holding Documentation</a>
     */
    public void deletePortfolioHolding(UUID portfolioHoldingId) throws ApiException {
        deletePortfolioHoldingWithHttpInfo(portfolioHoldingId);
    }

    /**
     * Delete a portfolio holding
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-holding">Delete a portfolio holding Documentation</a>
     */
    public ApiResponse<Void> deletePortfolioHoldingWithHttpInfo(UUID portfolioHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioHoldingValidateBeforeCall(portfolioHoldingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio holding (asynchronously)
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-holding">Delete a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioHoldingAsync(UUID portfolioHoldingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioHoldingValidateBeforeCall(portfolioHoldingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioTransaction
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-transaction">Delete a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioTransactionCall(UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}"
            .replaceAll("\\{" + "portfolio_transaction_id" + "\\}", apiClient.escapeString(portfolioTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioTransactionValidateBeforeCall(UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioTransactionId' is set
        if (portfolioTransactionId == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionId' when calling deletePortfolioTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioTransactionCall(portfolioTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio transaction
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-transaction">Delete a portfolio transaction Documentation</a>
     */
    public void deletePortfolioTransaction(UUID portfolioTransactionId) throws ApiException {
        deletePortfolioTransactionWithHttpInfo(portfolioTransactionId);
    }

    /**
     * Delete a portfolio transaction
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-transaction">Delete a portfolio transaction Documentation</a>
     */
    public ApiResponse<Void> deletePortfolioTransactionWithHttpInfo(UUID portfolioTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioTransactionValidateBeforeCall(portfolioTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio transaction (asynchronously)
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-portfolio-transaction">Delete a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call deletePortfolioTransactionAsync(UUID portfolioTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioTransactionValidateBeforeCall(portfolioTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuestionnaire
     * @param questionnaireId UUID of a questionnaire (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-questionnaire">Delete a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call deleteQuestionnaireCall(UUID questionnaireId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}"
            .replaceAll("\\{" + "questionnaire_id" + "\\}", apiClient.escapeString(questionnaireId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuestionnaireValidateBeforeCall(UUID questionnaireId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionnaireId' is set
        if (questionnaireId == null) {
            throw new ApiException("Missing the required parameter 'questionnaireId' when calling deleteQuestionnaire(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuestionnaireCall(questionnaireId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a questionnaire
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-questionnaire">Delete a questionnaire Documentation</a>
     */
    public void deleteQuestionnaire(UUID questionnaireId) throws ApiException {
        deleteQuestionnaireWithHttpInfo(questionnaireId);
    }

    /**
     * Delete a questionnaire
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-questionnaire">Delete a questionnaire Documentation</a>
     */
    public ApiResponse<Void> deleteQuestionnaireWithHttpInfo(UUID questionnaireId) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuestionnaireValidateBeforeCall(questionnaireId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a questionnaire (asynchronously)
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-questionnaire">Delete a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call deleteQuestionnaireAsync(UUID questionnaireId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuestionnaireValidateBeforeCall(questionnaireId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteScore
     * @param scoreId UUID of a score record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-score">Delete a score Documentation</a>
     */
    public com.squareup.okhttp.Call deleteScoreCall(UUID scoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/score/{score_id}"
            .replaceAll("\\{" + "score_id" + "\\}", apiClient.escapeString(scoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteScoreValidateBeforeCall(UUID scoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scoreId' is set
        if (scoreId == null) {
            throw new ApiException("Missing the required parameter 'scoreId' when calling deleteScore(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteScoreCall(scoreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a score
     * 
     * @param scoreId UUID of a score record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-score">Delete a score Documentation</a>
     */
    public void deleteScore(UUID scoreId) throws ApiException {
        deleteScoreWithHttpInfo(scoreId);
    }

    /**
     * Delete a score
     * 
     * @param scoreId UUID of a score record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-score">Delete a score Documentation</a>
     */
    public ApiResponse<Void> deleteScoreWithHttpInfo(UUID scoreId) throws ApiException {
        com.squareup.okhttp.Call call = deleteScoreValidateBeforeCall(scoreId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a score (asynchronously)
     * 
     * @param scoreId UUID of a score record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-score">Delete a score Documentation</a>
     */
    public com.squareup.okhttp.Call deleteScoreAsync(UUID scoreId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteScoreValidateBeforeCall(scoreId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSecurity
     * @param securityId UUID of a security (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security">Delete a security Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSecurityCall(UUID securityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security/{security_id}"
            .replaceAll("\\{" + "security_id" + "\\}", apiClient.escapeString(securityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSecurityValidateBeforeCall(UUID securityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityId' is set
        if (securityId == null) {
            throw new ApiException("Missing the required parameter 'securityId' when calling deleteSecurity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSecurityCall(securityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a security
     * 
     * @param securityId UUID of a security (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security">Delete a security Documentation</a>
     */
    public void deleteSecurity(UUID securityId) throws ApiException {
        deleteSecurityWithHttpInfo(securityId);
    }

    /**
     * Delete a security
     * 
     * @param securityId UUID of a security (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security">Delete a security Documentation</a>
     */
    public ApiResponse<Void> deleteSecurityWithHttpInfo(UUID securityId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSecurityValidateBeforeCall(securityId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a security (asynchronously)
     * 
     * @param securityId UUID of a security (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security">Delete a security Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSecurityAsync(UUID securityId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSecurityValidateBeforeCall(securityId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSecurityExclusion
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-exclusion">Delete a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSecurityExclusionCall(UUID securityExclusionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}"
            .replaceAll("\\{" + "security_exclusion_id" + "\\}", apiClient.escapeString(securityExclusionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSecurityExclusionValidateBeforeCall(UUID securityExclusionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityExclusionId' is set
        if (securityExclusionId == null) {
            throw new ApiException("Missing the required parameter 'securityExclusionId' when calling deleteSecurityExclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSecurityExclusionCall(securityExclusionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a security exclusion
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-exclusion">Delete a security exclusion Documentation</a>
     */
    public void deleteSecurityExclusion(UUID securityExclusionId) throws ApiException {
        deleteSecurityExclusionWithHttpInfo(securityExclusionId);
    }

    /**
     * Delete a security exclusion
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-exclusion">Delete a security exclusion Documentation</a>
     */
    public ApiResponse<Void> deleteSecurityExclusionWithHttpInfo(UUID securityExclusionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSecurityExclusionValidateBeforeCall(securityExclusionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a security exclusion (asynchronously)
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-exclusion">Delete a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSecurityExclusionAsync(UUID securityExclusionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSecurityExclusionValidateBeforeCall(securityExclusionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSecurityPrice
     * @param securityPriceId UUID of a security price record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-price">Delete a security price Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSecurityPriceCall(UUID securityPriceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_price/{security_price_id}"
            .replaceAll("\\{" + "security_price_id" + "\\}", apiClient.escapeString(securityPriceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSecurityPriceValidateBeforeCall(UUID securityPriceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityPriceId' is set
        if (securityPriceId == null) {
            throw new ApiException("Missing the required parameter 'securityPriceId' when calling deleteSecurityPrice(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSecurityPriceCall(securityPriceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a security price
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-price">Delete a security price Documentation</a>
     */
    public void deleteSecurityPrice(UUID securityPriceId) throws ApiException {
        deleteSecurityPriceWithHttpInfo(securityPriceId);
    }

    /**
     * Delete a security price
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-price">Delete a security price Documentation</a>
     */
    public ApiResponse<Void> deleteSecurityPriceWithHttpInfo(UUID securityPriceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSecurityPriceValidateBeforeCall(securityPriceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a security price (asynchronously)
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-security-price">Delete a security price Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSecurityPriceAsync(UUID securityPriceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSecurityPriceValidateBeforeCall(securityPriceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTransactionCode
     * @param transactionCodeId UUID of a transaction code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transaction-code">Delete a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call deleteTransactionCodeCall(UUID transactionCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}"
            .replaceAll("\\{" + "transaction_code_id" + "\\}", apiClient.escapeString(transactionCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTransactionCodeValidateBeforeCall(UUID transactionCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transactionCodeId' is set
        if (transactionCodeId == null) {
            throw new ApiException("Missing the required parameter 'transactionCodeId' when calling deleteTransactionCode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTransactionCodeCall(transactionCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a transaction code
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transaction-code">Delete a transaction code Documentation</a>
     */
    public void deleteTransactionCode(UUID transactionCodeId) throws ApiException {
        deleteTransactionCodeWithHttpInfo(transactionCodeId);
    }

    /**
     * Delete a transaction code
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transaction-code">Delete a transaction code Documentation</a>
     */
    public ApiResponse<Void> deleteTransactionCodeWithHttpInfo(UUID transactionCodeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransactionCodeValidateBeforeCall(transactionCodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a transaction code (asynchronously)
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transaction-code">Delete a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call deleteTransactionCodeAsync(UUID transactionCodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransactionCodeValidateBeforeCall(transactionCodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTransferRequest
     * @param transferId UUID of an account transfer record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transfer-request">Delete a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteTransferRequestCall(UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer/{transfer_id}"
            .replaceAll("\\{" + "transfer_id" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTransferRequestValidateBeforeCall(UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling deleteTransferRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTransferRequestCall(transferId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a transfer request
     * 
     * @param transferId UUID of an account transfer record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transfer-request">Delete a transfer request Documentation</a>
     */
    public void deleteTransferRequest(UUID transferId) throws ApiException {
        deleteTransferRequestWithHttpInfo(transferId);
    }

    /**
     * Delete a transfer request
     * 
     * @param transferId UUID of an account transfer record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transfer-request">Delete a transfer request Documentation</a>
     */
    public ApiResponse<Void> deleteTransferRequestWithHttpInfo(UUID transferId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTransferRequestValidateBeforeCall(transferId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a transfer request (asynchronously)
     * 
     * @param transferId UUID of an account transfer record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-transfer-request">Delete a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteTransferRequestAsync(UUID transferId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTransferRequestValidateBeforeCall(transferId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWithdrawalRequest
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-withdrawal-request">Delete a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteWithdrawalRequestCall(UUID withdrawalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/withdrawal/{withdrawal_id}"
            .replaceAll("\\{" + "withdrawal_id" + "\\}", apiClient.escapeString(withdrawalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWithdrawalRequestValidateBeforeCall(UUID withdrawalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'withdrawalId' is set
        if (withdrawalId == null) {
            throw new ApiException("Missing the required parameter 'withdrawalId' when calling deleteWithdrawalRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWithdrawalRequestCall(withdrawalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a withdrawal request
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-withdrawal-request">Delete a withdrawal request Documentation</a>
     */
    public void deleteWithdrawalRequest(UUID withdrawalId) throws ApiException {
        deleteWithdrawalRequestWithHttpInfo(withdrawalId);
    }

    /**
     * Delete a withdrawal request
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-withdrawal-request">Delete a withdrawal request Documentation</a>
     */
    public ApiResponse<Void> deleteWithdrawalRequestWithHttpInfo(UUID withdrawalId) throws ApiException {
        com.squareup.okhttp.Call call = deleteWithdrawalRequestValidateBeforeCall(withdrawalId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a withdrawal request (asynchronously)
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Delete-a-withdrawal-request">Delete a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call deleteWithdrawalRequestAsync(UUID withdrawalId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWithdrawalRequestValidateBeforeCall(withdrawalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccount
     * @param accountId UUID of an account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account">Retrieve an account Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account
     * 
     * @param accountId UUID of an account (required)
     * @return SpecificAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account">Retrieve an account Documentation</a>
     */
    public SpecificAccountResponse getAccount(UUID accountId) throws ApiException {
        ApiResponse<SpecificAccountResponse> resp = getAccountWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Retrieve an account
     * 
     * @param accountId UUID of an account (required)
     * @return ApiResponse&lt;SpecificAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account">Retrieve an account Documentation</a>
     */
    public ApiResponse<SpecificAccountResponse> getAccountWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account">Retrieve an account Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountAsync(UUID accountId, final ApiCallback<SpecificAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAllocation
     * @param accountAllocationId UUID of an account allocation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-allocation">Retrieve an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountAllocationCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}"
            .replaceAll("\\{" + "account_allocation_id" + "\\}", apiClient.escapeString(accountAllocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAllocationValidateBeforeCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountAllocationId' is set
        if (accountAllocationId == null) {
            throw new ApiException("Missing the required parameter 'accountAllocationId' when calling getAccountAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountAllocationCall(accountAllocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account allocation
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @return SpecificAccountAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-allocation">Retrieve an account allocation Documentation</a>
     */
    public SpecificAccountAllocationResponse getAccountAllocation(UUID accountAllocationId) throws ApiException {
        ApiResponse<SpecificAccountAllocationResponse> resp = getAccountAllocationWithHttpInfo(accountAllocationId);
        return resp.getData();
    }

    /**
     * Retrieve an account allocation
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @return ApiResponse&lt;SpecificAccountAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-allocation">Retrieve an account allocation Documentation</a>
     */
    public ApiResponse<SpecificAccountAllocationResponse> getAccountAllocationWithHttpInfo(UUID accountAllocationId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAllocationValidateBeforeCall(accountAllocationId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account allocation (asynchronously)
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-allocation">Retrieve an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountAllocationAsync(UUID accountAllocationId, final ApiCallback<SpecificAccountAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAllocationValidateBeforeCall(accountAllocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAllocations
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-allocations">List all account allocations Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountAllocationsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAllocationsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountAllocationsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account allocations
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-allocations">List all account allocations Documentation</a>
     */
    public GetAccountAllocationResponse getAccountAllocations(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAccountAllocationResponse> resp = getAccountAllocationsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all account allocations
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-allocations">List all account allocations Documentation</a>
     */
    public ApiResponse<GetAccountAllocationResponse> getAccountAllocationsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAllocationsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account allocations (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-allocations">List all account allocations Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountAllocationsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAccountAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAllocationsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAssetSizes
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-asset-sizes">List all account asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountAssetSizesCall(UUID accountId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/asset_size"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAssetSizesValidateBeforeCall(UUID accountId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountAssetSizes(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountAssetSizesCall(accountId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account asset sizes
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-asset-sizes">List all account asset sizes Documentation</a>
     */
    public GetAccountAssetSizeResponse getAccountAssetSizes(UUID accountId, String filter) throws ApiException {
        ApiResponse<GetAccountAssetSizeResponse> resp = getAccountAssetSizesWithHttpInfo(accountId, filter);
        return resp.getData();
    }

    /**
     * List all account asset sizes
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-asset-sizes">List all account asset sizes Documentation</a>
     */
    public ApiResponse<GetAccountAssetSizeResponse> getAccountAssetSizesWithHttpInfo(UUID accountId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAssetSizesValidateBeforeCall(accountId, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account asset sizes (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-asset-sizes">List all account asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountAssetSizesAsync(UUID accountId, String filter, final ApiCallback<GetAccountAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAssetSizesValidateBeforeCall(accountId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountHoldings
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-holdings">List all account holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountHoldingsCall(UUID accountId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/holding"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountHoldingsValidateBeforeCall(UUID accountId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountHoldings(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountHoldingsCall(accountId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account holdings
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-holdings">List all account holdings Documentation</a>
     */
    public GetAccountHoldingResponse getAccountHoldings(UUID accountId, String filter) throws ApiException {
        ApiResponse<GetAccountHoldingResponse> resp = getAccountHoldingsWithHttpInfo(accountId, filter);
        return resp.getData();
    }

    /**
     * List all account holdings
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-holdings">List all account holdings Documentation</a>
     */
    public ApiResponse<GetAccountHoldingResponse> getAccountHoldingsWithHttpInfo(UUID accountId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountHoldingsValidateBeforeCall(accountId, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account holdings (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-holdings">List all account holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountHoldingsAsync(UUID accountId, String filter, final ApiCallback<GetAccountHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountHoldingsValidateBeforeCall(accountId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountPerformance
     * @param accountId UUID of an account (required)
     * @param stat Performance statistic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Account-Performance">Get account performance Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountPerformanceCall(UUID accountId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/performance"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountPerformanceValidateBeforeCall(UUID accountId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getAccountPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountPerformanceCall(accountId, stat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get account performance
     * 
     * @param accountId UUID of an account (required)
     * @param stat Performance statistic (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Account-Performance">Get account performance Documentation</a>
     */
    public PerformanceResponse getAccountPerformance(UUID accountId, String stat) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getAccountPerformanceWithHttpInfo(accountId, stat);
        return resp.getData();
    }

    /**
     * Get account performance
     * 
     * @param accountId UUID of an account (required)
     * @param stat Performance statistic (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Account-Performance">Get account performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getAccountPerformanceWithHttpInfo(UUID accountId, String stat) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPerformanceValidateBeforeCall(accountId, stat, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account performance (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param stat Performance statistic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Account-Performance">Get account performance Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountPerformanceAsync(UUID accountId, String stat, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPerformanceValidateBeforeCall(accountId, stat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountPermission
     * @param accountId UUID of an account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account%E2%80%99s-permissions">Retrieve an account&#39;s permission Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountPermissionCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountPermissionValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountPermissionCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account&#39;s permission
     * 
     * @param accountId UUID of an account (required)
     * @return SpecificAccountPermissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account%E2%80%99s-permissions">Retrieve an account&#39;s permission Documentation</a>
     */
    public SpecificAccountPermissionResponse getAccountPermission(UUID accountId) throws ApiException {
        ApiResponse<SpecificAccountPermissionResponse> resp = getAccountPermissionWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Retrieve an account&#39;s permission
     * 
     * @param accountId UUID of an account (required)
     * @return ApiResponse&lt;SpecificAccountPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account%E2%80%99s-permissions">Retrieve an account&#39;s permission Documentation</a>
     */
    public ApiResponse<SpecificAccountPermissionResponse> getAccountPermissionWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPermissionValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountPermissionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account&#39;s permission (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account%E2%80%99s-permissions">Retrieve an account&#39;s permission Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountPermissionAsync(UUID accountId, final ApiCallback<SpecificAccountPermissionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPermissionValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountPermissionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountPermissions
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-permissions">List all account permissions Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountPermissionsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountPermissionsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountPermissionsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account permissions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-permissions">List all account permissions Documentation</a>
     */
    public GetAccountPermissionsResponse getAccountPermissions(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAccountPermissionsResponse> resp = getAccountPermissionsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all account permissions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-permissions">List all account permissions Documentation</a>
     */
    public ApiResponse<GetAccountPermissionsResponse> getAccountPermissionsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPermissionsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountPermissionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account permissions (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-permissions">List all account permissions Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountPermissionsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAccountPermissionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPermissionsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountPermissionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountStage
     * @param stageId UUID of an account stage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-stage">Retrieve an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStageCall(UUID stageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/stage/{stage_id}"
            .replaceAll("\\{" + "stage_id" + "\\}", apiClient.escapeString(stageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountStageValidateBeforeCall(UUID stageId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stageId' is set
        if (stageId == null) {
            throw new ApiException("Missing the required parameter 'stageId' when calling getAccountStage(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountStageCall(stageId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account stage
     * 
     * @param stageId UUID of an account stage (required)
     * @return SpecificAccountStageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-stage">Retrieve an account stage Documentation</a>
     */
    public SpecificAccountStageResponse getAccountStage(UUID stageId) throws ApiException {
        ApiResponse<SpecificAccountStageResponse> resp = getAccountStageWithHttpInfo(stageId);
        return resp.getData();
    }

    /**
     * Retrieve an account stage
     * 
     * @param stageId UUID of an account stage (required)
     * @return ApiResponse&lt;SpecificAccountStageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-stage">Retrieve an account stage Documentation</a>
     */
    public ApiResponse<SpecificAccountStageResponse> getAccountStageWithHttpInfo(UUID stageId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountStageValidateBeforeCall(stageId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountStageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account stage (asynchronously)
     * 
     * @param stageId UUID of an account stage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-stage">Retrieve an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStageAsync(UUID stageId, final ApiCallback<SpecificAccountStageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountStageValidateBeforeCall(stageId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountStageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountStages
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-stages">List all account stages Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStagesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/stage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountStagesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountStagesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account stages
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountStageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-stages">List all account stages Documentation</a>
     */
    public GetAccountStageResponse getAccountStages(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAccountStageResponse> resp = getAccountStagesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all account stages
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountStageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-stages">List all account stages Documentation</a>
     */
    public ApiResponse<GetAccountStageResponse> getAccountStagesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountStagesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountStageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account stages (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-stages">List all account stages Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStagesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAccountStageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountStagesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountStageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountStatus
     * @param accountStatusId UUID of an account status (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-status">Retrieve an account status Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStatusCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status/{account_status_id}"
            .replaceAll("\\{" + "account_status_id" + "\\}", apiClient.escapeString(accountStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountStatusValidateBeforeCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountStatusId' is set
        if (accountStatusId == null) {
            throw new ApiException("Missing the required parameter 'accountStatusId' when calling getAccountStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountStatusCall(accountStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account status
     * 
     * @param accountStatusId UUID of an account status (required)
     * @return SpecificAccountStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-status">Retrieve an account status Documentation</a>
     */
    public SpecificAccountStatusResponse getAccountStatus(UUID accountStatusId) throws ApiException {
        ApiResponse<SpecificAccountStatusResponse> resp = getAccountStatusWithHttpInfo(accountStatusId);
        return resp.getData();
    }

    /**
     * Retrieve an account status
     * 
     * @param accountStatusId UUID of an account status (required)
     * @return ApiResponse&lt;SpecificAccountStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-status">Retrieve an account status Documentation</a>
     */
    public ApiResponse<SpecificAccountStatusResponse> getAccountStatusWithHttpInfo(UUID accountStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountStatusValidateBeforeCall(accountStatusId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account status (asynchronously)
     * 
     * @param accountStatusId UUID of an account status (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-status">Retrieve an account status Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStatusAsync(UUID accountStatusId, final ApiCallback<SpecificAccountStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountStatusValidateBeforeCall(accountStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountStatuses
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-statuses">List all account statuses Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStatusesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountStatusesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountStatusesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account statuses
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-statuses">List all account statuses Documentation</a>
     */
    public GetAccountStatusResponse getAccountStatuses(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAccountStatusResponse> resp = getAccountStatusesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all account statuses
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-statuses">List all account statuses Documentation</a>
     */
    public ApiResponse<GetAccountStatusResponse> getAccountStatusesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountStatusesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account statuses (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-statuses">List all account statuses Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountStatusesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAccountStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountStatusesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountTransactions
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-transactions">List all account transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountTransactionsCall(UUID accountId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/transaction"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountTransactionsValidateBeforeCall(UUID accountId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountTransactionsCall(accountId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account transactions
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return AccountTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-transactions">List all account transactions Documentation</a>
     */
    public AccountTransactionResponse getAccountTransactions(UUID accountId, String filter) throws ApiException {
        ApiResponse<AccountTransactionResponse> resp = getAccountTransactionsWithHttpInfo(accountId, filter);
        return resp.getData();
    }

    /**
     * List all account transactions
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;AccountTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-transactions">List all account transactions Documentation</a>
     */
    public ApiResponse<AccountTransactionResponse> getAccountTransactionsWithHttpInfo(UUID accountId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountTransactionsValidateBeforeCall(accountId, filter, null, null);
        Type localVarReturnType = new TypeToken<AccountTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account transactions (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-transactions">List all account transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountTransactionsAsync(UUID accountId, String filter, final ApiCallback<AccountTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountTransactionsValidateBeforeCall(accountId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountType
     * @param accountTypeId UUID of an account type (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-type">Retrieve an account type Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountTypeCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type/{account_type_id}"
            .replaceAll("\\{" + "account_type_id" + "\\}", apiClient.escapeString(accountTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountTypeValidateBeforeCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountTypeId' is set
        if (accountTypeId == null) {
            throw new ApiException("Missing the required parameter 'accountTypeId' when calling getAccountType(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountTypeCall(accountTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account type
     * 
     * @param accountTypeId UUID of an account type (required)
     * @return GetAccountTypeSubresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-type">Retrieve an account type Documentation</a>
     */
    public GetAccountTypeSubresponse getAccountType(UUID accountTypeId) throws ApiException {
        ApiResponse<GetAccountTypeSubresponse> resp = getAccountTypeWithHttpInfo(accountTypeId);
        return resp.getData();
    }

    /**
     * Retrieve an account type
     * 
     * @param accountTypeId UUID of an account type (required)
     * @return ApiResponse&lt;GetAccountTypeSubresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-type">Retrieve an account type Documentation</a>
     */
    public ApiResponse<GetAccountTypeSubresponse> getAccountTypeWithHttpInfo(UUID accountTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountTypeValidateBeforeCall(accountTypeId, null, null);
        Type localVarReturnType = new TypeToken<GetAccountTypeSubresponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account type (asynchronously)
     * 
     * @param accountTypeId UUID of an account type (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-account-type">Retrieve an account type Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountTypeAsync(UUID accountTypeId, final ApiCallback<GetAccountTypeSubresponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountTypeValidateBeforeCall(accountTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountTypeSubresponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountTypes
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-types">List all account types Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountTypesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountTypesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountTypesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account types
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-types">List all account types Documentation</a>
     */
    public GetAccountTypeResponse getAccountTypes(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAccountTypeResponse> resp = getAccountTypesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all account types
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-types">List all account types Documentation</a>
     */
    public ApiResponse<GetAccountTypeResponse> getAccountTypesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountTypesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountTypeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account types (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-account-types">List all account types Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountTypesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAccountTypeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountTypesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountTypeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccounts
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-accounts">Get information for all accounts for all clients defined for your firm Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get information for all accounts for all clients defined for your firm
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-accounts">Get information for all accounts for all clients defined for your firm Documentation</a>
     */
    public GetAccountResponse getAccounts(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAccountResponse> resp = getAccountsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * Get information for all accounts for all clients defined for your firm
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-accounts">Get information for all accounts for all clients defined for your firm Documentation</a>
     */
    public ApiResponse<GetAccountResponse> getAccountsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get information for all accounts for all clients defined for your firm (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-accounts">Get information for all accounts for all clients defined for your firm Documentation</a>
     */
    public com.squareup.okhttp.Call getAccountsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccount
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account">Retrieve an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}"
            .replaceAll("\\{" + "aggregation_account_id" + "\\}", apiClient.escapeString(aggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountValidateBeforeCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountId' is set
        if (aggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountId' when calling getAggregationAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountCall(aggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @return SpecificAggregationAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account">Retrieve an aggregation account Documentation</a>
     */
    public SpecificAggregationAccountResponse getAggregationAccount(UUID aggregationAccountId) throws ApiException {
        ApiResponse<SpecificAggregationAccountResponse> resp = getAggregationAccountWithHttpInfo(aggregationAccountId);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @return ApiResponse&lt;SpecificAggregationAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account">Retrieve an aggregation account Documentation</a>
     */
    public ApiResponse<SpecificAggregationAccountResponse> getAggregationAccountWithHttpInfo(UUID aggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountValidateBeforeCall(aggregationAccountId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account (asynchronously)
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account">Retrieve an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountAsync(UUID aggregationAccountId, final ApiCallback<SpecificAggregationAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountValidateBeforeCall(aggregationAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountBalance
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account-balance">Retrieve an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceCall(UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}"
            .replaceAll("\\{" + "aggregation_account_balance_id" + "\\}", apiClient.escapeString(aggregationAccountBalanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountBalanceValidateBeforeCall(UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalanceId' is set
        if (aggregationAccountBalanceId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalanceId' when calling getAggregationAccountBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountBalanceCall(aggregationAccountBalanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account balance
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @return SpecificAggregationAccountBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account-balance">Retrieve an aggregation account balance Documentation</a>
     */
    public SpecificAggregationAccountBalanceResponse getAggregationAccountBalance(UUID aggregationAccountBalanceId) throws ApiException {
        ApiResponse<SpecificAggregationAccountBalanceResponse> resp = getAggregationAccountBalanceWithHttpInfo(aggregationAccountBalanceId);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account balance
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @return ApiResponse&lt;SpecificAggregationAccountBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account-balance">Retrieve an aggregation account balance Documentation</a>
     */
    public ApiResponse<SpecificAggregationAccountBalanceResponse> getAggregationAccountBalanceWithHttpInfo(UUID aggregationAccountBalanceId) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountBalanceValidateBeforeCall(aggregationAccountBalanceId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account balance (asynchronously)
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-aggregation-account-balance">Retrieve an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceAsync(UUID aggregationAccountBalanceId, final ApiCallback<SpecificAggregationAccountBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountBalanceValidateBeforeCall(aggregationAccountBalanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountBalances
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-account-balances">List all aggregation account balances Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountBalancesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountBalancesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAggregationAccountBalancesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all aggregation account balances
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAggregationAccountBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-account-balances">List all aggregation account balances Documentation</a>
     */
    public GetAggregationAccountBalanceResponse getAggregationAccountBalances(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAggregationAccountBalanceResponse> resp = getAggregationAccountBalancesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all aggregation account balances
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAggregationAccountBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-account-balances">List all aggregation account balances Documentation</a>
     */
    public ApiResponse<GetAggregationAccountBalanceResponse> getAggregationAccountBalancesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountBalancesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAggregationAccountBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all aggregation account balances (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-account-balances">List all aggregation account balances Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountBalancesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAggregationAccountBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountBalancesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAggregationAccountBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccounts
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-accounts">List all aggregation accounts Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAggregationAccountsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all aggregation accounts
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAggregationAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-accounts">List all aggregation accounts Documentation</a>
     */
    public GetAggregationAccountsResponse getAggregationAccounts(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAggregationAccountsResponse> resp = getAggregationAccountsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all aggregation accounts
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAggregationAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-accounts">List all aggregation accounts Documentation</a>
     */
    public ApiResponse<GetAggregationAccountsResponse> getAggregationAccountsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAggregationAccountsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all aggregation accounts (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-aggregation-accounts">List all aggregation accounts Documentation</a>
     */
    public com.squareup.okhttp.Call getAggregationAccountsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAggregationAccountsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAggregationAccountsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocation
     * @param allocationId UUID of an allocation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation">Retrieve an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationValidateBeforeCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationCall(allocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an allocation
     * 
     * @param allocationId UUID of an allocation (required)
     * @return SpecificAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation">Retrieve an allocation Documentation</a>
     */
    public SpecificAllocationResponse getAllocation(UUID allocationId) throws ApiException {
        ApiResponse<SpecificAllocationResponse> resp = getAllocationWithHttpInfo(allocationId);
        return resp.getData();
    }

    /**
     * Retrieve an allocation
     * 
     * @param allocationId UUID of an allocation (required)
     * @return ApiResponse&lt;SpecificAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation">Retrieve an allocation Documentation</a>
     */
    public ApiResponse<SpecificAllocationResponse> getAllocationWithHttpInfo(UUID allocationId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationValidateBeforeCall(allocationId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an allocation (asynchronously)
     * 
     * @param allocationId UUID of an allocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation">Retrieve an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationAsync(UUID allocationId, final ApiCallback<SpecificAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationValidateBeforeCall(allocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationAssetSizes
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-asset-sizes">List all allocation asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationAssetSizesCall(UUID allocationId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/asset_size"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationAssetSizesValidateBeforeCall(UUID allocationId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationAssetSizes(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationAssetSizesCall(allocationId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocation asset sizes
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return AllocationAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-asset-sizes">List all allocation asset sizes Documentation</a>
     */
    public AllocationAssetSizeResponse getAllocationAssetSizes(UUID allocationId, String filter) throws ApiException {
        ApiResponse<AllocationAssetSizeResponse> resp = getAllocationAssetSizesWithHttpInfo(allocationId, filter);
        return resp.getData();
    }

    /**
     * List all allocation asset sizes
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;AllocationAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-asset-sizes">List all allocation asset sizes Documentation</a>
     */
    public ApiResponse<AllocationAssetSizeResponse> getAllocationAssetSizesWithHttpInfo(UUID allocationId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationAssetSizesValidateBeforeCall(allocationId, filter, null, null);
        Type localVarReturnType = new TypeToken<AllocationAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocation asset sizes (asynchronously)
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-asset-sizes">List all allocation asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationAssetSizesAsync(UUID allocationId, String filter, final ApiCallback<AllocationAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationAssetSizesValidateBeforeCall(allocationId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationComposition
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation-composition">Retrieve an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationCompositionCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}"
            .replaceAll("\\{" + "allocation_composition_id" + "\\}", apiClient.escapeString(allocationCompositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationCompositionValidateBeforeCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationCompositionId' is set
        if (allocationCompositionId == null) {
            throw new ApiException("Missing the required parameter 'allocationCompositionId' when calling getAllocationComposition(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationCompositionCall(allocationCompositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an allocation composition
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @return SpecificAllocationCompositionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation-composition">Retrieve an allocation composition Documentation</a>
     */
    public SpecificAllocationCompositionResponse getAllocationComposition(UUID allocationCompositionId) throws ApiException {
        ApiResponse<SpecificAllocationCompositionResponse> resp = getAllocationCompositionWithHttpInfo(allocationCompositionId);
        return resp.getData();
    }

    /**
     * Retrieve an allocation composition
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @return ApiResponse&lt;SpecificAllocationCompositionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation-composition">Retrieve an allocation composition Documentation</a>
     */
    public ApiResponse<SpecificAllocationCompositionResponse> getAllocationCompositionWithHttpInfo(UUID allocationCompositionId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationCompositionValidateBeforeCall(allocationCompositionId, null, null);
        Type localVarReturnType = new TypeToken<SpecificAllocationCompositionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an allocation composition (asynchronously)
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-allocation-composition">Retrieve an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationCompositionAsync(UUID allocationCompositionId, final ApiCallback<SpecificAllocationCompositionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationCompositionValidateBeforeCall(allocationCompositionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAllocationCompositionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationCompositions
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-composition">List all allocation compositions Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationCompositionsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationCompositionsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllocationCompositionsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocation compositions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAllocationCompositionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-composition">List all allocation compositions Documentation</a>
     */
    public GetAllocationCompositionResponse getAllocationCompositions(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAllocationCompositionResponse> resp = getAllocationCompositionsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all allocation compositions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAllocationCompositionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-composition">List all allocation compositions Documentation</a>
     */
    public ApiResponse<GetAllocationCompositionResponse> getAllocationCompositionsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationCompositionsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAllocationCompositionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocation compositions (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-composition">List all allocation compositions Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationCompositionsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAllocationCompositionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationCompositionsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAllocationCompositionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationHoldings
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-holdings">List all allocation holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationHoldingsCall(UUID allocationId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/holding"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationHoldingsValidateBeforeCall(UUID allocationId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationHoldings(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationHoldingsCall(allocationId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocation holdings
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return AllocationHoldingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-holdings">List all allocation holdings Documentation</a>
     */
    public AllocationHoldingsResponse getAllocationHoldings(UUID allocationId, String filter) throws ApiException {
        ApiResponse<AllocationHoldingsResponse> resp = getAllocationHoldingsWithHttpInfo(allocationId, filter);
        return resp.getData();
    }

    /**
     * List all allocation holdings
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;AllocationHoldingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-holdings">List all allocation holdings Documentation</a>
     */
    public ApiResponse<AllocationHoldingsResponse> getAllocationHoldingsWithHttpInfo(UUID allocationId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationHoldingsValidateBeforeCall(allocationId, filter, null, null);
        Type localVarReturnType = new TypeToken<AllocationHoldingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocation holdings (asynchronously)
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-holdings">List all allocation holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationHoldingsAsync(UUID allocationId, String filter, final ApiCallback<AllocationHoldingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationHoldingsValidateBeforeCall(allocationId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationHoldingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationPerformance
     * @param allocationId UUID of an allocation (required)
     * @param stat Performance statistic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Allocation-Performance">Get allocation performance Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationPerformanceCall(UUID allocationId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/performance"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationPerformanceValidateBeforeCall(UUID allocationId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getAllocationPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationPerformanceCall(allocationId, stat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get allocation performance
     * 
     * @param allocationId UUID of an allocation (required)
     * @param stat Performance statistic (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Allocation-Performance">Get allocation performance Documentation</a>
     */
    public PerformanceResponse getAllocationPerformance(UUID allocationId, String stat) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getAllocationPerformanceWithHttpInfo(allocationId, stat);
        return resp.getData();
    }

    /**
     * Get allocation performance
     * 
     * @param allocationId UUID of an allocation (required)
     * @param stat Performance statistic (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Allocation-Performance">Get allocation performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getAllocationPerformanceWithHttpInfo(UUID allocationId, String stat) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationPerformanceValidateBeforeCall(allocationId, stat, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get allocation performance (asynchronously)
     * 
     * @param allocationId UUID of an allocation (required)
     * @param stat Performance statistic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Allocation-Performance">Get allocation performance Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationPerformanceAsync(UUID allocationId, String stat, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationPerformanceValidateBeforeCall(allocationId, stat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationTransactions
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-transactions">List all allocation transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationTransactionsCall(UUID allocationId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/transaction"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationTransactionsValidateBeforeCall(UUID allocationId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationTransactionsCall(allocationId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocation transactions
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return AllocationTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-transactions">List all allocation transactions Documentation</a>
     */
    public AllocationTransactionResponse getAllocationTransactions(UUID allocationId, String filter) throws ApiException {
        ApiResponse<AllocationTransactionResponse> resp = getAllocationTransactionsWithHttpInfo(allocationId, filter);
        return resp.getData();
    }

    /**
     * List all allocation transactions
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;AllocationTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-transactions">List all allocation transactions Documentation</a>
     */
    public ApiResponse<AllocationTransactionResponse> getAllocationTransactionsWithHttpInfo(UUID allocationId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationTransactionsValidateBeforeCall(allocationId, filter, null, null);
        Type localVarReturnType = new TypeToken<AllocationTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocation transactions (asynchronously)
     * 
     * @param allocationId UUID of an allocation (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocation-transactions">List all allocation transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationTransactionsAsync(UUID allocationId, String filter, final ApiCallback<AllocationTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationTransactionsValidateBeforeCall(allocationId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocations
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocations">List all allocations Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllocationsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocations
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocations">List all allocations Documentation</a>
     */
    public GetAllocationResponse getAllocations(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetAllocationResponse> resp = getAllocationsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all allocations
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocations">List all allocations Documentation</a>
     */
    public ApiResponse<GetAllocationResponse> getAllocationsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocations (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-allocations">List all allocations Documentation</a>
     */
    public com.squareup.okhttp.Call getAllocationsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBankLink
     * @param bankLinkId UUID of a bank link (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-bank-link">Retrieve a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call getBankLinkCall(UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link/{bank_link_id}"
            .replaceAll("\\{" + "bank_link_id" + "\\}", apiClient.escapeString(bankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinkValidateBeforeCall(UUID bankLinkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLinkId' is set
        if (bankLinkId == null) {
            throw new ApiException("Missing the required parameter 'bankLinkId' when calling getBankLink(Async)");
        }
        

        com.squareup.okhttp.Call call = getBankLinkCall(bankLinkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a bank link
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @return SpecificBankLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-bank-link">Retrieve a bank link Documentation</a>
     */
    public SpecificBankLinkResponse getBankLink(UUID bankLinkId) throws ApiException {
        ApiResponse<SpecificBankLinkResponse> resp = getBankLinkWithHttpInfo(bankLinkId);
        return resp.getData();
    }

    /**
     * Retrieve a bank link
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @return ApiResponse&lt;SpecificBankLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-bank-link">Retrieve a bank link Documentation</a>
     */
    public ApiResponse<SpecificBankLinkResponse> getBankLinkWithHttpInfo(UUID bankLinkId) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinkValidateBeforeCall(bankLinkId, null, null);
        Type localVarReturnType = new TypeToken<SpecificBankLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a bank link (asynchronously)
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-bank-link">Retrieve a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call getBankLinkAsync(UUID bankLinkId, final ApiCallback<SpecificBankLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinkValidateBeforeCall(bankLinkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificBankLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBankLinks
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-bank-links">List all bank links Documentation</a>
     */
    public com.squareup.okhttp.Call getBankLinksCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBankLinksValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBankLinksCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all bank links
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetBankLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-bank-links">List all bank links Documentation</a>
     */
    public GetBankLinkResponse getBankLinks(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetBankLinkResponse> resp = getBankLinksWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all bank links
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetBankLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-bank-links">List all bank links Documentation</a>
     */
    public ApiResponse<GetBankLinkResponse> getBankLinksWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getBankLinksValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetBankLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all bank links (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-bank-links">List all bank links Documentation</a>
     */
    public com.squareup.okhttp.Call getBankLinksAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetBankLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBankLinksValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetBankLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBenchmark
     * @param benchmarkId UUID of a benchmark (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-benchmark">Retrieve a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarkCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarkValidateBeforeCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling getBenchmark(Async)");
        }
        

        com.squareup.okhttp.Call call = getBenchmarkCall(benchmarkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a benchmark
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @return SpecificBenchmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-benchmark">Retrieve a benchmark Documentation</a>
     */
    public SpecificBenchmarkResponse getBenchmark(UUID benchmarkId) throws ApiException {
        ApiResponse<SpecificBenchmarkResponse> resp = getBenchmarkWithHttpInfo(benchmarkId);
        return resp.getData();
    }

    /**
     * Retrieve a benchmark
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @return ApiResponse&lt;SpecificBenchmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-benchmark">Retrieve a benchmark Documentation</a>
     */
    public ApiResponse<SpecificBenchmarkResponse> getBenchmarkWithHttpInfo(UUID benchmarkId) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarkValidateBeforeCall(benchmarkId, null, null);
        Type localVarReturnType = new TypeToken<SpecificBenchmarkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a benchmark (asynchronously)
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-benchmark">Retrieve a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarkAsync(UUID benchmarkId, final ApiCallback<SpecificBenchmarkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarkValidateBeforeCall(benchmarkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificBenchmarkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBenchmarkAssetSizes
     * @param benchmarkId UUID of a benchmark (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmark-asset-sizes">List all benchmark asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarkAssetSizesCall(UUID benchmarkId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}/asset_size"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarkAssetSizesValidateBeforeCall(UUID benchmarkId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling getBenchmarkAssetSizes(Async)");
        }
        

        com.squareup.okhttp.Call call = getBenchmarkAssetSizesCall(benchmarkId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all benchmark asset sizes
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return BenchmarkAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmark-asset-sizes">List all benchmark asset sizes Documentation</a>
     */
    public BenchmarkAssetSizeResponse getBenchmarkAssetSizes(UUID benchmarkId, String filter) throws ApiException {
        ApiResponse<BenchmarkAssetSizeResponse> resp = getBenchmarkAssetSizesWithHttpInfo(benchmarkId, filter);
        return resp.getData();
    }

    /**
     * List all benchmark asset sizes
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;BenchmarkAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmark-asset-sizes">List all benchmark asset sizes Documentation</a>
     */
    public ApiResponse<BenchmarkAssetSizeResponse> getBenchmarkAssetSizesWithHttpInfo(UUID benchmarkId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarkAssetSizesValidateBeforeCall(benchmarkId, filter, null, null);
        Type localVarReturnType = new TypeToken<BenchmarkAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all benchmark asset sizes (asynchronously)
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmark-asset-sizes">List all benchmark asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarkAssetSizesAsync(UUID benchmarkId, String filter, final ApiCallback<BenchmarkAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarkAssetSizesValidateBeforeCall(benchmarkId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BenchmarkAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBenchmarkPerformance
     * @param benchmarkId UUID of a benchmark (required)
     * @param stat Performance statistic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Benchmark-Performance">Get benchmark performance Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarkPerformanceCall(UUID benchmarkId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}/performance"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarkPerformanceValidateBeforeCall(UUID benchmarkId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling getBenchmarkPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getBenchmarkPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getBenchmarkPerformanceCall(benchmarkId, stat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get benchmark performance
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param stat Performance statistic (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Benchmark-Performance">Get benchmark performance Documentation</a>
     */
    public PerformanceResponse getBenchmarkPerformance(UUID benchmarkId, String stat) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getBenchmarkPerformanceWithHttpInfo(benchmarkId, stat);
        return resp.getData();
    }

    /**
     * Get benchmark performance
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param stat Performance statistic (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Benchmark-Performance">Get benchmark performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getBenchmarkPerformanceWithHttpInfo(UUID benchmarkId, String stat) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarkPerformanceValidateBeforeCall(benchmarkId, stat, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get benchmark performance (asynchronously)
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param stat Performance statistic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Benchmark-Performance">Get benchmark performance Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarkPerformanceAsync(UUID benchmarkId, String stat, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarkPerformanceValidateBeforeCall(benchmarkId, stat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBenchmarks
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmarks">List all benchmarks Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarksCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarksValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBenchmarksCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all benchmarks
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetBenchmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmarks">List all benchmarks Documentation</a>
     */
    public GetBenchmarkResponse getBenchmarks(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetBenchmarkResponse> resp = getBenchmarksWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all benchmarks
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetBenchmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmarks">List all benchmarks Documentation</a>
     */
    public ApiResponse<GetBenchmarkResponse> getBenchmarksWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarksValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetBenchmarkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all benchmarks (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-benchmarks">List all benchmarks Documentation</a>
     */
    public com.squareup.okhttp.Call getBenchmarksAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetBenchmarkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarksValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetBenchmarkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBulkOrders
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-Orders">List all bulk orders Documentation</a>
     */
    public com.squareup.okhttp.Call getBulkOrdersCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBulkOrdersValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBulkOrdersCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all bulk orders
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetBulkOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-Orders">List all bulk orders Documentation</a>
     */
    public GetBulkOrderResponse getBulkOrders(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetBulkOrderResponse> resp = getBulkOrdersWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all bulk orders
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetBulkOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-Orders">List all bulk orders Documentation</a>
     */
    public ApiResponse<GetBulkOrderResponse> getBulkOrdersWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getBulkOrdersValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetBulkOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all bulk orders (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-Orders">List all bulk orders Documentation</a>
     */
    public com.squareup.okhttp.Call getBulkOrdersAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetBulkOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBulkOrdersValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetBulkOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClient
     * @param clientId UUID of a client (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client">Retrieve a client Documentation</a>
     */
    public com.squareup.okhttp.Call getClientCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientValidateBeforeCall(UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClient(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientCall(clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a client
     * 
     * @param clientId UUID of a client (required)
     * @return SpecificClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client">Retrieve a client Documentation</a>
     */
    public SpecificClientResponse getClient(UUID clientId) throws ApiException {
        ApiResponse<SpecificClientResponse> resp = getClientWithHttpInfo(clientId);
        return resp.getData();
    }

    /**
     * Retrieve a client
     * 
     * @param clientId UUID of a client (required)
     * @return ApiResponse&lt;SpecificClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client">Retrieve a client Documentation</a>
     */
    public ApiResponse<SpecificClientResponse> getClientWithHttpInfo(UUID clientId) throws ApiException {
        com.squareup.okhttp.Call call = getClientValidateBeforeCall(clientId, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a client (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client">Retrieve a client Documentation</a>
     */
    public com.squareup.okhttp.Call getClientAsync(UUID clientId, final ApiCallback<SpecificClientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientValidateBeforeCall(clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientAssetSizes
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-asset-sizes">List all client asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getClientAssetSizesCall(UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}/asset_size"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientAssetSizesValidateBeforeCall(UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientAssetSizes(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientAssetSizesCall(clientId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client asset sizes
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ClientAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-asset-sizes">List all client asset sizes Documentation</a>
     */
    public ClientAssetSizeResponse getClientAssetSizes(UUID clientId, String filter) throws ApiException {
        ApiResponse<ClientAssetSizeResponse> resp = getClientAssetSizesWithHttpInfo(clientId, filter);
        return resp.getData();
    }

    /**
     * List all client asset sizes
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;ClientAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-asset-sizes">List all client asset sizes Documentation</a>
     */
    public ApiResponse<ClientAssetSizeResponse> getClientAssetSizesWithHttpInfo(UUID clientId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getClientAssetSizesValidateBeforeCall(clientId, filter, null, null);
        Type localVarReturnType = new TypeToken<ClientAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client asset sizes (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-asset-sizes">List all client asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getClientAssetSizesAsync(UUID clientId, String filter, final ApiCallback<ClientAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientAssetSizesValidateBeforeCall(clientId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientHoldings
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-holdings">List all client holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getClientHoldingsCall(UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}/holding"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientHoldingsValidateBeforeCall(UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientHoldings(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientHoldingsCall(clientId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client holdings
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ClientHoldingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-holdings">List all client holdings Documentation</a>
     */
    public ClientHoldingsResponse getClientHoldings(UUID clientId, String filter) throws ApiException {
        ApiResponse<ClientHoldingsResponse> resp = getClientHoldingsWithHttpInfo(clientId, filter);
        return resp.getData();
    }

    /**
     * List all client holdings
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;ClientHoldingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-holdings">List all client holdings Documentation</a>
     */
    public ApiResponse<ClientHoldingsResponse> getClientHoldingsWithHttpInfo(UUID clientId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getClientHoldingsValidateBeforeCall(clientId, filter, null, null);
        Type localVarReturnType = new TypeToken<ClientHoldingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client holdings (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-holdings">List all client holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getClientHoldingsAsync(UUID clientId, String filter, final ApiCallback<ClientHoldingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientHoldingsValidateBeforeCall(clientId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientHoldingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientHydro
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-hydro-relationship">Retrieve a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call getClientHydroCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_hydro/{client_hydro_id}"
            .replaceAll("\\{" + "client_hydro_id" + "\\}", apiClient.escapeString(clientHydroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientHydroValidateBeforeCall(UUID clientHydroId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientHydroId' is set
        if (clientHydroId == null) {
            throw new ApiException("Missing the required parameter 'clientHydroId' when calling getClientHydro(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientHydroCall(clientHydroId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a client-hydro relationship
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @return SpecificClientHydroResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-hydro-relationship">Retrieve a client-hydro relationship Documentation</a>
     */
    public SpecificClientHydroResponse getClientHydro(UUID clientHydroId) throws ApiException {
        ApiResponse<SpecificClientHydroResponse> resp = getClientHydroWithHttpInfo(clientHydroId);
        return resp.getData();
    }

    /**
     * Retrieve a client-hydro relationship
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @return ApiResponse&lt;SpecificClientHydroResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-hydro-relationship">Retrieve a client-hydro relationship Documentation</a>
     */
    public ApiResponse<SpecificClientHydroResponse> getClientHydroWithHttpInfo(UUID clientHydroId) throws ApiException {
        com.squareup.okhttp.Call call = getClientHydroValidateBeforeCall(clientHydroId, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientHydroResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a client-hydro relationship (asynchronously)
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-hydro-relationship">Retrieve a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call getClientHydroAsync(UUID clientHydroId, final ApiCallback<SpecificClientHydroResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientHydroValidateBeforeCall(clientHydroId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientHydroResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientHydros
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-hydro-relationship">List all client-hydro relationships Documentation</a>
     */
    public com.squareup.okhttp.Call getClientHydrosCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_hydro";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientHydrosValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClientHydrosCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client-hydro relationships
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetClientHydroResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-hydro-relationship">List all client-hydro relationships Documentation</a>
     */
    public GetClientHydroResponse getClientHydros(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetClientHydroResponse> resp = getClientHydrosWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all client-hydro relationships
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetClientHydroResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-hydro-relationship">List all client-hydro relationships Documentation</a>
     */
    public ApiResponse<GetClientHydroResponse> getClientHydrosWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getClientHydrosValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetClientHydroResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client-hydro relationships (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-hydro-relationship">List all client-hydro relationships Documentation</a>
     */
    public com.squareup.okhttp.Call getClientHydrosAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetClientHydroResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientHydrosValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetClientHydroResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientPerformance
     * @param clientId UUID of a client (required)
     * @param stat Performance statistic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Client-Performance">Get client performance Documentation</a>
     */
    public com.squareup.okhttp.Call getClientPerformanceCall(UUID clientId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}/performance"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientPerformanceValidateBeforeCall(UUID clientId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getClientPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientPerformanceCall(clientId, stat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get client performance
     * 
     * @param clientId UUID of a client (required)
     * @param stat Performance statistic (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Client-Performance">Get client performance Documentation</a>
     */
    public PerformanceResponse getClientPerformance(UUID clientId, String stat) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getClientPerformanceWithHttpInfo(clientId, stat);
        return resp.getData();
    }

    /**
     * Get client performance
     * 
     * @param clientId UUID of a client (required)
     * @param stat Performance statistic (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Client-Performance">Get client performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getClientPerformanceWithHttpInfo(UUID clientId, String stat) throws ApiException {
        com.squareup.okhttp.Call call = getClientPerformanceValidateBeforeCall(clientId, stat, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get client performance (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param stat Performance statistic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Client-Performance">Get client performance Documentation</a>
     */
    public com.squareup.okhttp.Call getClientPerformanceAsync(UUID clientId, String stat, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientPerformanceValidateBeforeCall(clientId, stat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientResponse
     * @param clientResponseId UUID of a client response (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-response">Retrieve a client response Documentation</a>
     */
    public com.squareup.okhttp.Call getClientResponseCall(UUID clientResponseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_response/{client_response_id}"
            .replaceAll("\\{" + "client_response_id" + "\\}", apiClient.escapeString(clientResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientResponseValidateBeforeCall(UUID clientResponseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientResponseId' is set
        if (clientResponseId == null) {
            throw new ApiException("Missing the required parameter 'clientResponseId' when calling getClientResponse(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientResponseCall(clientResponseId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a client response
     * 
     * @param clientResponseId UUID of a client response (required)
     * @return SpecificClientResponseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-response">Retrieve a client response Documentation</a>
     */
    public SpecificClientResponseResponse getClientResponse(UUID clientResponseId) throws ApiException {
        ApiResponse<SpecificClientResponseResponse> resp = getClientResponseWithHttpInfo(clientResponseId);
        return resp.getData();
    }

    /**
     * Retrieve a client response
     * 
     * @param clientResponseId UUID of a client response (required)
     * @return ApiResponse&lt;SpecificClientResponseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-response">Retrieve a client response Documentation</a>
     */
    public ApiResponse<SpecificClientResponseResponse> getClientResponseWithHttpInfo(UUID clientResponseId) throws ApiException {
        com.squareup.okhttp.Call call = getClientResponseValidateBeforeCall(clientResponseId, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientResponseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a client response (asynchronously)
     * 
     * @param clientResponseId UUID of a client response (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-client-response">Retrieve a client response Documentation</a>
     */
    public com.squareup.okhttp.Call getClientResponseAsync(UUID clientResponseId, final ApiCallback<SpecificClientResponseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientResponseValidateBeforeCall(clientResponseId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientResponseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientResponses
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-responses">List all client responses Documentation</a>
     */
    public com.squareup.okhttp.Call getClientResponsesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_response";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientResponsesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClientResponsesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client responses
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetClientResponseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-responses">List all client responses Documentation</a>
     */
    public GetClientResponseResponse getClientResponses(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetClientResponseResponse> resp = getClientResponsesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all client responses
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetClientResponseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-responses">List all client responses Documentation</a>
     */
    public ApiResponse<GetClientResponseResponse> getClientResponsesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getClientResponsesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetClientResponseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client responses (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-responses">List all client responses Documentation</a>
     */
    public com.squareup.okhttp.Call getClientResponsesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetClientResponseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientResponsesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetClientResponseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientTransactions
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-transactions">List all client transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getClientTransactionsCall(UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}/transaction"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientTransactionsValidateBeforeCall(UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getClientTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientTransactionsCall(clientId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all client transactions
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ClientTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-transactions">List all client transactions Documentation</a>
     */
    public ClientTransactionResponse getClientTransactions(UUID clientId, String filter) throws ApiException {
        ApiResponse<ClientTransactionResponse> resp = getClientTransactionsWithHttpInfo(clientId, filter);
        return resp.getData();
    }

    /**
     * List all client transactions
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;ClientTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-transactions">List all client transactions Documentation</a>
     */
    public ApiResponse<ClientTransactionResponse> getClientTransactionsWithHttpInfo(UUID clientId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getClientTransactionsValidateBeforeCall(clientId, filter, null, null);
        Type localVarReturnType = new TypeToken<ClientTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all client transactions (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-client-transactions">List all client transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getClientTransactionsAsync(UUID clientId, String filter, final ApiCallback<ClientTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientTransactionsValidateBeforeCall(clientId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClientTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClients
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-clients">List all clients Documentation</a>
     */
    public com.squareup.okhttp.Call getClientsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClientsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all clients
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-clients">List all clients Documentation</a>
     */
    public GetClientResponse getClients(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetClientResponse> resp = getClientsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all clients
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-clients">List all clients Documentation</a>
     */
    public ApiResponse<GetClientResponse> getClientsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getClientsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetClientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all clients (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-clients">List all clients Documentation</a>
     */
    public com.squareup.okhttp.Call getClientsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetClientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetClientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDecisionTree
     * @param decisionTreeId UUID of a decision tree (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-decision-tree">Retrieve a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call getDecisionTreeCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}"
            .replaceAll("\\{" + "decision_tree_id" + "\\}", apiClient.escapeString(decisionTreeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDecisionTreeValidateBeforeCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTreeId' is set
        if (decisionTreeId == null) {
            throw new ApiException("Missing the required parameter 'decisionTreeId' when calling getDecisionTree(Async)");
        }
        

        com.squareup.okhttp.Call call = getDecisionTreeCall(decisionTreeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a decision tree
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @return SpecificDecisionTreeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-decision-tree">Retrieve a decision tree Documentation</a>
     */
    public SpecificDecisionTreeResponse getDecisionTree(UUID decisionTreeId) throws ApiException {
        ApiResponse<SpecificDecisionTreeResponse> resp = getDecisionTreeWithHttpInfo(decisionTreeId);
        return resp.getData();
    }

    /**
     * Retrieve a decision tree
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @return ApiResponse&lt;SpecificDecisionTreeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-decision-tree">Retrieve a decision tree Documentation</a>
     */
    public ApiResponse<SpecificDecisionTreeResponse> getDecisionTreeWithHttpInfo(UUID decisionTreeId) throws ApiException {
        com.squareup.okhttp.Call call = getDecisionTreeValidateBeforeCall(decisionTreeId, null, null);
        Type localVarReturnType = new TypeToken<SpecificDecisionTreeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a decision tree (asynchronously)
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-decision-tree">Retrieve a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call getDecisionTreeAsync(UUID decisionTreeId, final ApiCallback<SpecificDecisionTreeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDecisionTreeValidateBeforeCall(decisionTreeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificDecisionTreeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDecisionTrees
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-decision-trees">List all decision trees Documentation</a>
     */
    public com.squareup.okhttp.Call getDecisionTreesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDecisionTreesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDecisionTreesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all decision trees
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetDecisionTreeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-decision-trees">List all decision trees Documentation</a>
     */
    public GetDecisionTreeResponse getDecisionTrees(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetDecisionTreeResponse> resp = getDecisionTreesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all decision trees
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetDecisionTreeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-decision-trees">List all decision trees Documentation</a>
     */
    public ApiResponse<GetDecisionTreeResponse> getDecisionTreesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getDecisionTreesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetDecisionTreeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all decision trees (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-decision-trees">List all decision trees Documentation</a>
     */
    public com.squareup.okhttp.Call getDecisionTreesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetDecisionTreeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDecisionTreesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDecisionTreeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDepositRequest
     * @param depositId UUID of a deposit record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-deposit-request">Retrieve a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call getDepositRequestCall(UUID depositId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/deposit/{deposit_id}"
            .replaceAll("\\{" + "deposit_id" + "\\}", apiClient.escapeString(depositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDepositRequestValidateBeforeCall(UUID depositId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'depositId' is set
        if (depositId == null) {
            throw new ApiException("Missing the required parameter 'depositId' when calling getDepositRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = getDepositRequestCall(depositId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a deposit request
     * 
     * @param depositId UUID of a deposit record (required)
     * @return SpecificDepositRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-deposit-request">Retrieve a deposit request Documentation</a>
     */
    public SpecificDepositRequestResponse getDepositRequest(UUID depositId) throws ApiException {
        ApiResponse<SpecificDepositRequestResponse> resp = getDepositRequestWithHttpInfo(depositId);
        return resp.getData();
    }

    /**
     * Retrieve a deposit request
     * 
     * @param depositId UUID of a deposit record (required)
     * @return ApiResponse&lt;SpecificDepositRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-deposit-request">Retrieve a deposit request Documentation</a>
     */
    public ApiResponse<SpecificDepositRequestResponse> getDepositRequestWithHttpInfo(UUID depositId) throws ApiException {
        com.squareup.okhttp.Call call = getDepositRequestValidateBeforeCall(depositId, null, null);
        Type localVarReturnType = new TypeToken<SpecificDepositRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a deposit request (asynchronously)
     * 
     * @param depositId UUID of a deposit record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-deposit-request">Retrieve a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call getDepositRequestAsync(UUID depositId, final ApiCallback<SpecificDepositRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDepositRequestValidateBeforeCall(depositId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificDepositRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDepositRequests
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-deposit-requests">List all deposit requests Documentation</a>
     */
    public com.squareup.okhttp.Call getDepositRequestsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDepositRequestsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDepositRequestsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all deposit requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetDepositRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-deposit-requests">List all deposit requests Documentation</a>
     */
    public GetDepositRequestResponse getDepositRequests(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetDepositRequestResponse> resp = getDepositRequestsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all deposit requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetDepositRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-deposit-requests">List all deposit requests Documentation</a>
     */
    public ApiResponse<GetDepositRequestResponse> getDepositRequestsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getDepositRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetDepositRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all deposit requests (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-deposit-requests">List all deposit requests Documentation</a>
     */
    public com.squareup.okhttp.Call getDepositRequestsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetDepositRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDepositRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDepositRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingRequest
     * @param fundingId UUID of a funding record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-funding-request">Retrieve a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call getFundingRequestCall(UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding/{funding_id}"
            .replaceAll("\\{" + "funding_id" + "\\}", apiClient.escapeString(fundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingRequestValidateBeforeCall(UUID fundingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingId' is set
        if (fundingId == null) {
            throw new ApiException("Missing the required parameter 'fundingId' when calling getFundingRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = getFundingRequestCall(fundingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a funding request
     * 
     * @param fundingId UUID of a funding record (required)
     * @return SpecificFundingRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-funding-request">Retrieve a funding request Documentation</a>
     */
    public SpecificFundingRequestResponse getFundingRequest(UUID fundingId) throws ApiException {
        ApiResponse<SpecificFundingRequestResponse> resp = getFundingRequestWithHttpInfo(fundingId);
        return resp.getData();
    }

    /**
     * Retrieve a funding request
     * 
     * @param fundingId UUID of a funding record (required)
     * @return ApiResponse&lt;SpecificFundingRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-funding-request">Retrieve a funding request Documentation</a>
     */
    public ApiResponse<SpecificFundingRequestResponse> getFundingRequestWithHttpInfo(UUID fundingId) throws ApiException {
        com.squareup.okhttp.Call call = getFundingRequestValidateBeforeCall(fundingId, null, null);
        Type localVarReturnType = new TypeToken<SpecificFundingRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a funding request (asynchronously)
     * 
     * @param fundingId UUID of a funding record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-funding-request">Retrieve a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call getFundingRequestAsync(UUID fundingId, final ApiCallback<SpecificFundingRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingRequestValidateBeforeCall(fundingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificFundingRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFundingRequests
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-funding-requests">List all funding requests Documentation</a>
     */
    public com.squareup.okhttp.Call getFundingRequestsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFundingRequestsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFundingRequestsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all funding requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetFundingRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-funding-requests">List all funding requests Documentation</a>
     */
    public GetFundingRequestResponse getFundingRequests(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetFundingRequestResponse> resp = getFundingRequestsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all funding requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetFundingRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-funding-requests">List all funding requests Documentation</a>
     */
    public ApiResponse<GetFundingRequestResponse> getFundingRequestsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getFundingRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetFundingRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all funding requests (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-funding-requests">List all funding requests Documentation</a>
     */
    public com.squareup.okhttp.Call getFundingRequestsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetFundingRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFundingRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetFundingRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoal
     * @param goalId UUID of a goal (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal">Retrieve a goal Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal/{goal_id}"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalValidateBeforeCall(UUID goalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoal(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalCall(goalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a goal
     * 
     * @param goalId UUID of a goal (required)
     * @return SpecificGoalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal">Retrieve a goal Documentation</a>
     */
    public SpecificGoalResponse getGoal(UUID goalId) throws ApiException {
        ApiResponse<SpecificGoalResponse> resp = getGoalWithHttpInfo(goalId);
        return resp.getData();
    }

    /**
     * Retrieve a goal
     * 
     * @param goalId UUID of a goal (required)
     * @return ApiResponse&lt;SpecificGoalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal">Retrieve a goal Documentation</a>
     */
    public ApiResponse<SpecificGoalResponse> getGoalWithHttpInfo(UUID goalId) throws ApiException {
        com.squareup.okhttp.Call call = getGoalValidateBeforeCall(goalId, null, null);
        Type localVarReturnType = new TypeToken<SpecificGoalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a goal (asynchronously)
     * 
     * @param goalId UUID of a goal (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal">Retrieve a goal Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalAsync(UUID goalId, final ApiCallback<SpecificGoalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalValidateBeforeCall(goalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificGoalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalAssetSizes
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-asset-sizes">List goal asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalAssetSizesCall(UUID goalId, UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal/{goal_id}/asset_size"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalAssetSizesValidateBeforeCall(UUID goalId, UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalAssetSizes(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalAssetSizes(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalAssetSizesCall(goalId, clientId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List goal asset sizes
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GoalAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-asset-sizes">List goal asset sizes Documentation</a>
     */
    public GoalAssetSizeResponse getGoalAssetSizes(UUID goalId, UUID clientId, String filter) throws ApiException {
        ApiResponse<GoalAssetSizeResponse> resp = getGoalAssetSizesWithHttpInfo(goalId, clientId, filter);
        return resp.getData();
    }

    /**
     * List goal asset sizes
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GoalAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-asset-sizes">List goal asset sizes Documentation</a>
     */
    public ApiResponse<GoalAssetSizeResponse> getGoalAssetSizesWithHttpInfo(UUID goalId, UUID clientId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getGoalAssetSizesValidateBeforeCall(goalId, clientId, filter, null, null);
        Type localVarReturnType = new TypeToken<GoalAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List goal asset sizes (asynchronously)
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-asset-sizes">List goal asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalAssetSizesAsync(UUID goalId, UUID clientId, String filter, final ApiCallback<GoalAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalAssetSizesValidateBeforeCall(goalId, clientId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalHoldings
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-holdings">List goal holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalHoldingsCall(UUID goalId, UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}/holding"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalHoldingsValidateBeforeCall(UUID goalId, UUID clientId, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalHoldings(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalHoldings(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalHoldingsCall(goalId, clientId, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List goal holdings
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GoalHoldingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-holdings">List goal holdings Documentation</a>
     */
    public GoalHoldingsResponse getGoalHoldings(UUID goalId, UUID clientId, String filter) throws ApiException {
        ApiResponse<GoalHoldingsResponse> resp = getGoalHoldingsWithHttpInfo(goalId, clientId, filter);
        return resp.getData();
    }

    /**
     * List goal holdings
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GoalHoldingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-holdings">List goal holdings Documentation</a>
     */
    public ApiResponse<GoalHoldingsResponse> getGoalHoldingsWithHttpInfo(UUID goalId, UUID clientId, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getGoalHoldingsValidateBeforeCall(goalId, clientId, filter, null, null);
        Type localVarReturnType = new TypeToken<GoalHoldingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List goal holdings (asynchronously)
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-holdings">List goal holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalHoldingsAsync(UUID goalId, UUID clientId, String filter, final ApiCallback<GoalHoldingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalHoldingsValidateBeforeCall(goalId, clientId, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalHoldingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalPerformance
     * @param goalId UUID of a goal (required)
     * @param stat Performance statistic (required)
     * @param clientId UUID of a client (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Goal-Performance">Get goal performance Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalPerformanceCall(UUID goalId, String stat, UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal/{goal_id}/performance"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalPerformanceValidateBeforeCall(UUID goalId, String stat, UUID clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getGoalPerformance(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalPerformanceCall(goalId, stat, clientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get goal performance
     * 
     * @param goalId UUID of a goal (required)
     * @param stat Performance statistic (required)
     * @param clientId UUID of a client (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Goal-Performance">Get goal performance Documentation</a>
     */
    public PerformanceResponse getGoalPerformance(UUID goalId, String stat, UUID clientId) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getGoalPerformanceWithHttpInfo(goalId, stat, clientId);
        return resp.getData();
    }

    /**
     * Get goal performance
     * 
     * @param goalId UUID of a goal (required)
     * @param stat Performance statistic (required)
     * @param clientId UUID of a client (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Goal-Performance">Get goal performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getGoalPerformanceWithHttpInfo(UUID goalId, String stat, UUID clientId) throws ApiException {
        com.squareup.okhttp.Call call = getGoalPerformanceValidateBeforeCall(goalId, stat, clientId, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get goal performance (asynchronously)
     * 
     * @param goalId UUID of a goal (required)
     * @param stat Performance statistic (required)
     * @param clientId UUID of a client (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Goal-Performance">Get goal performance Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalPerformanceAsync(UUID goalId, String stat, UUID clientId, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalPerformanceValidateBeforeCall(goalId, stat, clientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalTrackRecord
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal-track-record">Retrieve a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalTrackRecordCall(UUID goalTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal_track/{goal_track_id}"
            .replaceAll("\\{" + "goal_track_id" + "\\}", apiClient.escapeString(goalTrackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalTrackRecordValidateBeforeCall(UUID goalTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalTrackId' is set
        if (goalTrackId == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId' when calling getGoalTrackRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalTrackRecordCall(goalTrackId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a goal track record
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @return SpecificGoalTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal-track-record">Retrieve a goal track record Documentation</a>
     */
    public SpecificGoalTrackResponse getGoalTrackRecord(UUID goalTrackId) throws ApiException {
        ApiResponse<SpecificGoalTrackResponse> resp = getGoalTrackRecordWithHttpInfo(goalTrackId);
        return resp.getData();
    }

    /**
     * Retrieve a goal track record
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @return ApiResponse&lt;SpecificGoalTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal-track-record">Retrieve a goal track record Documentation</a>
     */
    public ApiResponse<SpecificGoalTrackResponse> getGoalTrackRecordWithHttpInfo(UUID goalTrackId) throws ApiException {
        com.squareup.okhttp.Call call = getGoalTrackRecordValidateBeforeCall(goalTrackId, null, null);
        Type localVarReturnType = new TypeToken<SpecificGoalTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a goal track record (asynchronously)
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-goal-track-record">Retrieve a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalTrackRecordAsync(UUID goalTrackId, final ApiCallback<SpecificGoalTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalTrackRecordValidateBeforeCall(goalTrackId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificGoalTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalTrackRecords
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goal-track-records">List all goal track records Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalTrackRecordsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal_track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalTrackRecordsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getGoalTrackRecordsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all goal track records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetGoalTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goal-track-records">List all goal track records Documentation</a>
     */
    public GetGoalTrackResponse getGoalTrackRecords(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetGoalTrackResponse> resp = getGoalTrackRecordsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all goal track records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetGoalTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goal-track-records">List all goal track records Documentation</a>
     */
    public ApiResponse<GetGoalTrackResponse> getGoalTrackRecordsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getGoalTrackRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetGoalTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all goal track records (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goal-track-records">List all goal track records Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalTrackRecordsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetGoalTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalTrackRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetGoalTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoalTransactions
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-transactions">List goal transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalTransactionsCall(UUID goalId, UUID clientId, Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal/{goal_id}/transaction"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalTransactionsValidateBeforeCall(UUID goalId, UUID clientId, Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getGoalTransactions(Async)");
        }
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getGoalTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = getGoalTransactionsCall(goalId, clientId, page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List goal transactions
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GoalTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-transactions">List goal transactions Documentation</a>
     */
    public GoalTransactionsResponse getGoalTransactions(UUID goalId, UUID clientId, Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GoalTransactionsResponse> resp = getGoalTransactionsWithHttpInfo(goalId, clientId, page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List goal transactions
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GoalTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-transactions">List goal transactions Documentation</a>
     */
    public ApiResponse<GoalTransactionsResponse> getGoalTransactionsWithHttpInfo(UUID goalId, UUID clientId, Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getGoalTransactionsValidateBeforeCall(goalId, clientId, page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GoalTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List goal transactions (asynchronously)
     * 
     * @param goalId UUID of a goal (required)
     * @param clientId UUID of a client (required)
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-goal-transactions">List goal transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalTransactionsAsync(UUID goalId, UUID clientId, Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GoalTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalTransactionsValidateBeforeCall(goalId, clientId, page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGoals
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goals">List all goals Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGoalsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getGoalsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all goals
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetGoalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goals">List all goals Documentation</a>
     */
    public GetGoalResponse getGoals(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetGoalResponse> resp = getGoalsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all goals
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetGoalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goals">List all goals Documentation</a>
     */
    public ApiResponse<GetGoalResponse> getGoalsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getGoalsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetGoalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all goals (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-goals">List all goals Documentation</a>
     */
    public com.squareup.okhttp.Call getGoalsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetGoalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGoalsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetGoalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModel
     * @param modelId UUID of a model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model">Retrieve a model Documentation</a>
     */
    public com.squareup.okhttp.Call getModelCall(UUID modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model/{model_id}"
            .replaceAll("\\{" + "model_id" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelValidateBeforeCall(UUID modelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModel(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelCall(modelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a model
     * 
     * @param modelId UUID of a model (required)
     * @return SpecificModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model">Retrieve a model Documentation</a>
     */
    public SpecificModelResponse getModel(UUID modelId) throws ApiException {
        ApiResponse<SpecificModelResponse> resp = getModelWithHttpInfo(modelId);
        return resp.getData();
    }

    /**
     * Retrieve a model
     * 
     * @param modelId UUID of a model (required)
     * @return ApiResponse&lt;SpecificModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model">Retrieve a model Documentation</a>
     */
    public ApiResponse<SpecificModelResponse> getModelWithHttpInfo(UUID modelId) throws ApiException {
        com.squareup.okhttp.Call call = getModelValidateBeforeCall(modelId, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a model (asynchronously)
     * 
     * @param modelId UUID of a model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model">Retrieve a model Documentation</a>
     */
    public com.squareup.okhttp.Call getModelAsync(UUID modelId, final ApiCallback<SpecificModelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelValidateBeforeCall(modelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelAssetSize
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-size">Retrieve a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call getModelAssetSizeCall(UUID modelAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}"
            .replaceAll("\\{" + "model_asset_size_id" + "\\}", apiClient.escapeString(modelAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelAssetSizeValidateBeforeCall(UUID modelAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelAssetSizeId' is set
        if (modelAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'modelAssetSizeId' when calling getModelAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelAssetSizeCall(modelAssetSizeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a model asset size
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @return SpecificModelAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-size">Retrieve a model asset size Documentation</a>
     */
    public SpecificModelAssetSizeResponse getModelAssetSize(UUID modelAssetSizeId) throws ApiException {
        ApiResponse<SpecificModelAssetSizeResponse> resp = getModelAssetSizeWithHttpInfo(modelAssetSizeId);
        return resp.getData();
    }

    /**
     * Retrieve a model asset size
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @return ApiResponse&lt;SpecificModelAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-size">Retrieve a model asset size Documentation</a>
     */
    public ApiResponse<SpecificModelAssetSizeResponse> getModelAssetSizeWithHttpInfo(UUID modelAssetSizeId) throws ApiException {
        com.squareup.okhttp.Call call = getModelAssetSizeValidateBeforeCall(modelAssetSizeId, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a model asset size (asynchronously)
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-size">Retrieve a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call getModelAssetSizeAsync(UUID modelAssetSizeId, final ApiCallback<SpecificModelAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelAssetSizeValidateBeforeCall(modelAssetSizeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelAssetSizes
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-asset-sizes">List all model asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getModelAssetSizesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_asset_size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelAssetSizesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getModelAssetSizesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all model asset sizes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetModelAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-asset-sizes">List all model asset sizes Documentation</a>
     */
    public GetModelAssetSizeResponse getModelAssetSizes(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetModelAssetSizeResponse> resp = getModelAssetSizesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all model asset sizes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetModelAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-asset-sizes">List all model asset sizes Documentation</a>
     */
    public ApiResponse<GetModelAssetSizeResponse> getModelAssetSizesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getModelAssetSizesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetModelAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all model asset sizes (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-asset-sizes">List all model asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getModelAssetSizesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetModelAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelAssetSizesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetModelAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelComment
     * @param modelCommentId UUID of a model comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-commentary">Retrieve a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getModelCommentCall(UUID modelCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_comment/{model_comment_id}"
            .replaceAll("\\{" + "model_comment_id" + "\\}", apiClient.escapeString(modelCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelCommentValidateBeforeCall(UUID modelCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelCommentId' is set
        if (modelCommentId == null) {
            throw new ApiException("Missing the required parameter 'modelCommentId' when calling getModelComment(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelCommentCall(modelCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a model commentary
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @return SpecificModelCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-commentary">Retrieve a model commentary Documentation</a>
     */
    public SpecificModelCommentResponse getModelComment(UUID modelCommentId) throws ApiException {
        ApiResponse<SpecificModelCommentResponse> resp = getModelCommentWithHttpInfo(modelCommentId);
        return resp.getData();
    }

    /**
     * Retrieve a model commentary
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @return ApiResponse&lt;SpecificModelCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-commentary">Retrieve a model commentary Documentation</a>
     */
    public ApiResponse<SpecificModelCommentResponse> getModelCommentWithHttpInfo(UUID modelCommentId) throws ApiException {
        com.squareup.okhttp.Call call = getModelCommentValidateBeforeCall(modelCommentId, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a model commentary (asynchronously)
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-commentary">Retrieve a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getModelCommentAsync(UUID modelCommentId, final ApiCallback<SpecificModelCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelCommentValidateBeforeCall(modelCommentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelComments
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-commentary">List all model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getModelCommentsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelCommentsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getModelCommentsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all model commentary
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetModelCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-commentary">List all model commentary Documentation</a>
     */
    public GetModelCommentResponse getModelComments(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetModelCommentResponse> resp = getModelCommentsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all model commentary
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetModelCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-commentary">List all model commentary Documentation</a>
     */
    public ApiResponse<GetModelCommentResponse> getModelCommentsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getModelCommentsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetModelCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all model commentary (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-commentary">List all model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getModelCommentsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetModelCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelCommentsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetModelCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelHolding
     * @param modelHoldingId UUID of a model holding record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-holding">Retrieve a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call getModelHoldingCall(UUID modelHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_holding/{model_holding_id}"
            .replaceAll("\\{" + "model_holding_id" + "\\}", apiClient.escapeString(modelHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelHoldingValidateBeforeCall(UUID modelHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHoldingId' is set
        if (modelHoldingId == null) {
            throw new ApiException("Missing the required parameter 'modelHoldingId' when calling getModelHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelHoldingCall(modelHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a model holding
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @return SpecificModelHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-holding">Retrieve a model holding Documentation</a>
     */
    public SpecificModelHoldingResponse getModelHolding(UUID modelHoldingId) throws ApiException {
        ApiResponse<SpecificModelHoldingResponse> resp = getModelHoldingWithHttpInfo(modelHoldingId);
        return resp.getData();
    }

    /**
     * Retrieve a model holding
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @return ApiResponse&lt;SpecificModelHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-holding">Retrieve a model holding Documentation</a>
     */
    public ApiResponse<SpecificModelHoldingResponse> getModelHoldingWithHttpInfo(UUID modelHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = getModelHoldingValidateBeforeCall(modelHoldingId, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a model holding (asynchronously)
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-asset-holding">Retrieve a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call getModelHoldingAsync(UUID modelHoldingId, final ApiCallback<SpecificModelHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelHoldingValidateBeforeCall(modelHoldingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelHoldings
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-holdings">List all model holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getModelHoldingsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelHoldingsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getModelHoldingsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all model holdings
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetModelHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-holdings">List all model holdings Documentation</a>
     */
    public GetModelHoldingResponse getModelHoldings(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetModelHoldingResponse> resp = getModelHoldingsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all model holdings
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetModelHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-holdings">List all model holdings Documentation</a>
     */
    public ApiResponse<GetModelHoldingResponse> getModelHoldingsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getModelHoldingsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetModelHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all model holdings (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-holdings">List all model holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getModelHoldingsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetModelHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelHoldingsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetModelHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelPerformance
     * @param modelId UUID of a model (required)
     * @param stat Performance statistic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Model-Performance">Get model performance Documentation</a>
     */
    public com.squareup.okhttp.Call getModelPerformanceCall(UUID modelId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model/{model_id}/performance"
            .replaceAll("\\{" + "model_id" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelPerformanceValidateBeforeCall(UUID modelId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getModelPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelPerformanceCall(modelId, stat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get model performance
     * 
     * @param modelId UUID of a model (required)
     * @param stat Performance statistic (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Model-Performance">Get model performance Documentation</a>
     */
    public PerformanceResponse getModelPerformance(UUID modelId, String stat) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getModelPerformanceWithHttpInfo(modelId, stat);
        return resp.getData();
    }

    /**
     * Get model performance
     * 
     * @param modelId UUID of a model (required)
     * @param stat Performance statistic (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Model-Performance">Get model performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getModelPerformanceWithHttpInfo(UUID modelId, String stat) throws ApiException {
        com.squareup.okhttp.Call call = getModelPerformanceValidateBeforeCall(modelId, stat, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get model performance (asynchronously)
     * 
     * @param modelId UUID of a model (required)
     * @param stat Performance statistic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Model-Performance">Get model performance Documentation</a>
     */
    public com.squareup.okhttp.Call getModelPerformanceAsync(UUID modelId, String stat, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelPerformanceValidateBeforeCall(modelId, stat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelTransaction
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-transaction">Retrieve a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call getModelTransactionCall(UUID modelTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}"
            .replaceAll("\\{" + "model_transaction_id" + "\\}", apiClient.escapeString(modelTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelTransactionValidateBeforeCall(UUID modelTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelTransactionId' is set
        if (modelTransactionId == null) {
            throw new ApiException("Missing the required parameter 'modelTransactionId' when calling getModelTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = getModelTransactionCall(modelTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a model transaction
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @return SpecificModelTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-transaction">Retrieve a model transaction Documentation</a>
     */
    public SpecificModelTransactionResponse getModelTransaction(UUID modelTransactionId) throws ApiException {
        ApiResponse<SpecificModelTransactionResponse> resp = getModelTransactionWithHttpInfo(modelTransactionId);
        return resp.getData();
    }

    /**
     * Retrieve a model transaction
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @return ApiResponse&lt;SpecificModelTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-transaction">Retrieve a model transaction Documentation</a>
     */
    public ApiResponse<SpecificModelTransactionResponse> getModelTransactionWithHttpInfo(UUID modelTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = getModelTransactionValidateBeforeCall(modelTransactionId, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a model transaction (asynchronously)
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-model-transaction">Retrieve a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call getModelTransactionAsync(UUID modelTransactionId, final ApiCallback<SpecificModelTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelTransactionValidateBeforeCall(modelTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModelTransactions
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-transactions">List all model transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getModelTransactionsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelTransactionsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getModelTransactionsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all model transactions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetModelTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-transactions">List all model transactions Documentation</a>
     */
    public GetModelTransactionResponse getModelTransactions(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetModelTransactionResponse> resp = getModelTransactionsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all model transactions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetModelTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-transactions">List all model transactions Documentation</a>
     */
    public ApiResponse<GetModelTransactionResponse> getModelTransactionsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getModelTransactionsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetModelTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all model transactions (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-model-transactions">List all model transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getModelTransactionsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetModelTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelTransactionsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetModelTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModels
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-models">List all models Documentation</a>
     */
    public com.squareup.okhttp.Call getModelsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModelsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getModelsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all models
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-models">List all models Documentation</a>
     */
    public GetModelResponse getModels(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetModelResponse> resp = getModelsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all models
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-models">List all models Documentation</a>
     */
    public ApiResponse<GetModelResponse> getModelsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getModelsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetModelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all models (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-models">List all models Documentation</a>
     */
    public com.squareup.okhttp.Call getModelsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetModelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModelsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetModelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNode
     * @param nodeId UUID of a node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node">Retrieve a node Documentation</a>
     */
    public com.squareup.okhttp.Call getNodeCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node/{node_id}"
            .replaceAll("\\{" + "node_id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeValidateBeforeCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getNode(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeCall(nodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a node
     * 
     * @param nodeId UUID of a node (required)
     * @return SpecificNodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node">Retrieve a node Documentation</a>
     */
    public SpecificNodeResponse getNode(UUID nodeId) throws ApiException {
        ApiResponse<SpecificNodeResponse> resp = getNodeWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Retrieve a node
     * 
     * @param nodeId UUID of a node (required)
     * @return ApiResponse&lt;SpecificNodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node">Retrieve a node Documentation</a>
     */
    public ApiResponse<SpecificNodeResponse> getNodeWithHttpInfo(UUID nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getNodeValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<SpecificNodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a node (asynchronously)
     * 
     * @param nodeId UUID of a node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node">Retrieve a node Documentation</a>
     */
    public com.squareup.okhttp.Call getNodeAsync(UUID nodeId, final ApiCallback<SpecificNodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificNodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeRelationship
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node-relationship">Retrieve a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call getNodeRelationshipCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}"
            .replaceAll("\\{" + "node_relationship_id" + "\\}", apiClient.escapeString(nodeRelationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeRelationshipValidateBeforeCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeRelationshipId' is set
        if (nodeRelationshipId == null) {
            throw new ApiException("Missing the required parameter 'nodeRelationshipId' when calling getNodeRelationship(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeRelationshipCall(nodeRelationshipId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a node relationship
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @return SpecificNodeRelationshipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node-relationship">Retrieve a node relationship Documentation</a>
     */
    public SpecificNodeRelationshipResponse getNodeRelationship(UUID nodeRelationshipId) throws ApiException {
        ApiResponse<SpecificNodeRelationshipResponse> resp = getNodeRelationshipWithHttpInfo(nodeRelationshipId);
        return resp.getData();
    }

    /**
     * Retrieve a node relationship
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @return ApiResponse&lt;SpecificNodeRelationshipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node-relationship">Retrieve a node relationship Documentation</a>
     */
    public ApiResponse<SpecificNodeRelationshipResponse> getNodeRelationshipWithHttpInfo(UUID nodeRelationshipId) throws ApiException {
        com.squareup.okhttp.Call call = getNodeRelationshipValidateBeforeCall(nodeRelationshipId, null, null);
        Type localVarReturnType = new TypeToken<SpecificNodeRelationshipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a node relationship (asynchronously)
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-node-relationship">Retrieve a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call getNodeRelationshipAsync(UUID nodeRelationshipId, final ApiCallback<SpecificNodeRelationshipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeRelationshipValidateBeforeCall(nodeRelationshipId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificNodeRelationshipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeRelationships
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-node-relationships">List all node relationships Documentation</a>
     */
    public com.squareup.okhttp.Call getNodeRelationshipsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeRelationshipsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNodeRelationshipsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all node relationships
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetNodeRelationshipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-node-relationships">List all node relationships Documentation</a>
     */
    public GetNodeRelationshipResponse getNodeRelationships(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetNodeRelationshipResponse> resp = getNodeRelationshipsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all node relationships
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetNodeRelationshipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-node-relationships">List all node relationships Documentation</a>
     */
    public ApiResponse<GetNodeRelationshipResponse> getNodeRelationshipsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getNodeRelationshipsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetNodeRelationshipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all node relationships (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-node-relationships">List all node relationships Documentation</a>
     */
    public com.squareup.okhttp.Call getNodeRelationshipsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetNodeRelationshipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeRelationshipsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeRelationshipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodes
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-nodes">List all nodes Documentation</a>
     */
    public com.squareup.okhttp.Call getNodesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNodesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all nodes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetNodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-nodes">List all nodes Documentation</a>
     */
    public GetNodeResponse getNodes(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetNodeResponse> resp = getNodesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all nodes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetNodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-nodes">List all nodes Documentation</a>
     */
    public ApiResponse<GetNodeResponse> getNodesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getNodesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetNodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all nodes (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-nodes">List all nodes Documentation</a>
     */
    public com.squareup.okhttp.Call getNodesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetNodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderRecord
     * @param orderId UUID of an order record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-record">Retrieve an order record Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderRecordCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderRecordValidateBeforeCall(UUID orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderRecordCall(orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an order record
     * 
     * @param orderId UUID of an order record (required)
     * @return SpecificOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-record">Retrieve an order record Documentation</a>
     */
    public SpecificOrderResponse getOrderRecord(UUID orderId) throws ApiException {
        ApiResponse<SpecificOrderResponse> resp = getOrderRecordWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Retrieve an order record
     * 
     * @param orderId UUID of an order record (required)
     * @return ApiResponse&lt;SpecificOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-record">Retrieve an order record Documentation</a>
     */
    public ApiResponse<SpecificOrderResponse> getOrderRecordWithHttpInfo(UUID orderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderRecordValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<SpecificOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an order record (asynchronously)
     * 
     * @param orderId UUID of an order record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-record">Retrieve an order record Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderRecordAsync(UUID orderId, final ApiCallback<SpecificOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderRecordValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderRecords
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-records">List all order records Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderRecordsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderRecordsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderRecordsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all order records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-records">List all order records Documentation</a>
     */
    public GetOrderResponse getOrderRecords(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetOrderResponse> resp = getOrderRecordsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all order records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-records">List all order records Documentation</a>
     */
    public ApiResponse<GetOrderResponse> getOrderRecordsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getOrderRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all order records (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-records">List all order records Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderRecordsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderStatus
     * @param orderStatusId UUID of an order status record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-status">Retrieve an order status Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderStatusCall(UUID orderStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_status/{order_status_id}"
            .replaceAll("\\{" + "order_status_id" + "\\}", apiClient.escapeString(orderStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderStatusValidateBeforeCall(UUID orderStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderStatusId' is set
        if (orderStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderStatusId' when calling getOrderStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderStatusCall(orderStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an order status
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @return SpecificOrderStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-status">Retrieve an order status Documentation</a>
     */
    public SpecificOrderStatusResponse getOrderStatus(UUID orderStatusId) throws ApiException {
        ApiResponse<SpecificOrderStatusResponse> resp = getOrderStatusWithHttpInfo(orderStatusId);
        return resp.getData();
    }

    /**
     * Retrieve an order status
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @return ApiResponse&lt;SpecificOrderStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-status">Retrieve an order status Documentation</a>
     */
    public ApiResponse<SpecificOrderStatusResponse> getOrderStatusWithHttpInfo(UUID orderStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderStatusValidateBeforeCall(orderStatusId, null, null);
        Type localVarReturnType = new TypeToken<SpecificOrderStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an order status (asynchronously)
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-status">Retrieve an order status Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderStatusAsync(UUID orderStatusId, final ApiCallback<SpecificOrderStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderStatusValidateBeforeCall(orderStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificOrderStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderStatuses
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-statuses">List all order statuses Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderStatusesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderStatusesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderStatusesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all order statuses
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetOrderStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-statuses">List all order statuses Documentation</a>
     */
    public GetOrderStatusResponse getOrderStatuses(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetOrderStatusResponse> resp = getOrderStatusesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all order statuses
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetOrderStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-statuses">List all order statuses Documentation</a>
     */
    public ApiResponse<GetOrderStatusResponse> getOrderStatusesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getOrderStatusesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetOrderStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all order statuses (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-statuses">List all order statuses Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderStatusesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetOrderStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderStatusesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOrderStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderTrackingRecord
     * @param orderTrackId UUID of an order tracking record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-tracking-record">Retrieve an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderTrackingRecordCall(UUID orderTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_track/{order_track_id}"
            .replaceAll("\\{" + "order_track_id" + "\\}", apiClient.escapeString(orderTrackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderTrackingRecordValidateBeforeCall(UUID orderTrackId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderTrackId' is set
        if (orderTrackId == null) {
            throw new ApiException("Missing the required parameter 'orderTrackId' when calling getOrderTrackingRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = getOrderTrackingRecordCall(orderTrackId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an order tracking record
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @return SpecificOrderTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-tracking-record">Retrieve an order tracking record Documentation</a>
     */
    public SpecificOrderTrackResponse getOrderTrackingRecord(UUID orderTrackId) throws ApiException {
        ApiResponse<SpecificOrderTrackResponse> resp = getOrderTrackingRecordWithHttpInfo(orderTrackId);
        return resp.getData();
    }

    /**
     * Retrieve an order tracking record
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @return ApiResponse&lt;SpecificOrderTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-tracking-record">Retrieve an order tracking record Documentation</a>
     */
    public ApiResponse<SpecificOrderTrackResponse> getOrderTrackingRecordWithHttpInfo(UUID orderTrackId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderTrackingRecordValidateBeforeCall(orderTrackId, null, null);
        Type localVarReturnType = new TypeToken<SpecificOrderTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an order tracking record (asynchronously)
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-an-order-tracking-record">Retrieve an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderTrackingRecordAsync(UUID orderTrackId, final ApiCallback<SpecificOrderTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderTrackingRecordValidateBeforeCall(orderTrackId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificOrderTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrderTrackingRecords
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-tracking-records">List all order tracking records Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderTrackingRecordsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderTrackingRecordsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOrderTrackingRecordsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all order tracking records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetOrderTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-tracking-records">List all order tracking records Documentation</a>
     */
    public GetOrderTrackResponse getOrderTrackingRecords(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetOrderTrackResponse> resp = getOrderTrackingRecordsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all order tracking records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetOrderTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-tracking-records">List all order tracking records Documentation</a>
     */
    public ApiResponse<GetOrderTrackResponse> getOrderTrackingRecordsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getOrderTrackingRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetOrderTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all order tracking records (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-order-tracking-records">List all order tracking records Documentation</a>
     */
    public com.squareup.okhttp.Call getOrderTrackingRecordsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetOrderTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderTrackingRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOrderTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolio
     * @param portfolioId UUID of a portfolio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio">Retrieve a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioValidateBeforeCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @return SpecificPortfolioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio">Retrieve a portfolio Documentation</a>
     */
    public SpecificPortfolioResponse getPortfolio(UUID portfolioId) throws ApiException {
        ApiResponse<SpecificPortfolioResponse> resp = getPortfolioWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @return ApiResponse&lt;SpecificPortfolioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio">Retrieve a portfolio Documentation</a>
     */
    public ApiResponse<SpecificPortfolioResponse> getPortfolioWithHttpInfo(UUID portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio">Retrieve a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioAsync(UUID portfolioId, final ApiCallback<SpecificPortfolioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioAssetSize
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-asset-size">Retrieve a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizeCall(UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}"
            .replaceAll("\\{" + "portfolio_asset_size_id" + "\\}", apiClient.escapeString(portfolioAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioAssetSizeValidateBeforeCall(UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioAssetSizeId' is set
        if (portfolioAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSizeId' when calling getPortfolioAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioAssetSizeCall(portfolioAssetSizeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio asset size
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @return SpecificPortfolioAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-asset-size">Retrieve a portfolio asset size Documentation</a>
     */
    public SpecificPortfolioAssetSizeResponse getPortfolioAssetSize(UUID portfolioAssetSizeId) throws ApiException {
        ApiResponse<SpecificPortfolioAssetSizeResponse> resp = getPortfolioAssetSizeWithHttpInfo(portfolioAssetSizeId);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio asset size
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @return ApiResponse&lt;SpecificPortfolioAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-asset-size">Retrieve a portfolio asset size Documentation</a>
     */
    public ApiResponse<SpecificPortfolioAssetSizeResponse> getPortfolioAssetSizeWithHttpInfo(UUID portfolioAssetSizeId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioAssetSizeValidateBeforeCall(portfolioAssetSizeId, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio asset size (asynchronously)
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-asset-size">Retrieve a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizeAsync(UUID portfolioAssetSizeId, final ApiCallback<SpecificPortfolioAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioAssetSizeValidateBeforeCall(portfolioAssetSizeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioAssetSizes
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-asset-sizes">List all portfolio asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioAssetSizesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioAssetSizesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio asset sizes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetPortfolioAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-asset-sizes">List all portfolio asset sizes Documentation</a>
     */
    public GetPortfolioAssetSizeResponse getPortfolioAssetSizes(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetPortfolioAssetSizeResponse> resp = getPortfolioAssetSizesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all portfolio asset sizes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetPortfolioAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-asset-sizes">List all portfolio asset sizes Documentation</a>
     */
    public ApiResponse<GetPortfolioAssetSizeResponse> getPortfolioAssetSizesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioAssetSizesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetPortfolioAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio asset sizes (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-asset-sizes">List all portfolio asset sizes Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetPortfolioAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioAssetSizesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPortfolioAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioComment
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-commentary">Retrieve a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioCommentCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}"
            .replaceAll("\\{" + "portfolio_comment_id" + "\\}", apiClient.escapeString(portfolioCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioCommentValidateBeforeCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioCommentId' is set
        if (portfolioCommentId == null) {
            throw new ApiException("Missing the required parameter 'portfolioCommentId' when calling getPortfolioComment(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioCommentCall(portfolioCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio commentary
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @return SpecificPortfolioCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-commentary">Retrieve a portfolio commentary Documentation</a>
     */
    public SpecificPortfolioCommentResponse getPortfolioComment(UUID portfolioCommentId) throws ApiException {
        ApiResponse<SpecificPortfolioCommentResponse> resp = getPortfolioCommentWithHttpInfo(portfolioCommentId);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio commentary
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @return ApiResponse&lt;SpecificPortfolioCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-commentary">Retrieve a portfolio commentary Documentation</a>
     */
    public ApiResponse<SpecificPortfolioCommentResponse> getPortfolioCommentWithHttpInfo(UUID portfolioCommentId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioCommentValidateBeforeCall(portfolioCommentId, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio commentary (asynchronously)
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-commentary">Retrieve a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioCommentAsync(UUID portfolioCommentId, final ApiCallback<SpecificPortfolioCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioCommentValidateBeforeCall(portfolioCommentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioComments
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-commentary">List all portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioCommentsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioCommentsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioCommentsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio commentary
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetPortfolioCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-commentary">List all portfolio commentary Documentation</a>
     */
    public GetPortfolioCommentResponse getPortfolioComments(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetPortfolioCommentResponse> resp = getPortfolioCommentsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all portfolio commentary
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetPortfolioCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-commentary">List all portfolio commentary Documentation</a>
     */
    public ApiResponse<GetPortfolioCommentResponse> getPortfolioCommentsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioCommentsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetPortfolioCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio commentary (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-commentary">List all portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioCommentsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetPortfolioCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioCommentsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPortfolioCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioHolding
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-holding">Retrieve a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioHoldingCall(UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}"
            .replaceAll("\\{" + "portfolio_holding_id" + "\\}", apiClient.escapeString(portfolioHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioHoldingValidateBeforeCall(UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioHoldingId' is set
        if (portfolioHoldingId == null) {
            throw new ApiException("Missing the required parameter 'portfolioHoldingId' when calling getPortfolioHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioHoldingCall(portfolioHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio holding
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @return SpecificPortfolioHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-holding">Retrieve a portfolio holding Documentation</a>
     */
    public SpecificPortfolioHoldingResponse getPortfolioHolding(UUID portfolioHoldingId) throws ApiException {
        ApiResponse<SpecificPortfolioHoldingResponse> resp = getPortfolioHoldingWithHttpInfo(portfolioHoldingId);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio holding
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @return ApiResponse&lt;SpecificPortfolioHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-holding">Retrieve a portfolio holding Documentation</a>
     */
    public ApiResponse<SpecificPortfolioHoldingResponse> getPortfolioHoldingWithHttpInfo(UUID portfolioHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioHoldingValidateBeforeCall(portfolioHoldingId, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio holding (asynchronously)
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-holding">Retrieve a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioHoldingAsync(UUID portfolioHoldingId, final ApiCallback<SpecificPortfolioHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioHoldingValidateBeforeCall(portfolioHoldingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioHoldings
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-holdings">List all portfolio holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioHoldingsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioHoldingsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioHoldingsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio holdings
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetPortfolioHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-holdings">List all portfolio holdings Documentation</a>
     */
    public GetPortfolioHoldingResponse getPortfolioHoldings(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetPortfolioHoldingResponse> resp = getPortfolioHoldingsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all portfolio holdings
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetPortfolioHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-holdings">List all portfolio holdings Documentation</a>
     */
    public ApiResponse<GetPortfolioHoldingResponse> getPortfolioHoldingsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioHoldingsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetPortfolioHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio holdings (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-holdings">List all portfolio holdings Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioHoldingsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetPortfolioHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioHoldingsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPortfolioHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioPerformance
     * @param portfolioId UUID of a portfolio (required)
     * @param stat Performance statistic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Portfolio-Performance">Get portfolio performance Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioPerformanceCall(UUID portfolioId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/performance"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioPerformanceValidateBeforeCall(UUID portfolioId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getPortfolioPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getPortfolioPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioPerformanceCall(portfolioId, stat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get portfolio performance
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param stat Performance statistic (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Portfolio-Performance">Get portfolio performance Documentation</a>
     */
    public PerformanceResponse getPortfolioPerformance(UUID portfolioId, String stat) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getPortfolioPerformanceWithHttpInfo(portfolioId, stat);
        return resp.getData();
    }

    /**
     * Get portfolio performance
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param stat Performance statistic (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Portfolio-Performance">Get portfolio performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getPortfolioPerformanceWithHttpInfo(UUID portfolioId, String stat) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioPerformanceValidateBeforeCall(portfolioId, stat, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get portfolio performance (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param stat Performance statistic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Portfolio-Performance">Get portfolio performance Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioPerformanceAsync(UUID portfolioId, String stat, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioPerformanceValidateBeforeCall(portfolioId, stat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioTransaction
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-transaction">Retrieve a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioTransactionCall(UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}"
            .replaceAll("\\{" + "portfolio_transaction_id" + "\\}", apiClient.escapeString(portfolioTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioTransactionValidateBeforeCall(UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioTransactionId' is set
        if (portfolioTransactionId == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionId' when calling getPortfolioTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioTransactionCall(portfolioTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio transaction
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @return SpecificPortfolioTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-transaction">Retrieve a portfolio transaction Documentation</a>
     */
    public SpecificPortfolioTransactionResponse getPortfolioTransaction(UUID portfolioTransactionId) throws ApiException {
        ApiResponse<SpecificPortfolioTransactionResponse> resp = getPortfolioTransactionWithHttpInfo(portfolioTransactionId);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio transaction
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @return ApiResponse&lt;SpecificPortfolioTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-transaction">Retrieve a portfolio transaction Documentation</a>
     */
    public ApiResponse<SpecificPortfolioTransactionResponse> getPortfolioTransactionWithHttpInfo(UUID portfolioTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioTransactionValidateBeforeCall(portfolioTransactionId, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio transaction (asynchronously)
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-portfolio-transaction">Retrieve a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioTransactionAsync(UUID portfolioTransactionId, final ApiCallback<SpecificPortfolioTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioTransactionValidateBeforeCall(portfolioTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioTransactions
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-transactions">List all portfolio transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioTransactionsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioTransactionsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioTransactionsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio transactions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetPortfolioTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-transactions">List all portfolio transactions Documentation</a>
     */
    public GetPortfolioTransactionResponse getPortfolioTransactions(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetPortfolioTransactionResponse> resp = getPortfolioTransactionsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all portfolio transactions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetPortfolioTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-transactions">List all portfolio transactions Documentation</a>
     */
    public ApiResponse<GetPortfolioTransactionResponse> getPortfolioTransactionsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioTransactionsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetPortfolioTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio transactions (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolio-transactions">List all portfolio transactions Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfolioTransactionsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetPortfolioTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioTransactionsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPortfolioTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolios
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolios">List all portfolios Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfoliosCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfoliosValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfoliosCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolios
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetPortfolioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolios">List all portfolios Documentation</a>
     */
    public GetPortfolioResponse getPortfolios(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetPortfolioResponse> resp = getPortfoliosWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all portfolios
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetPortfolioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolios">List all portfolios Documentation</a>
     */
    public ApiResponse<GetPortfolioResponse> getPortfoliosWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getPortfoliosValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetPortfolioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolios (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-portfolios">List all portfolios Documentation</a>
     */
    public com.squareup.okhttp.Call getPortfoliosAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetPortfolioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfoliosValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPortfolioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuestionnaire
     * @param questionnaireId UUID of a questionnaire (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-questionnaire">Retrieve a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call getQuestionnaireCall(UUID questionnaireId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}"
            .replaceAll("\\{" + "questionnaire_id" + "\\}", apiClient.escapeString(questionnaireId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionnaireValidateBeforeCall(UUID questionnaireId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionnaireId' is set
        if (questionnaireId == null) {
            throw new ApiException("Missing the required parameter 'questionnaireId' when calling getQuestionnaire(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuestionnaireCall(questionnaireId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a questionnaire
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @return SpecificQuestionnaireResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-questionnaire">Retrieve a questionnaire Documentation</a>
     */
    public SpecificQuestionnaireResponse getQuestionnaire(UUID questionnaireId) throws ApiException {
        ApiResponse<SpecificQuestionnaireResponse> resp = getQuestionnaireWithHttpInfo(questionnaireId);
        return resp.getData();
    }

    /**
     * Retrieve a questionnaire
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @return ApiResponse&lt;SpecificQuestionnaireResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-questionnaire">Retrieve a questionnaire Documentation</a>
     */
    public ApiResponse<SpecificQuestionnaireResponse> getQuestionnaireWithHttpInfo(UUID questionnaireId) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionnaireValidateBeforeCall(questionnaireId, null, null);
        Type localVarReturnType = new TypeToken<SpecificQuestionnaireResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a questionnaire (asynchronously)
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-questionnaire">Retrieve a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call getQuestionnaireAsync(UUID questionnaireId, final ApiCallback<SpecificQuestionnaireResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionnaireValidateBeforeCall(questionnaireId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificQuestionnaireResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuestionnaires
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-questionnaires">List all questionnaires Documentation</a>
     */
    public com.squareup.okhttp.Call getQuestionnairesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/questionnaire";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionnairesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getQuestionnairesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all questionnaires
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetQuestionnaireResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-questionnaires">List all questionnaires Documentation</a>
     */
    public GetQuestionnaireResponse getQuestionnaires(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetQuestionnaireResponse> resp = getQuestionnairesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all questionnaires
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetQuestionnaireResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-questionnaires">List all questionnaires Documentation</a>
     */
    public ApiResponse<GetQuestionnaireResponse> getQuestionnairesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionnairesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetQuestionnaireResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all questionnaires (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-questionnaires">List all questionnaires Documentation</a>
     */
    public com.squareup.okhttp.Call getQuestionnairesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetQuestionnaireResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionnairesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetQuestionnaireResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScore
     * @param scoreId UUID of a score record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-score">Retrieve a score Documentation</a>
     */
    public com.squareup.okhttp.Call getScoreCall(UUID scoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/score/{score_id}"
            .replaceAll("\\{" + "score_id" + "\\}", apiClient.escapeString(scoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScoreValidateBeforeCall(UUID scoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scoreId' is set
        if (scoreId == null) {
            throw new ApiException("Missing the required parameter 'scoreId' when calling getScore(Async)");
        }
        

        com.squareup.okhttp.Call call = getScoreCall(scoreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a score
     * 
     * @param scoreId UUID of a score record (required)
     * @return SpecificScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-score">Retrieve a score Documentation</a>
     */
    public SpecificScoreResponse getScore(UUID scoreId) throws ApiException {
        ApiResponse<SpecificScoreResponse> resp = getScoreWithHttpInfo(scoreId);
        return resp.getData();
    }

    /**
     * Retrieve a score
     * 
     * @param scoreId UUID of a score record (required)
     * @return ApiResponse&lt;SpecificScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-score">Retrieve a score Documentation</a>
     */
    public ApiResponse<SpecificScoreResponse> getScoreWithHttpInfo(UUID scoreId) throws ApiException {
        com.squareup.okhttp.Call call = getScoreValidateBeforeCall(scoreId, null, null);
        Type localVarReturnType = new TypeToken<SpecificScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a score (asynchronously)
     * 
     * @param scoreId UUID of a score record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-score">Retrieve a score Documentation</a>
     */
    public com.squareup.okhttp.Call getScoreAsync(UUID scoreId, final ApiCallback<SpecificScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScoreValidateBeforeCall(scoreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScores
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-scores">List all scores Documentation</a>
     */
    public com.squareup.okhttp.Call getScoresCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScoresValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getScoresCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all scores
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-scores">List all scores Documentation</a>
     */
    public GetScoreResponse getScores(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetScoreResponse> resp = getScoresWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all scores
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-scores">List all scores Documentation</a>
     */
    public ApiResponse<GetScoreResponse> getScoresWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getScoresValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all scores (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-scores">List all scores Documentation</a>
     */
    public com.squareup.okhttp.Call getScoresAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScoresValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurities
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-securities">List all securities Documentation</a>
     */
    public com.squareup.okhttp.Call getSecuritiesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecuritiesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSecuritiesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all securities
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetSecurityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-securities">List all securities Documentation</a>
     */
    public GetSecurityResponse getSecurities(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetSecurityResponse> resp = getSecuritiesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all securities
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetSecurityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-securities">List all securities Documentation</a>
     */
    public ApiResponse<GetSecurityResponse> getSecuritiesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getSecuritiesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetSecurityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all securities (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-securities">List all securities Documentation</a>
     */
    public com.squareup.okhttp.Call getSecuritiesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetSecurityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecuritiesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSecurityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurity
     * @param securityId UUID of a security (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security">Retrieve a security Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityCall(UUID securityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security/{security_id}"
            .replaceAll("\\{" + "security_id" + "\\}", apiClient.escapeString(securityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityValidateBeforeCall(UUID securityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityId' is set
        if (securityId == null) {
            throw new ApiException("Missing the required parameter 'securityId' when calling getSecurity(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecurityCall(securityId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a security
     * 
     * @param securityId UUID of a security (required)
     * @return SpecificSecurityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security">Retrieve a security Documentation</a>
     */
    public SpecificSecurityResponse getSecurity(UUID securityId) throws ApiException {
        ApiResponse<SpecificSecurityResponse> resp = getSecurityWithHttpInfo(securityId);
        return resp.getData();
    }

    /**
     * Retrieve a security
     * 
     * @param securityId UUID of a security (required)
     * @return ApiResponse&lt;SpecificSecurityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security">Retrieve a security Documentation</a>
     */
    public ApiResponse<SpecificSecurityResponse> getSecurityWithHttpInfo(UUID securityId) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityValidateBeforeCall(securityId, null, null);
        Type localVarReturnType = new TypeToken<SpecificSecurityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a security (asynchronously)
     * 
     * @param securityId UUID of a security (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security">Retrieve a security Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityAsync(UUID securityId, final ApiCallback<SpecificSecurityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityValidateBeforeCall(securityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSecurityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurityExclusion
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-exclusion">Retrieve a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityExclusionCall(UUID securityExclusionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}"
            .replaceAll("\\{" + "security_exclusion_id" + "\\}", apiClient.escapeString(securityExclusionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityExclusionValidateBeforeCall(UUID securityExclusionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityExclusionId' is set
        if (securityExclusionId == null) {
            throw new ApiException("Missing the required parameter 'securityExclusionId' when calling getSecurityExclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecurityExclusionCall(securityExclusionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a security exclusion
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @return SpecificSecurityExclusionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-exclusion">Retrieve a security exclusion Documentation</a>
     */
    public SpecificSecurityExclusionResponse getSecurityExclusion(UUID securityExclusionId) throws ApiException {
        ApiResponse<SpecificSecurityExclusionResponse> resp = getSecurityExclusionWithHttpInfo(securityExclusionId);
        return resp.getData();
    }

    /**
     * Retrieve a security exclusion
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @return ApiResponse&lt;SpecificSecurityExclusionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-exclusion">Retrieve a security exclusion Documentation</a>
     */
    public ApiResponse<SpecificSecurityExclusionResponse> getSecurityExclusionWithHttpInfo(UUID securityExclusionId) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityExclusionValidateBeforeCall(securityExclusionId, null, null);
        Type localVarReturnType = new TypeToken<SpecificSecurityExclusionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a security exclusion (asynchronously)
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-exclusion">Retrieve a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityExclusionAsync(UUID securityExclusionId, final ApiCallback<SpecificSecurityExclusionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityExclusionValidateBeforeCall(securityExclusionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSecurityExclusionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurityExclusions
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-exclusions">List all security exclusions Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityExclusionsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_exclusion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityExclusionsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSecurityExclusionsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all security exclusions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetSecurityExclusionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-exclusions">List all security exclusions Documentation</a>
     */
    public GetSecurityExclusionResponse getSecurityExclusions(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetSecurityExclusionResponse> resp = getSecurityExclusionsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all security exclusions
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetSecurityExclusionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-exclusions">List all security exclusions Documentation</a>
     */
    public ApiResponse<GetSecurityExclusionResponse> getSecurityExclusionsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityExclusionsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetSecurityExclusionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all security exclusions (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-exclusions">List all security exclusions Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityExclusionsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetSecurityExclusionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityExclusionsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSecurityExclusionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurityPerformance
     * @param securityId UUID of a security (required)
     * @param stat Performance statistic (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Security-Performance">Get security performance Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityPerformanceCall(UUID securityId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security/{security_id}/performance"
            .replaceAll("\\{" + "security_id" + "\\}", apiClient.escapeString(securityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stat", stat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityPerformanceValidateBeforeCall(UUID securityId, String stat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityId' is set
        if (securityId == null) {
            throw new ApiException("Missing the required parameter 'securityId' when calling getSecurityPerformance(Async)");
        }
        
        // verify the required parameter 'stat' is set
        if (stat == null) {
            throw new ApiException("Missing the required parameter 'stat' when calling getSecurityPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecurityPerformanceCall(securityId, stat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get security performance
     * 
     * @param securityId UUID of a security (required)
     * @param stat Performance statistic (required)
     * @return PerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Security-Performance">Get security performance Documentation</a>
     */
    public PerformanceResponse getSecurityPerformance(UUID securityId, String stat) throws ApiException {
        ApiResponse<PerformanceResponse> resp = getSecurityPerformanceWithHttpInfo(securityId, stat);
        return resp.getData();
    }

    /**
     * Get security performance
     * 
     * @param securityId UUID of a security (required)
     * @param stat Performance statistic (required)
     * @return ApiResponse&lt;PerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Security-Performance">Get security performance Documentation</a>
     */
    public ApiResponse<PerformanceResponse> getSecurityPerformanceWithHttpInfo(UUID securityId, String stat) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityPerformanceValidateBeforeCall(securityId, stat, null, null);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get security performance (asynchronously)
     * 
     * @param securityId UUID of a security (required)
     * @param stat Performance statistic (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Security-Performance">Get security performance Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityPerformanceAsync(UUID securityId, String stat, final ApiCallback<PerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityPerformanceValidateBeforeCall(securityId, stat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurityPrice
     * @param securityPriceId UUID of a security price record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-price">Retrieve a security price Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityPriceCall(UUID securityPriceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_price/{security_price_id}"
            .replaceAll("\\{" + "security_price_id" + "\\}", apiClient.escapeString(securityPriceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityPriceValidateBeforeCall(UUID securityPriceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityPriceId' is set
        if (securityPriceId == null) {
            throw new ApiException("Missing the required parameter 'securityPriceId' when calling getSecurityPrice(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecurityPriceCall(securityPriceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a security price
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @return SpecificSecurityPriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-price">Retrieve a security price Documentation</a>
     */
    public SpecificSecurityPriceResponse getSecurityPrice(UUID securityPriceId) throws ApiException {
        ApiResponse<SpecificSecurityPriceResponse> resp = getSecurityPriceWithHttpInfo(securityPriceId);
        return resp.getData();
    }

    /**
     * Retrieve a security price
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @return ApiResponse&lt;SpecificSecurityPriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-price">Retrieve a security price Documentation</a>
     */
    public ApiResponse<SpecificSecurityPriceResponse> getSecurityPriceWithHttpInfo(UUID securityPriceId) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityPriceValidateBeforeCall(securityPriceId, null, null);
        Type localVarReturnType = new TypeToken<SpecificSecurityPriceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a security price (asynchronously)
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-security-price">Retrieve a security price Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityPriceAsync(UUID securityPriceId, final ApiCallback<SpecificSecurityPriceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityPriceValidateBeforeCall(securityPriceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSecurityPriceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurityPrices
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-prices">List all security prices Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityPricesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityPricesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSecurityPricesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all security prices
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetSecurityPriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-prices">List all security prices Documentation</a>
     */
    public GetSecurityPriceResponse getSecurityPrices(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetSecurityPriceResponse> resp = getSecurityPricesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all security prices
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetSecurityPriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-prices">List all security prices Documentation</a>
     */
    public ApiResponse<GetSecurityPriceResponse> getSecurityPricesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityPricesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetSecurityPriceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all security prices (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-security-prices">List all security prices Documentation</a>
     */
    public com.squareup.okhttp.Call getSecurityPricesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetSecurityPriceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityPricesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSecurityPriceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionCode
     * @param transactionCodeId UUID of a transaction code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transaction-code">Retrieve a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call getTransactionCodeCall(UUID transactionCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}"
            .replaceAll("\\{" + "transaction_code_id" + "\\}", apiClient.escapeString(transactionCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionCodeValidateBeforeCall(UUID transactionCodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transactionCodeId' is set
        if (transactionCodeId == null) {
            throw new ApiException("Missing the required parameter 'transactionCodeId' when calling getTransactionCode(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionCodeCall(transactionCodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a transaction code
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @return SpecificTransactionCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transaction-code">Retrieve a transaction code Documentation</a>
     */
    public SpecificTransactionCodeResponse getTransactionCode(UUID transactionCodeId) throws ApiException {
        ApiResponse<SpecificTransactionCodeResponse> resp = getTransactionCodeWithHttpInfo(transactionCodeId);
        return resp.getData();
    }

    /**
     * Retrieve a transaction code
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @return ApiResponse&lt;SpecificTransactionCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transaction-code">Retrieve a transaction code Documentation</a>
     */
    public ApiResponse<SpecificTransactionCodeResponse> getTransactionCodeWithHttpInfo(UUID transactionCodeId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionCodeValidateBeforeCall(transactionCodeId, null, null);
        Type localVarReturnType = new TypeToken<SpecificTransactionCodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a transaction code (asynchronously)
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transaction-code">Retrieve a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call getTransactionCodeAsync(UUID transactionCodeId, final ApiCallback<SpecificTransactionCodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionCodeValidateBeforeCall(transactionCodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificTransactionCodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionCodes
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transaction-codes">List all transaction codes Documentation</a>
     */
    public com.squareup.okhttp.Call getTransactionCodesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transaction_code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionCodesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTransactionCodesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all transaction codes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetTransactionCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transaction-codes">List all transaction codes Documentation</a>
     */
    public GetTransactionCodeResponse getTransactionCodes(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetTransactionCodeResponse> resp = getTransactionCodesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all transaction codes
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetTransactionCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transaction-codes">List all transaction codes Documentation</a>
     */
    public ApiResponse<GetTransactionCodeResponse> getTransactionCodesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionCodesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetTransactionCodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all transaction codes (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transaction-codes">List all transaction codes Documentation</a>
     */
    public com.squareup.okhttp.Call getTransactionCodesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetTransactionCodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionCodesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTransactionCodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransferRequest
     * @param transferId UUID of an account transfer record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transfer-request">Retrieve a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call getTransferRequestCall(UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer/{transfer_id}"
            .replaceAll("\\{" + "transfer_id" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransferRequestValidateBeforeCall(UUID transferId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling getTransferRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransferRequestCall(transferId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a transfer request
     * 
     * @param transferId UUID of an account transfer record (required)
     * @return SpecificTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transfer-request">Retrieve a transfer request Documentation</a>
     */
    public SpecificTransferResponse getTransferRequest(UUID transferId) throws ApiException {
        ApiResponse<SpecificTransferResponse> resp = getTransferRequestWithHttpInfo(transferId);
        return resp.getData();
    }

    /**
     * Retrieve a transfer request
     * 
     * @param transferId UUID of an account transfer record (required)
     * @return ApiResponse&lt;SpecificTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transfer-request">Retrieve a transfer request Documentation</a>
     */
    public ApiResponse<SpecificTransferResponse> getTransferRequestWithHttpInfo(UUID transferId) throws ApiException {
        com.squareup.okhttp.Call call = getTransferRequestValidateBeforeCall(transferId, null, null);
        Type localVarReturnType = new TypeToken<SpecificTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a transfer request (asynchronously)
     * 
     * @param transferId UUID of an account transfer record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-transfer-request">Retrieve a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call getTransferRequestAsync(UUID transferId, final ApiCallback<SpecificTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransferRequestValidateBeforeCall(transferId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransferRequests
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transfer-requests">List all transfer requests Documentation</a>
     */
    public com.squareup.okhttp.Call getTransferRequestsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransferRequestsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTransferRequestsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all transfer requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transfer-requests">List all transfer requests Documentation</a>
     */
    public GetTransferResponse getTransferRequests(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetTransferResponse> resp = getTransferRequestsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all transfer requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transfer-requests">List all transfer requests Documentation</a>
     */
    public ApiResponse<GetTransferResponse> getTransferRequestsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getTransferRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all transfer requests (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-transfer-requests">List all transfer requests Documentation</a>
     */
    public com.squareup.okhttp.Call getTransferRequestsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransferRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWithdrawalRequest
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-withdrawal-request">Retrieve a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call getWithdrawalRequestCall(UUID withdrawalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/withdrawal/{withdrawal_id}"
            .replaceAll("\\{" + "withdrawal_id" + "\\}", apiClient.escapeString(withdrawalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWithdrawalRequestValidateBeforeCall(UUID withdrawalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'withdrawalId' is set
        if (withdrawalId == null) {
            throw new ApiException("Missing the required parameter 'withdrawalId' when calling getWithdrawalRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = getWithdrawalRequestCall(withdrawalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a withdrawal request
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @return SpecificWithdrawalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-withdrawal-request">Retrieve a withdrawal request Documentation</a>
     */
    public SpecificWithdrawalResponse getWithdrawalRequest(UUID withdrawalId) throws ApiException {
        ApiResponse<SpecificWithdrawalResponse> resp = getWithdrawalRequestWithHttpInfo(withdrawalId);
        return resp.getData();
    }

    /**
     * Retrieve a withdrawal request
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @return ApiResponse&lt;SpecificWithdrawalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-withdrawal-request">Retrieve a withdrawal request Documentation</a>
     */
    public ApiResponse<SpecificWithdrawalResponse> getWithdrawalRequestWithHttpInfo(UUID withdrawalId) throws ApiException {
        com.squareup.okhttp.Call call = getWithdrawalRequestValidateBeforeCall(withdrawalId, null, null);
        Type localVarReturnType = new TypeToken<SpecificWithdrawalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a withdrawal request (asynchronously)
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Retrieve-a-withdrawal-request">Retrieve a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call getWithdrawalRequestAsync(UUID withdrawalId, final ApiCallback<SpecificWithdrawalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWithdrawalRequestValidateBeforeCall(withdrawalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificWithdrawalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWithdrawalRequests
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-withdrawal-requests">List all withdrawal requests Documentation</a>
     */
    public com.squareup.okhttp.Call getWithdrawalRequestsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/withdrawal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWithdrawalRequestsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getWithdrawalRequestsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all withdrawal requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetWithdrawalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-withdrawal-requests">List all withdrawal requests Documentation</a>
     */
    public GetWithdrawalResponse getWithdrawalRequests(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetWithdrawalResponse> resp = getWithdrawalRequestsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all withdrawal requests
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetWithdrawalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-withdrawal-requests">List all withdrawal requests Documentation</a>
     */
    public ApiResponse<GetWithdrawalResponse> getWithdrawalRequestsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getWithdrawalRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetWithdrawalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all withdrawal requests (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#List-all-withdrawal-requests">List all withdrawal requests Documentation</a>
     */
    public com.squareup.okhttp.Call getWithdrawalRequestsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetWithdrawalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWithdrawalRequestsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetWithdrawalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account">Create an account under a client Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountCall(AccountCreatePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountValidateBeforeCall(AccountCreatePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account under a client
     * 
     * @param payload  (required)
     * @return CreateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account">Create an account under a client Documentation</a>
     */
    public CreateAccountResponse postAccount(AccountCreatePayload payload) throws ApiException {
        ApiResponse<CreateAccountResponse> resp = postAccountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an account under a client
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account">Create an account under a client Documentation</a>
     */
    public ApiResponse<CreateAccountResponse> postAccountWithHttpInfo(AccountCreatePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account under a client (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account">Create an account under a client Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountAsync(AccountCreatePayload payload, final ApiCallback<CreateAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountAllocation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-allocation">Create an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountAllocationCall(AccountAllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountAllocationValidateBeforeCall(AccountAllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountAllocationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account allocation
     * 
     * @param payload  (required)
     * @return SpecificAccountAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-allocation">Create an account allocation Documentation</a>
     */
    public SpecificAccountAllocationResponse postAccountAllocation(AccountAllocationPayload payload) throws ApiException {
        ApiResponse<SpecificAccountAllocationResponse> resp = postAccountAllocationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an account allocation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAccountAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-allocation">Create an account allocation Documentation</a>
     */
    public ApiResponse<SpecificAccountAllocationResponse> postAccountAllocationWithHttpInfo(AccountAllocationPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountAllocationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account allocation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-allocation">Create an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountAllocationAsync(AccountAllocationPayload payload, final ApiCallback<SpecificAccountAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountAllocationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountBulkOrder
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-an-account">Bulk orders for an account Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountBulkOrderCall(UUID accountId, BulkOrderAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/order_bulk"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountBulkOrderValidateBeforeCall(UUID accountId, BulkOrderAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountBulkOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountBulkOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountBulkOrderCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bulk orders for an account
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return BulkOrderFirmclientaccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-an-account">Bulk orders for an account Documentation</a>
     */
    public BulkOrderFirmclientaccountResponse postAccountBulkOrder(UUID accountId, BulkOrderAccountPayload payload) throws ApiException {
        ApiResponse<BulkOrderFirmclientaccountResponse> resp = postAccountBulkOrderWithHttpInfo(accountId, payload);
        return resp.getData();
    }

    /**
     * Bulk orders for an account
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;BulkOrderFirmclientaccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-an-account">Bulk orders for an account Documentation</a>
     */
    public ApiResponse<BulkOrderFirmclientaccountResponse> postAccountBulkOrderWithHttpInfo(UUID accountId, BulkOrderAccountPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountBulkOrderValidateBeforeCall(accountId, payload, null, null);
        Type localVarReturnType = new TypeToken<BulkOrderFirmclientaccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk orders for an account (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-an-account">Bulk orders for an account Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountBulkOrderAsync(UUID accountId, BulkOrderAccountPayload payload, final ApiCallback<BulkOrderFirmclientaccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountBulkOrderValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkOrderFirmclientaccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountRebalanceBuyOnlyOrder
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-account-rebalance-orders">Create buy-only account rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountRebalanceBuyOnlyOrderCall(UUID accountId, AccountRebalanceBuyOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/order_buy_only"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountRebalanceBuyOnlyOrderValidateBeforeCall(UUID accountId, AccountRebalanceBuyOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountRebalanceBuyOnlyOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountRebalanceBuyOnlyOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountRebalanceBuyOnlyOrderCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create buy-only account rebalance orders
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-account-rebalance-orders">Create buy-only account rebalance orders Documentation</a>
     */
    public void postAccountRebalanceBuyOnlyOrder(UUID accountId, AccountRebalanceBuyOnlyOrderPayload payload) throws ApiException {
        postAccountRebalanceBuyOnlyOrderWithHttpInfo(accountId, payload);
    }

    /**
     * Create buy-only account rebalance orders
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-account-rebalance-orders">Create buy-only account rebalance orders Documentation</a>
     */
    public ApiResponse<Void> postAccountRebalanceBuyOnlyOrderWithHttpInfo(UUID accountId, AccountRebalanceBuyOnlyOrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountRebalanceBuyOnlyOrderValidateBeforeCall(accountId, payload, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create buy-only account rebalance orders (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-account-rebalance-orders">Create buy-only account rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountRebalanceBuyOnlyOrderAsync(UUID accountId, AccountRebalanceBuyOnlyOrderPayload payload, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountRebalanceBuyOnlyOrderValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountRebalanceOrder
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-account-rebalance-orders">Create account rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountRebalanceOrderCall(UUID accountId, AccountRebalanceOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/order_rebalance"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountRebalanceOrderValidateBeforeCall(UUID accountId, AccountRebalanceOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountRebalanceOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountRebalanceOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountRebalanceOrderCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create account rebalance orders
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return SpecificOrderTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-account-rebalance-orders">Create account rebalance orders Documentation</a>
     */
    public SpecificOrderTrackResponse postAccountRebalanceOrder(UUID accountId, AccountRebalanceOrderPayload payload) throws ApiException {
        ApiResponse<SpecificOrderTrackResponse> resp = postAccountRebalanceOrderWithHttpInfo(accountId, payload);
        return resp.getData();
    }

    /**
     * Create account rebalance orders
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificOrderTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-account-rebalance-orders">Create account rebalance orders Documentation</a>
     */
    public ApiResponse<SpecificOrderTrackResponse> postAccountRebalanceOrderWithHttpInfo(UUID accountId, AccountRebalanceOrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountRebalanceOrderValidateBeforeCall(accountId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificOrderTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create account rebalance orders (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-account-rebalance-orders">Create account rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountRebalanceOrderAsync(UUID accountId, AccountRebalanceOrderPayload payload, final ApiCallback<SpecificOrderTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountRebalanceOrderValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificOrderTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountRebalanceSellOnlyOrder
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-account-rebalance-orders">Create sell-only account rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountRebalanceSellOnlyOrderCall(UUID accountId, AccountRebalanceSellOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/order_sell_only"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountRebalanceSellOnlyOrderValidateBeforeCall(UUID accountId, AccountRebalanceSellOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountRebalanceSellOnlyOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountRebalanceSellOnlyOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountRebalanceSellOnlyOrderCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create sell-only account rebalance orders
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-account-rebalance-orders">Create sell-only account rebalance orders Documentation</a>
     */
    public void postAccountRebalanceSellOnlyOrder(UUID accountId, AccountRebalanceSellOnlyOrderPayload payload) throws ApiException {
        postAccountRebalanceSellOnlyOrderWithHttpInfo(accountId, payload);
    }

    /**
     * Create sell-only account rebalance orders
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-account-rebalance-orders">Create sell-only account rebalance orders Documentation</a>
     */
    public ApiResponse<Void> postAccountRebalanceSellOnlyOrderWithHttpInfo(UUID accountId, AccountRebalanceSellOnlyOrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountRebalanceSellOnlyOrderValidateBeforeCall(accountId, payload, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create sell-only account rebalance orders (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-account-rebalance-orders">Create sell-only account rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountRebalanceSellOnlyOrderAsync(UUID accountId, AccountRebalanceSellOnlyOrderPayload payload, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountRebalanceSellOnlyOrderValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountSellAllOrder
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-account-order">Sell all account order Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountSellAllOrderCall(UUID accountId, SellAllAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/order_sell_all"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountSellAllOrderValidateBeforeCall(UUID accountId, SellAllAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountSellAllOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountSellAllOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountSellAllOrderCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sell all account order
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return SellAllAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-account-order">Sell all account order Documentation</a>
     */
    public SellAllAccountResponse postAccountSellAllOrder(UUID accountId, SellAllAccountPayload payload) throws ApiException {
        ApiResponse<SellAllAccountResponse> resp = postAccountSellAllOrderWithHttpInfo(accountId, payload);
        return resp.getData();
    }

    /**
     * Sell all account order
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SellAllAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-account-order">Sell all account order Documentation</a>
     */
    public ApiResponse<SellAllAccountResponse> postAccountSellAllOrderWithHttpInfo(UUID accountId, SellAllAccountPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountSellAllOrderValidateBeforeCall(accountId, payload, null, null);
        Type localVarReturnType = new TypeToken<SellAllAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sell all account order (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-account-order">Sell all account order Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountSellAllOrderAsync(UUID accountId, SellAllAccountPayload payload, final ApiCallback<SellAllAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountSellAllOrderValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SellAllAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountStage
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-stage">Create an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountStageCall(AccountStagePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/stage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountStageValidateBeforeCall(AccountStagePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountStage(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountStageCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account stage
     * 
     * @param payload  (required)
     * @return SpecificAccountStageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-stage">Create an account stage Documentation</a>
     */
    public SpecificAccountStageResponse postAccountStage(AccountStagePayload payload) throws ApiException {
        ApiResponse<SpecificAccountStageResponse> resp = postAccountStageWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an account stage
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAccountStageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-stage">Create an account stage Documentation</a>
     */
    public ApiResponse<SpecificAccountStageResponse> postAccountStageWithHttpInfo(AccountStagePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountStageValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountStageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account stage (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-stage">Create an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountStageAsync(AccountStagePayload payload, final ApiCallback<SpecificAccountStageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountStageValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountStageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountStatus
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-status">Create an account status Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountStatusCall(AccountStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountStatusValidateBeforeCall(AccountStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountStatusCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account status
     * 
     * @param payload  (required)
     * @return CreateAccountStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-status">Create an account status Documentation</a>
     */
    public CreateAccountStatusResponse postAccountStatus(AccountStatusPayload payload) throws ApiException {
        ApiResponse<CreateAccountStatusResponse> resp = postAccountStatusWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an account status
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateAccountStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-status">Create an account status Documentation</a>
     */
    public ApiResponse<CreateAccountStatusResponse> postAccountStatusWithHttpInfo(AccountStatusPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountStatusValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateAccountStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account status (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-status">Create an account status Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountStatusAsync(AccountStatusPayload payload, final ApiCallback<CreateAccountStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountStatusValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAccountStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountType
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-type">Create an account type Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountTypeCall(AccountTypePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountTypeValidateBeforeCall(AccountTypePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAccountType(Async)");
        }
        

        com.squareup.okhttp.Call call = postAccountTypeCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account type
     * 
     * @param payload  (required)
     * @return GetAccountTypeSubresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-type">Create an account type Documentation</a>
     */
    public GetAccountTypeSubresponse postAccountType(AccountTypePayload payload) throws ApiException {
        ApiResponse<GetAccountTypeSubresponse> resp = postAccountTypeWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an account type
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;GetAccountTypeSubresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-type">Create an account type Documentation</a>
     */
    public ApiResponse<GetAccountTypeSubresponse> postAccountTypeWithHttpInfo(AccountTypePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAccountTypeValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<GetAccountTypeSubresponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account type (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-account-type">Create an account type Documentation</a>
     */
    public com.squareup.okhttp.Call postAccountTypeAsync(AccountTypePayload payload, final ApiCallback<GetAccountTypeSubresponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountTypeValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountTypeSubresponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAggregationAccount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account">Create an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call postAggregationAccountCall(AggregationAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAggregationAccountValidateBeforeCall(AggregationAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAggregationAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = postAggregationAccountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an aggregation account
     * 
     * @param payload  (required)
     * @return CreateAggregationAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account">Create an aggregation account Documentation</a>
     */
    public CreateAggregationAccountResponse postAggregationAccount(AggregationAccountPayload payload) throws ApiException {
        ApiResponse<CreateAggregationAccountResponse> resp = postAggregationAccountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an aggregation account
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateAggregationAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account">Create an aggregation account Documentation</a>
     */
    public ApiResponse<CreateAggregationAccountResponse> postAggregationAccountWithHttpInfo(AggregationAccountPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAggregationAccountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateAggregationAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an aggregation account (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account">Create an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call postAggregationAccountAsync(AggregationAccountPayload payload, final ApiCallback<CreateAggregationAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAggregationAccountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAggregationAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAggregationAccountBalance
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account-balance">Create an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call postAggregationAccountBalanceCall(AggregationAccountBalancePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAggregationAccountBalanceValidateBeforeCall(AggregationAccountBalancePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAggregationAccountBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = postAggregationAccountBalanceCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an aggregation account balance
     * 
     * @param payload  (required)
     * @return CreateAggregationAccountBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account-balance">Create an aggregation account balance Documentation</a>
     */
    public CreateAggregationAccountBalanceResponse postAggregationAccountBalance(AggregationAccountBalancePayload payload) throws ApiException {
        ApiResponse<CreateAggregationAccountBalanceResponse> resp = postAggregationAccountBalanceWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an aggregation account balance
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateAggregationAccountBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account-balance">Create an aggregation account balance Documentation</a>
     */
    public ApiResponse<CreateAggregationAccountBalanceResponse> postAggregationAccountBalanceWithHttpInfo(AggregationAccountBalancePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAggregationAccountBalanceValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateAggregationAccountBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an aggregation account balance (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-aggregation-account-balance">Create an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call postAggregationAccountBalanceAsync(AggregationAccountBalancePayload payload, final ApiCallback<CreateAggregationAccountBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAggregationAccountBalanceValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAggregationAccountBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAllocation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation">Create an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call postAllocationCall(AllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAllocationValidateBeforeCall(AllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = postAllocationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an allocation
     * 
     * @param payload  (required)
     * @return CreateAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation">Create an allocation Documentation</a>
     */
    public CreateAllocationResponse postAllocation(AllocationPayload payload) throws ApiException {
        ApiResponse<CreateAllocationResponse> resp = postAllocationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an allocation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation">Create an allocation Documentation</a>
     */
    public ApiResponse<CreateAllocationResponse> postAllocationWithHttpInfo(AllocationPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAllocationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an allocation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation">Create an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call postAllocationAsync(AllocationPayload payload, final ApiCallback<CreateAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAllocationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAllocationComposition
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation-composition">Create an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call postAllocationCompositionCall(AllocationCompositionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAllocationCompositionValidateBeforeCall(AllocationCompositionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postAllocationComposition(Async)");
        }
        

        com.squareup.okhttp.Call call = postAllocationCompositionCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an allocation composition
     * 
     * @param payload  (required)
     * @return CreateAllocationCompositionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation-composition">Create an allocation composition Documentation</a>
     */
    public CreateAllocationCompositionResponse postAllocationComposition(AllocationCompositionPayload payload) throws ApiException {
        ApiResponse<CreateAllocationCompositionResponse> resp = postAllocationCompositionWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an allocation composition
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateAllocationCompositionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation-composition">Create an allocation composition Documentation</a>
     */
    public ApiResponse<CreateAllocationCompositionResponse> postAllocationCompositionWithHttpInfo(AllocationCompositionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postAllocationCompositionValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateAllocationCompositionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an allocation composition (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-allocation-composition">Create an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call postAllocationCompositionAsync(AllocationCompositionPayload payload, final ApiCallback<CreateAllocationCompositionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAllocationCompositionValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAllocationCompositionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBankLink
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-bank-link">Create a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call postBankLinkCall(BankLinkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBankLinkValidateBeforeCall(BankLinkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postBankLink(Async)");
        }
        

        com.squareup.okhttp.Call call = postBankLinkCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a bank link
     * 
     * @param payload  (required)
     * @return CreateBankLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-bank-link">Create a bank link Documentation</a>
     */
    public CreateBankLinkResponse postBankLink(BankLinkPayload payload) throws ApiException {
        ApiResponse<CreateBankLinkResponse> resp = postBankLinkWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a bank link
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateBankLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-bank-link">Create a bank link Documentation</a>
     */
    public ApiResponse<CreateBankLinkResponse> postBankLinkWithHttpInfo(BankLinkPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postBankLinkValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateBankLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a bank link (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-bank-link">Create a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call postBankLinkAsync(BankLinkPayload payload, final ApiCallback<CreateBankLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBankLinkValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateBankLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBenchmark
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-benchmark">Create a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call postBenchmarkCall(BenchmarkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBenchmarkValidateBeforeCall(BenchmarkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postBenchmark(Async)");
        }
        

        com.squareup.okhttp.Call call = postBenchmarkCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a benchmark
     * 
     * @param payload  (required)
     * @return CreateBenchmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-benchmark">Create a benchmark Documentation</a>
     */
    public CreateBenchmarkResponse postBenchmark(BenchmarkPayload payload) throws ApiException {
        ApiResponse<CreateBenchmarkResponse> resp = postBenchmarkWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a benchmark
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateBenchmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-benchmark">Create a benchmark Documentation</a>
     */
    public ApiResponse<CreateBenchmarkResponse> postBenchmarkWithHttpInfo(BenchmarkPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postBenchmarkValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateBenchmarkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a benchmark (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-benchmark">Create a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call postBenchmarkAsync(BenchmarkPayload payload, final ApiCallback<CreateBenchmarkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBenchmarkValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateBenchmarkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postBulkOrder
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-your-firm">Bulk orders for your firm Documentation</a>
     */
    public com.squareup.okhttp.Call postBulkOrderCall(BulkOrderFirmPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postBulkOrderValidateBeforeCall(BulkOrderFirmPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postBulkOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postBulkOrderCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bulk orders for your firm
     * 
     * @param payload  (required)
     * @return BulkOrderFirmclientaccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-your-firm">Bulk orders for your firm Documentation</a>
     */
    public BulkOrderFirmclientaccountResponse postBulkOrder(BulkOrderFirmPayload payload) throws ApiException {
        ApiResponse<BulkOrderFirmclientaccountResponse> resp = postBulkOrderWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Bulk orders for your firm
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;BulkOrderFirmclientaccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-your-firm">Bulk orders for your firm Documentation</a>
     */
    public ApiResponse<BulkOrderFirmclientaccountResponse> postBulkOrderWithHttpInfo(BulkOrderFirmPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postBulkOrderValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<BulkOrderFirmclientaccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk orders for your firm (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-your-firm">Bulk orders for your firm Documentation</a>
     */
    public com.squareup.okhttp.Call postBulkOrderAsync(BulkOrderFirmPayload payload, final ApiCallback<BulkOrderFirmclientaccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBulkOrderValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkOrderFirmclientaccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postClient
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client">Create a client Documentation</a>
     */
    public com.squareup.okhttp.Call postClientCall(ClientPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postClientValidateBeforeCall(ClientPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postClient(Async)");
        }
        

        com.squareup.okhttp.Call call = postClientCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a client
     * 
     * @param payload  (required)
     * @return CreateClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client">Create a client Documentation</a>
     */
    public CreateClientResponse postClient(ClientPayload payload) throws ApiException {
        ApiResponse<CreateClientResponse> resp = postClientWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a client
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client">Create a client Documentation</a>
     */
    public ApiResponse<CreateClientResponse> postClientWithHttpInfo(ClientPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postClientValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateClientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a client (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client">Create a client Documentation</a>
     */
    public com.squareup.okhttp.Call postClientAsync(ClientPayload payload, final ApiCallback<CreateClientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postClientValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateClientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postClientBulkOrder
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-a-client">Bulk orders for a client Documentation</a>
     */
    public com.squareup.okhttp.Call postClientBulkOrderCall(UUID clientId, BulkOrderClientPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}/order_bulk"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postClientBulkOrderValidateBeforeCall(UUID clientId, BulkOrderClientPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling postClientBulkOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postClientBulkOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postClientBulkOrderCall(clientId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bulk orders for a client
     * 
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @return BulkOrderFirmclientaccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-a-client">Bulk orders for a client Documentation</a>
     */
    public BulkOrderFirmclientaccountResponse postClientBulkOrder(UUID clientId, BulkOrderClientPayload payload) throws ApiException {
        ApiResponse<BulkOrderFirmclientaccountResponse> resp = postClientBulkOrderWithHttpInfo(clientId, payload);
        return resp.getData();
    }

    /**
     * Bulk orders for a client
     * 
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @return ApiResponse&lt;BulkOrderFirmclientaccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-a-client">Bulk orders for a client Documentation</a>
     */
    public ApiResponse<BulkOrderFirmclientaccountResponse> postClientBulkOrderWithHttpInfo(UUID clientId, BulkOrderClientPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postClientBulkOrderValidateBeforeCall(clientId, payload, null, null);
        Type localVarReturnType = new TypeToken<BulkOrderFirmclientaccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk orders for a client (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Bulk-orders-for-a-client">Bulk orders for a client Documentation</a>
     */
    public com.squareup.okhttp.Call postClientBulkOrderAsync(UUID clientId, BulkOrderClientPayload payload, final ApiCallback<BulkOrderFirmclientaccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postClientBulkOrderValidateBeforeCall(clientId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkOrderFirmclientaccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postClientHydro
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-hydro-relationship">Create a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call postClientHydroCall(ClientHydroPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_hydro";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postClientHydroValidateBeforeCall(ClientHydroPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postClientHydro(Async)");
        }
        

        com.squareup.okhttp.Call call = postClientHydroCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a client-hydro relationship
     * 
     * @param payload  (required)
     * @return CreateClientHydroResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-hydro-relationship">Create a client-hydro relationship Documentation</a>
     */
    public CreateClientHydroResponse postClientHydro(ClientHydroPayload payload) throws ApiException {
        ApiResponse<CreateClientHydroResponse> resp = postClientHydroWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a client-hydro relationship
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateClientHydroResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-hydro-relationship">Create a client-hydro relationship Documentation</a>
     */
    public ApiResponse<CreateClientHydroResponse> postClientHydroWithHttpInfo(ClientHydroPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postClientHydroValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateClientHydroResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a client-hydro relationship (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-hydro-relationship">Create a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call postClientHydroAsync(ClientHydroPayload payload, final ApiCallback<CreateClientHydroResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postClientHydroValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateClientHydroResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postClientResponse
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-response">Create a client response Documentation</a>
     */
    public com.squareup.okhttp.Call postClientResponseCall(ClientResponsePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_response";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postClientResponseValidateBeforeCall(ClientResponsePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postClientResponse(Async)");
        }
        

        com.squareup.okhttp.Call call = postClientResponseCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a client response
     * 
     * @param payload  (required)
     * @return CreateClientResponseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-response">Create a client response Documentation</a>
     */
    public CreateClientResponseResponse postClientResponse(ClientResponsePayload payload) throws ApiException {
        ApiResponse<CreateClientResponseResponse> resp = postClientResponseWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a client response
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateClientResponseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-response">Create a client response Documentation</a>
     */
    public ApiResponse<CreateClientResponseResponse> postClientResponseWithHttpInfo(ClientResponsePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postClientResponseValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateClientResponseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a client response (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-client-response">Create a client response Documentation</a>
     */
    public com.squareup.okhttp.Call postClientResponseAsync(ClientResponsePayload payload, final ApiCallback<CreateClientResponseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postClientResponseValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateClientResponseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDecisionTree
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-decision-tree">Create a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call postDecisionTreeCall(DecisionTreePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDecisionTreeValidateBeforeCall(DecisionTreePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postDecisionTree(Async)");
        }
        

        com.squareup.okhttp.Call call = postDecisionTreeCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a decision tree
     * 
     * @param payload  (required)
     * @return CreateDecisionTreeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-decision-tree">Create a decision tree Documentation</a>
     */
    public CreateDecisionTreeResponse postDecisionTree(DecisionTreePayload payload) throws ApiException {
        ApiResponse<CreateDecisionTreeResponse> resp = postDecisionTreeWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a decision tree
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateDecisionTreeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-decision-tree">Create a decision tree Documentation</a>
     */
    public ApiResponse<CreateDecisionTreeResponse> postDecisionTreeWithHttpInfo(DecisionTreePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postDecisionTreeValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateDecisionTreeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a decision tree (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-decision-tree">Create a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call postDecisionTreeAsync(DecisionTreePayload payload, final ApiCallback<CreateDecisionTreeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDecisionTreeValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDecisionTreeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDepositRequest
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-deposit-request">Create a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call postDepositRequestCall(DepositRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDepositRequestValidateBeforeCall(DepositRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postDepositRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = postDepositRequestCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a deposit request
     * 
     * @param payload  (required)
     * @return CreateDepositRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-deposit-request">Create a deposit request Documentation</a>
     */
    public CreateDepositRequestResponse postDepositRequest(DepositRequestPayload payload) throws ApiException {
        ApiResponse<CreateDepositRequestResponse> resp = postDepositRequestWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a deposit request
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateDepositRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-deposit-request">Create a deposit request Documentation</a>
     */
    public ApiResponse<CreateDepositRequestResponse> postDepositRequestWithHttpInfo(DepositRequestPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postDepositRequestValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateDepositRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a deposit request (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-deposit-request">Create a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call postDepositRequestAsync(DepositRequestPayload payload, final ApiCallback<CreateDepositRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDepositRequestValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDepositRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFundingRequest
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-funding-request">Create a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call postFundingRequestCall(FundingRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFundingRequestValidateBeforeCall(FundingRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postFundingRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = postFundingRequestCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a funding request
     * 
     * @param payload  (required)
     * @return CreateFundingRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-funding-request">Create a funding request Documentation</a>
     */
    public CreateFundingRequestResponse postFundingRequest(FundingRequestPayload payload) throws ApiException {
        ApiResponse<CreateFundingRequestResponse> resp = postFundingRequestWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a funding request
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateFundingRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-funding-request">Create a funding request Documentation</a>
     */
    public ApiResponse<CreateFundingRequestResponse> postFundingRequestWithHttpInfo(FundingRequestPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postFundingRequestValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateFundingRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a funding request (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-funding-request">Create a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call postFundingRequestAsync(FundingRequestPayload payload, final ApiCallback<CreateFundingRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFundingRequestValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateFundingRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGoal
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal">Create a goal Documentation</a>
     */
    public com.squareup.okhttp.Call postGoalCall(GoalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGoalValidateBeforeCall(GoalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postGoal(Async)");
        }
        

        com.squareup.okhttp.Call call = postGoalCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a goal
     * 
     * @param payload  (required)
     * @return CreateGoalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal">Create a goal Documentation</a>
     */
    public CreateGoalResponse postGoal(GoalPayload payload) throws ApiException {
        ApiResponse<CreateGoalResponse> resp = postGoalWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a goal
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateGoalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal">Create a goal Documentation</a>
     */
    public ApiResponse<CreateGoalResponse> postGoalWithHttpInfo(GoalPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postGoalValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateGoalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a goal (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal">Create a goal Documentation</a>
     */
    public com.squareup.okhttp.Call postGoalAsync(GoalPayload payload, final ApiCallback<CreateGoalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGoalValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateGoalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postGoalTrackRecord
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal-track-record">Create a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call postGoalTrackRecordCall(GoalTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal_track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postGoalTrackRecordValidateBeforeCall(GoalTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postGoalTrackRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = postGoalTrackRecordCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a goal track record
     * 
     * @param payload  (required)
     * @return CreateGoalTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal-track-record">Create a goal track record Documentation</a>
     */
    public CreateGoalTrackResponse postGoalTrackRecord(GoalTrackPayload payload) throws ApiException {
        ApiResponse<CreateGoalTrackResponse> resp = postGoalTrackRecordWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a goal track record
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateGoalTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal-track-record">Create a goal track record Documentation</a>
     */
    public ApiResponse<CreateGoalTrackResponse> postGoalTrackRecordWithHttpInfo(GoalTrackPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postGoalTrackRecordValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateGoalTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a goal track record (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-goal-track-record">Create a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call postGoalTrackRecordAsync(GoalTrackPayload payload, final ApiCallback<CreateGoalTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postGoalTrackRecordValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateGoalTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postModel
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model">Create a model Documentation</a>
     */
    public com.squareup.okhttp.Call postModelCall(ModelPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postModelValidateBeforeCall(ModelPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postModel(Async)");
        }
        

        com.squareup.okhttp.Call call = postModelCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a model
     * 
     * @param payload  (required)
     * @return CreateModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model">Create a model Documentation</a>
     */
    public CreateModelResponse postModel(ModelPayload payload) throws ApiException {
        ApiResponse<CreateModelResponse> resp = postModelWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a model
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model">Create a model Documentation</a>
     */
    public ApiResponse<CreateModelResponse> postModelWithHttpInfo(ModelPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postModelValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateModelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a model (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model">Create a model Documentation</a>
     */
    public com.squareup.okhttp.Call postModelAsync(ModelPayload payload, final ApiCallback<CreateModelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postModelValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateModelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postModelAssetSize
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-asset-size">Create a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call postModelAssetSizeCall(ModelAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_asset_size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postModelAssetSizeValidateBeforeCall(ModelAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postModelAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = postModelAssetSizeCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a model asset size
     * 
     * @param payload  (required)
     * @return CreateModelAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-asset-size">Create a model asset size Documentation</a>
     */
    public CreateModelAssetSizeResponse postModelAssetSize(ModelAssetSizePayload payload) throws ApiException {
        ApiResponse<CreateModelAssetSizeResponse> resp = postModelAssetSizeWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a model asset size
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateModelAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-asset-size">Create a model asset size Documentation</a>
     */
    public ApiResponse<CreateModelAssetSizeResponse> postModelAssetSizeWithHttpInfo(ModelAssetSizePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postModelAssetSizeValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateModelAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a model asset size (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-asset-size">Create a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call postModelAssetSizeAsync(ModelAssetSizePayload payload, final ApiCallback<CreateModelAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postModelAssetSizeValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateModelAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postModelComment
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-commentary">Create a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call postModelCommentCall(ModelCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postModelCommentValidateBeforeCall(ModelCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postModelComment(Async)");
        }
        

        com.squareup.okhttp.Call call = postModelCommentCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a model commentary
     * 
     * @param payload  (required)
     * @return CreateModelCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-commentary">Create a model commentary Documentation</a>
     */
    public CreateModelCommentResponse postModelComment(ModelCommentPayload payload) throws ApiException {
        ApiResponse<CreateModelCommentResponse> resp = postModelCommentWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a model commentary
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateModelCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-commentary">Create a model commentary Documentation</a>
     */
    public ApiResponse<CreateModelCommentResponse> postModelCommentWithHttpInfo(ModelCommentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postModelCommentValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateModelCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a model commentary (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-commentary">Create a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call postModelCommentAsync(ModelCommentPayload payload, final ApiCallback<CreateModelCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postModelCommentValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateModelCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postModelHolding
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-holding">Create a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call postModelHoldingCall(ModelHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postModelHoldingValidateBeforeCall(ModelHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postModelHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = postModelHoldingCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a model holding
     * 
     * @param payload  (required)
     * @return CreateModelHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-holding">Create a model holding Documentation</a>
     */
    public CreateModelHoldingResponse postModelHolding(ModelHoldingPayload payload) throws ApiException {
        ApiResponse<CreateModelHoldingResponse> resp = postModelHoldingWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a model holding
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateModelHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-holding">Create a model holding Documentation</a>
     */
    public ApiResponse<CreateModelHoldingResponse> postModelHoldingWithHttpInfo(ModelHoldingPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postModelHoldingValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateModelHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a model holding (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-holding">Create a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call postModelHoldingAsync(ModelHoldingPayload payload, final ApiCallback<CreateModelHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postModelHoldingValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateModelHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postModelTransaction
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-transaction">Create a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call postModelTransactionCall(ModelTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postModelTransactionValidateBeforeCall(ModelTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postModelTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = postModelTransactionCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a model transaction
     * 
     * @param payload  (required)
     * @return CreateModelTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-transaction">Create a model transaction Documentation</a>
     */
    public CreateModelTransactionResponse postModelTransaction(ModelTransactionPayload payload) throws ApiException {
        ApiResponse<CreateModelTransactionResponse> resp = postModelTransactionWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a model transaction
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateModelTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-transaction">Create a model transaction Documentation</a>
     */
    public ApiResponse<CreateModelTransactionResponse> postModelTransactionWithHttpInfo(ModelTransactionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postModelTransactionValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateModelTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a model transaction (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-model-transaction">Create a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call postModelTransactionAsync(ModelTransactionPayload payload, final ApiCallback<CreateModelTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postModelTransactionValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateModelTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postNode
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node">Create a node Documentation</a>
     */
    public com.squareup.okhttp.Call postNodeCall(NodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postNodeValidateBeforeCall(NodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postNode(Async)");
        }
        

        com.squareup.okhttp.Call call = postNodeCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a node
     * 
     * @param payload  (required)
     * @return CreateNodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node">Create a node Documentation</a>
     */
    public CreateNodeResponse postNode(NodePayload payload) throws ApiException {
        ApiResponse<CreateNodeResponse> resp = postNodeWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a node
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateNodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node">Create a node Documentation</a>
     */
    public ApiResponse<CreateNodeResponse> postNodeWithHttpInfo(NodePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postNodeValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateNodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a node (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node">Create a node Documentation</a>
     */
    public com.squareup.okhttp.Call postNodeAsync(NodePayload payload, final ApiCallback<CreateNodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNodeValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postNodeRelationship
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node-relationship">Create a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call postNodeRelationshipCall(NodeRelationshipPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postNodeRelationshipValidateBeforeCall(NodeRelationshipPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postNodeRelationship(Async)");
        }
        

        com.squareup.okhttp.Call call = postNodeRelationshipCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a node relationship
     * 
     * @param payload  (required)
     * @return CreateNodeRelationshipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node-relationship">Create a node relationship Documentation</a>
     */
    public CreateNodeRelationshipResponse postNodeRelationship(NodeRelationshipPayload payload) throws ApiException {
        ApiResponse<CreateNodeRelationshipResponse> resp = postNodeRelationshipWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a node relationship
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateNodeRelationshipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node-relationship">Create a node relationship Documentation</a>
     */
    public ApiResponse<CreateNodeRelationshipResponse> postNodeRelationshipWithHttpInfo(NodeRelationshipPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postNodeRelationshipValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateNodeRelationshipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a node relationship (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-node-relationship">Create a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call postNodeRelationshipAsync(NodeRelationshipPayload payload, final ApiCallback<CreateNodeRelationshipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postNodeRelationshipValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNodeRelationshipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOrderRecord
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-record">Create an order record Documentation</a>
     */
    public com.squareup.okhttp.Call postOrderRecordCall(OrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOrderRecordValidateBeforeCall(OrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postOrderRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = postOrderRecordCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an order record
     * 
     * @param payload  (required)
     * @return CreateOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-record">Create an order record Documentation</a>
     */
    public CreateOrderResponse postOrderRecord(OrderPayload payload) throws ApiException {
        ApiResponse<CreateOrderResponse> resp = postOrderRecordWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an order record
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-record">Create an order record Documentation</a>
     */
    public ApiResponse<CreateOrderResponse> postOrderRecordWithHttpInfo(OrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postOrderRecordValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an order record (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-record">Create an order record Documentation</a>
     */
    public com.squareup.okhttp.Call postOrderRecordAsync(OrderPayload payload, final ApiCallback<CreateOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOrderRecordValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOrderStatus
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-status">Create an order status Documentation</a>
     */
    public com.squareup.okhttp.Call postOrderStatusCall(OrderStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOrderStatusValidateBeforeCall(OrderStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postOrderStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = postOrderStatusCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an order status
     * 
     * @param payload  (required)
     * @return CreateOrderStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-status">Create an order status Documentation</a>
     */
    public CreateOrderStatusResponse postOrderStatus(OrderStatusPayload payload) throws ApiException {
        ApiResponse<CreateOrderStatusResponse> resp = postOrderStatusWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an order status
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateOrderStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-status">Create an order status Documentation</a>
     */
    public ApiResponse<CreateOrderStatusResponse> postOrderStatusWithHttpInfo(OrderStatusPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postOrderStatusValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateOrderStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an order status (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-status">Create an order status Documentation</a>
     */
    public com.squareup.okhttp.Call postOrderStatusAsync(OrderStatusPayload payload, final ApiCallback<CreateOrderStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOrderStatusValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateOrderStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOrderTrackingRecord
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-tracking-record">Create an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call postOrderTrackingRecordCall(OrderTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_track";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOrderTrackingRecordValidateBeforeCall(OrderTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postOrderTrackingRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = postOrderTrackingRecordCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an order tracking record
     * 
     * @param payload  (required)
     * @return CreateOrderTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-tracking-record">Create an order tracking record Documentation</a>
     */
    public CreateOrderTrackResponse postOrderTrackingRecord(OrderTrackPayload payload) throws ApiException {
        ApiResponse<CreateOrderTrackResponse> resp = postOrderTrackingRecordWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create an order tracking record
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateOrderTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-tracking-record">Create an order tracking record Documentation</a>
     */
    public ApiResponse<CreateOrderTrackResponse> postOrderTrackingRecordWithHttpInfo(OrderTrackPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postOrderTrackingRecordValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateOrderTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an order tracking record (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-an-order-tracking-record">Create an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call postOrderTrackingRecordAsync(OrderTrackPayload payload, final ApiCallback<CreateOrderTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOrderTrackingRecordValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateOrderTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolio
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio">Create a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioCall(PortfolioPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioValidateBeforeCall(PortfolioPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio
     * 
     * @param payload  (required)
     * @return CreatePortfolioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio">Create a portfolio Documentation</a>
     */
    public CreatePortfolioResponse postPortfolio(PortfolioPayload payload) throws ApiException {
        ApiResponse<CreatePortfolioResponse> resp = postPortfolioWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a portfolio
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreatePortfolioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio">Create a portfolio Documentation</a>
     */
    public ApiResponse<CreatePortfolioResponse> postPortfolioWithHttpInfo(PortfolioPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreatePortfolioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio">Create a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioAsync(PortfolioPayload payload, final ApiCallback<CreatePortfolioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatePortfolioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioAssetSize
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-asset-size">Create a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioAssetSizeCall(PortfolioAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioAssetSizeValidateBeforeCall(PortfolioAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioAssetSizeCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio asset size
     * 
     * @param payload  (required)
     * @return CreatePortfolioAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-asset-size">Create a portfolio asset size Documentation</a>
     */
    public CreatePortfolioAssetSizeResponse postPortfolioAssetSize(PortfolioAssetSizePayload payload) throws ApiException {
        ApiResponse<CreatePortfolioAssetSizeResponse> resp = postPortfolioAssetSizeWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a portfolio asset size
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreatePortfolioAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-asset-size">Create a portfolio asset size Documentation</a>
     */
    public ApiResponse<CreatePortfolioAssetSizeResponse> postPortfolioAssetSizeWithHttpInfo(PortfolioAssetSizePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioAssetSizeValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreatePortfolioAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio asset size (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-asset-size">Create a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioAssetSizeAsync(PortfolioAssetSizePayload payload, final ApiCallback<CreatePortfolioAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioAssetSizeValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatePortfolioAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioComment
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-commentary">Create a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioCommentCall(PortfolioCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioCommentValidateBeforeCall(PortfolioCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioComment(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioCommentCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio commentary
     * 
     * @param payload  (required)
     * @return CreatePortfolioCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-commentary">Create a portfolio commentary Documentation</a>
     */
    public CreatePortfolioCommentResponse postPortfolioComment(PortfolioCommentPayload payload) throws ApiException {
        ApiResponse<CreatePortfolioCommentResponse> resp = postPortfolioCommentWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a portfolio commentary
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreatePortfolioCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-commentary">Create a portfolio commentary Documentation</a>
     */
    public ApiResponse<CreatePortfolioCommentResponse> postPortfolioCommentWithHttpInfo(PortfolioCommentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioCommentValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreatePortfolioCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio commentary (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-commentary">Create a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioCommentAsync(PortfolioCommentPayload payload, final ApiCallback<CreatePortfolioCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioCommentValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatePortfolioCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioHolding
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-holding">Create a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioHoldingCall(PortfolioHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioHoldingValidateBeforeCall(PortfolioHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioHoldingCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio holding
     * 
     * @param payload  (required)
     * @return CreatePortfolioHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-holding">Create a portfolio holding Documentation</a>
     */
    public CreatePortfolioHoldingResponse postPortfolioHolding(PortfolioHoldingPayload payload) throws ApiException {
        ApiResponse<CreatePortfolioHoldingResponse> resp = postPortfolioHoldingWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a portfolio holding
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreatePortfolioHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-holding">Create a portfolio holding Documentation</a>
     */
    public ApiResponse<CreatePortfolioHoldingResponse> postPortfolioHoldingWithHttpInfo(PortfolioHoldingPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioHoldingValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreatePortfolioHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio holding (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-holding">Create a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioHoldingAsync(PortfolioHoldingPayload payload, final ApiCallback<CreatePortfolioHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioHoldingValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatePortfolioHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioRebalanceBuyOnlyOrder
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-portfolio-rebalance-orders">Create buy-only portfolio rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioRebalanceBuyOnlyOrderCall(UUID portfolioId, PortfolioRebalanceBuyOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_buy_only"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioRebalanceBuyOnlyOrderValidateBeforeCall(UUID portfolioId, PortfolioRebalanceBuyOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling postPortfolioRebalanceBuyOnlyOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioRebalanceBuyOnlyOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioRebalanceBuyOnlyOrderCall(portfolioId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create buy-only portfolio rebalance orders
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return PortfolioRebalanceBuyOnlyOrderPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-portfolio-rebalance-orders">Create buy-only portfolio rebalance orders Documentation</a>
     */
    public PortfolioRebalanceBuyOnlyOrderPayload postPortfolioRebalanceBuyOnlyOrder(UUID portfolioId, PortfolioRebalanceBuyOnlyOrderPayload payload) throws ApiException {
        ApiResponse<PortfolioRebalanceBuyOnlyOrderPayload> resp = postPortfolioRebalanceBuyOnlyOrderWithHttpInfo(portfolioId, payload);
        return resp.getData();
    }

    /**
     * Create buy-only portfolio rebalance orders
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return ApiResponse&lt;PortfolioRebalanceBuyOnlyOrderPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-portfolio-rebalance-orders">Create buy-only portfolio rebalance orders Documentation</a>
     */
    public ApiResponse<PortfolioRebalanceBuyOnlyOrderPayload> postPortfolioRebalanceBuyOnlyOrderWithHttpInfo(UUID portfolioId, PortfolioRebalanceBuyOnlyOrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioRebalanceBuyOnlyOrderValidateBeforeCall(portfolioId, payload, null, null);
        Type localVarReturnType = new TypeToken<PortfolioRebalanceBuyOnlyOrderPayload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create buy-only portfolio rebalance orders (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-buy-only-portfolio-rebalance-orders">Create buy-only portfolio rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioRebalanceBuyOnlyOrderAsync(UUID portfolioId, PortfolioRebalanceBuyOnlyOrderPayload payload, final ApiCallback<PortfolioRebalanceBuyOnlyOrderPayload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioRebalanceBuyOnlyOrderValidateBeforeCall(portfolioId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioRebalanceBuyOnlyOrderPayload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioRebalanceOrder
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-portfolio-rebalance-orders">Create portfolio rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioRebalanceOrderCall(UUID portfolioId, PortfolioRebalanceOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_rebalance"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioRebalanceOrderValidateBeforeCall(UUID portfolioId, PortfolioRebalanceOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling postPortfolioRebalanceOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioRebalanceOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioRebalanceOrderCall(portfolioId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create portfolio rebalance orders
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return PortfolioRebalanceOrderPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-portfolio-rebalance-orders">Create portfolio rebalance orders Documentation</a>
     */
    public PortfolioRebalanceOrderPayload postPortfolioRebalanceOrder(UUID portfolioId, PortfolioRebalanceOrderPayload payload) throws ApiException {
        ApiResponse<PortfolioRebalanceOrderPayload> resp = postPortfolioRebalanceOrderWithHttpInfo(portfolioId, payload);
        return resp.getData();
    }

    /**
     * Create portfolio rebalance orders
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return ApiResponse&lt;PortfolioRebalanceOrderPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-portfolio-rebalance-orders">Create portfolio rebalance orders Documentation</a>
     */
    public ApiResponse<PortfolioRebalanceOrderPayload> postPortfolioRebalanceOrderWithHttpInfo(UUID portfolioId, PortfolioRebalanceOrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioRebalanceOrderValidateBeforeCall(portfolioId, payload, null, null);
        Type localVarReturnType = new TypeToken<PortfolioRebalanceOrderPayload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create portfolio rebalance orders (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-portfolio-rebalance-orders">Create portfolio rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioRebalanceOrderAsync(UUID portfolioId, PortfolioRebalanceOrderPayload payload, final ApiCallback<PortfolioRebalanceOrderPayload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioRebalanceOrderValidateBeforeCall(portfolioId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioRebalanceOrderPayload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioRebalanceSellOnlyOrder
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-portfolio-rebalance-orders">Create sell-only portfolio rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioRebalanceSellOnlyOrderCall(UUID portfolioId, PortfolioRebalanceSellOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_sell_only"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioRebalanceSellOnlyOrderValidateBeforeCall(UUID portfolioId, PortfolioRebalanceSellOnlyOrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling postPortfolioRebalanceSellOnlyOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioRebalanceSellOnlyOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioRebalanceSellOnlyOrderCall(portfolioId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create sell-only portfolio rebalance orders
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return PortfolioRebalanceSellOnlyOrderPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-portfolio-rebalance-orders">Create sell-only portfolio rebalance orders Documentation</a>
     */
    public PortfolioRebalanceSellOnlyOrderPayload postPortfolioRebalanceSellOnlyOrder(UUID portfolioId, PortfolioRebalanceSellOnlyOrderPayload payload) throws ApiException {
        ApiResponse<PortfolioRebalanceSellOnlyOrderPayload> resp = postPortfolioRebalanceSellOnlyOrderWithHttpInfo(portfolioId, payload);
        return resp.getData();
    }

    /**
     * Create sell-only portfolio rebalance orders
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return ApiResponse&lt;PortfolioRebalanceSellOnlyOrderPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-portfolio-rebalance-orders">Create sell-only portfolio rebalance orders Documentation</a>
     */
    public ApiResponse<PortfolioRebalanceSellOnlyOrderPayload> postPortfolioRebalanceSellOnlyOrderWithHttpInfo(UUID portfolioId, PortfolioRebalanceSellOnlyOrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioRebalanceSellOnlyOrderValidateBeforeCall(portfolioId, payload, null, null);
        Type localVarReturnType = new TypeToken<PortfolioRebalanceSellOnlyOrderPayload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create sell-only portfolio rebalance orders (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-sell-only-portfolio-rebalance-orders">Create sell-only portfolio rebalance orders Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioRebalanceSellOnlyOrderAsync(UUID portfolioId, PortfolioRebalanceSellOnlyOrderPayload payload, final ApiCallback<PortfolioRebalanceSellOnlyOrderPayload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioRebalanceSellOnlyOrderValidateBeforeCall(portfolioId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioRebalanceSellOnlyOrderPayload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioSellAllOrder
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-portfolio-order">Sell all portfolio order Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioSellAllOrderCall(UUID portfolioId, SellAllPortfolioPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_sell_all"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioSellAllOrderValidateBeforeCall(UUID portfolioId, SellAllPortfolioPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling postPortfolioSellAllOrder(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioSellAllOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioSellAllOrderCall(portfolioId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sell all portfolio order
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return SellAllPortfolioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-portfolio-order">Sell all portfolio order Documentation</a>
     */
    public SellAllPortfolioResponse postPortfolioSellAllOrder(UUID portfolioId, SellAllPortfolioPayload payload) throws ApiException {
        ApiResponse<SellAllPortfolioResponse> resp = postPortfolioSellAllOrderWithHttpInfo(portfolioId, payload);
        return resp.getData();
    }

    /**
     * Sell all portfolio order
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SellAllPortfolioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-portfolio-order">Sell all portfolio order Documentation</a>
     */
    public ApiResponse<SellAllPortfolioResponse> postPortfolioSellAllOrderWithHttpInfo(UUID portfolioId, SellAllPortfolioPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioSellAllOrderValidateBeforeCall(portfolioId, payload, null, null);
        Type localVarReturnType = new TypeToken<SellAllPortfolioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sell all portfolio order (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Sell-all-portfolio-order">Sell all portfolio order Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioSellAllOrderAsync(UUID portfolioId, SellAllPortfolioPayload payload, final ApiCallback<SellAllPortfolioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioSellAllOrderValidateBeforeCall(portfolioId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SellAllPortfolioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postPortfolioTransaction
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-transaction">Create a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioTransactionCall(PortfolioTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postPortfolioTransactionValidateBeforeCall(PortfolioTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postPortfolioTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = postPortfolioTransactionCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio transaction
     * 
     * @param payload  (required)
     * @return CreatePortfolioTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-transaction">Create a portfolio transaction Documentation</a>
     */
    public CreatePortfolioTransactionResponse postPortfolioTransaction(PortfolioTransactionPayload payload) throws ApiException {
        ApiResponse<CreatePortfolioTransactionResponse> resp = postPortfolioTransactionWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a portfolio transaction
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreatePortfolioTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-transaction">Create a portfolio transaction Documentation</a>
     */
    public ApiResponse<CreatePortfolioTransactionResponse> postPortfolioTransactionWithHttpInfo(PortfolioTransactionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postPortfolioTransactionValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreatePortfolioTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio transaction (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-portfolio-transaction">Create a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call postPortfolioTransactionAsync(PortfolioTransactionPayload payload, final ApiCallback<CreatePortfolioTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postPortfolioTransactionValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatePortfolioTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postQuestionnaire
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-questionnaire">Create a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call postQuestionnaireCall(QuestionnairePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/questionnaire";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postQuestionnaireValidateBeforeCall(QuestionnairePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postQuestionnaire(Async)");
        }
        

        com.squareup.okhttp.Call call = postQuestionnaireCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a questionnaire
     * 
     * @param payload  (required)
     * @return CreateQuestionnaireResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-questionnaire">Create a questionnaire Documentation</a>
     */
    public CreateQuestionnaireResponse postQuestionnaire(QuestionnairePayload payload) throws ApiException {
        ApiResponse<CreateQuestionnaireResponse> resp = postQuestionnaireWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a questionnaire
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateQuestionnaireResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-questionnaire">Create a questionnaire Documentation</a>
     */
    public ApiResponse<CreateQuestionnaireResponse> postQuestionnaireWithHttpInfo(QuestionnairePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postQuestionnaireValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateQuestionnaireResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a questionnaire (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-questionnaire">Create a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call postQuestionnaireAsync(QuestionnairePayload payload, final ApiCallback<CreateQuestionnaireResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postQuestionnaireValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateQuestionnaireResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postScore
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-score">Create a score Documentation</a>
     */
    public com.squareup.okhttp.Call postScoreCall(ScorePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postScoreValidateBeforeCall(ScorePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postScore(Async)");
        }
        

        com.squareup.okhttp.Call call = postScoreCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a score
     * 
     * @param payload  (required)
     * @return CreateScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-score">Create a score Documentation</a>
     */
    public CreateScoreResponse postScore(ScorePayload payload) throws ApiException {
        ApiResponse<CreateScoreResponse> resp = postScoreWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a score
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-score">Create a score Documentation</a>
     */
    public ApiResponse<CreateScoreResponse> postScoreWithHttpInfo(ScorePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postScoreValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a score (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-score">Create a score Documentation</a>
     */
    public com.squareup.okhttp.Call postScoreAsync(ScorePayload payload, final ApiCallback<CreateScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postScoreValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSecurity
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security">Create a security Documentation</a>
     */
    public com.squareup.okhttp.Call postSecurityCall(SecurityPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSecurityValidateBeforeCall(SecurityPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postSecurity(Async)");
        }
        

        com.squareup.okhttp.Call call = postSecurityCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a security
     * 
     * @param payload  (required)
     * @return CreateSecurityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security">Create a security Documentation</a>
     */
    public CreateSecurityResponse postSecurity(SecurityPayload payload) throws ApiException {
        ApiResponse<CreateSecurityResponse> resp = postSecurityWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a security
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateSecurityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security">Create a security Documentation</a>
     */
    public ApiResponse<CreateSecurityResponse> postSecurityWithHttpInfo(SecurityPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postSecurityValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateSecurityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a security (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security">Create a security Documentation</a>
     */
    public com.squareup.okhttp.Call postSecurityAsync(SecurityPayload payload, final ApiCallback<CreateSecurityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSecurityValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSecurityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSecurityExclusion
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-exclusion">Create a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call postSecurityExclusionCall(SecurityExclusionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_exclusion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSecurityExclusionValidateBeforeCall(SecurityExclusionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postSecurityExclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = postSecurityExclusionCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a security exclusion
     * 
     * @param payload  (required)
     * @return CreateSecurityExclusionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-exclusion">Create a security exclusion Documentation</a>
     */
    public CreateSecurityExclusionResponse postSecurityExclusion(SecurityExclusionPayload payload) throws ApiException {
        ApiResponse<CreateSecurityExclusionResponse> resp = postSecurityExclusionWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a security exclusion
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateSecurityExclusionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-exclusion">Create a security exclusion Documentation</a>
     */
    public ApiResponse<CreateSecurityExclusionResponse> postSecurityExclusionWithHttpInfo(SecurityExclusionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postSecurityExclusionValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateSecurityExclusionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a security exclusion (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-exclusion">Create a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call postSecurityExclusionAsync(SecurityExclusionPayload payload, final ApiCallback<CreateSecurityExclusionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSecurityExclusionValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSecurityExclusionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSecurityPrice
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-price">Create a security price Documentation</a>
     */
    public com.squareup.okhttp.Call postSecurityPriceCall(SecurityPricePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSecurityPriceValidateBeforeCall(SecurityPricePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postSecurityPrice(Async)");
        }
        

        com.squareup.okhttp.Call call = postSecurityPriceCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a security price
     * 
     * @param payload  (required)
     * @return CreateSecurityPriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-price">Create a security price Documentation</a>
     */
    public CreateSecurityPriceResponse postSecurityPrice(SecurityPricePayload payload) throws ApiException {
        ApiResponse<CreateSecurityPriceResponse> resp = postSecurityPriceWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a security price
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateSecurityPriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-price">Create a security price Documentation</a>
     */
    public ApiResponse<CreateSecurityPriceResponse> postSecurityPriceWithHttpInfo(SecurityPricePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postSecurityPriceValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateSecurityPriceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a security price (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-security-price">Create a security price Documentation</a>
     */
    public com.squareup.okhttp.Call postSecurityPriceAsync(SecurityPricePayload payload, final ApiCallback<CreateSecurityPriceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSecurityPriceValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSecurityPriceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTransactionCode
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transaction-code">Create a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call postTransactionCodeCall(TransactionCodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transaction_code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTransactionCodeValidateBeforeCall(TransactionCodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postTransactionCode(Async)");
        }
        

        com.squareup.okhttp.Call call = postTransactionCodeCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a transaction code
     * 
     * @param payload  (required)
     * @return CreateTransactionCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transaction-code">Create a transaction code Documentation</a>
     */
    public CreateTransactionCodeResponse postTransactionCode(TransactionCodePayload payload) throws ApiException {
        ApiResponse<CreateTransactionCodeResponse> resp = postTransactionCodeWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a transaction code
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateTransactionCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transaction-code">Create a transaction code Documentation</a>
     */
    public ApiResponse<CreateTransactionCodeResponse> postTransactionCodeWithHttpInfo(TransactionCodePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postTransactionCodeValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateTransactionCodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a transaction code (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transaction-code">Create a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call postTransactionCodeAsync(TransactionCodePayload payload, final ApiCallback<CreateTransactionCodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTransactionCodeValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateTransactionCodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTransferRequest
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transfer-request">Create a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call postTransferRequestCall(TransferRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTransferRequestValidateBeforeCall(TransferRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postTransferRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = postTransferRequestCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a transfer request
     * 
     * @param payload  (required)
     * @return CreateTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transfer-request">Create a transfer request Documentation</a>
     */
    public CreateTransferResponse postTransferRequest(TransferRequestPayload payload) throws ApiException {
        ApiResponse<CreateTransferResponse> resp = postTransferRequestWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a transfer request
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transfer-request">Create a transfer request Documentation</a>
     */
    public ApiResponse<CreateTransferResponse> postTransferRequestWithHttpInfo(TransferRequestPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postTransferRequestValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a transfer request (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-transfer-request">Create a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call postTransferRequestAsync(TransferRequestPayload payload, final ApiCallback<CreateTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTransferRequestValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postWithdrawalRequest
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-withdrawal-request">Create a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call postWithdrawalRequestCall(WithdrawalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/withdrawal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postWithdrawalRequestValidateBeforeCall(WithdrawalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postWithdrawalRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = postWithdrawalRequestCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a withdrawal request
     * 
     * @param payload  (required)
     * @return CreateWithdrawalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-withdrawal-request">Create a withdrawal request Documentation</a>
     */
    public CreateWithdrawalResponse postWithdrawalRequest(WithdrawalPayload payload) throws ApiException {
        ApiResponse<CreateWithdrawalResponse> resp = postWithdrawalRequestWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a withdrawal request
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateWithdrawalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-withdrawal-request">Create a withdrawal request Documentation</a>
     */
    public ApiResponse<CreateWithdrawalResponse> postWithdrawalRequestWithHttpInfo(WithdrawalPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postWithdrawalRequestValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateWithdrawalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a withdrawal request (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Create-a-withdrawal-request">Create a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call postWithdrawalRequestAsync(WithdrawalPayload payload, final ApiCallback<CreateWithdrawalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postWithdrawalRequestValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateWithdrawalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscribeAccount
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Subscribe-an-account">Subscribe an account Documentation</a>
     */
    public com.squareup.okhttp.Call subscribeAccountCall(UUID accountId, AccountSubscribePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/subscribe"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeAccountValidateBeforeCall(UUID accountId, AccountSubscribePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling subscribeAccount(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling subscribeAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = subscribeAccountCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribe an account
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return SubscribeAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Subscribe-an-account">Subscribe an account Documentation</a>
     */
    public SubscribeAccountResponse subscribeAccount(UUID accountId, AccountSubscribePayload payload) throws ApiException {
        ApiResponse<SubscribeAccountResponse> resp = subscribeAccountWithHttpInfo(accountId, payload);
        return resp.getData();
    }

    /**
     * Subscribe an account
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SubscribeAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Subscribe-an-account">Subscribe an account Documentation</a>
     */
    public ApiResponse<SubscribeAccountResponse> subscribeAccountWithHttpInfo(UUID accountId, AccountSubscribePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = subscribeAccountValidateBeforeCall(accountId, payload, null, null);
        Type localVarReturnType = new TypeToken<SubscribeAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe an account (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Subscribe-an-account">Subscribe an account Documentation</a>
     */
    public com.squareup.okhttp.Call subscribeAccountAsync(UUID accountId, AccountSubscribePayload payload, final ApiCallback<SubscribeAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeAccountValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubscribeAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccount
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account">Update an account Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountCall(UUID accountId, AccountCreatePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountValidateBeforeCall(UUID accountId, AccountCreatePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccount(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return SpecificAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account">Update an account Documentation</a>
     */
    public SpecificAccountResponse updateAccount(UUID accountId, AccountCreatePayload payload) throws ApiException {
        ApiResponse<SpecificAccountResponse> resp = updateAccountWithHttpInfo(accountId, payload);
        return resp.getData();
    }

    /**
     * Update an account
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account">Update an account Documentation</a>
     */
    public ApiResponse<SpecificAccountResponse> updateAccountWithHttpInfo(UUID accountId, AccountCreatePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountValidateBeforeCall(accountId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account">Update an account Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountAsync(UUID accountId, AccountCreatePayload payload, final ApiCallback<SpecificAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountAllocation
     * @param accountAllocationId UUID of an account allocation (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-allocation">Update an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountAllocationCall(UUID accountAllocationId, AccountAllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}"
            .replaceAll("\\{" + "account_allocation_id" + "\\}", apiClient.escapeString(accountAllocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountAllocationValidateBeforeCall(UUID accountAllocationId, AccountAllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountAllocationId' is set
        if (accountAllocationId == null) {
            throw new ApiException("Missing the required parameter 'accountAllocationId' when calling updateAccountAllocation(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAccountAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountAllocationCall(accountAllocationId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account allocation
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @param payload  (required)
     * @return SpecificAccountAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-allocation">Update an account allocation Documentation</a>
     */
    public SpecificAccountAllocationResponse updateAccountAllocation(UUID accountAllocationId, AccountAllocationPayload payload) throws ApiException {
        ApiResponse<SpecificAccountAllocationResponse> resp = updateAccountAllocationWithHttpInfo(accountAllocationId, payload);
        return resp.getData();
    }

    /**
     * Update an account allocation
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAccountAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-allocation">Update an account allocation Documentation</a>
     */
    public ApiResponse<SpecificAccountAllocationResponse> updateAccountAllocationWithHttpInfo(UUID accountAllocationId, AccountAllocationPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountAllocationValidateBeforeCall(accountAllocationId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account allocation (asynchronously)
     * 
     * @param accountAllocationId UUID of an account allocation (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-allocation">Update an account allocation Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountAllocationAsync(UUID accountAllocationId, AccountAllocationPayload payload, final ApiCallback<SpecificAccountAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountAllocationValidateBeforeCall(accountAllocationId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountPermission
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account%E2%80%99s-permissions">Update an account&#39;s permissions Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountPermissionCall(UUID accountId, AccountPermissionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountPermissionValidateBeforeCall(UUID accountId, AccountPermissionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountPermission(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAccountPermission(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountPermissionCall(accountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account&#39;s permissions
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return SpecificAccountPermissionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account%E2%80%99s-permissions">Update an account&#39;s permissions Documentation</a>
     */
    public SpecificAccountPermissionResponse updateAccountPermission(UUID accountId, AccountPermissionPayload payload) throws ApiException {
        ApiResponse<SpecificAccountPermissionResponse> resp = updateAccountPermissionWithHttpInfo(accountId, payload);
        return resp.getData();
    }

    /**
     * Update an account&#39;s permissions
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAccountPermissionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account%E2%80%99s-permissions">Update an account&#39;s permissions Documentation</a>
     */
    public ApiResponse<SpecificAccountPermissionResponse> updateAccountPermissionWithHttpInfo(UUID accountId, AccountPermissionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountPermissionValidateBeforeCall(accountId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountPermissionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account&#39;s permissions (asynchronously)
     * 
     * @param accountId UUID of an account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account%E2%80%99s-permissions">Update an account&#39;s permissions Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountPermissionAsync(UUID accountId, AccountPermissionPayload payload, final ApiCallback<SpecificAccountPermissionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountPermissionValidateBeforeCall(accountId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountPermissionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountStage
     * @param stageId UUID of an account stage (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-stage">Update an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountStageCall(UUID stageId, AccountStagePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/stage/{stage_id}"
            .replaceAll("\\{" + "stage_id" + "\\}", apiClient.escapeString(stageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountStageValidateBeforeCall(UUID stageId, AccountStagePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stageId' is set
        if (stageId == null) {
            throw new ApiException("Missing the required parameter 'stageId' when calling updateAccountStage(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAccountStage(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountStageCall(stageId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account stage
     * 
     * @param stageId UUID of an account stage (required)
     * @param payload  (required)
     * @return SpecificAccountStageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-stage">Update an account stage Documentation</a>
     */
    public SpecificAccountStageResponse updateAccountStage(UUID stageId, AccountStagePayload payload) throws ApiException {
        ApiResponse<SpecificAccountStageResponse> resp = updateAccountStageWithHttpInfo(stageId, payload);
        return resp.getData();
    }

    /**
     * Update an account stage
     * 
     * @param stageId UUID of an account stage (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAccountStageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-stage">Update an account stage Documentation</a>
     */
    public ApiResponse<SpecificAccountStageResponse> updateAccountStageWithHttpInfo(UUID stageId, AccountStagePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountStageValidateBeforeCall(stageId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountStageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account stage (asynchronously)
     * 
     * @param stageId UUID of an account stage (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-stage">Update an account stage Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountStageAsync(UUID stageId, AccountStagePayload payload, final ApiCallback<SpecificAccountStageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountStageValidateBeforeCall(stageId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountStageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountStatus
     * @param accountStatusId UUID of an account status (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-status">Update an account status Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountStatusCall(UUID accountStatusId, AccountStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status/{account_status_id}"
            .replaceAll("\\{" + "account_status_id" + "\\}", apiClient.escapeString(accountStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountStatusValidateBeforeCall(UUID accountStatusId, AccountStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountStatusId' is set
        if (accountStatusId == null) {
            throw new ApiException("Missing the required parameter 'accountStatusId' when calling updateAccountStatus(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAccountStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountStatusCall(accountStatusId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account status
     * 
     * @param accountStatusId UUID of an account status (required)
     * @param payload  (required)
     * @return SpecificAccountStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-status">Update an account status Documentation</a>
     */
    public SpecificAccountStatusResponse updateAccountStatus(UUID accountStatusId, AccountStatusPayload payload) throws ApiException {
        ApiResponse<SpecificAccountStatusResponse> resp = updateAccountStatusWithHttpInfo(accountStatusId, payload);
        return resp.getData();
    }

    /**
     * Update an account status
     * 
     * @param accountStatusId UUID of an account status (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAccountStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-status">Update an account status Documentation</a>
     */
    public ApiResponse<SpecificAccountStatusResponse> updateAccountStatusWithHttpInfo(UUID accountStatusId, AccountStatusPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountStatusValidateBeforeCall(accountStatusId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAccountStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account status (asynchronously)
     * 
     * @param accountStatusId UUID of an account status (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-status">Update an account status Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountStatusAsync(UUID accountStatusId, AccountStatusPayload payload, final ApiCallback<SpecificAccountStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountStatusValidateBeforeCall(accountStatusId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAccountStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountType
     * @param accountTypeId UUID of an account type (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-type">Update an account type Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountTypeCall(UUID accountTypeId, AccountTypePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type/{account_type_id}"
            .replaceAll("\\{" + "account_type_id" + "\\}", apiClient.escapeString(accountTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountTypeValidateBeforeCall(UUID accountTypeId, AccountTypePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountTypeId' is set
        if (accountTypeId == null) {
            throw new ApiException("Missing the required parameter 'accountTypeId' when calling updateAccountType(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAccountType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountTypeCall(accountTypeId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account type
     * 
     * @param accountTypeId UUID of an account type (required)
     * @param payload  (required)
     * @return GetAccountTypeSubresponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-type">Update an account type Documentation</a>
     */
    public GetAccountTypeSubresponse updateAccountType(UUID accountTypeId, AccountTypePayload payload) throws ApiException {
        ApiResponse<GetAccountTypeSubresponse> resp = updateAccountTypeWithHttpInfo(accountTypeId, payload);
        return resp.getData();
    }

    /**
     * Update an account type
     * 
     * @param accountTypeId UUID of an account type (required)
     * @param payload  (required)
     * @return ApiResponse&lt;GetAccountTypeSubresponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-type">Update an account type Documentation</a>
     */
    public ApiResponse<GetAccountTypeSubresponse> updateAccountTypeWithHttpInfo(UUID accountTypeId, AccountTypePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountTypeValidateBeforeCall(accountTypeId, payload, null, null);
        Type localVarReturnType = new TypeToken<GetAccountTypeSubresponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account type (asynchronously)
     * 
     * @param accountTypeId UUID of an account type (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-account-type">Update an account type Documentation</a>
     */
    public com.squareup.okhttp.Call updateAccountTypeAsync(UUID accountTypeId, AccountTypePayload payload, final ApiCallback<GetAccountTypeSubresponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountTypeValidateBeforeCall(accountTypeId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAccountTypeSubresponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccount
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account">Update an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call updateAggregationAccountCall(UUID aggregationAccountId, AggregationAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}"
            .replaceAll("\\{" + "aggregation_account_id" + "\\}", apiClient.escapeString(aggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountValidateBeforeCall(UUID aggregationAccountId, AggregationAccountPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountId' is set
        if (aggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountId' when calling updateAggregationAccount(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAggregationAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountCall(aggregationAccountId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an aggregation account
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param payload  (required)
     * @return SpecificAggregationAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account">Update an aggregation account Documentation</a>
     */
    public SpecificAggregationAccountResponse updateAggregationAccount(UUID aggregationAccountId, AggregationAccountPayload payload) throws ApiException {
        ApiResponse<SpecificAggregationAccountResponse> resp = updateAggregationAccountWithHttpInfo(aggregationAccountId, payload);
        return resp.getData();
    }

    /**
     * Update an aggregation account
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAggregationAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account">Update an aggregation account Documentation</a>
     */
    public ApiResponse<SpecificAggregationAccountResponse> updateAggregationAccountWithHttpInfo(UUID aggregationAccountId, AggregationAccountPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountValidateBeforeCall(aggregationAccountId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an aggregation account (asynchronously)
     * 
     * @param aggregationAccountId UUID of an aggregation account (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account">Update an aggregation account Documentation</a>
     */
    public com.squareup.okhttp.Call updateAggregationAccountAsync(UUID aggregationAccountId, AggregationAccountPayload payload, final ApiCallback<SpecificAggregationAccountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountValidateBeforeCall(aggregationAccountId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccountBalance
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account-balance">Update an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call updateAggregationAccountBalanceCall(UUID aggregationAccountBalanceId, AggregationAccountBalancePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}"
            .replaceAll("\\{" + "aggregation_account_balance_id" + "\\}", apiClient.escapeString(aggregationAccountBalanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountBalanceValidateBeforeCall(UUID aggregationAccountBalanceId, AggregationAccountBalancePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalanceId' is set
        if (aggregationAccountBalanceId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalanceId' when calling updateAggregationAccountBalance(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAggregationAccountBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountBalanceCall(aggregationAccountBalanceId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an aggregation account balance
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param payload  (required)
     * @return SpecificAggregationAccountBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account-balance">Update an aggregation account balance Documentation</a>
     */
    public SpecificAggregationAccountBalanceResponse updateAggregationAccountBalance(UUID aggregationAccountBalanceId, AggregationAccountBalancePayload payload) throws ApiException {
        ApiResponse<SpecificAggregationAccountBalanceResponse> resp = updateAggregationAccountBalanceWithHttpInfo(aggregationAccountBalanceId, payload);
        return resp.getData();
    }

    /**
     * Update an aggregation account balance
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAggregationAccountBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account-balance">Update an aggregation account balance Documentation</a>
     */
    public ApiResponse<SpecificAggregationAccountBalanceResponse> updateAggregationAccountBalanceWithHttpInfo(UUID aggregationAccountBalanceId, AggregationAccountBalancePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountBalanceValidateBeforeCall(aggregationAccountBalanceId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an aggregation account balance (asynchronously)
     * 
     * @param aggregationAccountBalanceId UUID of an aggregation account balance (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-aggregation-account-balance">Update an aggregation account balance Documentation</a>
     */
    public com.squareup.okhttp.Call updateAggregationAccountBalanceAsync(UUID aggregationAccountBalanceId, AggregationAccountBalancePayload payload, final ApiCallback<SpecificAggregationAccountBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountBalanceValidateBeforeCall(aggregationAccountBalanceId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAggregationAccountBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAllocation
     * @param allocationId UUID of an allocation (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation">Update an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call updateAllocationCall(UUID allocationId, AllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAllocationValidateBeforeCall(UUID allocationId, AllocationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling updateAllocation(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAllocationCall(allocationId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an allocation
     * 
     * @param allocationId UUID of an allocation (required)
     * @param payload  (required)
     * @return SpecificAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation">Update an allocation Documentation</a>
     */
    public SpecificAllocationResponse updateAllocation(UUID allocationId, AllocationPayload payload) throws ApiException {
        ApiResponse<SpecificAllocationResponse> resp = updateAllocationWithHttpInfo(allocationId, payload);
        return resp.getData();
    }

    /**
     * Update an allocation
     * 
     * @param allocationId UUID of an allocation (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation">Update an allocation Documentation</a>
     */
    public ApiResponse<SpecificAllocationResponse> updateAllocationWithHttpInfo(UUID allocationId, AllocationPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAllocationValidateBeforeCall(allocationId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an allocation (asynchronously)
     * 
     * @param allocationId UUID of an allocation (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation">Update an allocation Documentation</a>
     */
    public com.squareup.okhttp.Call updateAllocationAsync(UUID allocationId, AllocationPayload payload, final ApiCallback<SpecificAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAllocationValidateBeforeCall(allocationId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAllocationComposition
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation-composition">Update an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call updateAllocationCompositionCall(UUID allocationCompositionId, AllocationCompositionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}"
            .replaceAll("\\{" + "allocation_composition_id" + "\\}", apiClient.escapeString(allocationCompositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAllocationCompositionValidateBeforeCall(UUID allocationCompositionId, AllocationCompositionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationCompositionId' is set
        if (allocationCompositionId == null) {
            throw new ApiException("Missing the required parameter 'allocationCompositionId' when calling updateAllocationComposition(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateAllocationComposition(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAllocationCompositionCall(allocationCompositionId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an allocation composition
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param payload  (required)
     * @return GetAllocationCompositionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation-composition">Update an allocation composition Documentation</a>
     */
    public GetAllocationCompositionResponse updateAllocationComposition(UUID allocationCompositionId, AllocationCompositionPayload payload) throws ApiException {
        ApiResponse<GetAllocationCompositionResponse> resp = updateAllocationCompositionWithHttpInfo(allocationCompositionId, payload);
        return resp.getData();
    }

    /**
     * Update an allocation composition
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param payload  (required)
     * @return ApiResponse&lt;GetAllocationCompositionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation-composition">Update an allocation composition Documentation</a>
     */
    public ApiResponse<GetAllocationCompositionResponse> updateAllocationCompositionWithHttpInfo(UUID allocationCompositionId, AllocationCompositionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateAllocationCompositionValidateBeforeCall(allocationCompositionId, payload, null, null);
        Type localVarReturnType = new TypeToken<GetAllocationCompositionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an allocation composition (asynchronously)
     * 
     * @param allocationCompositionId UUID of an allocation composition (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-allocation-composition">Update an allocation composition Documentation</a>
     */
    public com.squareup.okhttp.Call updateAllocationCompositionAsync(UUID allocationCompositionId, AllocationCompositionPayload payload, final ApiCallback<GetAllocationCompositionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAllocationCompositionValidateBeforeCall(allocationCompositionId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAllocationCompositionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBankLink
     * @param bankLinkId UUID of a bank link (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-bank-link">Update a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call updateBankLinkCall(UUID bankLinkId, BankLinkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bank_link/{bank_link_id}"
            .replaceAll("\\{" + "bank_link_id" + "\\}", apiClient.escapeString(bankLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBankLinkValidateBeforeCall(UUID bankLinkId, BankLinkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bankLinkId' is set
        if (bankLinkId == null) {
            throw new ApiException("Missing the required parameter 'bankLinkId' when calling updateBankLink(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateBankLink(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBankLinkCall(bankLinkId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a bank link
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @param payload  (required)
     * @return SpecificBankLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-bank-link">Update a bank link Documentation</a>
     */
    public SpecificBankLinkResponse updateBankLink(UUID bankLinkId, BankLinkPayload payload) throws ApiException {
        ApiResponse<SpecificBankLinkResponse> resp = updateBankLinkWithHttpInfo(bankLinkId, payload);
        return resp.getData();
    }

    /**
     * Update a bank link
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificBankLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-bank-link">Update a bank link Documentation</a>
     */
    public ApiResponse<SpecificBankLinkResponse> updateBankLinkWithHttpInfo(UUID bankLinkId, BankLinkPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateBankLinkValidateBeforeCall(bankLinkId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificBankLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a bank link (asynchronously)
     * 
     * @param bankLinkId UUID of a bank link (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-bank-link">Update a bank link Documentation</a>
     */
    public com.squareup.okhttp.Call updateBankLinkAsync(UUID bankLinkId, BankLinkPayload payload, final ApiCallback<SpecificBankLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBankLinkValidateBeforeCall(bankLinkId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificBankLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBenchmark
     * @param benchmarkId UUID of a benchmark (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-benchmark">Update a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call updateBenchmarkCall(UUID benchmarkId, BenchmarkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBenchmarkValidateBeforeCall(UUID benchmarkId, BenchmarkPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling updateBenchmark(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateBenchmark(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBenchmarkCall(benchmarkId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a benchmark
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param payload  (required)
     * @return SpecificBenchmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-benchmark">Update a benchmark Documentation</a>
     */
    public SpecificBenchmarkResponse updateBenchmark(UUID benchmarkId, BenchmarkPayload payload) throws ApiException {
        ApiResponse<SpecificBenchmarkResponse> resp = updateBenchmarkWithHttpInfo(benchmarkId, payload);
        return resp.getData();
    }

    /**
     * Update a benchmark
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificBenchmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-benchmark">Update a benchmark Documentation</a>
     */
    public ApiResponse<SpecificBenchmarkResponse> updateBenchmarkWithHttpInfo(UUID benchmarkId, BenchmarkPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateBenchmarkValidateBeforeCall(benchmarkId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificBenchmarkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a benchmark (asynchronously)
     * 
     * @param benchmarkId UUID of a benchmark (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-benchmark">Update a benchmark Documentation</a>
     */
    public com.squareup.okhttp.Call updateBenchmarkAsync(UUID benchmarkId, BenchmarkPayload payload, final ApiCallback<SpecificBenchmarkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBenchmarkValidateBeforeCall(benchmarkId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificBenchmarkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClient
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client">Update a client Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientCall(UUID clientId, ClientPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientValidateBeforeCall(UUID clientId, ClientPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling updateClient(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateClient(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientCall(clientId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a client
     * 
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @return SpecificClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client">Update a client Documentation</a>
     */
    public SpecificClientResponse updateClient(UUID clientId, ClientPayload payload) throws ApiException {
        ApiResponse<SpecificClientResponse> resp = updateClientWithHttpInfo(clientId, payload);
        return resp.getData();
    }

    /**
     * Update a client
     * 
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client">Update a client Documentation</a>
     */
    public ApiResponse<SpecificClientResponse> updateClientWithHttpInfo(UUID clientId, ClientPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateClientValidateBeforeCall(clientId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a client (asynchronously)
     * 
     * @param clientId UUID of a client (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client">Update a client Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientAsync(UUID clientId, ClientPayload payload, final ApiCallback<SpecificClientResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientValidateBeforeCall(clientId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientHydro
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-hydro-relationship">Update a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientHydroCall(UUID clientHydroId, ClientHydroPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_hydro/{client_hydro_id}"
            .replaceAll("\\{" + "client_hydro_id" + "\\}", apiClient.escapeString(clientHydroId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientHydroValidateBeforeCall(UUID clientHydroId, ClientHydroPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientHydroId' is set
        if (clientHydroId == null) {
            throw new ApiException("Missing the required parameter 'clientHydroId' when calling updateClientHydro(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateClientHydro(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientHydroCall(clientHydroId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a client-hydro relationship
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param payload  (required)
     * @return SpecificClientHydroResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-hydro-relationship">Update a client-hydro relationship Documentation</a>
     */
    public SpecificClientHydroResponse updateClientHydro(UUID clientHydroId, ClientHydroPayload payload) throws ApiException {
        ApiResponse<SpecificClientHydroResponse> resp = updateClientHydroWithHttpInfo(clientHydroId, payload);
        return resp.getData();
    }

    /**
     * Update a client-hydro relationship
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificClientHydroResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-hydro-relationship">Update a client-hydro relationship Documentation</a>
     */
    public ApiResponse<SpecificClientHydroResponse> updateClientHydroWithHttpInfo(UUID clientHydroId, ClientHydroPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateClientHydroValidateBeforeCall(clientHydroId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientHydroResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a client-hydro relationship (asynchronously)
     * 
     * @param clientHydroId UUID of a client-hydro relationship (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-hydro-relationship">Update a client-hydro relationship Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientHydroAsync(UUID clientHydroId, ClientHydroPayload payload, final ApiCallback<SpecificClientHydroResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientHydroValidateBeforeCall(clientHydroId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientHydroResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientResponse
     * @param clientResponseId UUID of a client response (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-response">Update a client response Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientResponseCall(UUID clientResponseId, ClientResponsePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client_response/{client_response_id}"
            .replaceAll("\\{" + "client_response_id" + "\\}", apiClient.escapeString(clientResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientResponseValidateBeforeCall(UUID clientResponseId, ClientResponsePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientResponseId' is set
        if (clientResponseId == null) {
            throw new ApiException("Missing the required parameter 'clientResponseId' when calling updateClientResponse(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateClientResponse(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientResponseCall(clientResponseId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a client response
     * 
     * @param clientResponseId UUID of a client response (required)
     * @param payload  (required)
     * @return SpecificClientResponseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-response">Update a client response Documentation</a>
     */
    public SpecificClientResponseResponse updateClientResponse(UUID clientResponseId, ClientResponsePayload payload) throws ApiException {
        ApiResponse<SpecificClientResponseResponse> resp = updateClientResponseWithHttpInfo(clientResponseId, payload);
        return resp.getData();
    }

    /**
     * Update a client response
     * 
     * @param clientResponseId UUID of a client response (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificClientResponseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-response">Update a client response Documentation</a>
     */
    public ApiResponse<SpecificClientResponseResponse> updateClientResponseWithHttpInfo(UUID clientResponseId, ClientResponsePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateClientResponseValidateBeforeCall(clientResponseId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientResponseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a client response (asynchronously)
     * 
     * @param clientResponseId UUID of a client response (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-client-response">Update a client response Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientResponseAsync(UUID clientResponseId, ClientResponsePayload payload, final ApiCallback<SpecificClientResponseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientResponseValidateBeforeCall(clientResponseId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientResponseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDecisionTree
     * @param decisionTreeId UUID of a decision tree (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-decision-tree">Update a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call updateDecisionTreeCall(UUID decisionTreeId, DecisionTreePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}"
            .replaceAll("\\{" + "decision_tree_id" + "\\}", apiClient.escapeString(decisionTreeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDecisionTreeValidateBeforeCall(UUID decisionTreeId, DecisionTreePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTreeId' is set
        if (decisionTreeId == null) {
            throw new ApiException("Missing the required parameter 'decisionTreeId' when calling updateDecisionTree(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateDecisionTree(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDecisionTreeCall(decisionTreeId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a decision tree
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @param payload  (required)
     * @return SpecificDecisionTreeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-decision-tree">Update a decision tree Documentation</a>
     */
    public SpecificDecisionTreeResponse updateDecisionTree(UUID decisionTreeId, DecisionTreePayload payload) throws ApiException {
        ApiResponse<SpecificDecisionTreeResponse> resp = updateDecisionTreeWithHttpInfo(decisionTreeId, payload);
        return resp.getData();
    }

    /**
     * Update a decision tree
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificDecisionTreeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-decision-tree">Update a decision tree Documentation</a>
     */
    public ApiResponse<SpecificDecisionTreeResponse> updateDecisionTreeWithHttpInfo(UUID decisionTreeId, DecisionTreePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateDecisionTreeValidateBeforeCall(decisionTreeId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificDecisionTreeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a decision tree (asynchronously)
     * 
     * @param decisionTreeId UUID of a decision tree (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-decision-tree">Update a decision tree Documentation</a>
     */
    public com.squareup.okhttp.Call updateDecisionTreeAsync(UUID decisionTreeId, DecisionTreePayload payload, final ApiCallback<SpecificDecisionTreeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDecisionTreeValidateBeforeCall(decisionTreeId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificDecisionTreeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDepositRequest
     * @param depositId UUID of a deposit record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-deposit-request">Update a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call updateDepositRequestCall(UUID depositId, DepositRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/deposit/{deposit_id}"
            .replaceAll("\\{" + "deposit_id" + "\\}", apiClient.escapeString(depositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDepositRequestValidateBeforeCall(UUID depositId, DepositRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'depositId' is set
        if (depositId == null) {
            throw new ApiException("Missing the required parameter 'depositId' when calling updateDepositRequest(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateDepositRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDepositRequestCall(depositId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a deposit request
     * 
     * @param depositId UUID of a deposit record (required)
     * @param payload  (required)
     * @return SpecificDepositRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-deposit-request">Update a deposit request Documentation</a>
     */
    public SpecificDepositRequestResponse updateDepositRequest(UUID depositId, DepositRequestPayload payload) throws ApiException {
        ApiResponse<SpecificDepositRequestResponse> resp = updateDepositRequestWithHttpInfo(depositId, payload);
        return resp.getData();
    }

    /**
     * Update a deposit request
     * 
     * @param depositId UUID of a deposit record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificDepositRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-deposit-request">Update a deposit request Documentation</a>
     */
    public ApiResponse<SpecificDepositRequestResponse> updateDepositRequestWithHttpInfo(UUID depositId, DepositRequestPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateDepositRequestValidateBeforeCall(depositId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificDepositRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a deposit request (asynchronously)
     * 
     * @param depositId UUID of a deposit record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-deposit-request">Update a deposit request Documentation</a>
     */
    public com.squareup.okhttp.Call updateDepositRequestAsync(UUID depositId, DepositRequestPayload payload, final ApiCallback<SpecificDepositRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDepositRequestValidateBeforeCall(depositId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificDepositRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFundingRequest
     * @param fundingId UUID of a funding record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-funding-request">Update a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call updateFundingRequestCall(UUID fundingId, FundingRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/funding/{funding_id}"
            .replaceAll("\\{" + "funding_id" + "\\}", apiClient.escapeString(fundingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFundingRequestValidateBeforeCall(UUID fundingId, FundingRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fundingId' is set
        if (fundingId == null) {
            throw new ApiException("Missing the required parameter 'fundingId' when calling updateFundingRequest(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateFundingRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFundingRequestCall(fundingId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a funding request
     * 
     * @param fundingId UUID of a funding record (required)
     * @param payload  (required)
     * @return SpecificFundingRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-funding-request">Update a funding request Documentation</a>
     */
    public SpecificFundingRequestResponse updateFundingRequest(UUID fundingId, FundingRequestPayload payload) throws ApiException {
        ApiResponse<SpecificFundingRequestResponse> resp = updateFundingRequestWithHttpInfo(fundingId, payload);
        return resp.getData();
    }

    /**
     * Update a funding request
     * 
     * @param fundingId UUID of a funding record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificFundingRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-funding-request">Update a funding request Documentation</a>
     */
    public ApiResponse<SpecificFundingRequestResponse> updateFundingRequestWithHttpInfo(UUID fundingId, FundingRequestPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateFundingRequestValidateBeforeCall(fundingId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificFundingRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a funding request (asynchronously)
     * 
     * @param fundingId UUID of a funding record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-funding-request">Update a funding request Documentation</a>
     */
    public com.squareup.okhttp.Call updateFundingRequestAsync(UUID fundingId, FundingRequestPayload payload, final ApiCallback<SpecificFundingRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFundingRequestValidateBeforeCall(fundingId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificFundingRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGoal
     * @param goalId UUID of a goal (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal">Update a goal Documentation</a>
     */
    public com.squareup.okhttp.Call updateGoalCall(UUID goalId, GoalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal/{goal_id}"
            .replaceAll("\\{" + "goal_id" + "\\}", apiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGoalValidateBeforeCall(UUID goalId, GoalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateGoal(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateGoal(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGoalCall(goalId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a goal
     * 
     * @param goalId UUID of a goal (required)
     * @param payload  (required)
     * @return SpecificGoalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal">Update a goal Documentation</a>
     */
    public SpecificGoalResponse updateGoal(UUID goalId, GoalPayload payload) throws ApiException {
        ApiResponse<SpecificGoalResponse> resp = updateGoalWithHttpInfo(goalId, payload);
        return resp.getData();
    }

    /**
     * Update a goal
     * 
     * @param goalId UUID of a goal (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificGoalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal">Update a goal Documentation</a>
     */
    public ApiResponse<SpecificGoalResponse> updateGoalWithHttpInfo(UUID goalId, GoalPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateGoalValidateBeforeCall(goalId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificGoalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a goal (asynchronously)
     * 
     * @param goalId UUID of a goal (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal">Update a goal Documentation</a>
     */
    public com.squareup.okhttp.Call updateGoalAsync(UUID goalId, GoalPayload payload, final ApiCallback<SpecificGoalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGoalValidateBeforeCall(goalId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificGoalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGoalTrackRecord
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal-track-record">Update a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call updateGoalTrackRecordCall(UUID goalTrackId, GoalTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/goal_track/{goal_track_id}"
            .replaceAll("\\{" + "goal_track_id" + "\\}", apiClient.escapeString(goalTrackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGoalTrackRecordValidateBeforeCall(UUID goalTrackId, GoalTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalTrackId' is set
        if (goalTrackId == null) {
            throw new ApiException("Missing the required parameter 'goalTrackId' when calling updateGoalTrackRecord(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateGoalTrackRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGoalTrackRecordCall(goalTrackId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a goal track record
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param payload  (required)
     * @return SpecificGoalTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal-track-record">Update a goal track record Documentation</a>
     */
    public SpecificGoalTrackResponse updateGoalTrackRecord(UUID goalTrackId, GoalTrackPayload payload) throws ApiException {
        ApiResponse<SpecificGoalTrackResponse> resp = updateGoalTrackRecordWithHttpInfo(goalTrackId, payload);
        return resp.getData();
    }

    /**
     * Update a goal track record
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificGoalTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal-track-record">Update a goal track record Documentation</a>
     */
    public ApiResponse<SpecificGoalTrackResponse> updateGoalTrackRecordWithHttpInfo(UUID goalTrackId, GoalTrackPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateGoalTrackRecordValidateBeforeCall(goalTrackId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificGoalTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a goal track record (asynchronously)
     * 
     * @param goalTrackId UUID of a goal tracking record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-goal-track-record">Update a goal track record Documentation</a>
     */
    public com.squareup.okhttp.Call updateGoalTrackRecordAsync(UUID goalTrackId, GoalTrackPayload payload, final ApiCallback<SpecificGoalTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGoalTrackRecordValidateBeforeCall(goalTrackId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificGoalTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModel
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model">Update a model Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelCall(UUID modelId, ModelPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model/{model_id}"
            .replaceAll("\\{" + "model_id" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelValidateBeforeCall(UUID modelId, ModelPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling updateModel(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateModel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelCall(modelId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model
     * 
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @return SpecificModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model">Update a model Documentation</a>
     */
    public SpecificModelResponse updateModel(UUID modelId, ModelPayload payload) throws ApiException {
        ApiResponse<SpecificModelResponse> resp = updateModelWithHttpInfo(modelId, payload);
        return resp.getData();
    }

    /**
     * Update a model
     * 
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model">Update a model Documentation</a>
     */
    public ApiResponse<SpecificModelResponse> updateModelWithHttpInfo(UUID modelId, ModelPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateModelValidateBeforeCall(modelId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model (asynchronously)
     * 
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model">Update a model Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelAsync(UUID modelId, ModelPayload payload, final ApiCallback<SpecificModelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelValidateBeforeCall(modelId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelAssetSize
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-asset-size">Update a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelAssetSizeCall(UUID modelAssetSizeId, ModelAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}"
            .replaceAll("\\{" + "model_asset_size_id" + "\\}", apiClient.escapeString(modelAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelAssetSizeValidateBeforeCall(UUID modelAssetSizeId, ModelAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelAssetSizeId' is set
        if (modelAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'modelAssetSizeId' when calling updateModelAssetSize(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateModelAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelAssetSizeCall(modelAssetSizeId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model asset size
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param payload  (required)
     * @return SpecificModelAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-asset-size">Update a model asset size Documentation</a>
     */
    public SpecificModelAssetSizeResponse updateModelAssetSize(UUID modelAssetSizeId, ModelAssetSizePayload payload) throws ApiException {
        ApiResponse<SpecificModelAssetSizeResponse> resp = updateModelAssetSizeWithHttpInfo(modelAssetSizeId, payload);
        return resp.getData();
    }

    /**
     * Update a model asset size
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificModelAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-asset-size">Update a model asset size Documentation</a>
     */
    public ApiResponse<SpecificModelAssetSizeResponse> updateModelAssetSizeWithHttpInfo(UUID modelAssetSizeId, ModelAssetSizePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateModelAssetSizeValidateBeforeCall(modelAssetSizeId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model asset size (asynchronously)
     * 
     * @param modelAssetSizeId UUID of a model asset size record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-asset-size">Update a model asset size Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelAssetSizeAsync(UUID modelAssetSizeId, ModelAssetSizePayload payload, final ApiCallback<SpecificModelAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelAssetSizeValidateBeforeCall(modelAssetSizeId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelComment
     * @param modelCommentId UUID of a model comment (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-commentary">Update a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelCommentCall(UUID modelCommentId, ModelCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_comment/{model_comment_id}"
            .replaceAll("\\{" + "model_comment_id" + "\\}", apiClient.escapeString(modelCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelCommentValidateBeforeCall(UUID modelCommentId, ModelCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelCommentId' is set
        if (modelCommentId == null) {
            throw new ApiException("Missing the required parameter 'modelCommentId' when calling updateModelComment(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateModelComment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelCommentCall(modelCommentId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model commentary
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @param payload  (required)
     * @return SpecificModelCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-commentary">Update a model commentary Documentation</a>
     */
    public SpecificModelCommentResponse updateModelComment(UUID modelCommentId, ModelCommentPayload payload) throws ApiException {
        ApiResponse<SpecificModelCommentResponse> resp = updateModelCommentWithHttpInfo(modelCommentId, payload);
        return resp.getData();
    }

    /**
     * Update a model commentary
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificModelCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-commentary">Update a model commentary Documentation</a>
     */
    public ApiResponse<SpecificModelCommentResponse> updateModelCommentWithHttpInfo(UUID modelCommentId, ModelCommentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateModelCommentValidateBeforeCall(modelCommentId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model commentary (asynchronously)
     * 
     * @param modelCommentId UUID of a model comment (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-commentary">Update a model commentary Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelCommentAsync(UUID modelCommentId, ModelCommentPayload payload, final ApiCallback<SpecificModelCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelCommentValidateBeforeCall(modelCommentId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelComposition
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Change-a-model-composition">Change a model composition Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelCompositionCall(UUID modelId, ModelCompositionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model/{model_id}/model_change"
            .replaceAll("\\{" + "model_id" + "\\}", apiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelCompositionValidateBeforeCall(UUID modelId, ModelCompositionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling updateModelComposition(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateModelComposition(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelCompositionCall(modelId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Change a model composition
     * 
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @return ChangeModelCompositionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Change-a-model-composition">Change a model composition Documentation</a>
     */
    public ChangeModelCompositionResponse updateModelComposition(UUID modelId, ModelCompositionPayload payload) throws ApiException {
        ApiResponse<ChangeModelCompositionResponse> resp = updateModelCompositionWithHttpInfo(modelId, payload);
        return resp.getData();
    }

    /**
     * Change a model composition
     * 
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @return ApiResponse&lt;ChangeModelCompositionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Change-a-model-composition">Change a model composition Documentation</a>
     */
    public ApiResponse<ChangeModelCompositionResponse> updateModelCompositionWithHttpInfo(UUID modelId, ModelCompositionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateModelCompositionValidateBeforeCall(modelId, payload, null, null);
        Type localVarReturnType = new TypeToken<ChangeModelCompositionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change a model composition (asynchronously)
     * 
     * @param modelId UUID of a model (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Change-a-model-composition">Change a model composition Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelCompositionAsync(UUID modelId, ModelCompositionPayload payload, final ApiCallback<ChangeModelCompositionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelCompositionValidateBeforeCall(modelId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChangeModelCompositionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelHolding
     * @param modelHoldingId UUID of a model holding record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-holding">Update a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelHoldingCall(UUID modelHoldingId, ModelHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_holding/{model_holding_id}"
            .replaceAll("\\{" + "model_holding_id" + "\\}", apiClient.escapeString(modelHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelHoldingValidateBeforeCall(UUID modelHoldingId, ModelHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelHoldingId' is set
        if (modelHoldingId == null) {
            throw new ApiException("Missing the required parameter 'modelHoldingId' when calling updateModelHolding(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateModelHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelHoldingCall(modelHoldingId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model holding
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @param payload  (required)
     * @return SpecificModelHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-holding">Update a model holding Documentation</a>
     */
    public SpecificModelHoldingResponse updateModelHolding(UUID modelHoldingId, ModelHoldingPayload payload) throws ApiException {
        ApiResponse<SpecificModelHoldingResponse> resp = updateModelHoldingWithHttpInfo(modelHoldingId, payload);
        return resp.getData();
    }

    /**
     * Update a model holding
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificModelHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-holding">Update a model holding Documentation</a>
     */
    public ApiResponse<SpecificModelHoldingResponse> updateModelHoldingWithHttpInfo(UUID modelHoldingId, ModelHoldingPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateModelHoldingValidateBeforeCall(modelHoldingId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model holding (asynchronously)
     * 
     * @param modelHoldingId UUID of a model holding record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-holding">Update a model holding Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelHoldingAsync(UUID modelHoldingId, ModelHoldingPayload payload, final ApiCallback<SpecificModelHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelHoldingValidateBeforeCall(modelHoldingId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModelTransaction
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-transaction">Update a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelTransactionCall(UUID modelTransactionId, ModelTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}"
            .replaceAll("\\{" + "model_transaction_id" + "\\}", apiClient.escapeString(modelTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModelTransactionValidateBeforeCall(UUID modelTransactionId, ModelTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modelTransactionId' is set
        if (modelTransactionId == null) {
            throw new ApiException("Missing the required parameter 'modelTransactionId' when calling updateModelTransaction(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateModelTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModelTransactionCall(modelTransactionId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a model transaction
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param payload  (required)
     * @return SpecificModelTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-transaction">Update a model transaction Documentation</a>
     */
    public SpecificModelTransactionResponse updateModelTransaction(UUID modelTransactionId, ModelTransactionPayload payload) throws ApiException {
        ApiResponse<SpecificModelTransactionResponse> resp = updateModelTransactionWithHttpInfo(modelTransactionId, payload);
        return resp.getData();
    }

    /**
     * Update a model transaction
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificModelTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-transaction">Update a model transaction Documentation</a>
     */
    public ApiResponse<SpecificModelTransactionResponse> updateModelTransactionWithHttpInfo(UUID modelTransactionId, ModelTransactionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateModelTransactionValidateBeforeCall(modelTransactionId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificModelTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a model transaction (asynchronously)
     * 
     * @param modelTransactionId UUID of a model transaction record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-model-transaction">Update a model transaction Documentation</a>
     */
    public com.squareup.okhttp.Call updateModelTransactionAsync(UUID modelTransactionId, ModelTransactionPayload payload, final ApiCallback<SpecificModelTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModelTransactionValidateBeforeCall(modelTransactionId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificModelTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNode
     * @param nodeId UUID of a node (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node">Update a node Documentation</a>
     */
    public com.squareup.okhttp.Call updateNodeCall(UUID nodeId, NodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node/{node_id}"
            .replaceAll("\\{" + "node_id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeValidateBeforeCall(UUID nodeId, NodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling updateNode(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateNode(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeCall(nodeId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a node
     * 
     * @param nodeId UUID of a node (required)
     * @param payload  (required)
     * @return SpecificNodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node">Update a node Documentation</a>
     */
    public SpecificNodeResponse updateNode(UUID nodeId, NodePayload payload) throws ApiException {
        ApiResponse<SpecificNodeResponse> resp = updateNodeWithHttpInfo(nodeId, payload);
        return resp.getData();
    }

    /**
     * Update a node
     * 
     * @param nodeId UUID of a node (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificNodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node">Update a node Documentation</a>
     */
    public ApiResponse<SpecificNodeResponse> updateNodeWithHttpInfo(UUID nodeId, NodePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeValidateBeforeCall(nodeId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificNodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a node (asynchronously)
     * 
     * @param nodeId UUID of a node (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node">Update a node Documentation</a>
     */
    public com.squareup.okhttp.Call updateNodeAsync(UUID nodeId, NodePayload payload, final ApiCallback<SpecificNodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeValidateBeforeCall(nodeId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificNodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNodeRelationship
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node-relationship">Update a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call updateNodeRelationshipCall(UUID nodeRelationshipId, NodeRelationshipPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}"
            .replaceAll("\\{" + "node_relationship_id" + "\\}", apiClient.escapeString(nodeRelationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeRelationshipValidateBeforeCall(UUID nodeRelationshipId, NodeRelationshipPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeRelationshipId' is set
        if (nodeRelationshipId == null) {
            throw new ApiException("Missing the required parameter 'nodeRelationshipId' when calling updateNodeRelationship(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateNodeRelationship(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeRelationshipCall(nodeRelationshipId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a node relationship
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param payload  (required)
     * @return SpecificNodeRelationshipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node-relationship">Update a node relationship Documentation</a>
     */
    public SpecificNodeRelationshipResponse updateNodeRelationship(UUID nodeRelationshipId, NodeRelationshipPayload payload) throws ApiException {
        ApiResponse<SpecificNodeRelationshipResponse> resp = updateNodeRelationshipWithHttpInfo(nodeRelationshipId, payload);
        return resp.getData();
    }

    /**
     * Update a node relationship
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificNodeRelationshipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node-relationship">Update a node relationship Documentation</a>
     */
    public ApiResponse<SpecificNodeRelationshipResponse> updateNodeRelationshipWithHttpInfo(UUID nodeRelationshipId, NodeRelationshipPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeRelationshipValidateBeforeCall(nodeRelationshipId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificNodeRelationshipResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a node relationship (asynchronously)
     * 
     * @param nodeRelationshipId UUID of a node relationship (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-node-relationship">Update a node relationship Documentation</a>
     */
    public com.squareup.okhttp.Call updateNodeRelationshipAsync(UUID nodeRelationshipId, NodeRelationshipPayload payload, final ApiCallback<SpecificNodeRelationshipResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeRelationshipValidateBeforeCall(nodeRelationshipId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificNodeRelationshipResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOrderRecord
     * @param orderId UUID of an order record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-record">Update an order record Documentation</a>
     */
    public com.squareup.okhttp.Call updateOrderRecordCall(UUID orderId, OrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderRecordValidateBeforeCall(UUID orderId, OrderPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderRecord(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateOrderRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderRecordCall(orderId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an order record
     * 
     * @param orderId UUID of an order record (required)
     * @param payload  (required)
     * @return SpecificOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-record">Update an order record Documentation</a>
     */
    public SpecificOrderResponse updateOrderRecord(UUID orderId, OrderPayload payload) throws ApiException {
        ApiResponse<SpecificOrderResponse> resp = updateOrderRecordWithHttpInfo(orderId, payload);
        return resp.getData();
    }

    /**
     * Update an order record
     * 
     * @param orderId UUID of an order record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-record">Update an order record Documentation</a>
     */
    public ApiResponse<SpecificOrderResponse> updateOrderRecordWithHttpInfo(UUID orderId, OrderPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderRecordValidateBeforeCall(orderId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an order record (asynchronously)
     * 
     * @param orderId UUID of an order record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-record">Update an order record Documentation</a>
     */
    public com.squareup.okhttp.Call updateOrderRecordAsync(UUID orderId, OrderPayload payload, final ApiCallback<SpecificOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderRecordValidateBeforeCall(orderId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOrderStatus
     * @param orderStatusId UUID of an order status record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-status">Update an order status Documentation</a>
     */
    public com.squareup.okhttp.Call updateOrderStatusCall(UUID orderStatusId, OrderStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_status/{order_status_id}"
            .replaceAll("\\{" + "order_status_id" + "\\}", apiClient.escapeString(orderStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderStatusValidateBeforeCall(UUID orderStatusId, OrderStatusPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderStatusId' is set
        if (orderStatusId == null) {
            throw new ApiException("Missing the required parameter 'orderStatusId' when calling updateOrderStatus(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateOrderStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderStatusCall(orderStatusId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an order status
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @param payload  (required)
     * @return SpecificOrderStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-status">Update an order status Documentation</a>
     */
    public SpecificOrderStatusResponse updateOrderStatus(UUID orderStatusId, OrderStatusPayload payload) throws ApiException {
        ApiResponse<SpecificOrderStatusResponse> resp = updateOrderStatusWithHttpInfo(orderStatusId, payload);
        return resp.getData();
    }

    /**
     * Update an order status
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificOrderStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-status">Update an order status Documentation</a>
     */
    public ApiResponse<SpecificOrderStatusResponse> updateOrderStatusWithHttpInfo(UUID orderStatusId, OrderStatusPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderStatusValidateBeforeCall(orderStatusId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificOrderStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an order status (asynchronously)
     * 
     * @param orderStatusId UUID of an order status record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-status">Update an order status Documentation</a>
     */
    public com.squareup.okhttp.Call updateOrderStatusAsync(UUID orderStatusId, OrderStatusPayload payload, final ApiCallback<SpecificOrderStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderStatusValidateBeforeCall(orderStatusId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificOrderStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOrderTrackingRecord
     * @param orderTrackId UUID of an order tracking record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-tracking-record">Update an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call updateOrderTrackingRecordCall(UUID orderTrackId, OrderTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/order_track/{order_track_id}"
            .replaceAll("\\{" + "order_track_id" + "\\}", apiClient.escapeString(orderTrackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderTrackingRecordValidateBeforeCall(UUID orderTrackId, OrderTrackPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderTrackId' is set
        if (orderTrackId == null) {
            throw new ApiException("Missing the required parameter 'orderTrackId' when calling updateOrderTrackingRecord(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateOrderTrackingRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = updateOrderTrackingRecordCall(orderTrackId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an order tracking record
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @param payload  (required)
     * @return SpecificOrderTrackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-tracking-record">Update an order tracking record Documentation</a>
     */
    public SpecificOrderTrackResponse updateOrderTrackingRecord(UUID orderTrackId, OrderTrackPayload payload) throws ApiException {
        ApiResponse<SpecificOrderTrackResponse> resp = updateOrderTrackingRecordWithHttpInfo(orderTrackId, payload);
        return resp.getData();
    }

    /**
     * Update an order tracking record
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificOrderTrackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-tracking-record">Update an order tracking record Documentation</a>
     */
    public ApiResponse<SpecificOrderTrackResponse> updateOrderTrackingRecordWithHttpInfo(UUID orderTrackId, OrderTrackPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderTrackingRecordValidateBeforeCall(orderTrackId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificOrderTrackResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an order tracking record (asynchronously)
     * 
     * @param orderTrackId UUID of an order tracking record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-an-order-tracking-record">Update an order tracking record Documentation</a>
     */
    public com.squareup.okhttp.Call updateOrderTrackingRecordAsync(UUID orderTrackId, OrderTrackPayload payload, final ApiCallback<SpecificOrderTrackResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderTrackingRecordValidateBeforeCall(orderTrackId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificOrderTrackResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolio
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio">Update a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioCall(UUID portfolioId, PortfolioPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioValidateBeforeCall(UUID portfolioId, PortfolioPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling updatePortfolio(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updatePortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioCall(portfolioId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return SpecificPortfolioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio">Update a portfolio Documentation</a>
     */
    public SpecificPortfolioResponse updatePortfolio(UUID portfolioId, PortfolioPayload payload) throws ApiException {
        ApiResponse<SpecificPortfolioResponse> resp = updatePortfolioWithHttpInfo(portfolioId, payload);
        return resp.getData();
    }

    /**
     * Update a portfolio
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificPortfolioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio">Update a portfolio Documentation</a>
     */
    public ApiResponse<SpecificPortfolioResponse> updatePortfolioWithHttpInfo(UUID portfolioId, PortfolioPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioValidateBeforeCall(portfolioId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio (asynchronously)
     * 
     * @param portfolioId UUID of a portfolio (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio">Update a portfolio Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioAsync(UUID portfolioId, PortfolioPayload payload, final ApiCallback<SpecificPortfolioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioValidateBeforeCall(portfolioId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioAssetSize
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-asset-size">Update a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioAssetSizeCall(UUID portfolioAssetSizeId, PortfolioAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}"
            .replaceAll("\\{" + "portfolio_asset_size_id" + "\\}", apiClient.escapeString(portfolioAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioAssetSizeValidateBeforeCall(UUID portfolioAssetSizeId, PortfolioAssetSizePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioAssetSizeId' is set
        if (portfolioAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSizeId' when calling updatePortfolioAssetSize(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updatePortfolioAssetSize(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioAssetSizeCall(portfolioAssetSizeId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio asset size
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param payload  (required)
     * @return SpecificPortfolioAssetSizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-asset-size">Update a portfolio asset size Documentation</a>
     */
    public SpecificPortfolioAssetSizeResponse updatePortfolioAssetSize(UUID portfolioAssetSizeId, PortfolioAssetSizePayload payload) throws ApiException {
        ApiResponse<SpecificPortfolioAssetSizeResponse> resp = updatePortfolioAssetSizeWithHttpInfo(portfolioAssetSizeId, payload);
        return resp.getData();
    }

    /**
     * Update a portfolio asset size
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificPortfolioAssetSizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-asset-size">Update a portfolio asset size Documentation</a>
     */
    public ApiResponse<SpecificPortfolioAssetSizeResponse> updatePortfolioAssetSizeWithHttpInfo(UUID portfolioAssetSizeId, PortfolioAssetSizePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioAssetSizeValidateBeforeCall(portfolioAssetSizeId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioAssetSizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio asset size (asynchronously)
     * 
     * @param portfolioAssetSizeId UUID of a portfolio asset size record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-asset-size">Update a portfolio asset size Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioAssetSizeAsync(UUID portfolioAssetSizeId, PortfolioAssetSizePayload payload, final ApiCallback<SpecificPortfolioAssetSizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioAssetSizeValidateBeforeCall(portfolioAssetSizeId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioAssetSizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioComment
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-commentary">Update a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioCommentCall(UUID portfolioCommentId, PortfolioCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}"
            .replaceAll("\\{" + "portfolio_comment_id" + "\\}", apiClient.escapeString(portfolioCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioCommentValidateBeforeCall(UUID portfolioCommentId, PortfolioCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioCommentId' is set
        if (portfolioCommentId == null) {
            throw new ApiException("Missing the required parameter 'portfolioCommentId' when calling updatePortfolioComment(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updatePortfolioComment(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioCommentCall(portfolioCommentId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio commentary
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param payload  (required)
     * @return SpecificPortfolioCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-commentary">Update a portfolio commentary Documentation</a>
     */
    public SpecificPortfolioCommentResponse updatePortfolioComment(UUID portfolioCommentId, PortfolioCommentPayload payload) throws ApiException {
        ApiResponse<SpecificPortfolioCommentResponse> resp = updatePortfolioCommentWithHttpInfo(portfolioCommentId, payload);
        return resp.getData();
    }

    /**
     * Update a portfolio commentary
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificPortfolioCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-commentary">Update a portfolio commentary Documentation</a>
     */
    public ApiResponse<SpecificPortfolioCommentResponse> updatePortfolioCommentWithHttpInfo(UUID portfolioCommentId, PortfolioCommentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioCommentValidateBeforeCall(portfolioCommentId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio commentary (asynchronously)
     * 
     * @param portfolioCommentId UUID of a portfolio comment (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-commentary">Update a portfolio commentary Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioCommentAsync(UUID portfolioCommentId, PortfolioCommentPayload payload, final ApiCallback<SpecificPortfolioCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioCommentValidateBeforeCall(portfolioCommentId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioHolding
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-holding">Update a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioHoldingCall(UUID portfolioHoldingId, PortfolioHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}"
            .replaceAll("\\{" + "portfolio_holding_id" + "\\}", apiClient.escapeString(portfolioHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioHoldingValidateBeforeCall(UUID portfolioHoldingId, PortfolioHoldingPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioHoldingId' is set
        if (portfolioHoldingId == null) {
            throw new ApiException("Missing the required parameter 'portfolioHoldingId' when calling updatePortfolioHolding(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updatePortfolioHolding(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioHoldingCall(portfolioHoldingId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio holding
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param payload  (required)
     * @return SpecificPortfolioHoldingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-holding">Update a portfolio holding Documentation</a>
     */
    public SpecificPortfolioHoldingResponse updatePortfolioHolding(UUID portfolioHoldingId, PortfolioHoldingPayload payload) throws ApiException {
        ApiResponse<SpecificPortfolioHoldingResponse> resp = updatePortfolioHoldingWithHttpInfo(portfolioHoldingId, payload);
        return resp.getData();
    }

    /**
     * Update a portfolio holding
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificPortfolioHoldingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-holding">Update a portfolio holding Documentation</a>
     */
    public ApiResponse<SpecificPortfolioHoldingResponse> updatePortfolioHoldingWithHttpInfo(UUID portfolioHoldingId, PortfolioHoldingPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioHoldingValidateBeforeCall(portfolioHoldingId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioHoldingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio holding (asynchronously)
     * 
     * @param portfolioHoldingId UUID of a portfolio holding record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-holding">Update a portfolio holding Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioHoldingAsync(UUID portfolioHoldingId, PortfolioHoldingPayload payload, final ApiCallback<SpecificPortfolioHoldingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioHoldingValidateBeforeCall(portfolioHoldingId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioHoldingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioTransaction
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-transaction">Update a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioTransactionCall(UUID portfolioTransactionId, PortfolioTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}"
            .replaceAll("\\{" + "portfolio_transaction_id" + "\\}", apiClient.escapeString(portfolioTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioTransactionValidateBeforeCall(UUID portfolioTransactionId, PortfolioTransactionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioTransactionId' is set
        if (portfolioTransactionId == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionId' when calling updatePortfolioTransaction(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updatePortfolioTransaction(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioTransactionCall(portfolioTransactionId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio transaction
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param payload  (required)
     * @return SpecificPortfolioTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-transaction">Update a portfolio transaction Documentation</a>
     */
    public SpecificPortfolioTransactionResponse updatePortfolioTransaction(UUID portfolioTransactionId, PortfolioTransactionPayload payload) throws ApiException {
        ApiResponse<SpecificPortfolioTransactionResponse> resp = updatePortfolioTransactionWithHttpInfo(portfolioTransactionId, payload);
        return resp.getData();
    }

    /**
     * Update a portfolio transaction
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificPortfolioTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-transaction">Update a portfolio transaction Documentation</a>
     */
    public ApiResponse<SpecificPortfolioTransactionResponse> updatePortfolioTransactionWithHttpInfo(UUID portfolioTransactionId, PortfolioTransactionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioTransactionValidateBeforeCall(portfolioTransactionId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificPortfolioTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio transaction (asynchronously)
     * 
     * @param portfolioTransactionId UUID of a portfolio transaction record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-portfolio-transaction">Update a portfolio transaction Documentation</a>
     */
    public com.squareup.okhttp.Call updatePortfolioTransactionAsync(UUID portfolioTransactionId, PortfolioTransactionPayload payload, final ApiCallback<SpecificPortfolioTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioTransactionValidateBeforeCall(portfolioTransactionId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificPortfolioTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateQuestionnaire
     * @param questionnaireId UUID of a questionnaire (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-questionnaire">Update a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call updateQuestionnaireCall(UUID questionnaireId, QuestionnairePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}"
            .replaceAll("\\{" + "questionnaire_id" + "\\}", apiClient.escapeString(questionnaireId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionnaireValidateBeforeCall(UUID questionnaireId, QuestionnairePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionnaireId' is set
        if (questionnaireId == null) {
            throw new ApiException("Missing the required parameter 'questionnaireId' when calling updateQuestionnaire(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateQuestionnaire(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuestionnaireCall(questionnaireId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a questionnaire
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @param payload  (required)
     * @return SpecificQuestionnaireResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-questionnaire">Update a questionnaire Documentation</a>
     */
    public SpecificQuestionnaireResponse updateQuestionnaire(UUID questionnaireId, QuestionnairePayload payload) throws ApiException {
        ApiResponse<SpecificQuestionnaireResponse> resp = updateQuestionnaireWithHttpInfo(questionnaireId, payload);
        return resp.getData();
    }

    /**
     * Update a questionnaire
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificQuestionnaireResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-questionnaire">Update a questionnaire Documentation</a>
     */
    public ApiResponse<SpecificQuestionnaireResponse> updateQuestionnaireWithHttpInfo(UUID questionnaireId, QuestionnairePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionnaireValidateBeforeCall(questionnaireId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificQuestionnaireResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a questionnaire (asynchronously)
     * 
     * @param questionnaireId UUID of a questionnaire (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-questionnaire">Update a questionnaire Documentation</a>
     */
    public com.squareup.okhttp.Call updateQuestionnaireAsync(UUID questionnaireId, QuestionnairePayload payload, final ApiCallback<SpecificQuestionnaireResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionnaireValidateBeforeCall(questionnaireId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificQuestionnaireResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateScore
     * @param scoreId UUID of a score record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-score">Update a score Documentation</a>
     */
    public com.squareup.okhttp.Call updateScoreCall(UUID scoreId, ScorePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/score/{score_id}"
            .replaceAll("\\{" + "score_id" + "\\}", apiClient.escapeString(scoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateScoreValidateBeforeCall(UUID scoreId, ScorePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scoreId' is set
        if (scoreId == null) {
            throw new ApiException("Missing the required parameter 'scoreId' when calling updateScore(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateScore(Async)");
        }
        

        com.squareup.okhttp.Call call = updateScoreCall(scoreId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a score
     * 
     * @param scoreId UUID of a score record (required)
     * @param payload  (required)
     * @return SpecificScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-score">Update a score Documentation</a>
     */
    public SpecificScoreResponse updateScore(UUID scoreId, ScorePayload payload) throws ApiException {
        ApiResponse<SpecificScoreResponse> resp = updateScoreWithHttpInfo(scoreId, payload);
        return resp.getData();
    }

    /**
     * Update a score
     * 
     * @param scoreId UUID of a score record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-score">Update a score Documentation</a>
     */
    public ApiResponse<SpecificScoreResponse> updateScoreWithHttpInfo(UUID scoreId, ScorePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateScoreValidateBeforeCall(scoreId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a score (asynchronously)
     * 
     * @param scoreId UUID of a score record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-score">Update a score Documentation</a>
     */
    public com.squareup.okhttp.Call updateScoreAsync(UUID scoreId, ScorePayload payload, final ApiCallback<SpecificScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateScoreValidateBeforeCall(scoreId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSecurity
     * @param securityId UUID of a security (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security">Update a security Documentation</a>
     */
    public com.squareup.okhttp.Call updateSecurityCall(UUID securityId, SecurityPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security/{security_id}"
            .replaceAll("\\{" + "security_id" + "\\}", apiClient.escapeString(securityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSecurityValidateBeforeCall(UUID securityId, SecurityPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityId' is set
        if (securityId == null) {
            throw new ApiException("Missing the required parameter 'securityId' when calling updateSecurity(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateSecurity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSecurityCall(securityId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a security
     * 
     * @param securityId UUID of a security (required)
     * @param payload  (required)
     * @return SpecificSecurityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security">Update a security Documentation</a>
     */
    public SpecificSecurityResponse updateSecurity(UUID securityId, SecurityPayload payload) throws ApiException {
        ApiResponse<SpecificSecurityResponse> resp = updateSecurityWithHttpInfo(securityId, payload);
        return resp.getData();
    }

    /**
     * Update a security
     * 
     * @param securityId UUID of a security (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificSecurityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security">Update a security Documentation</a>
     */
    public ApiResponse<SpecificSecurityResponse> updateSecurityWithHttpInfo(UUID securityId, SecurityPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateSecurityValidateBeforeCall(securityId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificSecurityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a security (asynchronously)
     * 
     * @param securityId UUID of a security (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security">Update a security Documentation</a>
     */
    public com.squareup.okhttp.Call updateSecurityAsync(UUID securityId, SecurityPayload payload, final ApiCallback<SpecificSecurityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSecurityValidateBeforeCall(securityId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSecurityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSecurityExclusion
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-exclusion">Update a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call updateSecurityExclusionCall(UUID securityExclusionId, SecurityExclusionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}"
            .replaceAll("\\{" + "security_exclusion_id" + "\\}", apiClient.escapeString(securityExclusionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSecurityExclusionValidateBeforeCall(UUID securityExclusionId, SecurityExclusionPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityExclusionId' is set
        if (securityExclusionId == null) {
            throw new ApiException("Missing the required parameter 'securityExclusionId' when calling updateSecurityExclusion(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateSecurityExclusion(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSecurityExclusionCall(securityExclusionId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a security exclusion
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param payload  (required)
     * @return SpecificSecurityExclusionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-exclusion">Update a security exclusion Documentation</a>
     */
    public SpecificSecurityExclusionResponse updateSecurityExclusion(UUID securityExclusionId, SecurityExclusionPayload payload) throws ApiException {
        ApiResponse<SpecificSecurityExclusionResponse> resp = updateSecurityExclusionWithHttpInfo(securityExclusionId, payload);
        return resp.getData();
    }

    /**
     * Update a security exclusion
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificSecurityExclusionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-exclusion">Update a security exclusion Documentation</a>
     */
    public ApiResponse<SpecificSecurityExclusionResponse> updateSecurityExclusionWithHttpInfo(UUID securityExclusionId, SecurityExclusionPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateSecurityExclusionValidateBeforeCall(securityExclusionId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificSecurityExclusionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a security exclusion (asynchronously)
     * 
     * @param securityExclusionId UUID of a security exclusion record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-exclusion">Update a security exclusion Documentation</a>
     */
    public com.squareup.okhttp.Call updateSecurityExclusionAsync(UUID securityExclusionId, SecurityExclusionPayload payload, final ApiCallback<SpecificSecurityExclusionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSecurityExclusionValidateBeforeCall(securityExclusionId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSecurityExclusionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSecurityPrice
     * @param securityPriceId UUID of a security price record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-price">Update a security price Documentation</a>
     */
    public com.squareup.okhttp.Call updateSecurityPriceCall(UUID securityPriceId, SecurityPricePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/security_price/{security_price_id}"
            .replaceAll("\\{" + "security_price_id" + "\\}", apiClient.escapeString(securityPriceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSecurityPriceValidateBeforeCall(UUID securityPriceId, SecurityPricePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'securityPriceId' is set
        if (securityPriceId == null) {
            throw new ApiException("Missing the required parameter 'securityPriceId' when calling updateSecurityPrice(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateSecurityPrice(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSecurityPriceCall(securityPriceId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a security price
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @param payload  (required)
     * @return SpecificSecurityPriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-price">Update a security price Documentation</a>
     */
    public SpecificSecurityPriceResponse updateSecurityPrice(UUID securityPriceId, SecurityPricePayload payload) throws ApiException {
        ApiResponse<SpecificSecurityPriceResponse> resp = updateSecurityPriceWithHttpInfo(securityPriceId, payload);
        return resp.getData();
    }

    /**
     * Update a security price
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificSecurityPriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-price">Update a security price Documentation</a>
     */
    public ApiResponse<SpecificSecurityPriceResponse> updateSecurityPriceWithHttpInfo(UUID securityPriceId, SecurityPricePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateSecurityPriceValidateBeforeCall(securityPriceId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificSecurityPriceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a security price (asynchronously)
     * 
     * @param securityPriceId UUID of a security price record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-security-price">Update a security price Documentation</a>
     */
    public com.squareup.okhttp.Call updateSecurityPriceAsync(UUID securityPriceId, SecurityPricePayload payload, final ApiCallback<SpecificSecurityPriceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSecurityPriceValidateBeforeCall(securityPriceId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSecurityPriceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransactionCode
     * @param transactionCodeId UUID of a transaction code (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transaction-code">Update a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call updateTransactionCodeCall(UUID transactionCodeId, TransactionCodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}"
            .replaceAll("\\{" + "transaction_code_id" + "\\}", apiClient.escapeString(transactionCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransactionCodeValidateBeforeCall(UUID transactionCodeId, TransactionCodePayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transactionCodeId' is set
        if (transactionCodeId == null) {
            throw new ApiException("Missing the required parameter 'transactionCodeId' when calling updateTransactionCode(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateTransactionCode(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTransactionCodeCall(transactionCodeId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a transaction code
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @param payload  (required)
     * @return SpecificTransactionCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transaction-code">Update a transaction code Documentation</a>
     */
    public SpecificTransactionCodeResponse updateTransactionCode(UUID transactionCodeId, TransactionCodePayload payload) throws ApiException {
        ApiResponse<SpecificTransactionCodeResponse> resp = updateTransactionCodeWithHttpInfo(transactionCodeId, payload);
        return resp.getData();
    }

    /**
     * Update a transaction code
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificTransactionCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transaction-code">Update a transaction code Documentation</a>
     */
    public ApiResponse<SpecificTransactionCodeResponse> updateTransactionCodeWithHttpInfo(UUID transactionCodeId, TransactionCodePayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateTransactionCodeValidateBeforeCall(transactionCodeId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificTransactionCodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a transaction code (asynchronously)
     * 
     * @param transactionCodeId UUID of a transaction code (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transaction-code">Update a transaction code Documentation</a>
     */
    public com.squareup.okhttp.Call updateTransactionCodeAsync(UUID transactionCodeId, TransactionCodePayload payload, final ApiCallback<SpecificTransactionCodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransactionCodeValidateBeforeCall(transactionCodeId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificTransactionCodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTransferRequest
     * @param transferId UUID of an account transfer record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transfer-request">Update a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call updateTransferRequestCall(UUID transferId, TransferRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/transfer/{transfer_id}"
            .replaceAll("\\{" + "transfer_id" + "\\}", apiClient.escapeString(transferId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransferRequestValidateBeforeCall(UUID transferId, TransferRequestPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transferId' is set
        if (transferId == null) {
            throw new ApiException("Missing the required parameter 'transferId' when calling updateTransferRequest(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateTransferRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTransferRequestCall(transferId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a transfer request
     * 
     * @param transferId UUID of an account transfer record (required)
     * @param payload  (required)
     * @return SpecificTransferResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transfer-request">Update a transfer request Documentation</a>
     */
    public SpecificTransferResponse updateTransferRequest(UUID transferId, TransferRequestPayload payload) throws ApiException {
        ApiResponse<SpecificTransferResponse> resp = updateTransferRequestWithHttpInfo(transferId, payload);
        return resp.getData();
    }

    /**
     * Update a transfer request
     * 
     * @param transferId UUID of an account transfer record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transfer-request">Update a transfer request Documentation</a>
     */
    public ApiResponse<SpecificTransferResponse> updateTransferRequestWithHttpInfo(UUID transferId, TransferRequestPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateTransferRequestValidateBeforeCall(transferId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificTransferResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a transfer request (asynchronously)
     * 
     * @param transferId UUID of an account transfer record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-transfer-request">Update a transfer request Documentation</a>
     */
    public com.squareup.okhttp.Call updateTransferRequestAsync(UUID transferId, TransferRequestPayload payload, final ApiCallback<SpecificTransferResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransferRequestValidateBeforeCall(transferId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificTransferResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateWithdrawalRequest
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-withdrawal-request">Update a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call updateWithdrawalRequestCall(UUID withdrawalId, WithdrawalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/nucleus/v1/withdrawal/{withdrawal_id}"
            .replaceAll("\\{" + "withdrawal_id" + "\\}", apiClient.escapeString(withdrawalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWithdrawalRequestValidateBeforeCall(UUID withdrawalId, WithdrawalPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'withdrawalId' is set
        if (withdrawalId == null) {
            throw new ApiException("Missing the required parameter 'withdrawalId' when calling updateWithdrawalRequest(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateWithdrawalRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = updateWithdrawalRequestCall(withdrawalId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a withdrawal request
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param payload  (required)
     * @return SpecificWithdrawalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-withdrawal-request">Update a withdrawal request Documentation</a>
     */
    public SpecificWithdrawalResponse updateWithdrawalRequest(UUID withdrawalId, WithdrawalPayload payload) throws ApiException {
        ApiResponse<SpecificWithdrawalResponse> resp = updateWithdrawalRequestWithHttpInfo(withdrawalId, payload);
        return resp.getData();
    }

    /**
     * Update a withdrawal request
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificWithdrawalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-withdrawal-request">Update a withdrawal request Documentation</a>
     */
    public ApiResponse<SpecificWithdrawalResponse> updateWithdrawalRequestWithHttpInfo(UUID withdrawalId, WithdrawalPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateWithdrawalRequestValidateBeforeCall(withdrawalId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificWithdrawalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a withdrawal request (asynchronously)
     * 
     * @param withdrawalId UUID of a withdrawal request (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/nucleus/v1/#Update-a-withdrawal-request">Update a withdrawal request Documentation</a>
     */
    public com.squareup.okhttp.Call updateWithdrawalRequestAsync(UUID withdrawalId, WithdrawalPayload payload, final ApiCallback<SpecificWithdrawalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWithdrawalRequestValidateBeforeCall(withdrawalId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificWithdrawalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
