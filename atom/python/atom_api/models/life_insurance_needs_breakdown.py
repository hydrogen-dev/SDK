# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LifeInsuranceNeedsBreakdown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mortgage': 'float',
        'other': 'float',
        'education': 'float',
        'income_replacement': 'float',
        'beneficiary_bequest': 'float',
        'end_of_life': 'float'
    }

    attribute_map = {
        'mortgage': 'mortgage',
        'other': 'other',
        'education': 'education',
        'income_replacement': 'income_replacement',
        'beneficiary_bequest': 'beneficiary_bequest',
        'end_of_life': 'end_of_life'
    }

    def __init__(self, mortgage=None, other=None, education=None, income_replacement=None, beneficiary_bequest=None, end_of_life=None):  # noqa: E501
        """LifeInsuranceNeedsBreakdown - a model defined in Swagger"""  # noqa: E501

        self._mortgage = None
        self._other = None
        self._education = None
        self._income_replacement = None
        self._beneficiary_bequest = None
        self._end_of_life = None
        self.discriminator = None

        self.mortgage = mortgage
        self.other = other
        self.education = education
        self.income_replacement = income_replacement
        self.beneficiary_bequest = beneficiary_bequest
        self.end_of_life = end_of_life

    @property
    def mortgage(self):
        """Gets the mortgage of this LifeInsuranceNeedsBreakdown.  # noqa: E501

        Insurance required to cover existing mortgage balance, paid immediately.  # noqa: E501

        :return: The mortgage of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._mortgage

    @mortgage.setter
    def mortgage(self, mortgage):
        """Sets the mortgage of this LifeInsuranceNeedsBreakdown.

        Insurance required to cover existing mortgage balance, paid immediately.  # noqa: E501

        :param mortgage: The mortgage of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :type: float
        """
        if mortgage is None:
            raise ValueError("Invalid value for `mortgage`, must not be `None`")  # noqa: E501
        if mortgage is not None and mortgage < 0:  # noqa: E501
            raise ValueError("Invalid value for `mortgage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mortgage = mortgage

    @property
    def other(self):
        """Gets the other of this LifeInsuranceNeedsBreakdown.  # noqa: E501

        Insurance required to cover other debt.  # noqa: E501

        :return: The other of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this LifeInsuranceNeedsBreakdown.

        Insurance required to cover other debt.  # noqa: E501

        :param other: The other of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :type: float
        """
        if other is None:
            raise ValueError("Invalid value for `other`, must not be `None`")  # noqa: E501
        if other is not None and other < 0:  # noqa: E501
            raise ValueError("Invalid value for `other`, must be a value greater than or equal to `0`")  # noqa: E501

        self._other = other

    @property
    def education(self):
        """Gets the education of this LifeInsuranceNeedsBreakdown.  # noqa: E501

        Insurance required to cover future education expenses.  # noqa: E501

        :return: The education of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this LifeInsuranceNeedsBreakdown.

        Insurance required to cover future education expenses.  # noqa: E501

        :param education: The education of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :type: float
        """
        if education is None:
            raise ValueError("Invalid value for `education`, must not be `None`")  # noqa: E501
        if education is not None and education < 0:  # noqa: E501
            raise ValueError("Invalid value for `education`, must be a value greater than or equal to `0`")  # noqa: E501

        self._education = education

    @property
    def income_replacement(self):
        """Gets the income_replacement of this LifeInsuranceNeedsBreakdown.  # noqa: E501

        Insurance required to cover loss of income.  # noqa: E501

        :return: The income_replacement of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._income_replacement

    @income_replacement.setter
    def income_replacement(self, income_replacement):
        """Sets the income_replacement of this LifeInsuranceNeedsBreakdown.

        Insurance required to cover loss of income.  # noqa: E501

        :param income_replacement: The income_replacement of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :type: float
        """
        if income_replacement is None:
            raise ValueError("Invalid value for `income_replacement`, must not be `None`")  # noqa: E501
        if income_replacement is not None and income_replacement < 0:  # noqa: E501
            raise ValueError("Invalid value for `income_replacement`, must be a value greater than or equal to `0`")  # noqa: E501

        self._income_replacement = income_replacement

    @property
    def beneficiary_bequest(self):
        """Gets the beneficiary_bequest of this LifeInsuranceNeedsBreakdown.  # noqa: E501

        Insurance required to cover amount being bequested.  # noqa: E501

        :return: The beneficiary_bequest of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._beneficiary_bequest

    @beneficiary_bequest.setter
    def beneficiary_bequest(self, beneficiary_bequest):
        """Sets the beneficiary_bequest of this LifeInsuranceNeedsBreakdown.

        Insurance required to cover amount being bequested.  # noqa: E501

        :param beneficiary_bequest: The beneficiary_bequest of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :type: float
        """
        if beneficiary_bequest is None:
            raise ValueError("Invalid value for `beneficiary_bequest`, must not be `None`")  # noqa: E501
        if beneficiary_bequest is not None and beneficiary_bequest < 0:  # noqa: E501
            raise ValueError("Invalid value for `beneficiary_bequest`, must be a value greater than or equal to `0`")  # noqa: E501

        self._beneficiary_bequest = beneficiary_bequest

    @property
    def end_of_life(self):
        """Gets the end_of_life of this LifeInsuranceNeedsBreakdown.  # noqa: E501

        Insurance required to cover end of life expenses.  # noqa: E501

        :return: The end_of_life of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._end_of_life

    @end_of_life.setter
    def end_of_life(self, end_of_life):
        """Sets the end_of_life of this LifeInsuranceNeedsBreakdown.

        Insurance required to cover end of life expenses.  # noqa: E501

        :param end_of_life: The end_of_life of this LifeInsuranceNeedsBreakdown.  # noqa: E501
        :type: float
        """
        if end_of_life is None:
            raise ValueError("Invalid value for `end_of_life`, must not be `None`")  # noqa: E501
        if end_of_life is not None and end_of_life < 0:  # noqa: E501
            raise ValueError("Invalid value for `end_of_life`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_of_life = end_of_life

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LifeInsuranceNeedsBreakdown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LifeInsuranceNeedsBreakdown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
