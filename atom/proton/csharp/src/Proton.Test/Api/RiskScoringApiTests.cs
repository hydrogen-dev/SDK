/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Proton.Client;
using Proton.Api;

namespace Proton.Test
{
    /// <summary>
    ///  Class for testing RiskScoringApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RiskScoringApiTests
    {
        private RiskScoringApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RiskScoringApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RiskScoringApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RiskScoringApi
            //Assert.IsInstanceOfType(typeof(RiskScoringApi), instance, "instance is a RiskScoringApi");
        }

        
        /// <summary>
        /// Test DimensionalRiskScore
        /// </summary>
        [Test]
        public void DimensionalRiskScoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DimensionalRiskScoreRequest dimensionalRiskScoreRequest = null;
            //var response = instance.DimensionalRiskScore(dimensionalRiskScoreRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test RiskAllocation
        /// </summary>
        [Test]
        public void RiskAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RiskAllocationRequest riskAllocationRequest = null;
            //var response = instance.RiskAllocation(riskAllocationRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test RiskScore
        /// </summary>
        [Test]
        public void RiskScoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RiskScoreRequest riskScoreRequest = null;
            //var response = instance.RiskScore(riskScoreRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
    }

}
