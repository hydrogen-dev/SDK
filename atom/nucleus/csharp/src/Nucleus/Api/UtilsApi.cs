/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUtilsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an application
        /// </summary>
        /// <remarks>
        /// Create an application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>Application</returns>
        Application CreateApplicationUsingPost (Application application);

        /// <summary>
        /// Create an application
        /// </summary>
        /// <remarks>
        /// Create an application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> CreateApplicationUsingPostWithHttpInfo (Application application);
        /// <summary>
        /// Create a audit log
        /// </summary>
        /// <remarks>
        /// Create a new audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>AuditLog</returns>
        AuditLog CreateAuditLogUsingPost (AuditLog auditLog);

        /// <summary>
        /// Create a audit log
        /// </summary>
        /// <remarks>
        /// Create a new audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>ApiResponse of AuditLog</returns>
        ApiResponse<AuditLog> CreateAuditLogUsingPostWithHttpInfo (AuditLog auditLog);
        /// <summary>
        /// Create a Feature Track
        /// </summary>
        /// <remarks>
        /// Create a new feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>FeatureTrack</returns>
        FeatureTrack CreateFeatureTrackUsingPost (FeatureTrack featureTrack);

        /// <summary>
        /// Create a Feature Track
        /// </summary>
        /// <remarks>
        /// Create a new feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>ApiResponse of FeatureTrack</returns>
        ApiResponse<FeatureTrack> CreateFeatureTrackUsingPostWithHttpInfo (FeatureTrack featureTrack);
        /// <summary>
        /// Create a  Feature
        /// </summary>
        /// <remarks>
        /// Create a new feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>Feature</returns>
        Feature CreateFeatureUsingPost (Feature feature);

        /// <summary>
        /// Create a  Feature
        /// </summary>
        /// <remarks>
        /// Create a new feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> CreateFeatureUsingPostWithHttpInfo (Feature feature);
        /// <summary>
        /// Create a Notification Client
        /// </summary>
        /// <remarks>
        /// Create a new Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>NotificationClient</returns>
        NotificationClient CreateNotificationClientUsingPost (NotificationClient notificationClient);

        /// <summary>
        /// Create a Notification Client
        /// </summary>
        /// <remarks>
        /// Create a new Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>ApiResponse of NotificationClient</returns>
        ApiResponse<NotificationClient> CreateNotificationClientUsingPostWithHttpInfo (NotificationClient notificationClient);
        /// <summary>
        /// Create a Notification Setting
        /// </summary>
        /// <remarks>
        /// Create a new Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>NotificationSetting</returns>
        NotificationSetting CreateNotificationSettingUsingPost (NotificationSetting notificationSetting);

        /// <summary>
        /// Create a Notification Setting
        /// </summary>
        /// <remarks>
        /// Create a new Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>ApiResponse of NotificationSetting</returns>
        ApiResponse<NotificationSetting> CreateNotificationSettingUsingPostWithHttpInfo (NotificationSetting notificationSetting);
        /// <summary>
        /// Create a Notification
        /// </summary>
        /// <remarks>
        /// Create a new Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>Notification</returns>
        Notification CreateNotificationUsingPost (Notification notification);

        /// <summary>
        /// Create a Notification
        /// </summary>
        /// <remarks>
        /// Create a new Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> CreateNotificationUsingPostWithHttpInfo (Notification notification);
        /// <summary>
        /// Create a reason code
        /// </summary>
        /// <remarks>
        /// Create a new reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>ReasonCode</returns>
        ReasonCode CreateReasonCodeUsingPost (ReasonCode reasonCodeRequest);

        /// <summary>
        /// Create a reason code
        /// </summary>
        /// <remarks>
        /// Create a new reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>ApiResponse of ReasonCode</returns>
        ApiResponse<ReasonCode> CreateReasonCodeUsingPostWithHttpInfo (ReasonCode reasonCodeRequest);
        /// <summary>
        /// Create an account stage
        /// </summary>
        /// <remarks>
        /// Create a new account stage
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>Stage</returns>
        Stage CreateStageUsingPost (Stage stageRequest);

        /// <summary>
        /// Create an account stage
        /// </summary>
        /// <remarks>
        /// Create a new account stage
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>ApiResponse of Stage</returns>
        ApiResponse<Stage> CreateStageUsingPostWithHttpInfo (Stage stageRequest);
        /// <summary>
        /// Create a transaction code
        /// </summary>
        /// <remarks>
        /// Create a new transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>TransactionCode</returns>
        TransactionCode CreateTransactionCodeUsingPost (TransactionCode transactionRequest);

        /// <summary>
        /// Create a transaction code
        /// </summary>
        /// <remarks>
        /// Create a new transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>ApiResponse of TransactionCode</returns>
        ApiResponse<TransactionCode> CreateTransactionCodeUsingPostWithHttpInfo (TransactionCode transactionRequest);
        /// <summary>
        /// Delete an Application
        /// </summary>
        /// <remarks>
        /// Permanently delete an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns></returns>
        void DeleteApplicationUsingDelete (Guid? applicationId);

        /// <summary>
        /// Delete an Application
        /// </summary>
        /// <remarks>
        /// Permanently delete an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationUsingDeleteWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Delete a Feature Track
        /// </summary>
        /// <remarks>
        /// Permanently delete a feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns></returns>
        void DeleteFeatureTrackUsingDelete (Guid? featureTrackId);

        /// <summary>
        /// Delete a Feature Track
        /// </summary>
        /// <remarks>
        /// Permanently delete a feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFeatureTrackUsingDeleteWithHttpInfo (Guid? featureTrackId);
        /// <summary>
        /// Delete a Feature
        /// </summary>
        /// <remarks>
        /// Permanently delete a  feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns></returns>
        void DeleteFeatureUsingDelete (Guid? featureId);

        /// <summary>
        /// Delete a Feature
        /// </summary>
        /// <remarks>
        /// Permanently delete a  feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFeatureUsingDeleteWithHttpInfo (Guid? featureId);
        /// <summary>
        /// Delete a Notification Client
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns></returns>
        void DeleteNotificationClientUsingDelete (Guid? notificationClientId);

        /// <summary>
        /// Delete a Notification Client
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNotificationClientUsingDeleteWithHttpInfo (Guid? notificationClientId);
        /// <summary>
        /// Delete a Notification Setting
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns></returns>
        void DeleteNotificationSettingUsingDelete (Guid? notificationSettingId);

        /// <summary>
        /// Delete a Notification Setting
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNotificationSettingUsingDeleteWithHttpInfo (Guid? notificationSettingId);
        /// <summary>
        /// Delete a Notification
        /// </summary>
        /// <remarks>
        /// Permanently Delete a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns></returns>
        void DeleteNotificationUsingDelete (Guid? notificationId);

        /// <summary>
        /// Delete a Notification
        /// </summary>
        /// <remarks>
        /// Permanently Delete a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNotificationUsingDeleteWithHttpInfo (Guid? notificationId);
        /// <summary>
        /// Delete a reason code
        /// </summary>
        /// <remarks>
        /// Permanently delete a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns></returns>
        void DeleteReasonCodeUsingDelete (Guid? reasonCodeId);

        /// <summary>
        /// Delete a reason code
        /// </summary>
        /// <remarks>
        /// Permanently delete a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReasonCodeUsingDeleteWithHttpInfo (Guid? reasonCodeId);
        /// <summary>
        /// Delete an account stage
        /// </summary>
        /// <remarks>
        /// Permanently delete an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns></returns>
        void DeleteStageUsingDelete (Guid? stageId);

        /// <summary>
        /// Delete an account stage
        /// </summary>
        /// <remarks>
        /// Permanently delete an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStageUsingDeleteWithHttpInfo (Guid? stageId);
        /// <summary>
        /// Delete a transaction code
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns></returns>
        void DeleteTransactionCodeUsingDelete (Guid? transactionCodeId);

        /// <summary>
        /// Delete a transaction code
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransactionCodeUsingDeleteWithHttpInfo (Guid? transactionCodeId);
        /// <summary>
        /// List all Application
        /// </summary>
        /// <remarks>
        /// Get details for all Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageApplication</returns>
        PageApplication GetApplicationAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Application
        /// </summary>
        /// <remarks>
        /// Get details for all Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageApplication</returns>
        ApiResponse<PageApplication> GetApplicationAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an Application
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Application</returns>
        Application GetApplicationUsingGet (Guid? applicationId);

        /// <summary>
        /// Retrieve an Application
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationUsingGetWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// List all audit log
        /// </summary>
        /// <remarks>
        /// Get details for all audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAuditLog</returns>
        PageAuditLog GetAuditLogAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all audit log
        /// </summary>
        /// <remarks>
        /// Get details for all audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAuditLog</returns>
        ApiResponse<PageAuditLog> GetAuditLogAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a audit log
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>AuditLog</returns>
        AuditLog GetAuditLogUsingGet (Guid? auditLogId);

        /// <summary>
        /// Retrieve a audit log
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>ApiResponse of AuditLog</returns>
        ApiResponse<AuditLog> GetAuditLogUsingGetWithHttpInfo (Guid? auditLogId);
        /// <summary>
        /// List all Feature
        /// </summary>
        /// <remarks>
        /// Get details for all features.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFeature</returns>
        PageFeature GetFeatureAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Feature
        /// </summary>
        /// <remarks>
        /// Get details for all features.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFeature</returns>
        ApiResponse<PageFeature> GetFeatureAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all Feature track
        /// </summary>
        /// <remarks>
        /// Get details for all feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFeatureTrack</returns>
        PageFeatureTrack GetFeatureTrackAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Feature track
        /// </summary>
        /// <remarks>
        /// Get details for all feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFeatureTrack</returns>
        ApiResponse<PageFeatureTrack> GetFeatureTrackAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a Feature track
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>FeatureTrack</returns>
        FeatureTrack GetFeatureTrackUsingGet (Guid? featureTrackId);

        /// <summary>
        /// Retrieve a Feature track
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>ApiResponse of FeatureTrack</returns>
        ApiResponse<FeatureTrack> GetFeatureTrackUsingGetWithHttpInfo (Guid? featureTrackId);
        /// <summary>
        /// Retrieve a Feature
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Feature</returns>
        Feature GetFeatureUsingGet (Guid? featureId);

        /// <summary>
        /// Retrieve a Feature
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> GetFeatureUsingGetWithHttpInfo (Guid? featureId);
        /// <summary>
        /// Get All Notifications
        /// </summary>
        /// <remarks>
        /// Get All Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNotification</returns>
        PageNotification GetNotificationAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// Get All Notifications
        /// </summary>
        /// <remarks>
        /// Get All Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNotification</returns>
        ApiResponse<PageNotification> GetNotificationAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all Notification Client
        /// </summary>
        /// <remarks>
        /// List all Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNotificationClient</returns>
        PageNotificationClient GetNotificationClientAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Notification Client
        /// </summary>
        /// <remarks>
        /// List all Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNotificationClient</returns>
        ApiResponse<PageNotificationClient> GetNotificationClientAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a Notification Client
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>NotificationClient</returns>
        NotificationClient GetNotificationClientUsingGet (Guid? notificationClientId);

        /// <summary>
        /// Retrieve a Notification Client
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>ApiResponse of NotificationClient</returns>
        ApiResponse<NotificationClient> GetNotificationClientUsingGetWithHttpInfo (Guid? notificationClientId);
        /// <summary>
        /// List all Notification Setting
        /// </summary>
        /// <remarks>
        /// List all Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNotificationSetting</returns>
        PageNotificationSetting GetNotificationSettingAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Notification Setting
        /// </summary>
        /// <remarks>
        /// List all Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNotificationSetting</returns>
        ApiResponse<PageNotificationSetting> GetNotificationSettingAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a Notification Setting
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>NotificationSetting</returns>
        NotificationSetting GetNotificationSettingUsingGet (Guid? notificationSettingId);

        /// <summary>
        /// Retrieve a Notification Setting
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>ApiResponse of NotificationSetting</returns>
        ApiResponse<NotificationSetting> GetNotificationSettingUsingGetWithHttpInfo (Guid? notificationSettingId);
        /// <summary>
        /// Get a Notification
        /// </summary>
        /// <remarks>
        /// Get a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>Notification</returns>
        Notification GetNotificationUsingGet (Guid? notificationId);

        /// <summary>
        /// Get a Notification
        /// </summary>
        /// <remarks>
        /// Get a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> GetNotificationUsingGetWithHttpInfo (Guid? notificationId);
        /// <summary>
        /// List all reason codes
        /// </summary>
        /// <remarks>
        /// Get the information for all reason codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageReasonCode</returns>
        PageReasonCode GetReasonCodeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all reason codes
        /// </summary>
        /// <remarks>
        /// Get the information for all reason codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageReasonCode</returns>
        ApiResponse<PageReasonCode> GetReasonCodeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a reason code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a reason code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ReasonCode</returns>
        ReasonCode GetReasonCodeUsingGet (Guid? reasonCodeId);

        /// <summary>
        /// Retrieve a reason code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a reason code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ApiResponse of ReasonCode</returns>
        ApiResponse<ReasonCode> GetReasonCodeUsingGetWithHttpInfo (Guid? reasonCodeId);
        /// <summary>
        /// List all account stages
        /// </summary>
        /// <remarks>
        /// Get the information for all possible account stages.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageStage</returns>
        PageStage GetStageAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account stages
        /// </summary>
        /// <remarks>
        /// Get the information for all possible account stages.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageStage</returns>
        ApiResponse<PageStage> GetStageAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an account stage
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Stage</returns>
        Stage GetStageUsingGet (Guid? stageId);

        /// <summary>
        /// Retrieve an account stage
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>ApiResponse of Stage</returns>
        ApiResponse<Stage> GetStageUsingGetWithHttpInfo (Guid? stageId);
        /// <summary>
        /// List all transaction codes
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageTransactionCode</returns>
        PageTransactionCode GetTransactionCodeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all transaction codes
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageTransactionCode</returns>
        ApiResponse<PageTransactionCode> GetTransactionCodeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a transaction code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a transaction code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>TransactionCode</returns>
        TransactionCode GetTransactionCodeUsingGet (Guid? transactionCodeId);

        /// <summary>
        /// Retrieve a transaction code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a transaction code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>ApiResponse of TransactionCode</returns>
        ApiResponse<TransactionCode> GetTransactionCodeUsingGetWithHttpInfo (Guid? transactionCodeId);
        /// <summary>
        /// Update an Application
        /// </summary>
        /// <remarks>
        /// Update the information for an Application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Application</returns>
        Application UpdateApplicationUsingPut (Object application, Guid? applicationId);

        /// <summary>
        /// Update an Application
        /// </summary>
        /// <remarks>
        /// Update the information for an Application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> UpdateApplicationUsingPutWithHttpInfo (Object application, Guid? applicationId);
        /// <summary>
        /// Update a Feature Track
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>FeatureTrack</returns>
        FeatureTrack UpdateFeatureTrackUsingPut (Object featureTrack, Guid? featureTrackId);

        /// <summary>
        /// Update a Feature Track
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>ApiResponse of FeatureTrack</returns>
        ApiResponse<FeatureTrack> UpdateFeatureTrackUsingPutWithHttpInfo (Object featureTrack, Guid? featureTrackId);
        /// <summary>
        /// Update a Feature
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Feature</returns>
        Feature UpdateFeatureUsingPut (Object feature, Guid? featureId);

        /// <summary>
        /// Update a Feature
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>ApiResponse of Feature</returns>
        ApiResponse<Feature> UpdateFeatureUsingPutWithHttpInfo (Object feature, Guid? featureId);
        /// <summary>
        /// Update a Notification Client
        /// </summary>
        /// <remarks>
        /// Update a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>NotificationClient</returns>
        NotificationClient UpdateNotificationClientUsingPut (Object notificationClient, Guid? notificationClientId);

        /// <summary>
        /// Update a Notification Client
        /// </summary>
        /// <remarks>
        /// Update a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>ApiResponse of NotificationClient</returns>
        ApiResponse<NotificationClient> UpdateNotificationClientUsingPutWithHttpInfo (Object notificationClient, Guid? notificationClientId);
        /// <summary>
        /// Update a Notification Setting
        /// </summary>
        /// <remarks>
        /// Update a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>NotificationSetting</returns>
        NotificationSetting UpdateNotificationSettingUsingPut (Object notificationSetting, Guid? notificationSettingId);

        /// <summary>
        /// Update a Notification Setting
        /// </summary>
        /// <remarks>
        /// Update a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>ApiResponse of NotificationSetting</returns>
        ApiResponse<NotificationSetting> UpdateNotificationSettingUsingPutWithHttpInfo (Object notificationSetting, Guid? notificationSettingId);
        /// <summary>
        /// Update a Notification
        /// </summary>
        /// <remarks>
        /// Update a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Notification</returns>
        Notification UpdateNotificationUsingPut (Object notification, Guid? notificationId);

        /// <summary>
        /// Update a Notification
        /// </summary>
        /// <remarks>
        /// Update a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>ApiResponse of Notification</returns>
        ApiResponse<Notification> UpdateNotificationUsingPutWithHttpInfo (Object notification, Guid? notificationId);
        /// <summary>
        /// Update a reason code
        /// </summary>
        /// <remarks>
        /// Update a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ReasonCode</returns>
        ReasonCode UpdateReasonCodeUsingPut (Object reasonCode, Guid? reasonCodeId);

        /// <summary>
        /// Update a reason code
        /// </summary>
        /// <remarks>
        /// Update a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ApiResponse of ReasonCode</returns>
        ApiResponse<ReasonCode> UpdateReasonCodeUsingPutWithHttpInfo (Object reasonCode, Guid? reasonCodeId);
        /// <summary>
        /// Update an account stage
        /// </summary>
        /// <remarks>
        /// Update the information for an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Stage</returns>
        Stage UpdateStageUsingPut (Object stage, Guid? stageId);

        /// <summary>
        /// Update an account stage
        /// </summary>
        /// <remarks>
        /// Update the information for an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>ApiResponse of Stage</returns>
        ApiResponse<Stage> UpdateStageUsingPutWithHttpInfo (Object stage, Guid? stageId);
        /// <summary>
        /// Update a transaction code
        /// </summary>
        /// <remarks>
        /// Update a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>TransactionCode</returns>
        TransactionCode UpdateTransactionCodeUsingPut (Object transactionCode, Guid? transactionCodeId);

        /// <summary>
        /// Update a transaction code
        /// </summary>
        /// <remarks>
        /// Update a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>ApiResponse of TransactionCode</returns>
        ApiResponse<TransactionCode> UpdateTransactionCodeUsingPutWithHttpInfo (Object transactionCode, Guid? transactionCodeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an application
        /// </summary>
        /// <remarks>
        /// Create an application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> CreateApplicationUsingPostAsync (Application application);

        /// <summary>
        /// Create an application
        /// </summary>
        /// <remarks>
        /// Create an application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> CreateApplicationUsingPostAsyncWithHttpInfo (Application application);
        /// <summary>
        /// Create a audit log
        /// </summary>
        /// <remarks>
        /// Create a new audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>Task of AuditLog</returns>
        System.Threading.Tasks.Task<AuditLog> CreateAuditLogUsingPostAsync (AuditLog auditLog);

        /// <summary>
        /// Create a audit log
        /// </summary>
        /// <remarks>
        /// Create a new audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLog>> CreateAuditLogUsingPostAsyncWithHttpInfo (AuditLog auditLog);
        /// <summary>
        /// Create a Feature Track
        /// </summary>
        /// <remarks>
        /// Create a new feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>Task of FeatureTrack</returns>
        System.Threading.Tasks.Task<FeatureTrack> CreateFeatureTrackUsingPostAsync (FeatureTrack featureTrack);

        /// <summary>
        /// Create a Feature Track
        /// </summary>
        /// <remarks>
        /// Create a new feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>Task of ApiResponse (FeatureTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureTrack>> CreateFeatureTrackUsingPostAsyncWithHttpInfo (FeatureTrack featureTrack);
        /// <summary>
        /// Create a  Feature
        /// </summary>
        /// <remarks>
        /// Create a new feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> CreateFeatureUsingPostAsync (Feature feature);

        /// <summary>
        /// Create a  Feature
        /// </summary>
        /// <remarks>
        /// Create a new feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> CreateFeatureUsingPostAsyncWithHttpInfo (Feature feature);
        /// <summary>
        /// Create a Notification Client
        /// </summary>
        /// <remarks>
        /// Create a new Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>Task of NotificationClient</returns>
        System.Threading.Tasks.Task<NotificationClient> CreateNotificationClientUsingPostAsync (NotificationClient notificationClient);

        /// <summary>
        /// Create a Notification Client
        /// </summary>
        /// <remarks>
        /// Create a new Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>Task of ApiResponse (NotificationClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationClient>> CreateNotificationClientUsingPostAsyncWithHttpInfo (NotificationClient notificationClient);
        /// <summary>
        /// Create a Notification Setting
        /// </summary>
        /// <remarks>
        /// Create a new Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>Task of NotificationSetting</returns>
        System.Threading.Tasks.Task<NotificationSetting> CreateNotificationSettingUsingPostAsync (NotificationSetting notificationSetting);

        /// <summary>
        /// Create a Notification Setting
        /// </summary>
        /// <remarks>
        /// Create a new Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>Task of ApiResponse (NotificationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationSetting>> CreateNotificationSettingUsingPostAsyncWithHttpInfo (NotificationSetting notificationSetting);
        /// <summary>
        /// Create a Notification
        /// </summary>
        /// <remarks>
        /// Create a new Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> CreateNotificationUsingPostAsync (Notification notification);

        /// <summary>
        /// Create a Notification
        /// </summary>
        /// <remarks>
        /// Create a new Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> CreateNotificationUsingPostAsyncWithHttpInfo (Notification notification);
        /// <summary>
        /// Create a reason code
        /// </summary>
        /// <remarks>
        /// Create a new reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>Task of ReasonCode</returns>
        System.Threading.Tasks.Task<ReasonCode> CreateReasonCodeUsingPostAsync (ReasonCode reasonCodeRequest);

        /// <summary>
        /// Create a reason code
        /// </summary>
        /// <remarks>
        /// Create a new reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>Task of ApiResponse (ReasonCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReasonCode>> CreateReasonCodeUsingPostAsyncWithHttpInfo (ReasonCode reasonCodeRequest);
        /// <summary>
        /// Create an account stage
        /// </summary>
        /// <remarks>
        /// Create a new account stage
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>Task of Stage</returns>
        System.Threading.Tasks.Task<Stage> CreateStageUsingPostAsync (Stage stageRequest);

        /// <summary>
        /// Create an account stage
        /// </summary>
        /// <remarks>
        /// Create a new account stage
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stage>> CreateStageUsingPostAsyncWithHttpInfo (Stage stageRequest);
        /// <summary>
        /// Create a transaction code
        /// </summary>
        /// <remarks>
        /// Create a new transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>Task of TransactionCode</returns>
        System.Threading.Tasks.Task<TransactionCode> CreateTransactionCodeUsingPostAsync (TransactionCode transactionRequest);

        /// <summary>
        /// Create a transaction code
        /// </summary>
        /// <remarks>
        /// Create a new transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>Task of ApiResponse (TransactionCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCode>> CreateTransactionCodeUsingPostAsyncWithHttpInfo (TransactionCode transactionRequest);
        /// <summary>
        /// Delete an Application
        /// </summary>
        /// <remarks>
        /// Permanently delete an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationUsingDeleteAsync (Guid? applicationId);

        /// <summary>
        /// Delete an Application
        /// </summary>
        /// <remarks>
        /// Permanently delete an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationUsingDeleteAsyncWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// Delete a Feature Track
        /// </summary>
        /// <remarks>
        /// Permanently delete a feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFeatureTrackUsingDeleteAsync (Guid? featureTrackId);

        /// <summary>
        /// Delete a Feature Track
        /// </summary>
        /// <remarks>
        /// Permanently delete a feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureTrackUsingDeleteAsyncWithHttpInfo (Guid? featureTrackId);
        /// <summary>
        /// Delete a Feature
        /// </summary>
        /// <remarks>
        /// Permanently delete a  feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFeatureUsingDeleteAsync (Guid? featureId);

        /// <summary>
        /// Delete a Feature
        /// </summary>
        /// <remarks>
        /// Permanently delete a  feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureUsingDeleteAsyncWithHttpInfo (Guid? featureId);
        /// <summary>
        /// Delete a Notification Client
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNotificationClientUsingDeleteAsync (Guid? notificationClientId);

        /// <summary>
        /// Delete a Notification Client
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationClientUsingDeleteAsyncWithHttpInfo (Guid? notificationClientId);
        /// <summary>
        /// Delete a Notification Setting
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNotificationSettingUsingDeleteAsync (Guid? notificationSettingId);

        /// <summary>
        /// Delete a Notification Setting
        /// </summary>
        /// <remarks>
        /// Permanently Delete Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationSettingUsingDeleteAsyncWithHttpInfo (Guid? notificationSettingId);
        /// <summary>
        /// Delete a Notification
        /// </summary>
        /// <remarks>
        /// Permanently Delete a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNotificationUsingDeleteAsync (Guid? notificationId);

        /// <summary>
        /// Delete a Notification
        /// </summary>
        /// <remarks>
        /// Permanently Delete a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationUsingDeleteAsyncWithHttpInfo (Guid? notificationId);
        /// <summary>
        /// Delete a reason code
        /// </summary>
        /// <remarks>
        /// Permanently delete a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReasonCodeUsingDeleteAsync (Guid? reasonCodeId);

        /// <summary>
        /// Delete a reason code
        /// </summary>
        /// <remarks>
        /// Permanently delete a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReasonCodeUsingDeleteAsyncWithHttpInfo (Guid? reasonCodeId);
        /// <summary>
        /// Delete an account stage
        /// </summary>
        /// <remarks>
        /// Permanently delete an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStageUsingDeleteAsync (Guid? stageId);

        /// <summary>
        /// Delete an account stage
        /// </summary>
        /// <remarks>
        /// Permanently delete an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStageUsingDeleteAsyncWithHttpInfo (Guid? stageId);
        /// <summary>
        /// Delete a transaction code
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransactionCodeUsingDeleteAsync (Guid? transactionCodeId);

        /// <summary>
        /// Delete a transaction code
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCodeUsingDeleteAsyncWithHttpInfo (Guid? transactionCodeId);
        /// <summary>
        /// List all Application
        /// </summary>
        /// <remarks>
        /// Get details for all Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageApplication</returns>
        System.Threading.Tasks.Task<PageApplication> GetApplicationAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Application
        /// </summary>
        /// <remarks>
        /// Get details for all Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageApplication)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageApplication>> GetApplicationAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an Application
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationUsingGetAsync (Guid? applicationId);

        /// <summary>
        /// Retrieve an Application
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an Application.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationUsingGetAsyncWithHttpInfo (Guid? applicationId);
        /// <summary>
        /// List all audit log
        /// </summary>
        /// <remarks>
        /// Get details for all audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAuditLog</returns>
        System.Threading.Tasks.Task<PageAuditLog> GetAuditLogAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all audit log
        /// </summary>
        /// <remarks>
        /// Get details for all audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAuditLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAuditLog>> GetAuditLogAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a audit log
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>Task of AuditLog</returns>
        System.Threading.Tasks.Task<AuditLog> GetAuditLogUsingGetAsync (Guid? auditLogId);

        /// <summary>
        /// Retrieve a audit log
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a audit log.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuditLog>> GetAuditLogUsingGetAsyncWithHttpInfo (Guid? auditLogId);
        /// <summary>
        /// List all Feature
        /// </summary>
        /// <remarks>
        /// Get details for all features.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFeature</returns>
        System.Threading.Tasks.Task<PageFeature> GetFeatureAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Feature
        /// </summary>
        /// <remarks>
        /// Get details for all features.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFeature)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageFeature>> GetFeatureAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all Feature track
        /// </summary>
        /// <remarks>
        /// Get details for all feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFeatureTrack</returns>
        System.Threading.Tasks.Task<PageFeatureTrack> GetFeatureTrackAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Feature track
        /// </summary>
        /// <remarks>
        /// Get details for all feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFeatureTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageFeatureTrack>> GetFeatureTrackAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a Feature track
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of FeatureTrack</returns>
        System.Threading.Tasks.Task<FeatureTrack> GetFeatureTrackUsingGetAsync (Guid? featureTrackId);

        /// <summary>
        /// Retrieve a Feature track
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature track.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of ApiResponse (FeatureTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureTrack>> GetFeatureTrackUsingGetAsyncWithHttpInfo (Guid? featureTrackId);
        /// <summary>
        /// Retrieve a Feature
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> GetFeatureUsingGetAsync (Guid? featureId);

        /// <summary>
        /// Retrieve a Feature
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a Feature.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> GetFeatureUsingGetAsyncWithHttpInfo (Guid? featureId);
        /// <summary>
        /// Get All Notifications
        /// </summary>
        /// <remarks>
        /// Get All Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNotification</returns>
        System.Threading.Tasks.Task<PageNotification> GetNotificationAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// Get All Notifications
        /// </summary>
        /// <remarks>
        /// Get All Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNotification)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageNotification>> GetNotificationAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all Notification Client
        /// </summary>
        /// <remarks>
        /// List all Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNotificationClient</returns>
        System.Threading.Tasks.Task<PageNotificationClient> GetNotificationClientAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Notification Client
        /// </summary>
        /// <remarks>
        /// List all Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNotificationClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageNotificationClient>> GetNotificationClientAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a Notification Client
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of NotificationClient</returns>
        System.Threading.Tasks.Task<NotificationClient> GetNotificationClientUsingGetAsync (Guid? notificationClientId);

        /// <summary>
        /// Retrieve a Notification Client
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of ApiResponse (NotificationClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationClient>> GetNotificationClientUsingGetAsyncWithHttpInfo (Guid? notificationClientId);
        /// <summary>
        /// List all Notification Setting
        /// </summary>
        /// <remarks>
        /// List all Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNotificationSetting</returns>
        System.Threading.Tasks.Task<PageNotificationSetting> GetNotificationSettingAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Notification Setting
        /// </summary>
        /// <remarks>
        /// List all Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNotificationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageNotificationSetting>> GetNotificationSettingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a Notification Setting
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of NotificationSetting</returns>
        System.Threading.Tasks.Task<NotificationSetting> GetNotificationSettingUsingGetAsync (Guid? notificationSettingId);

        /// <summary>
        /// Retrieve a Notification Setting
        /// </summary>
        /// <remarks>
        /// Retrieve a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of ApiResponse (NotificationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationSetting>> GetNotificationSettingUsingGetAsyncWithHttpInfo (Guid? notificationSettingId);
        /// <summary>
        /// Get a Notification
        /// </summary>
        /// <remarks>
        /// Get a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> GetNotificationUsingGetAsync (Guid? notificationId);

        /// <summary>
        /// Get a Notification
        /// </summary>
        /// <remarks>
        /// Get a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> GetNotificationUsingGetAsyncWithHttpInfo (Guid? notificationId);
        /// <summary>
        /// List all reason codes
        /// </summary>
        /// <remarks>
        /// Get the information for all reason codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageReasonCode</returns>
        System.Threading.Tasks.Task<PageReasonCode> GetReasonCodeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all reason codes
        /// </summary>
        /// <remarks>
        /// Get the information for all reason codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageReasonCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageReasonCode>> GetReasonCodeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a reason code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a reason code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ReasonCode</returns>
        System.Threading.Tasks.Task<ReasonCode> GetReasonCodeUsingGetAsync (Guid? reasonCodeId);

        /// <summary>
        /// Retrieve a reason code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a reason code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ApiResponse (ReasonCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReasonCode>> GetReasonCodeUsingGetAsyncWithHttpInfo (Guid? reasonCodeId);
        /// <summary>
        /// List all account stages
        /// </summary>
        /// <remarks>
        /// Get the information for all possible account stages.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageStage</returns>
        System.Threading.Tasks.Task<PageStage> GetStageAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account stages
        /// </summary>
        /// <remarks>
        /// Get the information for all possible account stages.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageStage>> GetStageAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an account stage
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of Stage</returns>
        System.Threading.Tasks.Task<Stage> GetStageUsingGetAsync (Guid? stageId);

        /// <summary>
        /// Retrieve an account stage
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stage>> GetStageUsingGetAsyncWithHttpInfo (Guid? stageId);
        /// <summary>
        /// List all transaction codes
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageTransactionCode</returns>
        System.Threading.Tasks.Task<PageTransactionCode> GetTransactionCodeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all transaction codes
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction codes defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageTransactionCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageTransactionCode>> GetTransactionCodeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a transaction code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a transaction code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of TransactionCode</returns>
        System.Threading.Tasks.Task<TransactionCode> GetTransactionCodeUsingGetAsync (Guid? transactionCodeId);

        /// <summary>
        /// Retrieve a transaction code
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a transaction code defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of ApiResponse (TransactionCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCode>> GetTransactionCodeUsingGetAsyncWithHttpInfo (Guid? transactionCodeId);
        /// <summary>
        /// Update an Application
        /// </summary>
        /// <remarks>
        /// Update the information for an Application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> UpdateApplicationUsingPutAsync (Object application, Guid? applicationId);

        /// <summary>
        /// Update an Application
        /// </summary>
        /// <remarks>
        /// Update the information for an Application
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> UpdateApplicationUsingPutAsyncWithHttpInfo (Object application, Guid? applicationId);
        /// <summary>
        /// Update a Feature Track
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of FeatureTrack</returns>
        System.Threading.Tasks.Task<FeatureTrack> UpdateFeatureTrackUsingPutAsync (Object featureTrack, Guid? featureTrackId);

        /// <summary>
        /// Update a Feature Track
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature track registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of ApiResponse (FeatureTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeatureTrack>> UpdateFeatureTrackUsingPutAsyncWithHttpInfo (Object featureTrack, Guid? featureTrackId);
        /// <summary>
        /// Update a Feature
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of Feature</returns>
        System.Threading.Tasks.Task<Feature> UpdateFeatureUsingPutAsync (Object feature, Guid? featureId);

        /// <summary>
        /// Update a Feature
        /// </summary>
        /// <remarks>
        /// Update the information for a Feature registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feature>> UpdateFeatureUsingPutAsyncWithHttpInfo (Object feature, Guid? featureId);
        /// <summary>
        /// Update a Notification Client
        /// </summary>
        /// <remarks>
        /// Update a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>Task of NotificationClient</returns>
        System.Threading.Tasks.Task<NotificationClient> UpdateNotificationClientUsingPutAsync (Object notificationClient, Guid? notificationClientId);

        /// <summary>
        /// Update a Notification Client
        /// </summary>
        /// <remarks>
        /// Update a  Notification Client. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>Task of ApiResponse (NotificationClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationClient>> UpdateNotificationClientUsingPutAsyncWithHttpInfo (Object notificationClient, Guid? notificationClientId);
        /// <summary>
        /// Update a Notification Setting
        /// </summary>
        /// <remarks>
        /// Update a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>Task of NotificationSetting</returns>
        System.Threading.Tasks.Task<NotificationSetting> UpdateNotificationSettingUsingPutAsync (Object notificationSetting, Guid? notificationSettingId);

        /// <summary>
        /// Update a Notification Setting
        /// </summary>
        /// <remarks>
        /// Update a  Notification Setting. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>Task of ApiResponse (NotificationSetting)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationSetting>> UpdateNotificationSettingUsingPutAsyncWithHttpInfo (Object notificationSetting, Guid? notificationSettingId);
        /// <summary>
        /// Update a Notification
        /// </summary>
        /// <remarks>
        /// Update a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of Notification</returns>
        System.Threading.Tasks.Task<Notification> UpdateNotificationUsingPutAsync (Object notification, Guid? notificationId);

        /// <summary>
        /// Update a Notification
        /// </summary>
        /// <remarks>
        /// Update a Notification. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateNotificationUsingPutAsyncWithHttpInfo (Object notification, Guid? notificationId);
        /// <summary>
        /// Update a reason code
        /// </summary>
        /// <remarks>
        /// Update a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ReasonCode</returns>
        System.Threading.Tasks.Task<ReasonCode> UpdateReasonCodeUsingPutAsync (Object reasonCode, Guid? reasonCodeId);

        /// <summary>
        /// Update a reason code
        /// </summary>
        /// <remarks>
        /// Update a reason code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ApiResponse (ReasonCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReasonCode>> UpdateReasonCodeUsingPutAsyncWithHttpInfo (Object reasonCode, Guid? reasonCodeId);
        /// <summary>
        /// Update an account stage
        /// </summary>
        /// <remarks>
        /// Update the information for an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of Stage</returns>
        System.Threading.Tasks.Task<Stage> UpdateStageUsingPutAsync (Object stage, Guid? stageId);

        /// <summary>
        /// Update an account stage
        /// </summary>
        /// <remarks>
        /// Update the information for an account stage.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stage>> UpdateStageUsingPutAsyncWithHttpInfo (Object stage, Guid? stageId);
        /// <summary>
        /// Update a transaction code
        /// </summary>
        /// <remarks>
        /// Update a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of TransactionCode</returns>
        System.Threading.Tasks.Task<TransactionCode> UpdateTransactionCodeUsingPutAsync (Object transactionCode, Guid? transactionCodeId);

        /// <summary>
        /// Update a transaction code
        /// </summary>
        /// <remarks>
        /// Update a transaction code for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of ApiResponse (TransactionCode)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionCode>> UpdateTransactionCodeUsingPutAsyncWithHttpInfo (Object transactionCode, Guid? transactionCodeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UtilsApi : IUtilsApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilsApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UtilsApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an application Create an application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>Application</returns>
        public Application CreateApplicationUsingPost (Application application)
        {
             ApiResponse<Application> localVarResponse = CreateApplicationUsingPostWithHttpInfo(application);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an application Create an application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > CreateApplicationUsingPostWithHttpInfo (Application application)
        {
            // verify the required parameter 'application' is set
            if (application == null)
                throw new ApiException(400, "Missing required parameter 'application' when calling UtilsApi->CreateApplicationUsingPost");

            var localVarPath = "/nucleus/v1/application";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Create an application Create an application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> CreateApplicationUsingPostAsync (Application application)
        {
             ApiResponse<Application> localVarResponse = await CreateApplicationUsingPostAsyncWithHttpInfo(application);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an application Create an application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> CreateApplicationUsingPostAsyncWithHttpInfo (Application application)
        {
            // verify the required parameter 'application' is set
            if (application == null)
                throw new ApiException(400, "Missing required parameter 'application' when calling UtilsApi->CreateApplicationUsingPost");

            var localVarPath = "/nucleus/v1/application";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Create a audit log Create a new audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>AuditLog</returns>
        public AuditLog CreateAuditLogUsingPost (AuditLog auditLog)
        {
             ApiResponse<AuditLog> localVarResponse = CreateAuditLogUsingPostWithHttpInfo(auditLog);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a audit log Create a new audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>ApiResponse of AuditLog</returns>
        public ApiResponse< AuditLog > CreateAuditLogUsingPostWithHttpInfo (AuditLog auditLog)
        {
            // verify the required parameter 'auditLog' is set
            if (auditLog == null)
                throw new ApiException(400, "Missing required parameter 'auditLog' when calling UtilsApi->CreateAuditLogUsingPost");

            var localVarPath = "/nucleus/v1/audit_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (auditLog != null && auditLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(auditLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = auditLog; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuditLogUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

        /// <summary>
        /// Create a audit log Create a new audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>Task of AuditLog</returns>
        public async System.Threading.Tasks.Task<AuditLog> CreateAuditLogUsingPostAsync (AuditLog auditLog)
        {
             ApiResponse<AuditLog> localVarResponse = await CreateAuditLogUsingPostAsyncWithHttpInfo(auditLog);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a audit log Create a new audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLog">auditLog</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLog>> CreateAuditLogUsingPostAsyncWithHttpInfo (AuditLog auditLog)
        {
            // verify the required parameter 'auditLog' is set
            if (auditLog == null)
                throw new ApiException(400, "Missing required parameter 'auditLog' when calling UtilsApi->CreateAuditLogUsingPost");

            var localVarPath = "/nucleus/v1/audit_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (auditLog != null && auditLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(auditLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = auditLog; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuditLogUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

        /// <summary>
        /// Create a Feature Track Create a new feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>FeatureTrack</returns>
        public FeatureTrack CreateFeatureTrackUsingPost (FeatureTrack featureTrack)
        {
             ApiResponse<FeatureTrack> localVarResponse = CreateFeatureTrackUsingPostWithHttpInfo(featureTrack);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Feature Track Create a new feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>ApiResponse of FeatureTrack</returns>
        public ApiResponse< FeatureTrack > CreateFeatureTrackUsingPostWithHttpInfo (FeatureTrack featureTrack)
        {
            // verify the required parameter 'featureTrack' is set
            if (featureTrack == null)
                throw new ApiException(400, "Missing required parameter 'featureTrack' when calling UtilsApi->CreateFeatureTrackUsingPost");

            var localVarPath = "/nucleus/v1/feature_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrack != null && featureTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeatureTrackUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureTrack)));
        }

        /// <summary>
        /// Create a Feature Track Create a new feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>Task of FeatureTrack</returns>
        public async System.Threading.Tasks.Task<FeatureTrack> CreateFeatureTrackUsingPostAsync (FeatureTrack featureTrack)
        {
             ApiResponse<FeatureTrack> localVarResponse = await CreateFeatureTrackUsingPostAsyncWithHttpInfo(featureTrack);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Feature Track Create a new feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">featureTrack</param>
        /// <returns>Task of ApiResponse (FeatureTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureTrack>> CreateFeatureTrackUsingPostAsyncWithHttpInfo (FeatureTrack featureTrack)
        {
            // verify the required parameter 'featureTrack' is set
            if (featureTrack == null)
                throw new ApiException(400, "Missing required parameter 'featureTrack' when calling UtilsApi->CreateFeatureTrackUsingPost");

            var localVarPath = "/nucleus/v1/feature_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrack != null && featureTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeatureTrackUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureTrack)));
        }

        /// <summary>
        /// Create a  Feature Create a new feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>Feature</returns>
        public Feature CreateFeatureUsingPost (Feature feature)
        {
             ApiResponse<Feature> localVarResponse = CreateFeatureUsingPostWithHttpInfo(feature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a  Feature Create a new feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse< Feature > CreateFeatureUsingPostWithHttpInfo (Feature feature)
        {
            // verify the required parameter 'feature' is set
            if (feature == null)
                throw new ApiException(400, "Missing required parameter 'feature' when calling UtilsApi->CreateFeatureUsingPost");

            var localVarPath = "/nucleus/v1/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feature != null && feature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feature; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeatureUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Feature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Feature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Feature)));
        }

        /// <summary>
        /// Create a  Feature Create a new feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> CreateFeatureUsingPostAsync (Feature feature)
        {
             ApiResponse<Feature> localVarResponse = await CreateFeatureUsingPostAsyncWithHttpInfo(feature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a  Feature Create a new feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> CreateFeatureUsingPostAsyncWithHttpInfo (Feature feature)
        {
            // verify the required parameter 'feature' is set
            if (feature == null)
                throw new ApiException(400, "Missing required parameter 'feature' when calling UtilsApi->CreateFeatureUsingPost");

            var localVarPath = "/nucleus/v1/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (feature != null && feature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feature; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFeatureUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Feature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Feature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Feature)));
        }

        /// <summary>
        /// Create a Notification Client Create a new Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>NotificationClient</returns>
        public NotificationClient CreateNotificationClientUsingPost (NotificationClient notificationClient)
        {
             ApiResponse<NotificationClient> localVarResponse = CreateNotificationClientUsingPostWithHttpInfo(notificationClient);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Notification Client Create a new Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>ApiResponse of NotificationClient</returns>
        public ApiResponse< NotificationClient > CreateNotificationClientUsingPostWithHttpInfo (NotificationClient notificationClient)
        {
            // verify the required parameter 'notificationClient' is set
            if (notificationClient == null)
                throw new ApiException(400, "Missing required parameter 'notificationClient' when calling UtilsApi->CreateNotificationClientUsingPost");

            var localVarPath = "/nucleus/v1/notification_client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClient != null && notificationClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationClient; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationClient)));
        }

        /// <summary>
        /// Create a Notification Client Create a new Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>Task of NotificationClient</returns>
        public async System.Threading.Tasks.Task<NotificationClient> CreateNotificationClientUsingPostAsync (NotificationClient notificationClient)
        {
             ApiResponse<NotificationClient> localVarResponse = await CreateNotificationClientUsingPostAsyncWithHttpInfo(notificationClient);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Notification Client Create a new Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notificationClient</param>
        /// <returns>Task of ApiResponse (NotificationClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationClient>> CreateNotificationClientUsingPostAsyncWithHttpInfo (NotificationClient notificationClient)
        {
            // verify the required parameter 'notificationClient' is set
            if (notificationClient == null)
                throw new ApiException(400, "Missing required parameter 'notificationClient' when calling UtilsApi->CreateNotificationClientUsingPost");

            var localVarPath = "/nucleus/v1/notification_client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClient != null && notificationClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationClient; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationClient)));
        }

        /// <summary>
        /// Create a Notification Setting Create a new Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>NotificationSetting</returns>
        public NotificationSetting CreateNotificationSettingUsingPost (NotificationSetting notificationSetting)
        {
             ApiResponse<NotificationSetting> localVarResponse = CreateNotificationSettingUsingPostWithHttpInfo(notificationSetting);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Notification Setting Create a new Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>ApiResponse of NotificationSetting</returns>
        public ApiResponse< NotificationSetting > CreateNotificationSettingUsingPostWithHttpInfo (NotificationSetting notificationSetting)
        {
            // verify the required parameter 'notificationSetting' is set
            if (notificationSetting == null)
                throw new ApiException(400, "Missing required parameter 'notificationSetting' when calling UtilsApi->CreateNotificationSettingUsingPost");

            var localVarPath = "/nucleus/v1/notification_setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSetting != null && notificationSetting.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSetting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSetting; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationSettingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationSetting)));
        }

        /// <summary>
        /// Create a Notification Setting Create a new Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>Task of NotificationSetting</returns>
        public async System.Threading.Tasks.Task<NotificationSetting> CreateNotificationSettingUsingPostAsync (NotificationSetting notificationSetting)
        {
             ApiResponse<NotificationSetting> localVarResponse = await CreateNotificationSettingUsingPostAsyncWithHttpInfo(notificationSetting);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Notification Setting Create a new Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notificationSetting</param>
        /// <returns>Task of ApiResponse (NotificationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationSetting>> CreateNotificationSettingUsingPostAsyncWithHttpInfo (NotificationSetting notificationSetting)
        {
            // verify the required parameter 'notificationSetting' is set
            if (notificationSetting == null)
                throw new ApiException(400, "Missing required parameter 'notificationSetting' when calling UtilsApi->CreateNotificationSettingUsingPost");

            var localVarPath = "/nucleus/v1/notification_setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSetting != null && notificationSetting.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSetting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSetting; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationSettingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationSetting)));
        }

        /// <summary>
        /// Create a Notification Create a new Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>Notification</returns>
        public Notification CreateNotificationUsingPost (Notification notification)
        {
             ApiResponse<Notification> localVarResponse = CreateNotificationUsingPostWithHttpInfo(notification);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Notification Create a new Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse< Notification > CreateNotificationUsingPostWithHttpInfo (Notification notification)
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
                throw new ApiException(400, "Missing required parameter 'notification' when calling UtilsApi->CreateNotificationUsingPost");

            var localVarPath = "/nucleus/v1/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notification != null && notification.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notification; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Create a Notification Create a new Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> CreateNotificationUsingPostAsync (Notification notification)
        {
             ApiResponse<Notification> localVarResponse = await CreateNotificationUsingPostAsyncWithHttpInfo(notification);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Notification Create a new Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> CreateNotificationUsingPostAsyncWithHttpInfo (Notification notification)
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
                throw new ApiException(400, "Missing required parameter 'notification' when calling UtilsApi->CreateNotificationUsingPost");

            var localVarPath = "/nucleus/v1/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notification != null && notification.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notification; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNotificationUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Create a reason code Create a new reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>ReasonCode</returns>
        public ReasonCode CreateReasonCodeUsingPost (ReasonCode reasonCodeRequest)
        {
             ApiResponse<ReasonCode> localVarResponse = CreateReasonCodeUsingPostWithHttpInfo(reasonCodeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a reason code Create a new reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>ApiResponse of ReasonCode</returns>
        public ApiResponse< ReasonCode > CreateReasonCodeUsingPostWithHttpInfo (ReasonCode reasonCodeRequest)
        {
            // verify the required parameter 'reasonCodeRequest' is set
            if (reasonCodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeRequest' when calling UtilsApi->CreateReasonCodeUsingPost");

            var localVarPath = "/nucleus/v1/reason_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeRequest != null && reasonCodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reasonCodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reasonCodeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReasonCodeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReasonCode)));
        }

        /// <summary>
        /// Create a reason code Create a new reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>Task of ReasonCode</returns>
        public async System.Threading.Tasks.Task<ReasonCode> CreateReasonCodeUsingPostAsync (ReasonCode reasonCodeRequest)
        {
             ApiResponse<ReasonCode> localVarResponse = await CreateReasonCodeUsingPostAsyncWithHttpInfo(reasonCodeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a reason code Create a new reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeRequest">reasonCodeRequest</param>
        /// <returns>Task of ApiResponse (ReasonCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReasonCode>> CreateReasonCodeUsingPostAsyncWithHttpInfo (ReasonCode reasonCodeRequest)
        {
            // verify the required parameter 'reasonCodeRequest' is set
            if (reasonCodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeRequest' when calling UtilsApi->CreateReasonCodeUsingPost");

            var localVarPath = "/nucleus/v1/reason_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeRequest != null && reasonCodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reasonCodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reasonCodeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReasonCodeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReasonCode)));
        }

        /// <summary>
        /// Create an account stage Create a new account stage
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>Stage</returns>
        public Stage CreateStageUsingPost (Stage stageRequest)
        {
             ApiResponse<Stage> localVarResponse = CreateStageUsingPostWithHttpInfo(stageRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account stage Create a new account stage
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>ApiResponse of Stage</returns>
        public ApiResponse< Stage > CreateStageUsingPostWithHttpInfo (Stage stageRequest)
        {
            // verify the required parameter 'stageRequest' is set
            if (stageRequest == null)
                throw new ApiException(400, "Missing required parameter 'stageRequest' when calling UtilsApi->CreateStageUsingPost");

            var localVarPath = "/nucleus/v1/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageRequest != null && stageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stageRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStageUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stage)));
        }

        /// <summary>
        /// Create an account stage Create a new account stage
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>Task of Stage</returns>
        public async System.Threading.Tasks.Task<Stage> CreateStageUsingPostAsync (Stage stageRequest)
        {
             ApiResponse<Stage> localVarResponse = await CreateStageUsingPostAsyncWithHttpInfo(stageRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an account stage Create a new account stage
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageRequest">stageRequest</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stage>> CreateStageUsingPostAsyncWithHttpInfo (Stage stageRequest)
        {
            // verify the required parameter 'stageRequest' is set
            if (stageRequest == null)
                throw new ApiException(400, "Missing required parameter 'stageRequest' when calling UtilsApi->CreateStageUsingPost");

            var localVarPath = "/nucleus/v1/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageRequest != null && stageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stageRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStageUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stage)));
        }

        /// <summary>
        /// Create a transaction code Create a new transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>TransactionCode</returns>
        public TransactionCode CreateTransactionCodeUsingPost (TransactionCode transactionRequest)
        {
             ApiResponse<TransactionCode> localVarResponse = CreateTransactionCodeUsingPostWithHttpInfo(transactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transaction code Create a new transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>ApiResponse of TransactionCode</returns>
        public ApiResponse< TransactionCode > CreateTransactionCodeUsingPostWithHttpInfo (TransactionCode transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling UtilsApi->CreateTransactionCodeUsingPost");

            var localVarPath = "/nucleus/v1/transaction_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransactionCodeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCode)));
        }

        /// <summary>
        /// Create a transaction code Create a new transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>Task of TransactionCode</returns>
        public async System.Threading.Tasks.Task<TransactionCode> CreateTransactionCodeUsingPostAsync (TransactionCode transactionRequest)
        {
             ApiResponse<TransactionCode> localVarResponse = await CreateTransactionCodeUsingPostAsyncWithHttpInfo(transactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a transaction code Create a new transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionRequest">transactionRequest</param>
        /// <returns>Task of ApiResponse (TransactionCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionCode>> CreateTransactionCodeUsingPostAsyncWithHttpInfo (TransactionCode transactionRequest)
        {
            // verify the required parameter 'transactionRequest' is set
            if (transactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'transactionRequest' when calling UtilsApi->CreateTransactionCodeUsingPost");

            var localVarPath = "/nucleus/v1/transaction_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionRequest != null && transactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransactionCodeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCode)));
        }

        /// <summary>
        /// Delete an Application Permanently delete an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns></returns>
        public void DeleteApplicationUsingDelete (Guid? applicationId)
        {
             DeleteApplicationUsingDeleteWithHttpInfo(applicationId);
        }

        /// <summary>
        /// Delete an Application Permanently delete an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationUsingDeleteWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling UtilsApi->DeleteApplicationUsingDelete");

            var localVarPath = "/nucleus/v1/application/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an Application Permanently delete an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationUsingDeleteAsync (Guid? applicationId)
        {
             await DeleteApplicationUsingDeleteAsyncWithHttpInfo(applicationId);

        }

        /// <summary>
        /// Delete an Application Permanently delete an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationUsingDeleteAsyncWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling UtilsApi->DeleteApplicationUsingDelete");

            var localVarPath = "/nucleus/v1/application/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplicationUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Feature Track Permanently delete a feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns></returns>
        public void DeleteFeatureTrackUsingDelete (Guid? featureTrackId)
        {
             DeleteFeatureTrackUsingDeleteWithHttpInfo(featureTrackId);
        }

        /// <summary>
        /// Delete a Feature Track Permanently delete a feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFeatureTrackUsingDeleteWithHttpInfo (Guid? featureTrackId)
        {
            // verify the required parameter 'featureTrackId' is set
            if (featureTrackId == null)
                throw new ApiException(400, "Missing required parameter 'featureTrackId' when calling UtilsApi->DeleteFeatureTrackUsingDelete");

            var localVarPath = "/nucleus/v1/feature_track/{feature_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrackId != null) localVarPathParams.Add("feature_track_id", this.Configuration.ApiClient.ParameterToString(featureTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeatureTrackUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Feature Track Permanently delete a feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFeatureTrackUsingDeleteAsync (Guid? featureTrackId)
        {
             await DeleteFeatureTrackUsingDeleteAsyncWithHttpInfo(featureTrackId);

        }

        /// <summary>
        /// Delete a Feature Track Permanently delete a feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureTrackUsingDeleteAsyncWithHttpInfo (Guid? featureTrackId)
        {
            // verify the required parameter 'featureTrackId' is set
            if (featureTrackId == null)
                throw new ApiException(400, "Missing required parameter 'featureTrackId' when calling UtilsApi->DeleteFeatureTrackUsingDelete");

            var localVarPath = "/nucleus/v1/feature_track/{feature_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrackId != null) localVarPathParams.Add("feature_track_id", this.Configuration.ApiClient.ParameterToString(featureTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeatureTrackUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Feature Permanently delete a  feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns></returns>
        public void DeleteFeatureUsingDelete (Guid? featureId)
        {
             DeleteFeatureUsingDeleteWithHttpInfo(featureId);
        }

        /// <summary>
        /// Delete a Feature Permanently delete a  feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFeatureUsingDeleteWithHttpInfo (Guid? featureId)
        {
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling UtilsApi->DeleteFeatureUsingDelete");

            var localVarPath = "/nucleus/v1/feature/{feature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureId != null) localVarPathParams.Add("feature_id", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeatureUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Feature Permanently delete a  feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFeatureUsingDeleteAsync (Guid? featureId)
        {
             await DeleteFeatureUsingDeleteAsyncWithHttpInfo(featureId);

        }

        /// <summary>
        /// Delete a Feature Permanently delete a  feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeatureUsingDeleteAsyncWithHttpInfo (Guid? featureId)
        {
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling UtilsApi->DeleteFeatureUsingDelete");

            var localVarPath = "/nucleus/v1/feature/{feature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureId != null) localVarPathParams.Add("feature_id", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeatureUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Notification Client Permanently Delete Notification Client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns></returns>
        public void DeleteNotificationClientUsingDelete (Guid? notificationClientId)
        {
             DeleteNotificationClientUsingDeleteWithHttpInfo(notificationClientId);
        }

        /// <summary>
        /// Delete a Notification Client Permanently Delete Notification Client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNotificationClientUsingDeleteWithHttpInfo (Guid? notificationClientId)
        {
            // verify the required parameter 'notificationClientId' is set
            if (notificationClientId == null)
                throw new ApiException(400, "Missing required parameter 'notificationClientId' when calling UtilsApi->DeleteNotificationClientUsingDelete");

            var localVarPath = "/nucleus/v1/notification_client/{notification_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClientId != null) localVarPathParams.Add("notification_client_id", this.Configuration.ApiClient.ParameterToString(notificationClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationClientUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Notification Client Permanently Delete Notification Client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNotificationClientUsingDeleteAsync (Guid? notificationClientId)
        {
             await DeleteNotificationClientUsingDeleteAsyncWithHttpInfo(notificationClientId);

        }

        /// <summary>
        /// Delete a Notification Client Permanently Delete Notification Client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationClientUsingDeleteAsyncWithHttpInfo (Guid? notificationClientId)
        {
            // verify the required parameter 'notificationClientId' is set
            if (notificationClientId == null)
                throw new ApiException(400, "Missing required parameter 'notificationClientId' when calling UtilsApi->DeleteNotificationClientUsingDelete");

            var localVarPath = "/nucleus/v1/notification_client/{notification_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClientId != null) localVarPathParams.Add("notification_client_id", this.Configuration.ApiClient.ParameterToString(notificationClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationClientUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Notification Setting Permanently Delete Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns></returns>
        public void DeleteNotificationSettingUsingDelete (Guid? notificationSettingId)
        {
             DeleteNotificationSettingUsingDeleteWithHttpInfo(notificationSettingId);
        }

        /// <summary>
        /// Delete a Notification Setting Permanently Delete Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNotificationSettingUsingDeleteWithHttpInfo (Guid? notificationSettingId)
        {
            // verify the required parameter 'notificationSettingId' is set
            if (notificationSettingId == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettingId' when calling UtilsApi->DeleteNotificationSettingUsingDelete");

            var localVarPath = "/nucleus/v1/notification_setting/{notification_setting_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettingId != null) localVarPathParams.Add("notification_setting_id", this.Configuration.ApiClient.ParameterToString(notificationSettingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationSettingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Notification Setting Permanently Delete Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNotificationSettingUsingDeleteAsync (Guid? notificationSettingId)
        {
             await DeleteNotificationSettingUsingDeleteAsyncWithHttpInfo(notificationSettingId);

        }

        /// <summary>
        /// Delete a Notification Setting Permanently Delete Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationSettingUsingDeleteAsyncWithHttpInfo (Guid? notificationSettingId)
        {
            // verify the required parameter 'notificationSettingId' is set
            if (notificationSettingId == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettingId' when calling UtilsApi->DeleteNotificationSettingUsingDelete");

            var localVarPath = "/nucleus/v1/notification_setting/{notification_setting_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettingId != null) localVarPathParams.Add("notification_setting_id", this.Configuration.ApiClient.ParameterToString(notificationSettingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationSettingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Notification Permanently Delete a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns></returns>
        public void DeleteNotificationUsingDelete (Guid? notificationId)
        {
             DeleteNotificationUsingDeleteWithHttpInfo(notificationId);
        }

        /// <summary>
        /// Delete a Notification Permanently Delete a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNotificationUsingDeleteWithHttpInfo (Guid? notificationId)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling UtilsApi->DeleteNotificationUsingDelete");

            var localVarPath = "/nucleus/v1/notification/{notification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Notification Permanently Delete a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNotificationUsingDeleteAsync (Guid? notificationId)
        {
             await DeleteNotificationUsingDeleteAsyncWithHttpInfo(notificationId);

        }

        /// <summary>
        /// Delete a Notification Permanently Delete a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNotificationUsingDeleteAsyncWithHttpInfo (Guid? notificationId)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling UtilsApi->DeleteNotificationUsingDelete");

            var localVarPath = "/nucleus/v1/notification/{notification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNotificationUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a reason code Permanently delete a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns></returns>
        public void DeleteReasonCodeUsingDelete (Guid? reasonCodeId)
        {
             DeleteReasonCodeUsingDeleteWithHttpInfo(reasonCodeId);
        }

        /// <summary>
        /// Delete a reason code Permanently delete a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReasonCodeUsingDeleteWithHttpInfo (Guid? reasonCodeId)
        {
            // verify the required parameter 'reasonCodeId' is set
            if (reasonCodeId == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeId' when calling UtilsApi->DeleteReasonCodeUsingDelete");

            var localVarPath = "/nucleus/v1/reason_code/{reason_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeId != null) localVarPathParams.Add("reason_code_id", this.Configuration.ApiClient.ParameterToString(reasonCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReasonCodeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a reason code Permanently delete a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReasonCodeUsingDeleteAsync (Guid? reasonCodeId)
        {
             await DeleteReasonCodeUsingDeleteAsyncWithHttpInfo(reasonCodeId);

        }

        /// <summary>
        /// Delete a reason code Permanently delete a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReasonCodeUsingDeleteAsyncWithHttpInfo (Guid? reasonCodeId)
        {
            // verify the required parameter 'reasonCodeId' is set
            if (reasonCodeId == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeId' when calling UtilsApi->DeleteReasonCodeUsingDelete");

            var localVarPath = "/nucleus/v1/reason_code/{reason_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeId != null) localVarPathParams.Add("reason_code_id", this.Configuration.ApiClient.ParameterToString(reasonCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReasonCodeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account stage Permanently delete an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns></returns>
        public void DeleteStageUsingDelete (Guid? stageId)
        {
             DeleteStageUsingDeleteWithHttpInfo(stageId);
        }

        /// <summary>
        /// Delete an account stage Permanently delete an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteStageUsingDeleteWithHttpInfo (Guid? stageId)
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
                throw new ApiException(400, "Missing required parameter 'stageId' when calling UtilsApi->DeleteStageUsingDelete");

            var localVarPath = "/nucleus/v1/stage/{stage_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageId != null) localVarPathParams.Add("stage_id", this.Configuration.ApiClient.ParameterToString(stageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStageUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account stage Permanently delete an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStageUsingDeleteAsync (Guid? stageId)
        {
             await DeleteStageUsingDeleteAsyncWithHttpInfo(stageId);

        }

        /// <summary>
        /// Delete an account stage Permanently delete an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStageUsingDeleteAsyncWithHttpInfo (Guid? stageId)
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
                throw new ApiException(400, "Missing required parameter 'stageId' when calling UtilsApi->DeleteStageUsingDelete");

            var localVarPath = "/nucleus/v1/stage/{stage_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageId != null) localVarPathParams.Add("stage_id", this.Configuration.ApiClient.ParameterToString(stageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteStageUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a transaction code Permanently delete a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns></returns>
        public void DeleteTransactionCodeUsingDelete (Guid? transactionCodeId)
        {
             DeleteTransactionCodeUsingDeleteWithHttpInfo(transactionCodeId);
        }

        /// <summary>
        /// Delete a transaction code Permanently delete a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTransactionCodeUsingDeleteWithHttpInfo (Guid? transactionCodeId)
        {
            // verify the required parameter 'transactionCodeId' is set
            if (transactionCodeId == null)
                throw new ApiException(400, "Missing required parameter 'transactionCodeId' when calling UtilsApi->DeleteTransactionCodeUsingDelete");

            var localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionCodeId != null) localVarPathParams.Add("transaction_code_id", this.Configuration.ApiClient.ParameterToString(transactionCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransactionCodeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a transaction code Permanently delete a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransactionCodeUsingDeleteAsync (Guid? transactionCodeId)
        {
             await DeleteTransactionCodeUsingDeleteAsyncWithHttpInfo(transactionCodeId);

        }

        /// <summary>
        /// Delete a transaction code Permanently delete a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransactionCodeUsingDeleteAsyncWithHttpInfo (Guid? transactionCodeId)
        {
            // verify the required parameter 'transactionCodeId' is set
            if (transactionCodeId == null)
                throw new ApiException(400, "Missing required parameter 'transactionCodeId' when calling UtilsApi->DeleteTransactionCodeUsingDelete");

            var localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionCodeId != null) localVarPathParams.Add("transaction_code_id", this.Configuration.ApiClient.ParameterToString(transactionCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransactionCodeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all Application Get details for all Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageApplication</returns>
        public PageApplication GetApplicationAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageApplication> localVarResponse = GetApplicationAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Application Get details for all Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageApplication</returns>
        public ApiResponse< PageApplication > GetApplicationAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/application";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageApplication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageApplication) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageApplication)));
        }

        /// <summary>
        /// List all Application Get details for all Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageApplication</returns>
        public async System.Threading.Tasks.Task<PageApplication> GetApplicationAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageApplication> localVarResponse = await GetApplicationAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Application Get details for all Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageApplication)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageApplication>> GetApplicationAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/application";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageApplication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageApplication) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageApplication)));
        }

        /// <summary>
        /// Retrieve an Application Retrieve the information for an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Application</returns>
        public Application GetApplicationUsingGet (Guid? applicationId)
        {
             ApiResponse<Application> localVarResponse = GetApplicationUsingGetWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Application Retrieve the information for an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > GetApplicationUsingGetWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling UtilsApi->GetApplicationUsingGet");

            var localVarPath = "/nucleus/v1/application/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Retrieve an Application Retrieve the information for an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationUsingGetAsync (Guid? applicationId)
        {
             ApiResponse<Application> localVarResponse = await GetApplicationUsingGetAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an Application Retrieve the information for an Application.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationUsingGetAsyncWithHttpInfo (Guid? applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling UtilsApi->GetApplicationUsingGet");

            var localVarPath = "/nucleus/v1/application/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// List all audit log Get details for all audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAuditLog</returns>
        public PageAuditLog GetAuditLogAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAuditLog> localVarResponse = GetAuditLogAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all audit log Get details for all audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAuditLog</returns>
        public ApiResponse< PageAuditLog > GetAuditLogAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/audit_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAuditLog)));
        }

        /// <summary>
        /// List all audit log Get details for all audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAuditLog</returns>
        public async System.Threading.Tasks.Task<PageAuditLog> GetAuditLogAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAuditLog> localVarResponse = await GetAuditLogAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all audit log Get details for all audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAuditLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAuditLog>> GetAuditLogAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/audit_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAuditLog)));
        }

        /// <summary>
        /// Retrieve a audit log Retrieve the information for a audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>AuditLog</returns>
        public AuditLog GetAuditLogUsingGet (Guid? auditLogId)
        {
             ApiResponse<AuditLog> localVarResponse = GetAuditLogUsingGetWithHttpInfo(auditLogId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a audit log Retrieve the information for a audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>ApiResponse of AuditLog</returns>
        public ApiResponse< AuditLog > GetAuditLogUsingGetWithHttpInfo (Guid? auditLogId)
        {
            // verify the required parameter 'auditLogId' is set
            if (auditLogId == null)
                throw new ApiException(400, "Missing required parameter 'auditLogId' when calling UtilsApi->GetAuditLogUsingGet");

            var localVarPath = "/nucleus/v1/audit_log/{audit_log_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (auditLogId != null) localVarPathParams.Add("audit_log_id", this.Configuration.ApiClient.ParameterToString(auditLogId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

        /// <summary>
        /// Retrieve a audit log Retrieve the information for a audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>Task of AuditLog</returns>
        public async System.Threading.Tasks.Task<AuditLog> GetAuditLogUsingGetAsync (Guid? auditLogId)
        {
             ApiResponse<AuditLog> localVarResponse = await GetAuditLogUsingGetAsyncWithHttpInfo(auditLogId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a audit log Retrieve the information for a audit log.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="auditLogId">UUID audit_log_id</param>
        /// <returns>Task of ApiResponse (AuditLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuditLog>> GetAuditLogUsingGetAsyncWithHttpInfo (Guid? auditLogId)
        {
            // verify the required parameter 'auditLogId' is set
            if (auditLogId == null)
                throw new ApiException(400, "Missing required parameter 'auditLogId' when calling UtilsApi->GetAuditLogUsingGet");

            var localVarPath = "/nucleus/v1/audit_log/{audit_log_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (auditLogId != null) localVarPathParams.Add("audit_log_id", this.Configuration.ApiClient.ParameterToString(auditLogId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuditLogUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuditLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuditLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuditLog)));
        }

        /// <summary>
        /// List all Feature Get details for all features.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFeature</returns>
        public PageFeature GetFeatureAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFeature> localVarResponse = GetFeatureAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Feature Get details for all features.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFeature</returns>
        public ApiResponse< PageFeature > GetFeatureAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFeature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFeature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFeature)));
        }

        /// <summary>
        /// List all Feature Get details for all features.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFeature</returns>
        public async System.Threading.Tasks.Task<PageFeature> GetFeatureAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFeature> localVarResponse = await GetFeatureAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Feature Get details for all features.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFeature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageFeature>> GetFeatureAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/feature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFeature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFeature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFeature)));
        }

        /// <summary>
        /// List all Feature track Get details for all feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFeatureTrack</returns>
        public PageFeatureTrack GetFeatureTrackAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFeatureTrack> localVarResponse = GetFeatureTrackAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Feature track Get details for all feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFeatureTrack</returns>
        public ApiResponse< PageFeatureTrack > GetFeatureTrackAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/feature_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureTrackAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFeatureTrack)));
        }

        /// <summary>
        /// List all Feature track Get details for all feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFeatureTrack</returns>
        public async System.Threading.Tasks.Task<PageFeatureTrack> GetFeatureTrackAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFeatureTrack> localVarResponse = await GetFeatureTrackAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Feature track Get details for all feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFeatureTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageFeatureTrack>> GetFeatureTrackAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/feature_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureTrackAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFeatureTrack)));
        }

        /// <summary>
        /// Retrieve a Feature track Retrieve the information for a Feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>FeatureTrack</returns>
        public FeatureTrack GetFeatureTrackUsingGet (Guid? featureTrackId)
        {
             ApiResponse<FeatureTrack> localVarResponse = GetFeatureTrackUsingGetWithHttpInfo(featureTrackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Feature track Retrieve the information for a Feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>ApiResponse of FeatureTrack</returns>
        public ApiResponse< FeatureTrack > GetFeatureTrackUsingGetWithHttpInfo (Guid? featureTrackId)
        {
            // verify the required parameter 'featureTrackId' is set
            if (featureTrackId == null)
                throw new ApiException(400, "Missing required parameter 'featureTrackId' when calling UtilsApi->GetFeatureTrackUsingGet");

            var localVarPath = "/nucleus/v1/feature_track/{feature_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrackId != null) localVarPathParams.Add("feature_track_id", this.Configuration.ApiClient.ParameterToString(featureTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureTrackUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureTrack)));
        }

        /// <summary>
        /// Retrieve a Feature track Retrieve the information for a Feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of FeatureTrack</returns>
        public async System.Threading.Tasks.Task<FeatureTrack> GetFeatureTrackUsingGetAsync (Guid? featureTrackId)
        {
             ApiResponse<FeatureTrack> localVarResponse = await GetFeatureTrackUsingGetAsyncWithHttpInfo(featureTrackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Feature track Retrieve the information for a Feature track.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of ApiResponse (FeatureTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureTrack>> GetFeatureTrackUsingGetAsyncWithHttpInfo (Guid? featureTrackId)
        {
            // verify the required parameter 'featureTrackId' is set
            if (featureTrackId == null)
                throw new ApiException(400, "Missing required parameter 'featureTrackId' when calling UtilsApi->GetFeatureTrackUsingGet");

            var localVarPath = "/nucleus/v1/feature_track/{feature_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrackId != null) localVarPathParams.Add("feature_track_id", this.Configuration.ApiClient.ParameterToString(featureTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureTrackUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureTrack)));
        }

        /// <summary>
        /// Retrieve a Feature Retrieve the information for a Feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Feature</returns>
        public Feature GetFeatureUsingGet (Guid? featureId)
        {
             ApiResponse<Feature> localVarResponse = GetFeatureUsingGetWithHttpInfo(featureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Feature Retrieve the information for a Feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse< Feature > GetFeatureUsingGetWithHttpInfo (Guid? featureId)
        {
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling UtilsApi->GetFeatureUsingGet");

            var localVarPath = "/nucleus/v1/feature/{feature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureId != null) localVarPathParams.Add("feature_id", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Feature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Feature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Feature)));
        }

        /// <summary>
        /// Retrieve a Feature Retrieve the information for a Feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> GetFeatureUsingGetAsync (Guid? featureId)
        {
             ApiResponse<Feature> localVarResponse = await GetFeatureUsingGetAsyncWithHttpInfo(featureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Feature Retrieve the information for a Feature.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> GetFeatureUsingGetAsyncWithHttpInfo (Guid? featureId)
        {
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling UtilsApi->GetFeatureUsingGet");

            var localVarPath = "/nucleus/v1/feature/{feature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureId != null) localVarPathParams.Add("feature_id", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Feature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Feature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Feature)));
        }

        /// <summary>
        /// Get All Notifications Get All Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNotification</returns>
        public PageNotification GetNotificationAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNotification> localVarResponse = GetNotificationAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Notifications Get All Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNotification</returns>
        public ApiResponse< PageNotification > GetNotificationAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNotification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNotification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNotification)));
        }

        /// <summary>
        /// Get All Notifications Get All Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNotification</returns>
        public async System.Threading.Tasks.Task<PageNotification> GetNotificationAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNotification> localVarResponse = await GetNotificationAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Notifications Get All Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNotification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageNotification>> GetNotificationAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNotification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNotification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNotification)));
        }

        /// <summary>
        /// List all Notification Client List all Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNotificationClient</returns>
        public PageNotificationClient GetNotificationClientAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNotificationClient> localVarResponse = GetNotificationClientAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Notification Client List all Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNotificationClient</returns>
        public ApiResponse< PageNotificationClient > GetNotificationClientAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/notification_client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationClientAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNotificationClient)));
        }

        /// <summary>
        /// List all Notification Client List all Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNotificationClient</returns>
        public async System.Threading.Tasks.Task<PageNotificationClient> GetNotificationClientAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNotificationClient> localVarResponse = await GetNotificationClientAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Notification Client List all Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNotificationClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageNotificationClient>> GetNotificationClientAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/notification_client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationClientAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNotificationClient)));
        }

        /// <summary>
        /// Retrieve a Notification Client Retrieve a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>NotificationClient</returns>
        public NotificationClient GetNotificationClientUsingGet (Guid? notificationClientId)
        {
             ApiResponse<NotificationClient> localVarResponse = GetNotificationClientUsingGetWithHttpInfo(notificationClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Notification Client Retrieve a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>ApiResponse of NotificationClient</returns>
        public ApiResponse< NotificationClient > GetNotificationClientUsingGetWithHttpInfo (Guid? notificationClientId)
        {
            // verify the required parameter 'notificationClientId' is set
            if (notificationClientId == null)
                throw new ApiException(400, "Missing required parameter 'notificationClientId' when calling UtilsApi->GetNotificationClientUsingGet");

            var localVarPath = "/nucleus/v1/notification_client/{notification_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClientId != null) localVarPathParams.Add("notification_client_id", this.Configuration.ApiClient.ParameterToString(notificationClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationClientUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationClient)));
        }

        /// <summary>
        /// Retrieve a Notification Client Retrieve a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of NotificationClient</returns>
        public async System.Threading.Tasks.Task<NotificationClient> GetNotificationClientUsingGetAsync (Guid? notificationClientId)
        {
             ApiResponse<NotificationClient> localVarResponse = await GetNotificationClientUsingGetAsyncWithHttpInfo(notificationClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Notification Client Retrieve a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClientId">notification_client_id</param>
        /// <returns>Task of ApiResponse (NotificationClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationClient>> GetNotificationClientUsingGetAsyncWithHttpInfo (Guid? notificationClientId)
        {
            // verify the required parameter 'notificationClientId' is set
            if (notificationClientId == null)
                throw new ApiException(400, "Missing required parameter 'notificationClientId' when calling UtilsApi->GetNotificationClientUsingGet");

            var localVarPath = "/nucleus/v1/notification_client/{notification_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClientId != null) localVarPathParams.Add("notification_client_id", this.Configuration.ApiClient.ParameterToString(notificationClientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationClientUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationClient)));
        }

        /// <summary>
        /// List all Notification Setting List all Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNotificationSetting</returns>
        public PageNotificationSetting GetNotificationSettingAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNotificationSetting> localVarResponse = GetNotificationSettingAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Notification Setting List all Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNotificationSetting</returns>
        public ApiResponse< PageNotificationSetting > GetNotificationSettingAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/notification_setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationSettingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNotificationSetting)));
        }

        /// <summary>
        /// List all Notification Setting List all Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNotificationSetting</returns>
        public async System.Threading.Tasks.Task<PageNotificationSetting> GetNotificationSettingAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNotificationSetting> localVarResponse = await GetNotificationSettingAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Notification Setting List all Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNotificationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageNotificationSetting>> GetNotificationSettingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/notification_setting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationSettingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNotificationSetting)));
        }

        /// <summary>
        /// Retrieve a Notification Setting Retrieve a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>NotificationSetting</returns>
        public NotificationSetting GetNotificationSettingUsingGet (Guid? notificationSettingId)
        {
             ApiResponse<NotificationSetting> localVarResponse = GetNotificationSettingUsingGetWithHttpInfo(notificationSettingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Notification Setting Retrieve a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>ApiResponse of NotificationSetting</returns>
        public ApiResponse< NotificationSetting > GetNotificationSettingUsingGetWithHttpInfo (Guid? notificationSettingId)
        {
            // verify the required parameter 'notificationSettingId' is set
            if (notificationSettingId == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettingId' when calling UtilsApi->GetNotificationSettingUsingGet");

            var localVarPath = "/nucleus/v1/notification_setting/{notification_setting_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettingId != null) localVarPathParams.Add("notification_setting_id", this.Configuration.ApiClient.ParameterToString(notificationSettingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationSettingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationSetting)));
        }

        /// <summary>
        /// Retrieve a Notification Setting Retrieve a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of NotificationSetting</returns>
        public async System.Threading.Tasks.Task<NotificationSetting> GetNotificationSettingUsingGetAsync (Guid? notificationSettingId)
        {
             ApiResponse<NotificationSetting> localVarResponse = await GetNotificationSettingUsingGetAsyncWithHttpInfo(notificationSettingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a Notification Setting Retrieve a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSettingId">notification_setting_id</param>
        /// <returns>Task of ApiResponse (NotificationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationSetting>> GetNotificationSettingUsingGetAsyncWithHttpInfo (Guid? notificationSettingId)
        {
            // verify the required parameter 'notificationSettingId' is set
            if (notificationSettingId == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettingId' when calling UtilsApi->GetNotificationSettingUsingGet");

            var localVarPath = "/nucleus/v1/notification_setting/{notification_setting_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettingId != null) localVarPathParams.Add("notification_setting_id", this.Configuration.ApiClient.ParameterToString(notificationSettingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationSettingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationSetting)));
        }

        /// <summary>
        /// Get a Notification Get a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>Notification</returns>
        public Notification GetNotificationUsingGet (Guid? notificationId)
        {
             ApiResponse<Notification> localVarResponse = GetNotificationUsingGetWithHttpInfo(notificationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Notification Get a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse< Notification > GetNotificationUsingGetWithHttpInfo (Guid? notificationId)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling UtilsApi->GetNotificationUsingGet");

            var localVarPath = "/nucleus/v1/notification/{notification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Get a Notification Get a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> GetNotificationUsingGetAsync (Guid? notificationId)
        {
             ApiResponse<Notification> localVarResponse = await GetNotificationUsingGetAsyncWithHttpInfo(notificationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Notification Get a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">notification_id</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> GetNotificationUsingGetAsyncWithHttpInfo (Guid? notificationId)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling UtilsApi->GetNotificationUsingGet");

            var localVarPath = "/nucleus/v1/notification/{notification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNotificationUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// List all reason codes Get the information for all reason codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageReasonCode</returns>
        public PageReasonCode GetReasonCodeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageReasonCode> localVarResponse = GetReasonCodeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all reason codes Get the information for all reason codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageReasonCode</returns>
        public ApiResponse< PageReasonCode > GetReasonCodeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/reason_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReasonCodeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageReasonCode)));
        }

        /// <summary>
        /// List all reason codes Get the information for all reason codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageReasonCode</returns>
        public async System.Threading.Tasks.Task<PageReasonCode> GetReasonCodeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageReasonCode> localVarResponse = await GetReasonCodeAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all reason codes Get the information for all reason codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageReasonCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageReasonCode>> GetReasonCodeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/reason_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReasonCodeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageReasonCode)));
        }

        /// <summary>
        /// Retrieve a reason code Retrieve the information for a reason code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ReasonCode</returns>
        public ReasonCode GetReasonCodeUsingGet (Guid? reasonCodeId)
        {
             ApiResponse<ReasonCode> localVarResponse = GetReasonCodeUsingGetWithHttpInfo(reasonCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a reason code Retrieve the information for a reason code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ApiResponse of ReasonCode</returns>
        public ApiResponse< ReasonCode > GetReasonCodeUsingGetWithHttpInfo (Guid? reasonCodeId)
        {
            // verify the required parameter 'reasonCodeId' is set
            if (reasonCodeId == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeId' when calling UtilsApi->GetReasonCodeUsingGet");

            var localVarPath = "/nucleus/v1/reason_code/{reason_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeId != null) localVarPathParams.Add("reason_code_id", this.Configuration.ApiClient.ParameterToString(reasonCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReasonCodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReasonCode)));
        }

        /// <summary>
        /// Retrieve a reason code Retrieve the information for a reason code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ReasonCode</returns>
        public async System.Threading.Tasks.Task<ReasonCode> GetReasonCodeUsingGetAsync (Guid? reasonCodeId)
        {
             ApiResponse<ReasonCode> localVarResponse = await GetReasonCodeUsingGetAsyncWithHttpInfo(reasonCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a reason code Retrieve the information for a reason code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ApiResponse (ReasonCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReasonCode>> GetReasonCodeUsingGetAsyncWithHttpInfo (Guid? reasonCodeId)
        {
            // verify the required parameter 'reasonCodeId' is set
            if (reasonCodeId == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeId' when calling UtilsApi->GetReasonCodeUsingGet");

            var localVarPath = "/nucleus/v1/reason_code/{reason_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeId != null) localVarPathParams.Add("reason_code_id", this.Configuration.ApiClient.ParameterToString(reasonCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReasonCodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReasonCode)));
        }

        /// <summary>
        /// List all account stages Get the information for all possible account stages.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageStage</returns>
        public PageStage GetStageAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageStage> localVarResponse = GetStageAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account stages Get the information for all possible account stages.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageStage</returns>
        public ApiResponse< PageStage > GetStageAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStageAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageStage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageStage)));
        }

        /// <summary>
        /// List all account stages Get the information for all possible account stages.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageStage</returns>
        public async System.Threading.Tasks.Task<PageStage> GetStageAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageStage> localVarResponse = await GetStageAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account stages Get the information for all possible account stages.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageStage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageStage>> GetStageAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/stage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStageAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageStage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageStage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageStage)));
        }

        /// <summary>
        /// Retrieve an account stage Retrieve the information for a specific account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Stage</returns>
        public Stage GetStageUsingGet (Guid? stageId)
        {
             ApiResponse<Stage> localVarResponse = GetStageUsingGetWithHttpInfo(stageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an account stage Retrieve the information for a specific account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>ApiResponse of Stage</returns>
        public ApiResponse< Stage > GetStageUsingGetWithHttpInfo (Guid? stageId)
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
                throw new ApiException(400, "Missing required parameter 'stageId' when calling UtilsApi->GetStageUsingGet");

            var localVarPath = "/nucleus/v1/stage/{stage_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageId != null) localVarPathParams.Add("stage_id", this.Configuration.ApiClient.ParameterToString(stageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStageUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stage)));
        }

        /// <summary>
        /// Retrieve an account stage Retrieve the information for a specific account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of Stage</returns>
        public async System.Threading.Tasks.Task<Stage> GetStageUsingGetAsync (Guid? stageId)
        {
             ApiResponse<Stage> localVarResponse = await GetStageUsingGetAsyncWithHttpInfo(stageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an account stage Retrieve the information for a specific account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stage>> GetStageUsingGetAsyncWithHttpInfo (Guid? stageId)
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
                throw new ApiException(400, "Missing required parameter 'stageId' when calling UtilsApi->GetStageUsingGet");

            var localVarPath = "/nucleus/v1/stage/{stage_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageId != null) localVarPathParams.Add("stage_id", this.Configuration.ApiClient.ParameterToString(stageId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStageUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stage)));
        }

        /// <summary>
        /// List all transaction codes Get the information for all transaction codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageTransactionCode</returns>
        public PageTransactionCode GetTransactionCodeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageTransactionCode> localVarResponse = GetTransactionCodeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all transaction codes Get the information for all transaction codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageTransactionCode</returns>
        public ApiResponse< PageTransactionCode > GetTransactionCodeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/transaction_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCodeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageTransactionCode)));
        }

        /// <summary>
        /// List all transaction codes Get the information for all transaction codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageTransactionCode</returns>
        public async System.Threading.Tasks.Task<PageTransactionCode> GetTransactionCodeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageTransactionCode> localVarResponse = await GetTransactionCodeAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all transaction codes Get the information for all transaction codes defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageTransactionCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageTransactionCode>> GetTransactionCodeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/transaction_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCodeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageTransactionCode)));
        }

        /// <summary>
        /// Retrieve a transaction code Retrieve the information for a transaction code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>TransactionCode</returns>
        public TransactionCode GetTransactionCodeUsingGet (Guid? transactionCodeId)
        {
             ApiResponse<TransactionCode> localVarResponse = GetTransactionCodeUsingGetWithHttpInfo(transactionCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a transaction code Retrieve the information for a transaction code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>ApiResponse of TransactionCode</returns>
        public ApiResponse< TransactionCode > GetTransactionCodeUsingGetWithHttpInfo (Guid? transactionCodeId)
        {
            // verify the required parameter 'transactionCodeId' is set
            if (transactionCodeId == null)
                throw new ApiException(400, "Missing required parameter 'transactionCodeId' when calling UtilsApi->GetTransactionCodeUsingGet");

            var localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionCodeId != null) localVarPathParams.Add("transaction_code_id", this.Configuration.ApiClient.ParameterToString(transactionCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCode)));
        }

        /// <summary>
        /// Retrieve a transaction code Retrieve the information for a transaction code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of TransactionCode</returns>
        public async System.Threading.Tasks.Task<TransactionCode> GetTransactionCodeUsingGetAsync (Guid? transactionCodeId)
        {
             ApiResponse<TransactionCode> localVarResponse = await GetTransactionCodeUsingGetAsyncWithHttpInfo(transactionCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a transaction code Retrieve the information for a transaction code defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of ApiResponse (TransactionCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionCode>> GetTransactionCodeUsingGetAsyncWithHttpInfo (Guid? transactionCodeId)
        {
            // verify the required parameter 'transactionCodeId' is set
            if (transactionCodeId == null)
                throw new ApiException(400, "Missing required parameter 'transactionCodeId' when calling UtilsApi->GetTransactionCodeUsingGet");

            var localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionCodeId != null) localVarPathParams.Add("transaction_code_id", this.Configuration.ApiClient.ParameterToString(transactionCodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionCodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCode)));
        }

        /// <summary>
        /// Update an Application Update the information for an Application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Application</returns>
        public Application UpdateApplicationUsingPut (Object application, Guid? applicationId)
        {
             ApiResponse<Application> localVarResponse = UpdateApplicationUsingPutWithHttpInfo(application, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Application Update the information for an Application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse< Application > UpdateApplicationUsingPutWithHttpInfo (Object application, Guid? applicationId)
        {
            // verify the required parameter 'application' is set
            if (application == null)
                throw new ApiException(400, "Missing required parameter 'application' when calling UtilsApi->UpdateApplicationUsingPut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling UtilsApi->UpdateApplicationUsingPut");

            var localVarPath = "/nucleus/v1/application/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Update an Application Update the information for an Application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> UpdateApplicationUsingPutAsync (Object application, Guid? applicationId)
        {
             ApiResponse<Application> localVarResponse = await UpdateApplicationUsingPutAsyncWithHttpInfo(application, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Application Update the information for an Application
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="application">application</param>
        /// <param name="applicationId">UUID application_id</param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> UpdateApplicationUsingPutAsyncWithHttpInfo (Object application, Guid? applicationId)
        {
            // verify the required parameter 'application' is set
            if (application == null)
                throw new ApiException(400, "Missing required parameter 'application' when calling UtilsApi->UpdateApplicationUsingPut");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling UtilsApi->UpdateApplicationUsingPut");

            var localVarPath = "/nucleus/v1/application/{application_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("application_id", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (application != null && application.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(application); // http body (model) parameter
            }
            else
            {
                localVarPostBody = application; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Update a Feature Track Update the information for a Feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>FeatureTrack</returns>
        public FeatureTrack UpdateFeatureTrackUsingPut (Object featureTrack, Guid? featureTrackId)
        {
             ApiResponse<FeatureTrack> localVarResponse = UpdateFeatureTrackUsingPutWithHttpInfo(featureTrack, featureTrackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Feature Track Update the information for a Feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>ApiResponse of FeatureTrack</returns>
        public ApiResponse< FeatureTrack > UpdateFeatureTrackUsingPutWithHttpInfo (Object featureTrack, Guid? featureTrackId)
        {
            // verify the required parameter 'featureTrack' is set
            if (featureTrack == null)
                throw new ApiException(400, "Missing required parameter 'featureTrack' when calling UtilsApi->UpdateFeatureTrackUsingPut");
            // verify the required parameter 'featureTrackId' is set
            if (featureTrackId == null)
                throw new ApiException(400, "Missing required parameter 'featureTrackId' when calling UtilsApi->UpdateFeatureTrackUsingPut");

            var localVarPath = "/nucleus/v1/feature_track/{feature_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrackId != null) localVarPathParams.Add("feature_track_id", this.Configuration.ApiClient.ParameterToString(featureTrackId)); // path parameter
            if (featureTrack != null && featureTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFeatureTrackUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureTrack)));
        }

        /// <summary>
        /// Update a Feature Track Update the information for a Feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of FeatureTrack</returns>
        public async System.Threading.Tasks.Task<FeatureTrack> UpdateFeatureTrackUsingPutAsync (Object featureTrack, Guid? featureTrackId)
        {
             ApiResponse<FeatureTrack> localVarResponse = await UpdateFeatureTrackUsingPutAsyncWithHttpInfo(featureTrack, featureTrackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Feature Track Update the information for a Feature track registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTrack">feature_track</param>
        /// <param name="featureTrackId">UUID feature_track_id</param>
        /// <returns>Task of ApiResponse (FeatureTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeatureTrack>> UpdateFeatureTrackUsingPutAsyncWithHttpInfo (Object featureTrack, Guid? featureTrackId)
        {
            // verify the required parameter 'featureTrack' is set
            if (featureTrack == null)
                throw new ApiException(400, "Missing required parameter 'featureTrack' when calling UtilsApi->UpdateFeatureTrackUsingPut");
            // verify the required parameter 'featureTrackId' is set
            if (featureTrackId == null)
                throw new ApiException(400, "Missing required parameter 'featureTrackId' when calling UtilsApi->UpdateFeatureTrackUsingPut");

            var localVarPath = "/nucleus/v1/feature_track/{feature_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTrackId != null) localVarPathParams.Add("feature_track_id", this.Configuration.ApiClient.ParameterToString(featureTrackId)); // path parameter
            if (featureTrack != null && featureTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(featureTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = featureTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFeatureTrackUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeatureTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeatureTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeatureTrack)));
        }

        /// <summary>
        /// Update a Feature Update the information for a Feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Feature</returns>
        public Feature UpdateFeatureUsingPut (Object feature, Guid? featureId)
        {
             ApiResponse<Feature> localVarResponse = UpdateFeatureUsingPutWithHttpInfo(feature, featureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Feature Update the information for a Feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>ApiResponse of Feature</returns>
        public ApiResponse< Feature > UpdateFeatureUsingPutWithHttpInfo (Object feature, Guid? featureId)
        {
            // verify the required parameter 'feature' is set
            if (feature == null)
                throw new ApiException(400, "Missing required parameter 'feature' when calling UtilsApi->UpdateFeatureUsingPut");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling UtilsApi->UpdateFeatureUsingPut");

            var localVarPath = "/nucleus/v1/feature/{feature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureId != null) localVarPathParams.Add("feature_id", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (feature != null && feature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feature; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFeatureUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Feature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Feature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Feature)));
        }

        /// <summary>
        /// Update a Feature Update the information for a Feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of Feature</returns>
        public async System.Threading.Tasks.Task<Feature> UpdateFeatureUsingPutAsync (Object feature, Guid? featureId)
        {
             ApiResponse<Feature> localVarResponse = await UpdateFeatureUsingPutAsyncWithHttpInfo(feature, featureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Feature Update the information for a Feature registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feature">feature</param>
        /// <param name="featureId">UUID feature_id</param>
        /// <returns>Task of ApiResponse (Feature)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Feature>> UpdateFeatureUsingPutAsyncWithHttpInfo (Object feature, Guid? featureId)
        {
            // verify the required parameter 'feature' is set
            if (feature == null)
                throw new ApiException(400, "Missing required parameter 'feature' when calling UtilsApi->UpdateFeatureUsingPut");
            // verify the required parameter 'featureId' is set
            if (featureId == null)
                throw new ApiException(400, "Missing required parameter 'featureId' when calling UtilsApi->UpdateFeatureUsingPut");

            var localVarPath = "/nucleus/v1/feature/{feature_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureId != null) localVarPathParams.Add("feature_id", this.Configuration.ApiClient.ParameterToString(featureId)); // path parameter
            if (feature != null && feature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feature; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFeatureUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Feature>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Feature) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Feature)));
        }

        /// <summary>
        /// Update a Notification Client Update a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>NotificationClient</returns>
        public NotificationClient UpdateNotificationClientUsingPut (Object notificationClient, Guid? notificationClientId)
        {
             ApiResponse<NotificationClient> localVarResponse = UpdateNotificationClientUsingPutWithHttpInfo(notificationClient, notificationClientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Notification Client Update a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>ApiResponse of NotificationClient</returns>
        public ApiResponse< NotificationClient > UpdateNotificationClientUsingPutWithHttpInfo (Object notificationClient, Guid? notificationClientId)
        {
            // verify the required parameter 'notificationClient' is set
            if (notificationClient == null)
                throw new ApiException(400, "Missing required parameter 'notificationClient' when calling UtilsApi->UpdateNotificationClientUsingPut");
            // verify the required parameter 'notificationClientId' is set
            if (notificationClientId == null)
                throw new ApiException(400, "Missing required parameter 'notificationClientId' when calling UtilsApi->UpdateNotificationClientUsingPut");

            var localVarPath = "/nucleus/v1/notification_client/{notification_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClientId != null) localVarPathParams.Add("notification_client_id", this.Configuration.ApiClient.ParameterToString(notificationClientId)); // path parameter
            if (notificationClient != null && notificationClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationClient; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationClient)));
        }

        /// <summary>
        /// Update a Notification Client Update a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>Task of NotificationClient</returns>
        public async System.Threading.Tasks.Task<NotificationClient> UpdateNotificationClientUsingPutAsync (Object notificationClient, Guid? notificationClientId)
        {
             ApiResponse<NotificationClient> localVarResponse = await UpdateNotificationClientUsingPutAsyncWithHttpInfo(notificationClient, notificationClientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Notification Client Update a  Notification Client. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationClient">notification_client</param>
        /// <param name="notificationClientId">UUID notification_client_id</param>
        /// <returns>Task of ApiResponse (NotificationClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationClient>> UpdateNotificationClientUsingPutAsyncWithHttpInfo (Object notificationClient, Guid? notificationClientId)
        {
            // verify the required parameter 'notificationClient' is set
            if (notificationClient == null)
                throw new ApiException(400, "Missing required parameter 'notificationClient' when calling UtilsApi->UpdateNotificationClientUsingPut");
            // verify the required parameter 'notificationClientId' is set
            if (notificationClientId == null)
                throw new ApiException(400, "Missing required parameter 'notificationClientId' when calling UtilsApi->UpdateNotificationClientUsingPut");

            var localVarPath = "/nucleus/v1/notification_client/{notification_client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationClientId != null) localVarPathParams.Add("notification_client_id", this.Configuration.ApiClient.ParameterToString(notificationClientId)); // path parameter
            if (notificationClient != null && notificationClient.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationClient); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationClient; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationClient)));
        }

        /// <summary>
        /// Update a Notification Setting Update a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>NotificationSetting</returns>
        public NotificationSetting UpdateNotificationSettingUsingPut (Object notificationSetting, Guid? notificationSettingId)
        {
             ApiResponse<NotificationSetting> localVarResponse = UpdateNotificationSettingUsingPutWithHttpInfo(notificationSetting, notificationSettingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Notification Setting Update a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>ApiResponse of NotificationSetting</returns>
        public ApiResponse< NotificationSetting > UpdateNotificationSettingUsingPutWithHttpInfo (Object notificationSetting, Guid? notificationSettingId)
        {
            // verify the required parameter 'notificationSetting' is set
            if (notificationSetting == null)
                throw new ApiException(400, "Missing required parameter 'notificationSetting' when calling UtilsApi->UpdateNotificationSettingUsingPut");
            // verify the required parameter 'notificationSettingId' is set
            if (notificationSettingId == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettingId' when calling UtilsApi->UpdateNotificationSettingUsingPut");

            var localVarPath = "/nucleus/v1/notification_setting/{notification_setting_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettingId != null) localVarPathParams.Add("notification_setting_id", this.Configuration.ApiClient.ParameterToString(notificationSettingId)); // path parameter
            if (notificationSetting != null && notificationSetting.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSetting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSetting; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationSettingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationSetting)));
        }

        /// <summary>
        /// Update a Notification Setting Update a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>Task of NotificationSetting</returns>
        public async System.Threading.Tasks.Task<NotificationSetting> UpdateNotificationSettingUsingPutAsync (Object notificationSetting, Guid? notificationSettingId)
        {
             ApiResponse<NotificationSetting> localVarResponse = await UpdateNotificationSettingUsingPutAsyncWithHttpInfo(notificationSetting, notificationSettingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Notification Setting Update a  Notification Setting. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationSetting">notification_setting</param>
        /// <param name="notificationSettingId">UUID notification_setting_id</param>
        /// <returns>Task of ApiResponse (NotificationSetting)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NotificationSetting>> UpdateNotificationSettingUsingPutAsyncWithHttpInfo (Object notificationSetting, Guid? notificationSettingId)
        {
            // verify the required parameter 'notificationSetting' is set
            if (notificationSetting == null)
                throw new ApiException(400, "Missing required parameter 'notificationSetting' when calling UtilsApi->UpdateNotificationSettingUsingPut");
            // verify the required parameter 'notificationSettingId' is set
            if (notificationSettingId == null)
                throw new ApiException(400, "Missing required parameter 'notificationSettingId' when calling UtilsApi->UpdateNotificationSettingUsingPut");

            var localVarPath = "/nucleus/v1/notification_setting/{notification_setting_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationSettingId != null) localVarPathParams.Add("notification_setting_id", this.Configuration.ApiClient.ParameterToString(notificationSettingId)); // path parameter
            if (notificationSetting != null && notificationSetting.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notificationSetting); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notificationSetting; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationSettingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NotificationSetting>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NotificationSetting) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NotificationSetting)));
        }

        /// <summary>
        /// Update a Notification Update a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Notification</returns>
        public Notification UpdateNotificationUsingPut (Object notification, Guid? notificationId)
        {
             ApiResponse<Notification> localVarResponse = UpdateNotificationUsingPutWithHttpInfo(notification, notificationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Notification Update a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>ApiResponse of Notification</returns>
        public ApiResponse< Notification > UpdateNotificationUsingPutWithHttpInfo (Object notification, Guid? notificationId)
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
                throw new ApiException(400, "Missing required parameter 'notification' when calling UtilsApi->UpdateNotificationUsingPut");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling UtilsApi->UpdateNotificationUsingPut");

            var localVarPath = "/nucleus/v1/notification/{notification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (notification != null && notification.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notification; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Update a Notification Update a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of Notification</returns>
        public async System.Threading.Tasks.Task<Notification> UpdateNotificationUsingPutAsync (Object notification, Guid? notificationId)
        {
             ApiResponse<Notification> localVarResponse = await UpdateNotificationUsingPutAsyncWithHttpInfo(notification, notificationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Notification Update a Notification. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">notification</param>
        /// <param name="notificationId">UUID notification_id</param>
        /// <returns>Task of ApiResponse (Notification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notification>> UpdateNotificationUsingPutAsyncWithHttpInfo (Object notification, Guid? notificationId)
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
                throw new ApiException(400, "Missing required parameter 'notification' when calling UtilsApi->UpdateNotificationUsingPut");
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
                throw new ApiException(400, "Missing required parameter 'notificationId' when calling UtilsApi->UpdateNotificationUsingPut");

            var localVarPath = "/nucleus/v1/notification/{notification_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notificationId != null) localVarPathParams.Add("notification_id", this.Configuration.ApiClient.ParameterToString(notificationId)); // path parameter
            if (notification != null && notification.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(notification); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notification; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNotificationUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notification)));
        }

        /// <summary>
        /// Update a reason code Update a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ReasonCode</returns>
        public ReasonCode UpdateReasonCodeUsingPut (Object reasonCode, Guid? reasonCodeId)
        {
             ApiResponse<ReasonCode> localVarResponse = UpdateReasonCodeUsingPutWithHttpInfo(reasonCode, reasonCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a reason code Update a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>ApiResponse of ReasonCode</returns>
        public ApiResponse< ReasonCode > UpdateReasonCodeUsingPutWithHttpInfo (Object reasonCode, Guid? reasonCodeId)
        {
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling UtilsApi->UpdateReasonCodeUsingPut");
            // verify the required parameter 'reasonCodeId' is set
            if (reasonCodeId == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeId' when calling UtilsApi->UpdateReasonCodeUsingPut");

            var localVarPath = "/nucleus/v1/reason_code/{reason_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeId != null) localVarPathParams.Add("reason_code_id", this.Configuration.ApiClient.ParameterToString(reasonCodeId)); // path parameter
            if (reasonCode != null && reasonCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reasonCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reasonCode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReasonCodeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReasonCode)));
        }

        /// <summary>
        /// Update a reason code Update a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ReasonCode</returns>
        public async System.Threading.Tasks.Task<ReasonCode> UpdateReasonCodeUsingPutAsync (Object reasonCode, Guid? reasonCodeId)
        {
             ApiResponse<ReasonCode> localVarResponse = await UpdateReasonCodeUsingPutAsyncWithHttpInfo(reasonCode, reasonCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a reason code Update a reason code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reasonCode">reason_code</param>
        /// <param name="reasonCodeId">UUID reason_code_id</param>
        /// <returns>Task of ApiResponse (ReasonCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReasonCode>> UpdateReasonCodeUsingPutAsyncWithHttpInfo (Object reasonCode, Guid? reasonCodeId)
        {
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling UtilsApi->UpdateReasonCodeUsingPut");
            // verify the required parameter 'reasonCodeId' is set
            if (reasonCodeId == null)
                throw new ApiException(400, "Missing required parameter 'reasonCodeId' when calling UtilsApi->UpdateReasonCodeUsingPut");

            var localVarPath = "/nucleus/v1/reason_code/{reason_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reasonCodeId != null) localVarPathParams.Add("reason_code_id", this.Configuration.ApiClient.ParameterToString(reasonCodeId)); // path parameter
            if (reasonCode != null && reasonCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reasonCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reasonCode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReasonCodeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReasonCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReasonCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReasonCode)));
        }

        /// <summary>
        /// Update an account stage Update the information for an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Stage</returns>
        public Stage UpdateStageUsingPut (Object stage, Guid? stageId)
        {
             ApiResponse<Stage> localVarResponse = UpdateStageUsingPutWithHttpInfo(stage, stageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an account stage Update the information for an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>ApiResponse of Stage</returns>
        public ApiResponse< Stage > UpdateStageUsingPutWithHttpInfo (Object stage, Guid? stageId)
        {
            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new ApiException(400, "Missing required parameter 'stage' when calling UtilsApi->UpdateStageUsingPut");
            // verify the required parameter 'stageId' is set
            if (stageId == null)
                throw new ApiException(400, "Missing required parameter 'stageId' when calling UtilsApi->UpdateStageUsingPut");

            var localVarPath = "/nucleus/v1/stage/{stage_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageId != null) localVarPathParams.Add("stage_id", this.Configuration.ApiClient.ParameterToString(stageId)); // path parameter
            if (stage != null && stage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stage; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStageUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stage)));
        }

        /// <summary>
        /// Update an account stage Update the information for an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of Stage</returns>
        public async System.Threading.Tasks.Task<Stage> UpdateStageUsingPutAsync (Object stage, Guid? stageId)
        {
             ApiResponse<Stage> localVarResponse = await UpdateStageUsingPutAsyncWithHttpInfo(stage, stageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an account stage Update the information for an account stage.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stage">stage</param>
        /// <param name="stageId">UUID stage_id</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Stage>> UpdateStageUsingPutAsyncWithHttpInfo (Object stage, Guid? stageId)
        {
            // verify the required parameter 'stage' is set
            if (stage == null)
                throw new ApiException(400, "Missing required parameter 'stage' when calling UtilsApi->UpdateStageUsingPut");
            // verify the required parameter 'stageId' is set
            if (stageId == null)
                throw new ApiException(400, "Missing required parameter 'stageId' when calling UtilsApi->UpdateStageUsingPut");

            var localVarPath = "/nucleus/v1/stage/{stage_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stageId != null) localVarPathParams.Add("stage_id", this.Configuration.ApiClient.ParameterToString(stageId)); // path parameter
            if (stage != null && stage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stage; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStageUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Stage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Stage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stage)));
        }

        /// <summary>
        /// Update a transaction code Update a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>TransactionCode</returns>
        public TransactionCode UpdateTransactionCodeUsingPut (Object transactionCode, Guid? transactionCodeId)
        {
             ApiResponse<TransactionCode> localVarResponse = UpdateTransactionCodeUsingPutWithHttpInfo(transactionCode, transactionCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a transaction code Update a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>ApiResponse of TransactionCode</returns>
        public ApiResponse< TransactionCode > UpdateTransactionCodeUsingPutWithHttpInfo (Object transactionCode, Guid? transactionCodeId)
        {
            // verify the required parameter 'transactionCode' is set
            if (transactionCode == null)
                throw new ApiException(400, "Missing required parameter 'transactionCode' when calling UtilsApi->UpdateTransactionCodeUsingPut");
            // verify the required parameter 'transactionCodeId' is set
            if (transactionCodeId == null)
                throw new ApiException(400, "Missing required parameter 'transactionCodeId' when calling UtilsApi->UpdateTransactionCodeUsingPut");

            var localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionCodeId != null) localVarPathParams.Add("transaction_code_id", this.Configuration.ApiClient.ParameterToString(transactionCodeId)); // path parameter
            if (transactionCode != null && transactionCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionCode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionCodeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCode)));
        }

        /// <summary>
        /// Update a transaction code Update a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of TransactionCode</returns>
        public async System.Threading.Tasks.Task<TransactionCode> UpdateTransactionCodeUsingPutAsync (Object transactionCode, Guid? transactionCodeId)
        {
             ApiResponse<TransactionCode> localVarResponse = await UpdateTransactionCodeUsingPutAsyncWithHttpInfo(transactionCode, transactionCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a transaction code Update a transaction code for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionCode">transaction_code</param>
        /// <param name="transactionCodeId">UUID transaction_code_id</param>
        /// <returns>Task of ApiResponse (TransactionCode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionCode>> UpdateTransactionCodeUsingPutAsyncWithHttpInfo (Object transactionCode, Guid? transactionCodeId)
        {
            // verify the required parameter 'transactionCode' is set
            if (transactionCode == null)
                throw new ApiException(400, "Missing required parameter 'transactionCode' when calling UtilsApi->UpdateTransactionCodeUsingPut");
            // verify the required parameter 'transactionCodeId' is set
            if (transactionCodeId == null)
                throw new ApiException(400, "Missing required parameter 'transactionCodeId' when calling UtilsApi->UpdateTransactionCodeUsingPut");

            var localVarPath = "/nucleus/v1/transaction_code/{transaction_code_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionCodeId != null) localVarPathParams.Add("transaction_code_id", this.Configuration.ApiClient.ParameterToString(transactionCodeId)); // path parameter
            if (transactionCode != null && transactionCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transactionCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionCode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransactionCodeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionCode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionCode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionCode)));
        }

    }
}
