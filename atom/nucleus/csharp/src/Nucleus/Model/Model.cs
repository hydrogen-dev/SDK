/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Model Object
    /// </summary>
    [DataContract]
    public partial class Model :  IEquatable<Model>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Model" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Model() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Model" /> class.
        /// </summary>
        /// <param name="benchmarkId">benchmarkId.</param>
        /// <param name="cashSec">cashSec.</param>
        /// <param name="category">category.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="currencyCode">currency_code.</param>
        /// <param name="defaultDriftFactor">defaultDriftFactor.</param>
        /// <param name="description">description.</param>
        /// <param name="downside">downside.</param>
        /// <param name="driftRebal">driftRebal.</param>
        /// <param name="id">id.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">name (required).</param>
        /// <param name="nodeMap">nodeMap.</param>
        /// <param name="periodRebal">periodRebal.</param>
        /// <param name="rebalancePeriod">rebalancePeriod.</param>
        /// <param name="safeSec">safeSec.</param>
        /// <param name="secRotation">secRotation.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="taxEfficiencyId">taxEfficiencyId.</param>
        /// <param name="updateDate">updateDate.</param>
        public Model(Guid? benchmarkId = default(Guid?), string cashSec = default(string), string category = default(string), Guid? clientId = default(Guid?), DateTime? createDate = default(DateTime?), string currencyCode = default(string), float? defaultDriftFactor = default(float?), string description = default(string), bool? downside = default(bool?), bool? driftRebal = default(bool?), Guid? id = default(Guid?), bool? isActive = default(bool?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string), List<AllocationNodeMap> nodeMap = default(List<AllocationNodeMap>), bool? periodRebal = default(bool?), long? rebalancePeriod = default(long?), string safeSec = default(string), bool? secRotation = default(bool?), string secondaryId = default(string), long? taxEfficiencyId = default(long?), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Model and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.BenchmarkId = benchmarkId;
            this.CashSec = cashSec;
            this.Category = category;
            this.ClientId = clientId;
            this.CreateDate = createDate;
            this.CurrencyCode = currencyCode;
            this.DefaultDriftFactor = defaultDriftFactor;
            this.Description = description;
            this.Downside = downside;
            this.DriftRebal = driftRebal;
            this.Id = id;
            this.IsActive = isActive;
            this.Metadata = metadata;
            this.NodeMap = nodeMap;
            this.PeriodRebal = periodRebal;
            this.RebalancePeriod = rebalancePeriod;
            this.SafeSec = safeSec;
            this.SecRotation = secRotation;
            this.SecondaryId = secondaryId;
            this.TaxEfficiencyId = taxEfficiencyId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// benchmarkId
        /// </summary>
        /// <value>benchmarkId</value>
        [DataMember(Name="benchmark_id", EmitDefaultValue=false)]
        public Guid? BenchmarkId { get; set; }

        /// <summary>
        /// cashSec
        /// </summary>
        /// <value>cashSec</value>
        [DataMember(Name="cash_sec", EmitDefaultValue=false)]
        public string CashSec { get; set; }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// currency_code
        /// </summary>
        /// <value>currency_code</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// defaultDriftFactor
        /// </summary>
        /// <value>defaultDriftFactor</value>
        [DataMember(Name="default_drift_factor", EmitDefaultValue=false)]
        public float? DefaultDriftFactor { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// downside
        /// </summary>
        /// <value>downside</value>
        [DataMember(Name="downside", EmitDefaultValue=false)]
        public bool? Downside { get; set; }

        /// <summary>
        /// driftRebal
        /// </summary>
        /// <value>driftRebal</value>
        [DataMember(Name="drift_rebal", EmitDefaultValue=false)]
        public bool? DriftRebal { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// isActive
        /// </summary>
        /// <value>isActive</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NodeMap
        /// </summary>
        [DataMember(Name="node_map", EmitDefaultValue=false)]
        public List<AllocationNodeMap> NodeMap { get; set; }

        /// <summary>
        /// periodRebal
        /// </summary>
        /// <value>periodRebal</value>
        [DataMember(Name="period_rebal", EmitDefaultValue=false)]
        public bool? PeriodRebal { get; set; }

        /// <summary>
        /// rebalancePeriod
        /// </summary>
        /// <value>rebalancePeriod</value>
        [DataMember(Name="rebalance_period", EmitDefaultValue=false)]
        public long? RebalancePeriod { get; set; }

        /// <summary>
        /// safeSec
        /// </summary>
        /// <value>safeSec</value>
        [DataMember(Name="safe_sec", EmitDefaultValue=false)]
        public string SafeSec { get; set; }

        /// <summary>
        /// secRotation
        /// </summary>
        /// <value>secRotation</value>
        [DataMember(Name="sec_rotation", EmitDefaultValue=false)]
        public bool? SecRotation { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// taxEfficiencyId
        /// </summary>
        /// <value>taxEfficiencyId</value>
        [DataMember(Name="tax_efficiency_id", EmitDefaultValue=false)]
        public long? TaxEfficiencyId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model {\n");
            sb.Append("  BenchmarkId: ").Append(BenchmarkId).Append("\n");
            sb.Append("  CashSec: ").Append(CashSec).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DefaultDriftFactor: ").Append(DefaultDriftFactor).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Downside: ").Append(Downside).Append("\n");
            sb.Append("  DriftRebal: ").Append(DriftRebal).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NodeMap: ").Append(NodeMap).Append("\n");
            sb.Append("  PeriodRebal: ").Append(PeriodRebal).Append("\n");
            sb.Append("  RebalancePeriod: ").Append(RebalancePeriod).Append("\n");
            sb.Append("  SafeSec: ").Append(SafeSec).Append("\n");
            sb.Append("  SecRotation: ").Append(SecRotation).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  TaxEfficiencyId: ").Append(TaxEfficiencyId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Model);
        }

        /// <summary>
        /// Returns true if Model instances are equal
        /// </summary>
        /// <param name="input">Instance of Model to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BenchmarkId == input.BenchmarkId ||
                    (this.BenchmarkId != null &&
                    this.BenchmarkId.Equals(input.BenchmarkId))
                ) && 
                (
                    this.CashSec == input.CashSec ||
                    (this.CashSec != null &&
                    this.CashSec.Equals(input.CashSec))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.DefaultDriftFactor == input.DefaultDriftFactor ||
                    (this.DefaultDriftFactor != null &&
                    this.DefaultDriftFactor.Equals(input.DefaultDriftFactor))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Downside == input.Downside ||
                    (this.Downside != null &&
                    this.Downside.Equals(input.Downside))
                ) && 
                (
                    this.DriftRebal == input.DriftRebal ||
                    (this.DriftRebal != null &&
                    this.DriftRebal.Equals(input.DriftRebal))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NodeMap == input.NodeMap ||
                    this.NodeMap != null &&
                    this.NodeMap.SequenceEqual(input.NodeMap)
                ) && 
                (
                    this.PeriodRebal == input.PeriodRebal ||
                    (this.PeriodRebal != null &&
                    this.PeriodRebal.Equals(input.PeriodRebal))
                ) && 
                (
                    this.RebalancePeriod == input.RebalancePeriod ||
                    (this.RebalancePeriod != null &&
                    this.RebalancePeriod.Equals(input.RebalancePeriod))
                ) && 
                (
                    this.SafeSec == input.SafeSec ||
                    (this.SafeSec != null &&
                    this.SafeSec.Equals(input.SafeSec))
                ) && 
                (
                    this.SecRotation == input.SecRotation ||
                    (this.SecRotation != null &&
                    this.SecRotation.Equals(input.SecRotation))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.TaxEfficiencyId == input.TaxEfficiencyId ||
                    (this.TaxEfficiencyId != null &&
                    this.TaxEfficiencyId.Equals(input.TaxEfficiencyId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BenchmarkId != null)
                    hashCode = hashCode * 59 + this.BenchmarkId.GetHashCode();
                if (this.CashSec != null)
                    hashCode = hashCode * 59 + this.CashSec.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.DefaultDriftFactor != null)
                    hashCode = hashCode * 59 + this.DefaultDriftFactor.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Downside != null)
                    hashCode = hashCode * 59 + this.Downside.GetHashCode();
                if (this.DriftRebal != null)
                    hashCode = hashCode * 59 + this.DriftRebal.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NodeMap != null)
                    hashCode = hashCode * 59 + this.NodeMap.GetHashCode();
                if (this.PeriodRebal != null)
                    hashCode = hashCode * 59 + this.PeriodRebal.GetHashCode();
                if (this.RebalancePeriod != null)
                    hashCode = hashCode * 59 + this.RebalancePeriod.GetHashCode();
                if (this.SafeSec != null)
                    hashCode = hashCode * 59 + this.SafeSec.GetHashCode();
                if (this.SecRotation != null)
                    hashCode = hashCode * 59 + this.SecRotation.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.TaxEfficiencyId != null)
                    hashCode = hashCode * 59 + this.TaxEfficiencyId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
