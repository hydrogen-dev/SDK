/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// ClientAccountMapping Object
    /// </summary>
    [DataContract]
    public partial class ClientAccountMapping :  IEquatable<ClientAccountMapping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAccountMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientAccountMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAccountMapping" /> class.
        /// </summary>
        /// <param name="clientAccountAssociationType">clientAccountAssociationType (required).</param>
        /// <param name="clientId">clientId (required).</param>
        /// <param name="signatureData">signatureData.</param>
        public ClientAccountMapping(string clientAccountAssociationType = default(string), Guid? clientId = default(Guid?), string signatureData = default(string))
        {
            // to ensure "clientAccountAssociationType" is required (not null)
            if (clientAccountAssociationType == null)
            {
                throw new InvalidDataException("clientAccountAssociationType is a required property for ClientAccountMapping and cannot be null");
            }
            else
            {
                this.ClientAccountAssociationType = clientAccountAssociationType;
            }
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for ClientAccountMapping and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            this.SignatureData = signatureData;
        }
        
        /// <summary>
        /// clientAccountAssociationType
        /// </summary>
        /// <value>clientAccountAssociationType</value>
        [DataMember(Name="client_account_association_type", EmitDefaultValue=false)]
        public string ClientAccountAssociationType { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets SignatureData
        /// </summary>
        [DataMember(Name="signature_data", EmitDefaultValue=false)]
        public string SignatureData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientAccountMapping {\n");
            sb.Append("  ClientAccountAssociationType: ").Append(ClientAccountAssociationType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  SignatureData: ").Append(SignatureData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientAccountMapping);
        }

        /// <summary>
        /// Returns true if ClientAccountMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientAccountMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientAccountMapping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientAccountAssociationType == input.ClientAccountAssociationType ||
                    (this.ClientAccountAssociationType != null &&
                    this.ClientAccountAssociationType.Equals(input.ClientAccountAssociationType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.SignatureData == input.SignatureData ||
                    (this.SignatureData != null &&
                    this.SignatureData.Equals(input.SignatureData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientAccountAssociationType != null)
                    hashCode = hashCode * 59 + this.ClientAccountAssociationType.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.SignatureData != null)
                    hashCode = hashCode * 59 + this.SignatureData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
