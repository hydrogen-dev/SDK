/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing DecisionTreeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DecisionTreeApiTests
    {
        private DecisionTreeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DecisionTreeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DecisionTreeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DecisionTreeApi
            //Assert.IsInstanceOfType(typeof(DecisionTreeApi), instance, "instance is a DecisionTreeApi");
        }

        
        /// <summary>
        /// Test CreateDecisionTreeResultUsingPost
        /// </summary>
        [Test]
        public void CreateDecisionTreeResultUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DecisionTreeCO decisionTreeCO = null;
            //var response = instance.CreateDecisionTreeResultUsingPost(decisionTreeCO);
            //Assert.IsInstanceOf<DecisionTreeResultVO> (response, "response is DecisionTreeResultVO");
        }
        
        /// <summary>
        /// Test CreateDecisionTreeUsingPost
        /// </summary>
        [Test]
        public void CreateDecisionTreeUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DecisionTree decisionTree = null;
            //var response = instance.CreateDecisionTreeUsingPost(decisionTree);
            //Assert.IsInstanceOf<DecisionTree> (response, "response is DecisionTree");
        }
        
        /// <summary>
        /// Test CreateNodeRelationshipUsingPost
        /// </summary>
        [Test]
        public void CreateNodeRelationshipUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NodeRelationship node = null;
            //var response = instance.CreateNodeRelationshipUsingPost(node);
            //Assert.IsInstanceOf<NodeRelationship> (response, "response is NodeRelationship");
        }
        
        /// <summary>
        /// Test CreateNodeUsingPost
        /// </summary>
        [Test]
        public void CreateNodeUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Node node = null;
            //var response = instance.CreateNodeUsingPost(node);
            //Assert.IsInstanceOf<Node> (response, "response is Node");
        }
        
        /// <summary>
        /// Test DeleteDecisionTreeUsingDelete
        /// </summary>
        [Test]
        public void DeleteDecisionTreeUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? decisionTreeId = null;
            //instance.DeleteDecisionTreeUsingDelete(decisionTreeId);
            
        }
        
        /// <summary>
        /// Test DeleteNodeRelationshipUsingDelete
        /// </summary>
        [Test]
        public void DeleteNodeRelationshipUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeRelationshipId = null;
            //instance.DeleteNodeRelationshipUsingDelete(nodeRelationshipId);
            
        }
        
        /// <summary>
        /// Test DeleteNodeUsingDelete
        /// </summary>
        [Test]
        public void DeleteNodeUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //instance.DeleteNodeUsingDelete(nodeId);
            
        }
        
        /// <summary>
        /// Test GetDecisionTreeAllUsingGet
        /// </summary>
        [Test]
        public void GetDecisionTreeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetDecisionTreeAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageDecisionTree> (response, "response is PageDecisionTree");
        }
        
        /// <summary>
        /// Test GetDecisionTreeUsingGet
        /// </summary>
        [Test]
        public void GetDecisionTreeUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? decisionTreeId = null;
            //var response = instance.GetDecisionTreeUsingGet(decisionTreeId);
            //Assert.IsInstanceOf<DecisionTree> (response, "response is DecisionTree");
        }
        
        /// <summary>
        /// Test GetNodeAllUsingGet
        /// </summary>
        [Test]
        public void GetNodeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetNodeAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageNode> (response, "response is PageNode");
        }
        
        /// <summary>
        /// Test GetNodeRelationshipAllUsingGet
        /// </summary>
        [Test]
        public void GetNodeRelationshipAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetNodeRelationshipAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageNodeRelationship> (response, "response is PageNodeRelationship");
        }
        
        /// <summary>
        /// Test GetNodeRelationshipUsingGet
        /// </summary>
        [Test]
        public void GetNodeRelationshipUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeRelationshipId = null;
            //var response = instance.GetNodeRelationshipUsingGet(nodeRelationshipId);
            //Assert.IsInstanceOf<NodeRelationship> (response, "response is NodeRelationship");
        }
        
        /// <summary>
        /// Test GetNodeUsingGet
        /// </summary>
        [Test]
        public void GetNodeUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? nodeId = null;
            //var response = instance.GetNodeUsingGet(nodeId);
            //Assert.IsInstanceOf<Node> (response, "response is Node");
        }
        
        /// <summary>
        /// Test UpdateDecisionTreeUsingPut
        /// </summary>
        [Test]
        public void UpdateDecisionTreeUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object decisionTree = null;
            //Guid? decisionTreeId = null;
            //var response = instance.UpdateDecisionTreeUsingPut(decisionTree, decisionTreeId);
            //Assert.IsInstanceOf<DecisionTree> (response, "response is DecisionTree");
        }
        
        /// <summary>
        /// Test UpdateNodeRelationshipUsingPut
        /// </summary>
        [Test]
        public void UpdateNodeRelationshipUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object jsonNode = null;
            //Guid? nodeRelationshipId = null;
            //var response = instance.UpdateNodeRelationshipUsingPut(jsonNode, nodeRelationshipId);
            //Assert.IsInstanceOf<NodeRelationship> (response, "response is NodeRelationship");
        }
        
        /// <summary>
        /// Test UpdateNodeUsingPut
        /// </summary>
        [Test]
        public void UpdateNodeUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object jsonNode = null;
            //Guid? nodeId = null;
            //var response = instance.UpdateNodeUsingPut(jsonNode, nodeId);
            //Assert.IsInstanceOf<Node> (response, "response is Node");
        }
        
    }

}
