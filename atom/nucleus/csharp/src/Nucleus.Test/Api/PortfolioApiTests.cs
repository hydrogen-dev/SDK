/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing PortfolioApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PortfolioApiTests
    {
        private PortfolioApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PortfolioApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PortfolioApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PortfolioApi
            //Assert.IsInstanceOfType(typeof(PortfolioApi), instance, "instance is a PortfolioApi");
        }

        
        /// <summary>
        /// Test CreatePortfolioAssetSizeUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioAssetSizeUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PortfolioAssetSizeLog portfolioAssetSizeLogRequest = null;
            //var response = instance.CreatePortfolioAssetSizeUsingPost(portfolioAssetSizeLogRequest);
            //Assert.IsInstanceOf<PortfolioAssetSizeLog> (response, "response is PortfolioAssetSizeLog");
        }
        
        /// <summary>
        /// Test CreatePortfolioCommentUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioCommentUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PortfolioComment portfolioComment = null;
            //var response = instance.CreatePortfolioCommentUsingPost(portfolioComment);
            //Assert.IsInstanceOf<PortfolioComment> (response, "response is PortfolioComment");
        }
        
        /// <summary>
        /// Test CreatePortfolioGoalUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioGoalUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PortfolioGoal portfolioGoal = null;
            //var response = instance.CreatePortfolioGoalUsingPost(portfolioGoal);
            //Assert.IsInstanceOf<PortfolioGoal> (response, "response is PortfolioGoal");
        }
        
        /// <summary>
        /// Test CreatePortfolioHoldingUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioHoldingUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PortfolioHoldingLog portfolioHoldinLogRequest = null;
            //var response = instance.CreatePortfolioHoldingUsingPost(portfolioHoldinLogRequest);
            //Assert.IsInstanceOf<PortfolioHoldingLog> (response, "response is PortfolioHoldingLog");
        }
        
        /// <summary>
        /// Test CreatePortfolioTransactionUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioTransactionUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PortfolioTransaction portfolioTransactionRequest = null;
            //var response = instance.CreatePortfolioTransactionUsingPost(portfolioTransactionRequest);
            //Assert.IsInstanceOf<PortfolioTransaction> (response, "response is PortfolioTransaction");
        }
        
        /// <summary>
        /// Test CreatePortfolioUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Portfolio portfolioRequest = null;
            //var response = instance.CreatePortfolioUsingPost(portfolioRequest);
            //Assert.IsInstanceOf<Portfolio> (response, "response is Portfolio");
        }
        
        /// <summary>
        /// Test DeletePortfolioAssetSizeUsingDelete
        /// </summary>
        [Test]
        public void DeletePortfolioAssetSizeUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioAssetSizeId = null;
            //instance.DeletePortfolioAssetSizeUsingDelete(portfolioAssetSizeId);
            
        }
        
        /// <summary>
        /// Test DeletePortfolioCommentUsingDelete
        /// </summary>
        [Test]
        public void DeletePortfolioCommentUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioCommentId = null;
            //instance.DeletePortfolioCommentUsingDelete(portfolioCommentId);
            
        }
        
        /// <summary>
        /// Test DeletePortfolioGoalUsingDelete
        /// </summary>
        [Test]
        public void DeletePortfolioGoalUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioGoalId = null;
            //instance.DeletePortfolioGoalUsingDelete(portfolioGoalId);
            
        }
        
        /// <summary>
        /// Test DeletePortfolioHoldingUsingDelete
        /// </summary>
        [Test]
        public void DeletePortfolioHoldingUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioHoldingId = null;
            //instance.DeletePortfolioHoldingUsingDelete(portfolioHoldingId);
            
        }
        
        /// <summary>
        /// Test DeletePortfolioTransactionUsingDelete
        /// </summary>
        [Test]
        public void DeletePortfolioTransactionUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioTransactionId = null;
            //instance.DeletePortfolioTransactionUsingDelete(portfolioTransactionId);
            
        }
        
        /// <summary>
        /// Test DeletePortfolioUsingDelete
        /// </summary>
        [Test]
        public void DeletePortfolioUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //instance.DeletePortfolioUsingDelete(portfolioId);
            
        }
        
        /// <summary>
        /// Test GetAllPortfolioTransactionByPostUsingPOST
        /// </summary>
        [Test]
        public void GetAllPortfolioTransactionByPostUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAllPortfolioTransactionByPostUsingPOST(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PagePortfolioTransaction> (response, "response is PagePortfolioTransaction");
        }
        
        /// <summary>
        /// Test GetPortfolioAggregatedDataUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioAggregatedDataUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //bool? showAssetClass = null;
            //bool? showCategory = null;
            //bool? showIndustry = null;
            //bool? showSector = null;
            //bool? showSecurityClass = null;
            //var response = instance.GetPortfolioAggregatedDataUsingGet(portfolioId, showAssetClass, showCategory, showIndustry, showSector, showSecurityClass);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetPortfolioAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetPortfolioAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PagePortfolio> (response, "response is PagePortfolio");
        }
        
        /// <summary>
        /// Test GetPortfolioAssetSizeAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioAssetSizeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetPortfolioAssetSizeAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PagePortfolioAssetSizeLog> (response, "response is PagePortfolioAssetSizeLog");
        }
        
        /// <summary>
        /// Test GetPortfolioAssetSizeUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioAssetSizeUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioAssetSizeId = null;
            //string currencyConversion = null;
            //var response = instance.GetPortfolioAssetSizeUsingGet(portfolioAssetSizeId, currencyConversion);
            //Assert.IsInstanceOf<PortfolioAssetSizeLog> (response, "response is PortfolioAssetSizeLog");
        }
        
        /// <summary>
        /// Test GetPortfolioCommentAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioCommentAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetPortfolioCommentAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PagePortfolioComment> (response, "response is PagePortfolioComment");
        }
        
        /// <summary>
        /// Test GetPortfolioCommentUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioCommentUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioCommentId = null;
            //var response = instance.GetPortfolioCommentUsingGet(portfolioCommentId);
            //Assert.IsInstanceOf<PortfolioComment> (response, "response is PortfolioComment");
        }
        
        /// <summary>
        /// Test GetPortfolioGoalAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioGoalAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetPortfolioGoalAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PagePortfolioGoal> (response, "response is PagePortfolioGoal");
        }
        
        /// <summary>
        /// Test GetPortfolioGoalUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioGoalUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioGoalId = null;
            //var response = instance.GetPortfolioGoalUsingGet(portfolioGoalId);
            //Assert.IsInstanceOf<PortfolioGoal> (response, "response is PortfolioGoal");
        }
        
        /// <summary>
        /// Test GetPortfolioHoldingAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioHoldingAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetPortfolioHoldingAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PagePortfolioHoldingLog> (response, "response is PagePortfolioHoldingLog");
        }
        
        /// <summary>
        /// Test GetPortfolioHoldingUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioHoldingUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioHoldingId = null;
            //string currencyConversion = null;
            //var response = instance.GetPortfolioHoldingUsingGet(portfolioHoldingId, currencyConversion);
            //Assert.IsInstanceOf<PortfolioHoldingLog> (response, "response is PortfolioHoldingLog");
        }
        
        /// <summary>
        /// Test GetPortfolioTransactionAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioTransactionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetPortfolioTransactionAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PagePortfolioTransaction> (response, "response is PagePortfolioTransaction");
        }
        
        /// <summary>
        /// Test GetPortfolioTransactionUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioTransactionUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioTransactionId = null;
            //string currencyConversion = null;
            //var response = instance.GetPortfolioTransactionUsingGet(portfolioTransactionId, currencyConversion);
            //Assert.IsInstanceOf<PortfolioTransaction> (response, "response is PortfolioTransaction");
        }
        
        /// <summary>
        /// Test GetPortfolioUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //var response = instance.GetPortfolioUsingGet(portfolioId);
            //Assert.IsInstanceOf<Portfolio> (response, "response is Portfolio");
        }
        
        /// <summary>
        /// Test UpdatePortfolioAssetSizeUsingPut
        /// </summary>
        [Test]
        public void UpdatePortfolioAssetSizeUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object portfolioAssetSize = null;
            //Guid? portfolioAssetSizeId = null;
            //var response = instance.UpdatePortfolioAssetSizeUsingPut(portfolioAssetSize, portfolioAssetSizeId);
            //Assert.IsInstanceOf<PortfolioAssetSizeLog> (response, "response is PortfolioAssetSizeLog");
        }
        
        /// <summary>
        /// Test UpdatePortfolioCommentUsingPut
        /// </summary>
        [Test]
        public void UpdatePortfolioCommentUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object portfolioComment = null;
            //Guid? portfolioCommentId = null;
            //var response = instance.UpdatePortfolioCommentUsingPut(portfolioComment, portfolioCommentId);
            //Assert.IsInstanceOf<PortfolioComment> (response, "response is PortfolioComment");
        }
        
        /// <summary>
        /// Test UpdatePortfolioGoalUsingPut
        /// </summary>
        [Test]
        public void UpdatePortfolioGoalUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object portfolioGoal = null;
            //Guid? portfolioGoalId = null;
            //var response = instance.UpdatePortfolioGoalUsingPut(portfolioGoal, portfolioGoalId);
            //Assert.IsInstanceOf<PortfolioGoal> (response, "response is PortfolioGoal");
        }
        
        /// <summary>
        /// Test UpdatePortfolioHoldingUsingPut
        /// </summary>
        [Test]
        public void UpdatePortfolioHoldingUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object portfolioHolding = null;
            //Guid? portfolioHoldingId = null;
            //var response = instance.UpdatePortfolioHoldingUsingPut(portfolioHolding, portfolioHoldingId);
            //Assert.IsInstanceOf<PortfolioHoldingLog> (response, "response is PortfolioHoldingLog");
        }
        
        /// <summary>
        /// Test UpdatePortfolioTransactionUsingPut
        /// </summary>
        [Test]
        public void UpdatePortfolioTransactionUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object portfolioTransaction = null;
            //Guid? portfolioTransactionId = null;
            //var response = instance.UpdatePortfolioTransactionUsingPut(portfolioTransaction, portfolioTransactionId);
            //Assert.IsInstanceOf<PortfolioTransaction> (response, "response is PortfolioTransaction");
        }
        
        /// <summary>
        /// Test UpdatePortfolioUsingPut
        /// </summary>
        [Test]
        public void UpdatePortfolioUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object portfolio = null;
            //Guid? portfolioId = null;
            //var response = instance.UpdatePortfolioUsingPut(portfolio, portfolioId);
            //Assert.IsInstanceOf<Portfolio> (response, "response is Portfolio");
        }
        
    }

}
