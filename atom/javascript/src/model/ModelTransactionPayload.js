/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SecondaryId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SecondaryId'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.ModelTransactionPayload = factory(root.atom_api.ApiClient, root.atom_api.SecondaryId);
  }
}(this, function(ApiClient, SecondaryId) {
  'use strict';




  /**
   * The ModelTransactionPayload model module.
   * @module model/ModelTransactionPayload
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>ModelTransactionPayload</code>.
   * @alias module:model/ModelTransactionPayload
   * @class
   * @param shares {Number} Number of shares of the security purchased as part of the transaction
   * @param price {Number} Security price at which the shares were purchased as part of the transaction
   * @param _date {Date} Date of the transaction
   * @param modelId {String} The ID of the model that the transaction record falls under
   * @param securityId {String} The ID of the security included in the transaction
   * @param transactionCodeId {Number} The ID referring to the transaction codes defined by your firm
   */
  var exports = function(shares, price, _date, modelId, securityId, transactionCodeId) {
    var _this = this;

    _this['shares'] = shares;
    _this['price'] = price;
    _this['date'] = _date;
    _this['model_id'] = modelId;
    _this['security_id'] = securityId;
    _this['transaction_code_id'] = transactionCodeId;

  };

  /**
   * Constructs a <code>ModelTransactionPayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ModelTransactionPayload} obj Optional instance to populate.
   * @return {module:model/ModelTransactionPayload} The populated <code>ModelTransactionPayload</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('shares')) {
        obj['shares'] = ApiClient.convertToType(data['shares'], 'Number');
      }
      if (data.hasOwnProperty('price')) {
        obj['price'] = ApiClient.convertToType(data['price'], 'Number');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('model_id')) {
        obj['model_id'] = ApiClient.convertToType(data['model_id'], 'String');
      }
      if (data.hasOwnProperty('security_id')) {
        obj['security_id'] = ApiClient.convertToType(data['security_id'], 'String');
      }
      if (data.hasOwnProperty('transaction_code_id')) {
        obj['transaction_code_id'] = ApiClient.convertToType(data['transaction_code_id'], 'Number');
      }
      if (data.hasOwnProperty('secondary_id')) {
        obj['secondary_id'] = SecondaryId.constructFromObject(data['secondary_id']);
      }
    }
    return obj;
  }

  /**
   * Number of shares of the security purchased as part of the transaction
   * @member {Number} shares
   */
  exports.prototype['shares'] = undefined;
  /**
   * Security price at which the shares were purchased as part of the transaction
   * @member {Number} price
   */
  exports.prototype['price'] = undefined;
  /**
   * Date of the transaction
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * The ID of the model that the transaction record falls under
   * @member {String} model_id
   */
  exports.prototype['model_id'] = undefined;
  /**
   * The ID of the security included in the transaction
   * @member {String} security_id
   */
  exports.prototype['security_id'] = undefined;
  /**
   * The ID referring to the transaction codes defined by your firm
   * @member {Number} transaction_code_id
   */
  exports.prototype['transaction_code_id'] = undefined;
  /**
   * @member {module:model/SecondaryId} secondary_id
   */
  exports.prototype['secondary_id'] = undefined;



  return exports;
}));


