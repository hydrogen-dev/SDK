<?php
/**
 * Document
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @description Document Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Document implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'business_id' => 'string',
        'client_id' => 'string',
        'country_of_issue' => 'string',
        'create_date' => '\DateTime',
        'doc_file' => 'string',
        'doc_image_back' => 'string',
        'doc_image_front' => 'string',
        'doc_name' => 'string',
        'doc_number' => 'string',
        'doc_size' => 'int',
        'doc_type' => 'string',
        'expiry_date' => '\DateTime',
        'id' => 'string',
        'is_active' => 'bool',
        'is_sensitive' => 'bool',
        'is_verified' => 'bool',
        'issue_date' => '\DateTime',
        'metadata' => 'map[string,string]',
        'secondary_id' => 'string',
        'state_of_issue' => 'string',
        'update_date' => '\DateTime',
        'url_path' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'uuid',
        'business_id' => 'uuid',
        'client_id' => 'uuid',
        'country_of_issue' => null,
        'create_date' => 'date-time',
        'doc_file' => null,
        'doc_image_back' => null,
        'doc_image_front' => null,
        'doc_name' => null,
        'doc_number' => null,
        'doc_size' => 'int64',
        'doc_type' => null,
        'expiry_date' => 'date',
        'id' => 'uuid',
        'is_active' => null,
        'is_sensitive' => null,
        'is_verified' => null,
        'issue_date' => 'date',
        'metadata' => null,
        'secondary_id' => null,
        'state_of_issue' => null,
        'update_date' => 'date-time',
        'url_path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'business_id' => 'business_id',
        'client_id' => 'client_id',
        'country_of_issue' => 'country_of_issue',
        'create_date' => 'create_date',
        'doc_file' => 'doc_file',
        'doc_image_back' => 'doc_image_back',
        'doc_image_front' => 'doc_image_front',
        'doc_name' => 'doc_name',
        'doc_number' => 'doc_number',
        'doc_size' => 'doc_size',
        'doc_type' => 'doc_type',
        'expiry_date' => 'expiry_date',
        'id' => 'id',
        'is_active' => 'is_active',
        'is_sensitive' => 'is_sensitive',
        'is_verified' => 'is_verified',
        'issue_date' => 'issue_date',
        'metadata' => 'metadata',
        'secondary_id' => 'secondary_id',
        'state_of_issue' => 'state_of_issue',
        'update_date' => 'update_date',
        'url_path' => 'url_path'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'business_id' => 'setBusinessId',
        'client_id' => 'setClientId',
        'country_of_issue' => 'setCountryOfIssue',
        'create_date' => 'setCreateDate',
        'doc_file' => 'setDocFile',
        'doc_image_back' => 'setDocImageBack',
        'doc_image_front' => 'setDocImageFront',
        'doc_name' => 'setDocName',
        'doc_number' => 'setDocNumber',
        'doc_size' => 'setDocSize',
        'doc_type' => 'setDocType',
        'expiry_date' => 'setExpiryDate',
        'id' => 'setId',
        'is_active' => 'setIsActive',
        'is_sensitive' => 'setIsSensitive',
        'is_verified' => 'setIsVerified',
        'issue_date' => 'setIssueDate',
        'metadata' => 'setMetadata',
        'secondary_id' => 'setSecondaryId',
        'state_of_issue' => 'setStateOfIssue',
        'update_date' => 'setUpdateDate',
        'url_path' => 'setUrlPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'business_id' => 'getBusinessId',
        'client_id' => 'getClientId',
        'country_of_issue' => 'getCountryOfIssue',
        'create_date' => 'getCreateDate',
        'doc_file' => 'getDocFile',
        'doc_image_back' => 'getDocImageBack',
        'doc_image_front' => 'getDocImageFront',
        'doc_name' => 'getDocName',
        'doc_number' => 'getDocNumber',
        'doc_size' => 'getDocSize',
        'doc_type' => 'getDocType',
        'expiry_date' => 'getExpiryDate',
        'id' => 'getId',
        'is_active' => 'getIsActive',
        'is_sensitive' => 'getIsSensitive',
        'is_verified' => 'getIsVerified',
        'issue_date' => 'getIssueDate',
        'metadata' => 'getMetadata',
        'secondary_id' => 'getSecondaryId',
        'state_of_issue' => 'getStateOfIssue',
        'update_date' => 'getUpdateDate',
        'url_path' => 'getUrlPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['business_id'] = isset($data['business_id']) ? $data['business_id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['country_of_issue'] = isset($data['country_of_issue']) ? $data['country_of_issue'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['doc_file'] = isset($data['doc_file']) ? $data['doc_file'] : null;
        $this->container['doc_image_back'] = isset($data['doc_image_back']) ? $data['doc_image_back'] : null;
        $this->container['doc_image_front'] = isset($data['doc_image_front']) ? $data['doc_image_front'] : null;
        $this->container['doc_name'] = isset($data['doc_name']) ? $data['doc_name'] : null;
        $this->container['doc_number'] = isset($data['doc_number']) ? $data['doc_number'] : null;
        $this->container['doc_size'] = isset($data['doc_size']) ? $data['doc_size'] : null;
        $this->container['doc_type'] = isset($data['doc_type']) ? $data['doc_type'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_sensitive'] = isset($data['is_sensitive']) ? $data['is_sensitive'] : null;
        $this->container['is_verified'] = isset($data['is_verified']) ? $data['is_verified'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['state_of_issue'] = isset($data['state_of_issue']) ? $data['state_of_issue'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['url_path'] = isset($data['url_path']) ? $data['url_path'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['doc_name'] === null) {
            $invalidProperties[] = "'doc_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id accountId
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return string
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param string $business_id businessId
     *
     * @return $this
     */
    public function setBusinessId($business_id)
    {
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id clientId
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets country_of_issue
     *
     * @return string
     */
    public function getCountryOfIssue()
    {
        return $this->container['country_of_issue'];
    }

    /**
     * Sets country_of_issue
     *
     * @param string $country_of_issue country_of_issue
     *
     * @return $this
     */
    public function setCountryOfIssue($country_of_issue)
    {
        $this->container['country_of_issue'] = $country_of_issue;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets doc_file
     *
     * @return string
     */
    public function getDocFile()
    {
        return $this->container['doc_file'];
    }

    /**
     * Sets doc_file
     *
     * @param string $doc_file doc_file
     *
     * @return $this
     */
    public function setDocFile($doc_file)
    {
        $this->container['doc_file'] = $doc_file;

        return $this;
    }

    /**
     * Gets doc_image_back
     *
     * @return string
     */
    public function getDocImageBack()
    {
        return $this->container['doc_image_back'];
    }

    /**
     * Sets doc_image_back
     *
     * @param string $doc_image_back doc_image_back
     *
     * @return $this
     */
    public function setDocImageBack($doc_image_back)
    {
        $this->container['doc_image_back'] = $doc_image_back;

        return $this;
    }

    /**
     * Gets doc_image_front
     *
     * @return string
     */
    public function getDocImageFront()
    {
        return $this->container['doc_image_front'];
    }

    /**
     * Sets doc_image_front
     *
     * @param string $doc_image_front doc_image_front
     *
     * @return $this
     */
    public function setDocImageFront($doc_image_front)
    {
        $this->container['doc_image_front'] = $doc_image_front;

        return $this;
    }

    /**
     * Gets doc_name
     *
     * @return string
     */
    public function getDocName()
    {
        return $this->container['doc_name'];
    }

    /**
     * Sets doc_name
     *
     * @param string $doc_name doc_name
     *
     * @return $this
     */
    public function setDocName($doc_name)
    {
        $this->container['doc_name'] = $doc_name;

        return $this;
    }

    /**
     * Gets doc_number
     *
     * @return string
     */
    public function getDocNumber()
    {
        return $this->container['doc_number'];
    }

    /**
     * Sets doc_number
     *
     * @param string $doc_number doc_number
     *
     * @return $this
     */
    public function setDocNumber($doc_number)
    {
        $this->container['doc_number'] = $doc_number;

        return $this;
    }

    /**
     * Gets doc_size
     *
     * @return int
     */
    public function getDocSize()
    {
        return $this->container['doc_size'];
    }

    /**
     * Sets doc_size
     *
     * @param int $doc_size doc_size
     *
     * @return $this
     */
    public function setDocSize($doc_size)
    {
        $this->container['doc_size'] = $doc_size;

        return $this;
    }

    /**
     * Gets doc_type
     *
     * @return string
     */
    public function getDocType()
    {
        return $this->container['doc_type'];
    }

    /**
     * Sets doc_type
     *
     * @param string $doc_type doc_type
     *
     * @return $this
     */
    public function setDocType($doc_type)
    {
        $this->container['doc_type'] = $doc_type;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_sensitive
     *
     * @return bool
     */
    public function getIsSensitive()
    {
        return $this->container['is_sensitive'];
    }

    /**
     * Sets is_sensitive
     *
     * @param bool $is_sensitive is_sensitive
     *
     * @return $this
     */
    public function setIsSensitive($is_sensitive)
    {
        $this->container['is_sensitive'] = $is_sensitive;

        return $this;
    }

    /**
     * Gets is_verified
     *
     * @return bool
     */
    public function getIsVerified()
    {
        return $this->container['is_verified'];
    }

    /**
     * Sets is_verified
     *
     * @param bool $is_verified is_verified
     *
     * @return $this
     */
    public function setIsVerified($is_verified)
    {
        $this->container['is_verified'] = $is_verified;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime $issue_date issue_date
     *
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets state_of_issue
     *
     * @return string
     */
    public function getStateOfIssue()
    {
        return $this->container['state_of_issue'];
    }

    /**
     * Sets state_of_issue
     *
     * @param string $state_of_issue state_of_issue
     *
     * @return $this
     */
    public function setStateOfIssue($state_of_issue)
    {
        $this->container['state_of_issue'] = $state_of_issue;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets url_path
     *
     * @return string
     */
    public function getUrlPath()
    {
        return $this->container['url_path'];
    }

    /**
     * Sets url_path
     *
     * @param string $url_path url_path
     *
     * @return $this
     */
    public function setUrlPath($url_path)
    {
        $this->container['url_path'] = $url_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


