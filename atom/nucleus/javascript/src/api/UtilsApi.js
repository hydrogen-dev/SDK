/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Application', 'model/AuditLog', 'model/Feature', 'model/FeatureTrack', 'model/Notification', 'model/NotificationClient', 'model/NotificationSetting', 'model/PageApplication', 'model/PageAuditLog', 'model/PageFeature', 'model/PageFeatureTrack', 'model/PageNotification', 'model/PageNotificationClient', 'model/PageNotificationSetting', 'model/PageReasonCode', 'model/PageStage', 'model/PageTransactionCode', 'model/ReasonCode', 'model/Stage', 'model/TransactionCode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Application'), require('../model/AuditLog'), require('../model/Feature'), require('../model/FeatureTrack'), require('../model/Notification'), require('../model/NotificationClient'), require('../model/NotificationSetting'), require('../model/PageApplication'), require('../model/PageAuditLog'), require('../model/PageFeature'), require('../model/PageFeatureTrack'), require('../model/PageNotification'), require('../model/PageNotificationClient'), require('../model/PageNotificationSetting'), require('../model/PageReasonCode'), require('../model/PageStage'), require('../model/PageTransactionCode'), require('../model/ReasonCode'), require('../model/Stage'), require('../model/TransactionCode'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.UtilsApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Application, root.HydrogenNucleusApi.AuditLog, root.HydrogenNucleusApi.Feature, root.HydrogenNucleusApi.FeatureTrack, root.HydrogenNucleusApi.Notification, root.HydrogenNucleusApi.NotificationClient, root.HydrogenNucleusApi.NotificationSetting, root.HydrogenNucleusApi.PageApplication, root.HydrogenNucleusApi.PageAuditLog, root.HydrogenNucleusApi.PageFeature, root.HydrogenNucleusApi.PageFeatureTrack, root.HydrogenNucleusApi.PageNotification, root.HydrogenNucleusApi.PageNotificationClient, root.HydrogenNucleusApi.PageNotificationSetting, root.HydrogenNucleusApi.PageReasonCode, root.HydrogenNucleusApi.PageStage, root.HydrogenNucleusApi.PageTransactionCode, root.HydrogenNucleusApi.ReasonCode, root.HydrogenNucleusApi.Stage, root.HydrogenNucleusApi.TransactionCode);
  }
}(this, function(ApiClient, Application, AuditLog, Feature, FeatureTrack, Notification, NotificationClient, NotificationSetting, PageApplication, PageAuditLog, PageFeature, PageFeatureTrack, PageNotification, PageNotificationClient, PageNotificationSetting, PageReasonCode, PageStage, PageTransactionCode, ReasonCode, Stage, TransactionCode) {
  'use strict';

  /**
   * Utils service.
   * @module api/UtilsApi
   * @version 1.9.5
   */

  /**
   * Constructs a new UtilsApi. 
   * @alias module:api/UtilsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createApplicationUsingPost operation.
     * @callback module:api/UtilsApi~createApplicationUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an application
     * Create an application
     * @param {module:model/Application} application application
     * @param {module:api/UtilsApi~createApplicationUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    this.createApplicationUsingPost = function(application, callback) {
      var postBody = application;

      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling createApplicationUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/nucleus/v1/application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuditLogUsingPost operation.
     * @callback module:api/UtilsApi~createAuditLogUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a audit log
     * Create a new audit log.
     * @param {module:model/AuditLog} auditLog auditLog
     * @param {module:api/UtilsApi~createAuditLogUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditLog}
     */
    this.createAuditLogUsingPost = function(auditLog, callback) {
      var postBody = auditLog;

      // verify the required parameter 'auditLog' is set
      if (auditLog === undefined || auditLog === null) {
        throw new Error("Missing the required parameter 'auditLog' when calling createAuditLogUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AuditLog;

      return this.apiClient.callApi(
        '/nucleus/v1/audit_log', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFeatureTrackUsingPost operation.
     * @callback module:api/UtilsApi~createFeatureTrackUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Feature Track
     * Create a new feature track.
     * @param {module:model/FeatureTrack} featureTrack featureTrack
     * @param {module:api/UtilsApi~createFeatureTrackUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureTrack}
     */
    this.createFeatureTrackUsingPost = function(featureTrack, callback) {
      var postBody = featureTrack;

      // verify the required parameter 'featureTrack' is set
      if (featureTrack === undefined || featureTrack === null) {
        throw new Error("Missing the required parameter 'featureTrack' when calling createFeatureTrackUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FeatureTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/feature_track', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFeatureUsingPost operation.
     * @callback module:api/UtilsApi~createFeatureUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a  Feature
     * Create a new feature.
     * @param {module:model/Feature} feature feature
     * @param {module:api/UtilsApi~createFeatureUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feature}
     */
    this.createFeatureUsingPost = function(feature, callback) {
      var postBody = feature;

      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling createFeatureUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Feature;

      return this.apiClient.callApi(
        '/nucleus/v1/feature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotificationClientUsingPost operation.
     * @callback module:api/UtilsApi~createNotificationClientUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification Client
     * Create a new Notification Client. 
     * @param {module:model/NotificationClient} notificationClient notificationClient
     * @param {module:api/UtilsApi~createNotificationClientUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationClient}
     */
    this.createNotificationClientUsingPost = function(notificationClient, callback) {
      var postBody = notificationClient;

      // verify the required parameter 'notificationClient' is set
      if (notificationClient === undefined || notificationClient === null) {
        throw new Error("Missing the required parameter 'notificationClient' when calling createNotificationClientUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationClient;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotificationSettingUsingPost operation.
     * @callback module:api/UtilsApi~createNotificationSettingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification Setting
     * Create a new Notification Setting. 
     * @param {module:model/NotificationSetting} notificationSetting notificationSetting
     * @param {module:api/UtilsApi~createNotificationSettingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    this.createNotificationSettingUsingPost = function(notificationSetting, callback) {
      var postBody = notificationSetting;

      // verify the required parameter 'notificationSetting' is set
      if (notificationSetting === undefined || notificationSetting === null) {
        throw new Error("Missing the required parameter 'notificationSetting' when calling createNotificationSettingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationSetting;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_setting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNotificationUsingPost operation.
     * @callback module:api/UtilsApi~createNotificationUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Notification
     * Create a new Notification. 
     * @param {module:model/Notification} notification notification
     * @param {module:api/UtilsApi~createNotificationUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.createNotificationUsingPost = function(notification, callback) {
      var postBody = notification;

      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling createNotificationUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/nucleus/v1/notification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createReasonCodeUsingPost operation.
     * @callback module:api/UtilsApi~createReasonCodeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReasonCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a reason code
     * Create a new reason code for your firm.
     * @param {module:model/ReasonCode} reasonCodeRequest reasonCodeRequest
     * @param {module:api/UtilsApi~createReasonCodeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReasonCode}
     */
    this.createReasonCodeUsingPost = function(reasonCodeRequest, callback) {
      var postBody = reasonCodeRequest;

      // verify the required parameter 'reasonCodeRequest' is set
      if (reasonCodeRequest === undefined || reasonCodeRequest === null) {
        throw new Error("Missing the required parameter 'reasonCodeRequest' when calling createReasonCodeUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ReasonCode;

      return this.apiClient.callApi(
        '/nucleus/v1/reason_code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createStageUsingPost operation.
     * @callback module:api/UtilsApi~createStageUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account stage
     * Create a new account stage
     * @param {module:model/Stage} stageRequest stageRequest
     * @param {module:api/UtilsApi~createStageUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    this.createStageUsingPost = function(stageRequest, callback) {
      var postBody = stageRequest;

      // verify the required parameter 'stageRequest' is set
      if (stageRequest === undefined || stageRequest === null) {
        throw new Error("Missing the required parameter 'stageRequest' when calling createStageUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Stage;

      return this.apiClient.callApi(
        '/nucleus/v1/stage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransactionCodeUsingPost operation.
     * @callback module:api/UtilsApi~createTransactionCodeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transaction code
     * Create a new transaction code for your firm.
     * @param {module:model/TransactionCode} transactionRequest transactionRequest
     * @param {module:api/UtilsApi~createTransactionCodeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionCode}
     */
    this.createTransactionCodeUsingPost = function(transactionRequest, callback) {
      var postBody = transactionRequest;

      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling createTransactionCodeUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TransactionCode;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplicationUsingDelete operation.
     * @callback module:api/UtilsApi~deleteApplicationUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Application
     * Permanently delete an Application.
     * @param {String} applicationId UUID application_id
     * @param {module:api/UtilsApi~deleteApplicationUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApplicationUsingDelete = function(applicationId, callback) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApplicationUsingDelete");
      }


      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/application/{application_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeatureTrackUsingDelete operation.
     * @callback module:api/UtilsApi~deleteFeatureTrackUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Feature Track
     * Permanently delete a feature track registered with your firm.
     * @param {String} featureTrackId UUID feature_track_id
     * @param {module:api/UtilsApi~deleteFeatureTrackUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFeatureTrackUsingDelete = function(featureTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'featureTrackId' is set
      if (featureTrackId === undefined || featureTrackId === null) {
        throw new Error("Missing the required parameter 'featureTrackId' when calling deleteFeatureTrackUsingDelete");
      }


      var pathParams = {
        'feature_track_id': featureTrackId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/feature_track/{feature_track_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeatureUsingDelete operation.
     * @callback module:api/UtilsApi~deleteFeatureUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Feature
     * Permanently delete a  feature registered with your firm.
     * @param {String} featureId UUID feature_id
     * @param {module:api/UtilsApi~deleteFeatureUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFeatureUsingDelete = function(featureId, callback) {
      var postBody = null;

      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling deleteFeatureUsingDelete");
      }


      var pathParams = {
        'feature_id': featureId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/feature/{feature_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationClientUsingDelete operation.
     * @callback module:api/UtilsApi~deleteNotificationClientUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification Client
     * Permanently Delete Notification Client.
     * @param {String} notificationClientId notification_client_id
     * @param {module:api/UtilsApi~deleteNotificationClientUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNotificationClientUsingDelete = function(notificationClientId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationClientId' is set
      if (notificationClientId === undefined || notificationClientId === null) {
        throw new Error("Missing the required parameter 'notificationClientId' when calling deleteNotificationClientUsingDelete");
      }


      var pathParams = {
        'notification_client_id': notificationClientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_client/{notification_client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationSettingUsingDelete operation.
     * @callback module:api/UtilsApi~deleteNotificationSettingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification Setting
     * Permanently Delete Notification Setting. 
     * @param {String} notificationSettingId notification_setting_id
     * @param {module:api/UtilsApi~deleteNotificationSettingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNotificationSettingUsingDelete = function(notificationSettingId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationSettingId' is set
      if (notificationSettingId === undefined || notificationSettingId === null) {
        throw new Error("Missing the required parameter 'notificationSettingId' when calling deleteNotificationSettingUsingDelete");
      }


      var pathParams = {
        'notification_setting_id': notificationSettingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_setting/{notification_setting_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNotificationUsingDelete operation.
     * @callback module:api/UtilsApi~deleteNotificationUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Notification
     * Permanently Delete a Notification. 
     * @param {String} notificationId UUID notification_id
     * @param {module:api/UtilsApi~deleteNotificationUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNotificationUsingDelete = function(notificationId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling deleteNotificationUsingDelete");
      }


      var pathParams = {
        'notification_id': notificationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/notification/{notification_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReasonCodeUsingDelete operation.
     * @callback module:api/UtilsApi~deleteReasonCodeUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a reason code
     * Permanently delete a reason code for your firm.
     * @param {String} reasonCodeId UUID reason_code_id
     * @param {module:api/UtilsApi~deleteReasonCodeUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteReasonCodeUsingDelete = function(reasonCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'reasonCodeId' is set
      if (reasonCodeId === undefined || reasonCodeId === null) {
        throw new Error("Missing the required parameter 'reasonCodeId' when calling deleteReasonCodeUsingDelete");
      }


      var pathParams = {
        'reason_code_id': reasonCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/reason_code/{reason_code_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStageUsingDelete operation.
     * @callback module:api/UtilsApi~deleteStageUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account stage
     * Permanently delete an account stage.
     * @param {String} stageId UUID stage_id
     * @param {module:api/UtilsApi~deleteStageUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteStageUsingDelete = function(stageId, callback) {
      var postBody = null;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling deleteStageUsingDelete");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/stage/{stage_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransactionCodeUsingDelete operation.
     * @callback module:api/UtilsApi~deleteTransactionCodeUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transaction code
     * Permanently delete a transaction code for your firm.
     * @param {String} transactionCodeId UUID transaction_code_id
     * @param {module:api/UtilsApi~deleteTransactionCodeUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransactionCodeUsingDelete = function(transactionCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling deleteTransactionCodeUsingDelete");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code/{transaction_code_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationAllUsingGet operation.
     * @callback module:api/UtilsApi~getApplicationAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageApplication} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Application
     * Get details for all Application.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getApplicationAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageApplication}
     */
    this.getApplicationAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageApplication;

      return this.apiClient.callApi(
        '/nucleus/v1/application', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationUsingGet operation.
     * @callback module:api/UtilsApi~getApplicationUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Application
     * Retrieve the information for an Application.
     * @param {String} applicationId UUID application_id
     * @param {module:api/UtilsApi~getApplicationUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    this.getApplicationUsingGet = function(applicationId, callback) {
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationUsingGet");
      }


      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/nucleus/v1/application/{application_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditLogAllUsingGet operation.
     * @callback module:api/UtilsApi~getAuditLogAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAuditLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all audit log
     * Get details for all audit log.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getAuditLogAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAuditLog}
     */
    this.getAuditLogAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAuditLog;

      return this.apiClient.callApi(
        '/nucleus/v1/audit_log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditLogUsingGet operation.
     * @callback module:api/UtilsApi~getAuditLogUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a audit log
     * Retrieve the information for a audit log.
     * @param {String} auditLogId UUID audit_log_id
     * @param {module:api/UtilsApi~getAuditLogUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditLog}
     */
    this.getAuditLogUsingGet = function(auditLogId, callback) {
      var postBody = null;

      // verify the required parameter 'auditLogId' is set
      if (auditLogId === undefined || auditLogId === null) {
        throw new Error("Missing the required parameter 'auditLogId' when calling getAuditLogUsingGet");
      }


      var pathParams = {
        'audit_log_id': auditLogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AuditLog;

      return this.apiClient.callApi(
        '/nucleus/v1/audit_log/{audit_log_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureAllUsingGet operation.
     * @callback module:api/UtilsApi~getFeatureAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageFeature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Feature
     * Get details for all features.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getFeatureAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageFeature}
     */
    this.getFeatureAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageFeature;

      return this.apiClient.callApi(
        '/nucleus/v1/feature', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureTrackAllUsingGet operation.
     * @callback module:api/UtilsApi~getFeatureTrackAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageFeatureTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Feature track
     * Get details for all feature track.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getFeatureTrackAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageFeatureTrack}
     */
    this.getFeatureTrackAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageFeatureTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/feature_track', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureTrackUsingGet operation.
     * @callback module:api/UtilsApi~getFeatureTrackUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Feature track
     * Retrieve the information for a Feature track.
     * @param {String} featureTrackId UUID feature_track_id
     * @param {module:api/UtilsApi~getFeatureTrackUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureTrack}
     */
    this.getFeatureTrackUsingGet = function(featureTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'featureTrackId' is set
      if (featureTrackId === undefined || featureTrackId === null) {
        throw new Error("Missing the required parameter 'featureTrackId' when calling getFeatureTrackUsingGet");
      }


      var pathParams = {
        'feature_track_id': featureTrackId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = FeatureTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/feature_track/{feature_track_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureUsingGet operation.
     * @callback module:api/UtilsApi~getFeatureUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Feature
     * Retrieve the information for a Feature.
     * @param {String} featureId UUID feature_id
     * @param {module:api/UtilsApi~getFeatureUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feature}
     */
    this.getFeatureUsingGet = function(featureId, callback) {
      var postBody = null;

      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling getFeatureUsingGet");
      }


      var pathParams = {
        'feature_id': featureId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Feature;

      return this.apiClient.callApi(
        '/nucleus/v1/feature/{feature_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationAllUsingGet operation.
     * @callback module:api/UtilsApi~getNotificationAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Notifications
     * Get All Notification. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getNotificationAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageNotification}
     */
    this.getNotificationAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageNotification;

      return this.apiClient.callApi(
        '/nucleus/v1/notification', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationClientAllUsingGet operation.
     * @callback module:api/UtilsApi~getNotificationClientAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageNotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Notification Client
     * List all Notification Client. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getNotificationClientAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageNotificationClient}
     */
    this.getNotificationClientAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageNotificationClient;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_client', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationClientUsingGet operation.
     * @callback module:api/UtilsApi~getNotificationClientUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Notification Client
     * Retrieve a  Notification Client. 
     * @param {String} notificationClientId notification_client_id
     * @param {module:api/UtilsApi~getNotificationClientUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationClient}
     */
    this.getNotificationClientUsingGet = function(notificationClientId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationClientId' is set
      if (notificationClientId === undefined || notificationClientId === null) {
        throw new Error("Missing the required parameter 'notificationClientId' when calling getNotificationClientUsingGet");
      }


      var pathParams = {
        'notification_client_id': notificationClientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = NotificationClient;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_client/{notification_client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationSettingAllUsingGet operation.
     * @callback module:api/UtilsApi~getNotificationSettingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageNotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Notification Setting
     * List all Notification Setting. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getNotificationSettingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageNotificationSetting}
     */
    this.getNotificationSettingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageNotificationSetting;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_setting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationSettingUsingGet operation.
     * @callback module:api/UtilsApi~getNotificationSettingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Notification Setting
     * Retrieve a  Notification Setting. 
     * @param {String} notificationSettingId notification_setting_id
     * @param {module:api/UtilsApi~getNotificationSettingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    this.getNotificationSettingUsingGet = function(notificationSettingId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationSettingId' is set
      if (notificationSettingId === undefined || notificationSettingId === null) {
        throw new Error("Missing the required parameter 'notificationSettingId' when calling getNotificationSettingUsingGet");
      }


      var pathParams = {
        'notification_setting_id': notificationSettingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = NotificationSetting;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_setting/{notification_setting_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationUsingGet operation.
     * @callback module:api/UtilsApi~getNotificationUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Notification
     * Get a Notification. 
     * @param {String} notificationId notification_id
     * @param {module:api/UtilsApi~getNotificationUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.getNotificationUsingGet = function(notificationId, callback) {
      var postBody = null;

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling getNotificationUsingGet");
      }


      var pathParams = {
        'notification_id': notificationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/nucleus/v1/notification/{notification_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReasonCodeAllUsingGet operation.
     * @callback module:api/UtilsApi~getReasonCodeAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageReasonCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all reason codes
     * Get the information for all reason codes defined by your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getReasonCodeAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageReasonCode}
     */
    this.getReasonCodeAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageReasonCode;

      return this.apiClient.callApi(
        '/nucleus/v1/reason_code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReasonCodeUsingGet operation.
     * @callback module:api/UtilsApi~getReasonCodeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReasonCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a reason code
     * Retrieve the information for a reason code defined by your firm.
     * @param {String} reasonCodeId UUID reason_code_id
     * @param {module:api/UtilsApi~getReasonCodeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReasonCode}
     */
    this.getReasonCodeUsingGet = function(reasonCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'reasonCodeId' is set
      if (reasonCodeId === undefined || reasonCodeId === null) {
        throw new Error("Missing the required parameter 'reasonCodeId' when calling getReasonCodeUsingGet");
      }


      var pathParams = {
        'reason_code_id': reasonCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ReasonCode;

      return this.apiClient.callApi(
        '/nucleus/v1/reason_code/{reason_code_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStageAllUsingGet operation.
     * @callback module:api/UtilsApi~getStageAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageStage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account stages
     * Get the information for all possible account stages.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getStageAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageStage}
     */
    this.getStageAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageStage;

      return this.apiClient.callApi(
        '/nucleus/v1/stage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStageUsingGet operation.
     * @callback module:api/UtilsApi~getStageUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account stage
     * Retrieve the information for a specific account stage.
     * @param {String} stageId UUID stage_id
     * @param {module:api/UtilsApi~getStageUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    this.getStageUsingGet = function(stageId, callback) {
      var postBody = null;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling getStageUsingGet");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Stage;

      return this.apiClient.callApi(
        '/nucleus/v1/stage/{stage_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCodeAllUsingGet operation.
     * @callback module:api/UtilsApi~getTransactionCodeAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageTransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all transaction codes
     * Get the information for all transaction codes defined by your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/UtilsApi~getTransactionCodeAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageTransactionCode}
     */
    this.getTransactionCodeAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageTransactionCode;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCodeUsingGet operation.
     * @callback module:api/UtilsApi~getTransactionCodeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transaction code
     * Retrieve the information for a transaction code defined by your firm.
     * @param {String} transactionCodeId UUID transaction_code_id
     * @param {module:api/UtilsApi~getTransactionCodeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionCode}
     */
    this.getTransactionCodeUsingGet = function(transactionCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling getTransactionCodeUsingGet");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = TransactionCode;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code/{transaction_code_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicationUsingPut operation.
     * @callback module:api/UtilsApi~updateApplicationUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Application
     * Update the information for an Application
     * @param {module:model/Application} application application
     * @param {String} applicationId UUID application_id
     * @param {module:api/UtilsApi~updateApplicationUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    this.updateApplicationUsingPut = function(application, applicationId, callback) {
      var postBody = application;

      // verify the required parameter 'application' is set
      if (application === undefined || application === null) {
        throw new Error("Missing the required parameter 'application' when calling updateApplicationUsingPut");
      }

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApplicationUsingPut");
      }


      var pathParams = {
        'application_id': applicationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/nucleus/v1/application/{application_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFeatureTrackUsingPut operation.
     * @callback module:api/UtilsApi~updateFeatureTrackUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Feature Track
     * Update the information for a Feature track registered with your firm.
     * @param {module:model/FeatureTrack} featureTrack feature_track
     * @param {String} featureTrackId UUID feature_track_id
     * @param {module:api/UtilsApi~updateFeatureTrackUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureTrack}
     */
    this.updateFeatureTrackUsingPut = function(featureTrack, featureTrackId, callback) {
      var postBody = featureTrack;

      // verify the required parameter 'featureTrack' is set
      if (featureTrack === undefined || featureTrack === null) {
        throw new Error("Missing the required parameter 'featureTrack' when calling updateFeatureTrackUsingPut");
      }

      // verify the required parameter 'featureTrackId' is set
      if (featureTrackId === undefined || featureTrackId === null) {
        throw new Error("Missing the required parameter 'featureTrackId' when calling updateFeatureTrackUsingPut");
      }


      var pathParams = {
        'feature_track_id': featureTrackId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FeatureTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/feature_track/{feature_track_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFeatureUsingPut operation.
     * @callback module:api/UtilsApi~updateFeatureUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Feature
     * Update the information for a Feature registered with your firm.
     * @param {module:model/Feature} feature feature
     * @param {String} featureId UUID feature_id
     * @param {module:api/UtilsApi~updateFeatureUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feature}
     */
    this.updateFeatureUsingPut = function(feature, featureId, callback) {
      var postBody = feature;

      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling updateFeatureUsingPut");
      }

      // verify the required parameter 'featureId' is set
      if (featureId === undefined || featureId === null) {
        throw new Error("Missing the required parameter 'featureId' when calling updateFeatureUsingPut");
      }


      var pathParams = {
        'feature_id': featureId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Feature;

      return this.apiClient.callApi(
        '/nucleus/v1/feature/{feature_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationClientUsingPut operation.
     * @callback module:api/UtilsApi~updateNotificationClientUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification Client
     * Update a  Notification Client. 
     * @param {module:model/NotificationClient} notificationClient notification_client
     * @param {String} notificationClientId UUID notification_client_id
     * @param {module:api/UtilsApi~updateNotificationClientUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationClient}
     */
    this.updateNotificationClientUsingPut = function(notificationClient, notificationClientId, callback) {
      var postBody = notificationClient;

      // verify the required parameter 'notificationClient' is set
      if (notificationClient === undefined || notificationClient === null) {
        throw new Error("Missing the required parameter 'notificationClient' when calling updateNotificationClientUsingPut");
      }

      // verify the required parameter 'notificationClientId' is set
      if (notificationClientId === undefined || notificationClientId === null) {
        throw new Error("Missing the required parameter 'notificationClientId' when calling updateNotificationClientUsingPut");
      }


      var pathParams = {
        'notification_client_id': notificationClientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationClient;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_client/{notification_client_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationSettingUsingPut operation.
     * @callback module:api/UtilsApi~updateNotificationSettingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification Setting
     * Update a  Notification Setting. 
     * @param {module:model/NotificationSetting} notificationSetting notification_setting
     * @param {String} notificationSettingId UUID notification_setting_id
     * @param {module:api/UtilsApi~updateNotificationSettingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    this.updateNotificationSettingUsingPut = function(notificationSetting, notificationSettingId, callback) {
      var postBody = notificationSetting;

      // verify the required parameter 'notificationSetting' is set
      if (notificationSetting === undefined || notificationSetting === null) {
        throw new Error("Missing the required parameter 'notificationSetting' when calling updateNotificationSettingUsingPut");
      }

      // verify the required parameter 'notificationSettingId' is set
      if (notificationSettingId === undefined || notificationSettingId === null) {
        throw new Error("Missing the required parameter 'notificationSettingId' when calling updateNotificationSettingUsingPut");
      }


      var pathParams = {
        'notification_setting_id': notificationSettingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = NotificationSetting;

      return this.apiClient.callApi(
        '/nucleus/v1/notification_setting/{notification_setting_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationUsingPut operation.
     * @callback module:api/UtilsApi~updateNotificationUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Notification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Notification
     * Update a Notification. 
     * @param {module:model/Notification} notification notification
     * @param {String} notificationId UUID notification_id
     * @param {module:api/UtilsApi~updateNotificationUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Notification}
     */
    this.updateNotificationUsingPut = function(notification, notificationId, callback) {
      var postBody = notification;

      // verify the required parameter 'notification' is set
      if (notification === undefined || notification === null) {
        throw new Error("Missing the required parameter 'notification' when calling updateNotificationUsingPut");
      }

      // verify the required parameter 'notificationId' is set
      if (notificationId === undefined || notificationId === null) {
        throw new Error("Missing the required parameter 'notificationId' when calling updateNotificationUsingPut");
      }


      var pathParams = {
        'notification_id': notificationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Notification;

      return this.apiClient.callApi(
        '/nucleus/v1/notification/{notification_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReasonCodeUsingPut operation.
     * @callback module:api/UtilsApi~updateReasonCodeUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReasonCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a reason code
     * Update a reason code for your firm.
     * @param {module:model/ReasonCode} reasonCode reason_code
     * @param {String} reasonCodeId UUID reason_code_id
     * @param {module:api/UtilsApi~updateReasonCodeUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReasonCode}
     */
    this.updateReasonCodeUsingPut = function(reasonCode, reasonCodeId, callback) {
      var postBody = reasonCode;

      // verify the required parameter 'reasonCode' is set
      if (reasonCode === undefined || reasonCode === null) {
        throw new Error("Missing the required parameter 'reasonCode' when calling updateReasonCodeUsingPut");
      }

      // verify the required parameter 'reasonCodeId' is set
      if (reasonCodeId === undefined || reasonCodeId === null) {
        throw new Error("Missing the required parameter 'reasonCodeId' when calling updateReasonCodeUsingPut");
      }


      var pathParams = {
        'reason_code_id': reasonCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ReasonCode;

      return this.apiClient.callApi(
        '/nucleus/v1/reason_code/{reason_code_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStageUsingPut operation.
     * @callback module:api/UtilsApi~updateStageUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account stage
     * Update the information for an account stage.
     * @param {module:model/Stage} stage stage
     * @param {String} stageId UUID stage_id
     * @param {module:api/UtilsApi~updateStageUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    this.updateStageUsingPut = function(stage, stageId, callback) {
      var postBody = stage;

      // verify the required parameter 'stage' is set
      if (stage === undefined || stage === null) {
        throw new Error("Missing the required parameter 'stage' when calling updateStageUsingPut");
      }

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling updateStageUsingPut");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Stage;

      return this.apiClient.callApi(
        '/nucleus/v1/stage/{stage_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactionCodeUsingPut operation.
     * @callback module:api/UtilsApi~updateTransactionCodeUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transaction code
     * Update a transaction code for your firm.
     * @param {module:model/TransactionCode} transactionCode transaction_code
     * @param {String} transactionCodeId UUID transaction_code_id
     * @param {module:api/UtilsApi~updateTransactionCodeUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionCode}
     */
    this.updateTransactionCodeUsingPut = function(transactionCode, transactionCodeId, callback) {
      var postBody = transactionCode;

      // verify the required parameter 'transactionCode' is set
      if (transactionCode === undefined || transactionCode === null) {
        throw new Error("Missing the required parameter 'transactionCode' when calling updateTransactionCodeUsingPut");
      }

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling updateTransactionCodeUsingPut");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TransactionCode;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code/{transaction_code_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
