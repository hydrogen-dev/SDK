# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.create_score_response import CreateScoreResponse  # noqa: F401,E501
from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class SpecificScoreResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_date': 'str',
        'score_type': 'str',
        'score_value': 'str',
        'client_id': 'str',
        'account_id': 'str',
        'portfolio_id': 'str',
        'goal_id': 'str',
        'allocation_id': 'str',
        'model_id': 'str',
        'benchmark_id': 'str',
        'security_id': 'str',
        'score_time_stamp': 'str',
        'metadata': 'object',
        'secondary_id': 'SecondaryId',
        'update_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'create_date',
        'score_type': 'score_type',
        'score_value': 'score_value',
        'client_id': 'client_id',
        'account_id': 'account_id',
        'portfolio_id': 'portfolio_id',
        'goal_id': 'goal_id',
        'allocation_id': 'allocation_id',
        'model_id': 'model_id',
        'benchmark_id': 'benchmark_id',
        'security_id': 'security_id',
        'score_time_stamp': 'score_time_stamp',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, create_date=None, score_type=None, score_value=None, client_id=None, account_id=None, portfolio_id=None, goal_id=None, allocation_id=None, model_id=None, benchmark_id=None, security_id=None, score_time_stamp=None, metadata=None, secondary_id=None, update_date=None):  # noqa: E501
        """SpecificScoreResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._score_type = None
        self._score_value = None
        self._client_id = None
        self._account_id = None
        self._portfolio_id = None
        self._goal_id = None
        self._allocation_id = None
        self._model_id = None
        self._benchmark_id = None
        self._security_id = None
        self._score_time_stamp = None
        self._metadata = None
        self._secondary_id = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        self.score_type = score_type
        self.score_value = score_value
        if client_id is not None:
            self.client_id = client_id
        if account_id is not None:
            self.account_id = account_id
        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        if goal_id is not None:
            self.goal_id = goal_id
        if allocation_id is not None:
            self.allocation_id = allocation_id
        if model_id is not None:
            self.model_id = model_id
        if benchmark_id is not None:
            self.benchmark_id = benchmark_id
        if security_id is not None:
            self.security_id = security_id
        if score_time_stamp is not None:
            self.score_time_stamp = score_time_stamp
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this SpecificScoreResponse.  # noqa: E501

        ID of the score  # noqa: E501

        :return: The id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpecificScoreResponse.

        ID of the score  # noqa: E501

        :param id: The id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this SpecificScoreResponse.  # noqa: E501

        Datetime the score was created  # noqa: E501

        :return: The create_date of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this SpecificScoreResponse.

        Datetime the score was created  # noqa: E501

        :param create_date: The create_date of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def score_type(self):
        """Gets the score_type of this SpecificScoreResponse.  # noqa: E501

        The type of score. Values may be risk_score, dimensional_risk_score, diversification_score, portfolio_optimization_score, goal_achievement_score, and credit_score  # noqa: E501

        :return: The score_type of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._score_type

    @score_type.setter
    def score_type(self, score_type):
        """Sets the score_type of this SpecificScoreResponse.

        The type of score. Values may be risk_score, dimensional_risk_score, diversification_score, portfolio_optimization_score, goal_achievement_score, and credit_score  # noqa: E501

        :param score_type: The score_type of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """
        if score_type is None:
            raise ValueError("Invalid value for `score_type`, must not be `None`")  # noqa: E501
        allowed_values = ["risk_score", "dimensional_risk_score", "diversification_score", "portfolio_optimization_score", "goal_achievement_score", "credit_score"]  # noqa: E501
        if score_type not in allowed_values:
            raise ValueError(
                "Invalid value for `score_type` ({0}), must be one of {1}"  # noqa: E501
                .format(score_type, allowed_values)
            )

        self._score_type = score_type

    @property
    def score_value(self):
        """Gets the score_value of this SpecificScoreResponse.  # noqa: E501

        The value of the score, which may be a number, a label, etc.  # noqa: E501

        :return: The score_value of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._score_value

    @score_value.setter
    def score_value(self, score_value):
        """Sets the score_value of this SpecificScoreResponse.

        The value of the score, which may be a number, a label, etc.  # noqa: E501

        :param score_value: The score_value of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """
        if score_value is None:
            raise ValueError("Invalid value for `score_value`, must not be `None`")  # noqa: E501

        self._score_value = score_value

    @property
    def client_id(self):
        """Gets the client_id of this SpecificScoreResponse.  # noqa: E501

        The ID of a client to which the score applies (if client-specific)  # noqa: E501

        :return: The client_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SpecificScoreResponse.

        The ID of a client to which the score applies (if client-specific)  # noqa: E501

        :param client_id: The client_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def account_id(self):
        """Gets the account_id of this SpecificScoreResponse.  # noqa: E501

        The ID of an account to which the score applies (if account-specific)  # noqa: E501

        :return: The account_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SpecificScoreResponse.

        The ID of an account to which the score applies (if account-specific)  # noqa: E501

        :param account_id: The account_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this SpecificScoreResponse.  # noqa: E501

        The ID of a portfolio to which the score applies (if portfolio-specific)  # noqa: E501

        :return: The portfolio_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this SpecificScoreResponse.

        The ID of a portfolio to which the score applies (if portfolio-specific)  # noqa: E501

        :param portfolio_id: The portfolio_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._portfolio_id = portfolio_id

    @property
    def goal_id(self):
        """Gets the goal_id of this SpecificScoreResponse.  # noqa: E501

        The ID of a goal to which the score applies (if goal-specific)  # noqa: E501

        :return: The goal_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._goal_id

    @goal_id.setter
    def goal_id(self, goal_id):
        """Sets the goal_id of this SpecificScoreResponse.

        The ID of a goal to which the score applies (if goal-specific)  # noqa: E501

        :param goal_id: The goal_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._goal_id = goal_id

    @property
    def allocation_id(self):
        """Gets the allocation_id of this SpecificScoreResponse.  # noqa: E501

        The ID of an allocation to which the score applies (if allocation-specific)  # noqa: E501

        :return: The allocation_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._allocation_id

    @allocation_id.setter
    def allocation_id(self, allocation_id):
        """Sets the allocation_id of this SpecificScoreResponse.

        The ID of an allocation to which the score applies (if allocation-specific)  # noqa: E501

        :param allocation_id: The allocation_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._allocation_id = allocation_id

    @property
    def model_id(self):
        """Gets the model_id of this SpecificScoreResponse.  # noqa: E501

        The ID of a model to which the score applies (if model-specific)  # noqa: E501

        :return: The model_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this SpecificScoreResponse.

        The ID of a model to which the score applies (if model-specific)  # noqa: E501

        :param model_id: The model_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def benchmark_id(self):
        """Gets the benchmark_id of this SpecificScoreResponse.  # noqa: E501

        The ID of a benchmark to which the score applies (if benchmark-specific)  # noqa: E501

        :return: The benchmark_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, benchmark_id):
        """Sets the benchmark_id of this SpecificScoreResponse.

        The ID of a benchmark to which the score applies (if benchmark-specific)  # noqa: E501

        :param benchmark_id: The benchmark_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._benchmark_id = benchmark_id

    @property
    def security_id(self):
        """Gets the security_id of this SpecificScoreResponse.  # noqa: E501

        The ID of a security to which the score applies (if security-specific)  # noqa: E501

        :return: The security_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this SpecificScoreResponse.

        The ID of a security to which the score applies (if security-specific)  # noqa: E501

        :param security_id: The security_id of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._security_id = security_id

    @property
    def score_time_stamp(self):
        """Gets the score_time_stamp of this SpecificScoreResponse.  # noqa: E501

        Date and time for the score  # noqa: E501

        :return: The score_time_stamp of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._score_time_stamp

    @score_time_stamp.setter
    def score_time_stamp(self, score_time_stamp):
        """Sets the score_time_stamp of this SpecificScoreResponse.

        Date and time for the score  # noqa: E501

        :param score_time_stamp: The score_time_stamp of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._score_time_stamp = score_time_stamp

    @property
    def metadata(self):
        """Gets the metadata of this SpecificScoreResponse.  # noqa: E501

        Custom information associated with the score in the format key:value  # noqa: E501

        :return: The metadata of this SpecificScoreResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SpecificScoreResponse.

        Custom information associated with the score in the format key:value  # noqa: E501

        :param metadata: The metadata of this SpecificScoreResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this SpecificScoreResponse.  # noqa: E501


        :return: The secondary_id of this SpecificScoreResponse.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this SpecificScoreResponse.


        :param secondary_id: The secondary_id of this SpecificScoreResponse.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    @property
    def update_date(self):
        """Gets the update_date of this SpecificScoreResponse.  # noqa: E501

        Datetime the score was last updated  # noqa: E501

        :return: The update_date of this SpecificScoreResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this SpecificScoreResponse.

        Datetime the score was last updated  # noqa: E501

        :param update_date: The update_date of this SpecificScoreResponse.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecificScoreResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecificScoreResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
