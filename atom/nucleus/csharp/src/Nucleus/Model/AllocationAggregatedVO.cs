/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// AllocationAggregatedVO
    /// </summary>
    [DataContract]
    public partial class AllocationAggregatedVO :  IEquatable<AllocationAggregatedVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllocationAggregatedVO" /> class.
        /// </summary>
        /// <param name="allocationCategory">allocationCategory.</param>
        /// <param name="allocationCompositions">allocationCompositions.</param>
        /// <param name="allocationDescription">allocationDescription.</param>
        /// <param name="allocationId">allocationId.</param>
        /// <param name="allocationName">allocationName.</param>
        /// <param name="allocationSecondaryId">allocationSecondaryId.</param>
        public AllocationAggregatedVO(string allocationCategory = default(string), List<AllocationCompositionAggregatedVO> allocationCompositions = default(List<AllocationCompositionAggregatedVO>), string allocationDescription = default(string), Guid? allocationId = default(Guid?), string allocationName = default(string), string allocationSecondaryId = default(string))
        {
            this.AllocationCategory = allocationCategory;
            this.AllocationCompositions = allocationCompositions;
            this.AllocationDescription = allocationDescription;
            this.AllocationId = allocationId;
            this.AllocationName = allocationName;
            this.AllocationSecondaryId = allocationSecondaryId;
        }
        
        /// <summary>
        /// Gets or Sets AllocationCategory
        /// </summary>
        [DataMember(Name="allocation_category", EmitDefaultValue=false)]
        public string AllocationCategory { get; set; }

        /// <summary>
        /// Gets or Sets AllocationCompositions
        /// </summary>
        [DataMember(Name="allocation_compositions", EmitDefaultValue=false)]
        public List<AllocationCompositionAggregatedVO> AllocationCompositions { get; set; }

        /// <summary>
        /// Gets or Sets AllocationDescription
        /// </summary>
        [DataMember(Name="allocation_description", EmitDefaultValue=false)]
        public string AllocationDescription { get; set; }

        /// <summary>
        /// Gets or Sets AllocationId
        /// </summary>
        [DataMember(Name="allocation_id", EmitDefaultValue=false)]
        public Guid? AllocationId { get; set; }

        /// <summary>
        /// Gets or Sets AllocationName
        /// </summary>
        [DataMember(Name="allocation_name", EmitDefaultValue=false)]
        public string AllocationName { get; set; }

        /// <summary>
        /// Gets or Sets AllocationSecondaryId
        /// </summary>
        [DataMember(Name="allocation_secondary_id", EmitDefaultValue=false)]
        public string AllocationSecondaryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllocationAggregatedVO {\n");
            sb.Append("  AllocationCategory: ").Append(AllocationCategory).Append("\n");
            sb.Append("  AllocationCompositions: ").Append(AllocationCompositions).Append("\n");
            sb.Append("  AllocationDescription: ").Append(AllocationDescription).Append("\n");
            sb.Append("  AllocationId: ").Append(AllocationId).Append("\n");
            sb.Append("  AllocationName: ").Append(AllocationName).Append("\n");
            sb.Append("  AllocationSecondaryId: ").Append(AllocationSecondaryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllocationAggregatedVO);
        }

        /// <summary>
        /// Returns true if AllocationAggregatedVO instances are equal
        /// </summary>
        /// <param name="input">Instance of AllocationAggregatedVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllocationAggregatedVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllocationCategory == input.AllocationCategory ||
                    (this.AllocationCategory != null &&
                    this.AllocationCategory.Equals(input.AllocationCategory))
                ) && 
                (
                    this.AllocationCompositions == input.AllocationCompositions ||
                    this.AllocationCompositions != null &&
                    this.AllocationCompositions.SequenceEqual(input.AllocationCompositions)
                ) && 
                (
                    this.AllocationDescription == input.AllocationDescription ||
                    (this.AllocationDescription != null &&
                    this.AllocationDescription.Equals(input.AllocationDescription))
                ) && 
                (
                    this.AllocationId == input.AllocationId ||
                    (this.AllocationId != null &&
                    this.AllocationId.Equals(input.AllocationId))
                ) && 
                (
                    this.AllocationName == input.AllocationName ||
                    (this.AllocationName != null &&
                    this.AllocationName.Equals(input.AllocationName))
                ) && 
                (
                    this.AllocationSecondaryId == input.AllocationSecondaryId ||
                    (this.AllocationSecondaryId != null &&
                    this.AllocationSecondaryId.Equals(input.AllocationSecondaryId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllocationCategory != null)
                    hashCode = hashCode * 59 + this.AllocationCategory.GetHashCode();
                if (this.AllocationCompositions != null)
                    hashCode = hashCode * 59 + this.AllocationCompositions.GetHashCode();
                if (this.AllocationDescription != null)
                    hashCode = hashCode * 59 + this.AllocationDescription.GetHashCode();
                if (this.AllocationId != null)
                    hashCode = hashCode * 59 + this.AllocationId.GetHashCode();
                if (this.AllocationName != null)
                    hashCode = hashCode * 59 + this.AllocationName.GetHashCode();
                if (this.AllocationSecondaryId != null)
                    hashCode = hashCode * 59 + this.AllocationSecondaryId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
