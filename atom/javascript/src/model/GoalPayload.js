/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SecondaryId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SecondaryId'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.GoalPayload = factory(root.atom_api.ApiClient, root.atom_api.SecondaryId);
  }
}(this, function(ApiClient, SecondaryId) {
  'use strict';




  /**
   * The GoalPayload model module.
   * @module model/GoalPayload
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>GoalPayload</code>.
   * @alias module:model/GoalPayload
   * @class
   * @param name {String} Name of the goal
   */
  var exports = function(name) {
    var _this = this;

    _this['name'] = name;












  };

  /**
   * Constructs a <code>GoalPayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GoalPayload} obj Optional instance to populate.
   * @return {module:model/GoalPayload} The populated <code>GoalPayload</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('parent_goal_id')) {
        obj['parent_goal_id'] = ApiClient.convertToType(data['parent_goal_id'], 'String');
      }
      if (data.hasOwnProperty('questionnaire_id')) {
        obj['questionnaire_id'] = ApiClient.convertToType(data['questionnaire_id'], 'String');
      }
      if (data.hasOwnProperty('is_decumulation')) {
        obj['is_decumulation'] = ApiClient.convertToType(data['is_decumulation'], 'Boolean');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('category')) {
        obj['category'] = ApiClient.convertToType(data['category'], 'String');
      }
      if (data.hasOwnProperty('client_id')) {
        obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
      }
      if (data.hasOwnProperty('goal_amount')) {
        obj['goal_amount'] = ApiClient.convertToType(data['goal_amount'], 'Number');
      }
      if (data.hasOwnProperty('accumulation_horizon')) {
        obj['accumulation_horizon'] = ApiClient.convertToType(data['accumulation_horizon'], 'Number');
      }
      if (data.hasOwnProperty('decumulation_horizon')) {
        obj['decumulation_horizon'] = ApiClient.convertToType(data['decumulation_horizon'], 'Number');
      }
      if (data.hasOwnProperty('is_active')) {
        obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
      }
      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
      }
      if (data.hasOwnProperty('secondary_id')) {
        obj['secondary_id'] = SecondaryId.constructFromObject(data['secondary_id']);
      }
    }
    return obj;
  }

  /**
   * Name of the goal
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * In the case that a goal is related to a broader goal, the ID of the broader goal
   * @member {String} parent_goal_id
   */
  exports.prototype['parent_goal_id'] = undefined;
  /**
   * The ID of the group of questions that are used to customize a goal for a client
   * @member {String} questionnaire_id
   */
  exports.prototype['questionnaire_id'] = undefined;
  /**
   * Indicator if the goal is a decumulation goal such as saving for retirement. Default is false, indicating that the goal is an accumulation goal. May be used in conjunction with the Proton API
   * @member {Boolean} is_decumulation
   * @default false
   */
  exports.prototype['is_decumulation'] = false;
  /**
   * Type of goal used to identify similar goals. Can be used to differentiate between goal templates and client-specific goals
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Category of the goal used to group goals together. For example, different large purchase goals could have a type of ‘Major Purchase’
   * @member {String} category
   */
  exports.prototype['category'] = undefined;
  /**
   * If the goal is client-specific (not used by any other client), the ID of the client to which it belongs
   * @member {String} client_id
   */
  exports.prototype['client_id'] = undefined;
  /**
   * If the goal is client-specific, the target monetary amount to be reached within the goal horizon. May be used in conjunction with the Proton API. If the goal is not client-specific, please store under the account entity
   * @member {Number} goal_amount
   */
  exports.prototype['goal_amount'] = undefined;
  /**
   * If the goal is client-specific, the time horizon of the goal during the accumulation phase, in years. May be used in conjunction with the Proton API. If the goal is not client-specific, please store under the account entity
   * @member {Number} accumulation_horizon
   */
  exports.prototype['accumulation_horizon'] = undefined;
  /**
   * If the goal is client-specific, the time horizon of the goal during the decumulation phase, in years. If the goal is an accumulation goal, then this can be 0 or omitted entirely. May be used in conjunction with the Proton API. If the goal is not client-specific, please store under the account entity
   * @member {Number} decumulation_horizon
   */
  exports.prototype['decumulation_horizon'] = undefined;
  /**
   * Indicates if the goal is active. Defaults to true which indicates it is active
   * @member {Boolean} is_active
   * @default true
   */
  exports.prototype['is_active'] = true;
  /**
   * Custom information associated with the goal in the format key:value
   * @member {Object} metadata
   */
  exports.prototype['metadata'] = undefined;
  /**
   * @member {module:model/SecondaryId} secondary_id
   */
  exports.prototype['secondary_id'] = undefined;



  return exports;
}));


