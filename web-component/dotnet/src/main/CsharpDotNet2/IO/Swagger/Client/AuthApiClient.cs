/*
 * Hydrogen Admin API
 *
 * The Hydrogen Admin API
 *
 * OpenAPI spec version: 1.9.4
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
*/
using System;
using System.Collections.Generic;
using System.Text;
using Newtonsoft.Json;
using IO.Swagger.Api;
using RestSharp;

namespace IO.Swagger.Client
{
    public class AuthApiClient : Configuration
    {
        private const string BEARER = "Bearer ";
        private const string BASIC = "Basic ";
        private const string ACCEPT = "Accept";
        private const string AUTHORIZATION = "Authorization";
        private const string GRANT_TYPE_KEY = "grant_type";
        private const string CLIENT_CREDENTIAL = "client_credentials";
        private const string PASSWORD = "password";
        private const string USERNAME = "username";
        private const string MESSAGE = "message";
        private const string ACCESS_TOKEN = "access_token";
        private const string CLIENT_TOKEN = "Client-Token";

        public string AuthUri { get; set; }
        public string ClientAccessTokenUri { get; set; }

        public  IO.Swagger.Client.Configuration Configuration { get; set; }

        public ApiClient ApiClient { get; set; }
    
        public AuthApiClient(ApiClient apiClient)
        {
            String baseUri = apiClient.BasePath.Substring(0, apiClient.BasePath.IndexOf(".com") + 4);
            AuthUri =  "/authorization/v1/oauth/token";
            ClientAccessTokenUri = "/authorization/v1/client-token";
            apiClient.BasePath = baseUri;
            this.ApiClient = apiClient;
            
        }

        public String createClientCredential(String clientId, String clientSecret)
        {

            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            localVarQueryParams.Add(GRANT_TYPE_KEY, CLIENT_CREDENTIAL);

            string localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] { };
           

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
               "*/*"
            };
            
            String[] authSettings = new String[] { "oauth2" };
            localVarHeaderParams[AUTHORIZATION] = BASIC + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(clientId + ":" + clientSecret));
            IRestResponse response = (IRestResponse) this.ApiClient.CallApi(AuthUri, Method.POST, localVarQueryParams,
             localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, authSettings);
            
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling createClientCredential: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling createClientCredential: " + response.ErrorMessage, response.ErrorMessage);
          
            AuthResponse authResponse =  JsonConvert.DeserializeObject<AuthResponse>(response.Content);
            return authResponse.access_token;
        }

        public String createPasswordCredential(String clientId, String clientSecret, String userName, String password)
        {

            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            localVarQueryParams.Add(GRANT_TYPE_KEY, PASSWORD);
            localVarQueryParams.Add(USERNAME, userName);
            localVarQueryParams.Add(PASSWORD, password);


            string localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] { };
          

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
               "*/*"
            };
            String[] authSettings = new String[] { "oauth2" };
            String auth = clientId + ":" + clientSecret;
            localVarHeaderParams[AUTHORIZATION] = BASIC + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(clientId + ":" + clientSecret)); ;
             IRestResponse response = (IRestResponse) this.ApiClient.CallApi(AuthUri, Method.POST, localVarQueryParams,
             localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, authSettings);

            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling createPasswordCredential: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling createPasswordCredential: " + response.ErrorMessage, response.ErrorMessage);

            AuthResponse authResponse =  JsonConvert.DeserializeObject<AuthResponse>(response.Content);

            return authResponse.access_token;
        }

        public String createClientTokenCredential(String clientId, String clientSecret, String clientToken)
        {
             var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            string localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] { };
           

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
               "*/*"
            };
            String[] authSettings = new String[] { "oauth2" };
            localVarHeaderParams[AUTHORIZATION] = BASIC + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(clientId + ":" + clientSecret)); ;
            localVarHeaderParams[CLIENT_TOKEN] = BEARER + clientToken;
             IRestResponse response = (IRestResponse) this.ApiClient.CallApi(ClientAccessTokenUri, Method.POST, localVarQueryParams,
             localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, authSettings);
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling createClientTokenCredential: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling createClientTokenCredential: " + response.ErrorMessage, response.ErrorMessage);

            AuthResponse authResponse =  JsonConvert.DeserializeObject<AuthResponse>(response.Content);
            return authResponse.access_token;
        }

        public class AuthResponse
        {
            public string access_token { get; set; }
        }
    }
}