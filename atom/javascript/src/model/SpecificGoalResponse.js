/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateGoalResponse', 'model/SecondaryId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CreateGoalResponse'), require('./SecondaryId'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.SpecificGoalResponse = factory(root.atom_api.ApiClient, root.atom_api.CreateGoalResponse, root.atom_api.SecondaryId);
  }
}(this, function(ApiClient, CreateGoalResponse, SecondaryId) {
  'use strict';




  /**
   * The SpecificGoalResponse model module.
   * @module model/SpecificGoalResponse
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>SpecificGoalResponse</code>.
   * @alias module:model/SpecificGoalResponse
   * @class
   * @implements module:model/CreateGoalResponse
   * @param name {String} Name of the goal
   */
  var exports = function(name) {
    var _this = this;

    CreateGoalResponse.call(_this, name);

  };

  /**
   * Constructs a <code>SpecificGoalResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SpecificGoalResponse} obj Optional instance to populate.
   * @return {module:model/SpecificGoalResponse} The populated <code>SpecificGoalResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      CreateGoalResponse.constructFromObject(data, obj);
      if (data.hasOwnProperty('update_date')) {
        obj['update_date'] = ApiClient.convertToType(data['update_date'], 'String');
      }
    }
    return obj;
  }

  /**
   * Datetime the goal was last updated
   * @member {String} update_date
   */
  exports.prototype['update_date'] = undefined;

  // Implement CreateGoalResponse interface:
  /**
   * Name of the goal
   * @member {String} name
   */
exports.prototype['name'] = undefined;

  /**
   * In the case that a goal is related to a broader goal, the ID of the broader goal
   * @member {String} parent_goal_id
   */
exports.prototype['parent_goal_id'] = undefined;

  /**
   * The ID of the group of questions that are used to customize a goal for a client
   * @member {String} questionnaire_id
   */
exports.prototype['questionnaire_id'] = undefined;

  /**
   * Indicator if the goal is a decumulation goal such as saving for retirement. Default is false, indicating that the goal is an accumulation goal. May be used in conjunction with the Proton API
   * @member {Boolean} is_decumulation
   * @default false
   */
exports.prototype['is_decumulation'] = false;

  /**
   * Type of goal used to identify similar goals. Can be used to differentiate between goal templates and client-specific goals
   * @member {String} type
   */
exports.prototype['type'] = undefined;

  /**
   * Category of the goal used to group goals together. For example, different large purchase goals could have a type of ‘Major Purchase’
   * @member {String} category
   */
exports.prototype['category'] = undefined;

  /**
   * If the goal is client-specific (not used by any other client), the ID of the client to which it belongs
   * @member {String} client_id
   */
exports.prototype['client_id'] = undefined;

  /**
   * If the goal is client-specific, the target monetary amount to be reached within the goal horizon. May be used in conjunction with the Proton API. If the goal is not client-specific, please store under the account entity
   * @member {Number} goal_amount
   */
exports.prototype['goal_amount'] = undefined;

  /**
   * If the goal is client-specific, the time horizon of the goal during the accumulation phase, in years. May be used in conjunction with the Proton API. If the goal is not client-specific, please store under the account entity
   * @member {Number} accumulation_horizon
   */
exports.prototype['accumulation_horizon'] = undefined;

  /**
   * If the goal is client-specific, the time horizon of the goal during the decumulation phase, in years. If the goal is an accumulation goal, then this can be 0 or omitted entirely. May be used in conjunction with the Proton API. If the goal is not client-specific, please store under the account entity
   * @member {Number} decumulation_horizon
   */
exports.prototype['decumulation_horizon'] = undefined;

  /**
   * Indicates if the goal is active. Defaults to true which indicates it is active
   * @member {Boolean} is_active
   * @default true
   */
exports.prototype['is_active'] = true;

  /**
   * Custom information associated with the goal in the format key:value
   * @member {Object} metadata
   */
exports.prototype['metadata'] = undefined;

  /**
   * @member {module:model/SecondaryId} secondary_id
   */
exports.prototype['secondary_id'] = undefined;

  /**
   * ID of the goal
   * @member {String} id
   */
exports.prototype['id'] = undefined;

  /**
   * Datetime the goal was created
   * @member {String} create_date
   */
exports.prototype['create_date'] = undefined;



  return exports;
}));


