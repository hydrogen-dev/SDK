/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.model.BankLink;
import com.hydrogen.nucleus.model.ExternalAccountTransfer;
import com.hydrogen.nucleus.model.Funding;
import com.hydrogen.nucleus.model.FundingTransaction;
import com.hydrogen.nucleus.model.PageBankLink;
import com.hydrogen.nucleus.model.PageExternalAccountTransfer;
import com.hydrogen.nucleus.model.PageFunding;
import com.hydrogen.nucleus.model.PageFundingTransaction;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FundingApi
 */
@Ignore
public class FundingApiTest {

    private final FundingApi api = new FundingApi();

    
    /**
     * Create a bank link
     *
     * Create a new bank link for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBankLinkUsingPostTest() throws ApiException {
        BankLink bankLinkInfoRequest = null;
        BankLink response = api.createBankLinkUsingPost(bankLinkInfoRequest);

        // TODO: test validations
    }
    
    /**
     * Create a funding transaction request
     *
     * Create a new funding transaction request for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFundingTransactionUsingPostTest() throws ApiException {
        FundingTransaction fundingTransactionRequest = null;
        FundingTransaction response = api.createFundingTransactionUsingPost(fundingTransactionRequest);

        // TODO: test validations
    }
    
    /**
     * Create a funding request
     *
     * Create a new funding request for an account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFundingUsingPostTest() throws ApiException {
        Funding fundingRequest = null;
        Funding response = api.createFundingUsingPost(fundingRequest);

        // TODO: test validations
    }
    
    /**
     * Create a transfer requests
     *
     * Create a new external account transfer for a client account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTransferUsingPostTest() throws ApiException {
        ExternalAccountTransfer externalAccountTransferRequest = null;
        ExternalAccountTransfer response = api.createTransferUsingPost(externalAccountTransferRequest);

        // TODO: test validations
    }
    
    /**
     * Delete a bank link
     *
     * Permanently delete a bank link defined for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBankLinkUsingDeleteTest() throws ApiException {
        UUID bankLinkId = null;
        api.deleteBankLinkUsingDelete(bankLinkId);

        // TODO: test validations
    }
    
    /**
     * Delete a funding transaction request
     *
     * Permanently delete a funding transaction request for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFundingTransactionUsingDeleteTest() throws ApiException {
        UUID fundingTransactionId = null;
        api.deleteFundingTransactionUsingDelete(fundingTransactionId);

        // TODO: test validations
    }
    
    /**
     * Delete a funding request
     *
     * Permanently delete a funding request defined for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFundingUsingDeleteTest() throws ApiException {
        UUID fundingId = null;
        api.deleteFundingUsingDelete(fundingId);

        // TODO: test validations
    }
    
    /**
     * Delete a transfer request
     *
     * Permanently delete a external account transfer from a client account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTransferUsingDeleteTest() throws ApiException {
        UUID transferId = null;
        api.deleteTransferUsingDelete(transferId);

        // TODO: test validations
    }
    
    /**
     * List all bank links
     *
     * Get all bank links defined for all clients defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinkAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String currencyConversion = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageBankLink response = api.getBankLinkAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a bank link
     *
     * Retrieve the information for a bank link for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinkUsingGetTest() throws ApiException {
        UUID bankLinkId = null;
        String currencyConversion = null;
        BankLink response = api.getBankLinkUsingGet(bankLinkId, currencyConversion);

        // TODO: test validations
    }
    
    /**
     * List all funding requests 
     *
     * Get the information for all funding requests defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFundingAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String currencyConversion = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageFunding response = api.getFundingAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * List all funding transaction requests
     *
     * Get the information for all funding transaction requests for all clients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFundingTransactionAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String currencyConversion = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageFundingTransaction response = api.getFundingTransactionAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a funding transaction request
     *
     * Retrieve the information for a funding transaction request for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFundingTransactionUsingGetTest() throws ApiException {
        UUID fundingTransactionId = null;
        String currencyConversion = null;
        FundingTransaction response = api.getFundingTransactionUsingGet(fundingTransactionId, currencyConversion);

        // TODO: test validations
    }
    
    /**
     * Retrieve a funding request
     *
     * Retrieve the information for a funding request for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFundingUsingGetTest() throws ApiException {
        UUID fundingId = null;
        String currencyConversion = null;
        Funding response = api.getFundingUsingGet(fundingId, currencyConversion);

        // TODO: test validations
    }
    
    /**
     * List all transfer requests
     *
     * Get the information for all external account transfers defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransferAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String currencyConversion = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageExternalAccountTransfer response = api.getTransferAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a transfer request
     *
     * Retrieve the information for a external account transfer for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransferUsingGetTest() throws ApiException {
        UUID transferId = null;
        String currencyConversion = null;
        ExternalAccountTransfer response = api.getTransferUsingGet(transferId, currencyConversion);

        // TODO: test validations
    }
    
    /**
     * Update list of bank link
     *
     * Update bank link list for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBankLinkBulkUsingPutTest() throws ApiException {
        List<Object> bankLinkList = null;
        List<BankLink> response = api.updateBankLinkBulkUsingPut(bankLinkList);

        // TODO: test validations
    }
    
    /**
     * Update a bank link
     *
     * Update the information for a bank link for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBankLinkUsingPutTest() throws ApiException {
        Object bankLink = null;
        UUID bankLinkId = null;
        BankLink response = api.updateBankLinkUsingPut(bankLink, bankLinkId);

        // TODO: test validations
    }
    
    /**
     * Update a funding transaction request
     *
     * Update the information for a funding transaction request for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFundingTransactionUsingPutTest() throws ApiException {
        Object fundingTransaction = null;
        UUID fundingTransactionId = null;
        FundingTransaction response = api.updateFundingTransactionUsingPut(fundingTransaction, fundingTransactionId);

        // TODO: test validations
    }
    
    /**
     * Update a funding request
     *
     * Update the information for a funding request for an account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFundingUsingPutTest() throws ApiException {
        Object funding = null;
        UUID fundingId = null;
        Funding response = api.updateFundingUsingPut(funding, fundingId);

        // TODO: test validations
    }
    
    /**
     * Update a transfer request
     *
     * Update the information for a external account transfer for a client account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransferUsingPutTest() throws ApiException {
        Object transfer = null;
        UUID transferId = null;
        ExternalAccountTransfer response = api.updateTransferUsingPut(transfer, transferId);

        // TODO: test validations
    }
    
}
