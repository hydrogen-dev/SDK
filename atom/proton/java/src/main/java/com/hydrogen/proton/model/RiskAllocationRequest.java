/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * RiskAllocationRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-04-28T09:20:08.129Z")
public class RiskAllocationRequest {
  @SerializedName("client_id")
  private UUID clientId = null;

  /**
   * Gets or Sets allocationMethod
   */
  @JsonAdapter(AllocationMethodEnum.Adapter.class)
  public enum AllocationMethodEnum {
    SELECT("select"),
    
    CREATE("create");

    private String value;

    AllocationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllocationMethodEnum fromValue(String text) {
      for (AllocationMethodEnum b : AllocationMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AllocationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllocationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllocationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AllocationMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("allocation_method")
  private AllocationMethodEnum allocationMethod = null;

  @SerializedName("opt_config")
  private OptConfig optConfig = null;

  /**
   * Gets or Sets marketDataSource
   */
  @JsonAdapter(MarketDataSourceEnum.Adapter.class)
  public enum MarketDataSourceEnum {
    NUCLEUS("nucleus"),
    
    INTEGRATION("integration");

    private String value;

    MarketDataSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MarketDataSourceEnum fromValue(String text) {
      for (MarketDataSourceEnum b : MarketDataSourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MarketDataSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MarketDataSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MarketDataSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MarketDataSourceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("market_data_source")
  private MarketDataSourceEnum marketDataSource = MarketDataSourceEnum.NUCLEUS;

  @SerializedName("risk_score")
  private BigDecimal riskScore = null;

  @SerializedName("use_proxy_data")
  private Boolean useProxyData = false;

  @SerializedName("allocations")
  private List<UUID> allocations = null;

  public RiskAllocationRequest clientId(UUID clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @ApiModelProperty(value = "")
  public UUID getClientId() {
    return clientId;
  }

  public void setClientId(UUID clientId) {
    this.clientId = clientId;
  }

  public RiskAllocationRequest allocationMethod(AllocationMethodEnum allocationMethod) {
    this.allocationMethod = allocationMethod;
    return this;
  }

   /**
   * Get allocationMethod
   * @return allocationMethod
  **/
  @ApiModelProperty(required = true, value = "")
  public AllocationMethodEnum getAllocationMethod() {
    return allocationMethod;
  }

  public void setAllocationMethod(AllocationMethodEnum allocationMethod) {
    this.allocationMethod = allocationMethod;
  }

  public RiskAllocationRequest optConfig(OptConfig optConfig) {
    this.optConfig = optConfig;
    return this;
  }

   /**
   * Get optConfig
   * @return optConfig
  **/
  @ApiModelProperty(value = "")
  public OptConfig getOptConfig() {
    return optConfig;
  }

  public void setOptConfig(OptConfig optConfig) {
    this.optConfig = optConfig;
  }

  public RiskAllocationRequest marketDataSource(MarketDataSourceEnum marketDataSource) {
    this.marketDataSource = marketDataSource;
    return this;
  }

   /**
   * Get marketDataSource
   * @return marketDataSource
  **/
  @ApiModelProperty(value = "")
  public MarketDataSourceEnum getMarketDataSource() {
    return marketDataSource;
  }

  public void setMarketDataSource(MarketDataSourceEnum marketDataSource) {
    this.marketDataSource = marketDataSource;
  }

  public RiskAllocationRequest riskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
    return this;
  }

   /**
   * Get riskScore
   * minimum: 0
   * maximum: 100
   * @return riskScore
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getRiskScore() {
    return riskScore;
  }

  public void setRiskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
  }

  public RiskAllocationRequest useProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
    return this;
  }

   /**
   * Get useProxyData
   * @return useProxyData
  **/
  @ApiModelProperty(value = "")
  public Boolean isUseProxyData() {
    return useProxyData;
  }

  public void setUseProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
  }

  public RiskAllocationRequest allocations(List<UUID> allocations) {
    this.allocations = allocations;
    return this;
  }

  public RiskAllocationRequest addAllocationsItem(UUID allocationsItem) {
    if (this.allocations == null) {
      this.allocations = new ArrayList<UUID>();
    }
    this.allocations.add(allocationsItem);
    return this;
  }

   /**
   * Get allocations
   * @return allocations
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getAllocations() {
    return allocations;
  }

  public void setAllocations(List<UUID> allocations) {
    this.allocations = allocations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskAllocationRequest riskAllocationRequest = (RiskAllocationRequest) o;
    return Objects.equals(this.clientId, riskAllocationRequest.clientId) &&
        Objects.equals(this.allocationMethod, riskAllocationRequest.allocationMethod) &&
        Objects.equals(this.optConfig, riskAllocationRequest.optConfig) &&
        Objects.equals(this.marketDataSource, riskAllocationRequest.marketDataSource) &&
        Objects.equals(this.riskScore, riskAllocationRequest.riskScore) &&
        Objects.equals(this.useProxyData, riskAllocationRequest.useProxyData) &&
        Objects.equals(this.allocations, riskAllocationRequest.allocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, allocationMethod, optConfig, marketDataSource, riskScore, useProxyData, allocations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskAllocationRequest {\n");
    
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    allocationMethod: ").append(toIndentedString(allocationMethod)).append("\n");
    sb.append("    optConfig: ").append(toIndentedString(optConfig)).append("\n");
    sb.append("    marketDataSource: ").append(toIndentedString(marketDataSource)).append("\n");
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    useProxyData: ").append(toIndentedString(useProxyData)).append("\n");
    sb.append("    allocations: ").append(toIndentedString(allocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

