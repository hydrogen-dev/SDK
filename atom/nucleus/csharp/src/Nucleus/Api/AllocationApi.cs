/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAllocationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an allocation composition
        /// </summary>
        /// <remarks>
        /// Create a new allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>AllocationComposition</returns>
        AllocationComposition CreateAllocationCompositionUsingPost (AllocationComposition allocRequest);

        /// <summary>
        /// Create an allocation composition
        /// </summary>
        /// <remarks>
        /// Create a new allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>ApiResponse of AllocationComposition</returns>
        ApiResponse<AllocationComposition> CreateAllocationCompositionUsingPostWithHttpInfo (AllocationComposition allocRequest);
        /// <summary>
        /// Create an allocation
        /// </summary>
        /// <remarks>
        /// Create a new allocation for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>Allocation</returns>
        Allocation CreateAllocationUsingPost (Allocation allocationRequest);

        /// <summary>
        /// Create an allocation
        /// </summary>
        /// <remarks>
        /// Create a new allocation for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> CreateAllocationUsingPostWithHttpInfo (Allocation allocationRequest);
        /// <summary>
        /// Delete an allocation composition
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns></returns>
        void DeleteAllocationCompositionUsingDelete (Guid? allocationCompositionId);

        /// <summary>
        /// Delete an allocation composition
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllocationCompositionUsingDeleteWithHttpInfo (Guid? allocationCompositionId);
        /// <summary>
        /// Delete an allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns></returns>
        void DeleteAllocationUsingDelete (Guid? allocationId);

        /// <summary>
        /// Delete an allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllocationUsingDeleteWithHttpInfo (Guid? allocationId);
        /// <summary>
        /// List all Allocation aggregated data overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>AllocationAggregatedVO</returns>
        AllocationAggregatedVO GetAllocationAllAggregateDataUsingGet (Guid? allocationId);

        /// <summary>
        /// List all Allocation aggregated data overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>ApiResponse of AllocationAggregatedVO</returns>
        ApiResponse<AllocationAggregatedVO> GetAllocationAllAggregateDataUsingGetWithHttpInfo (Guid? allocationId);
        /// <summary>
        /// List all allocation asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a specific allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;DateDoubleVO&gt;</returns>
        List<DateDoubleVO> GetAllocationAllAssetSizeAllUsingGet (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all allocation asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a specific allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;DateDoubleVO&gt;</returns>
        ApiResponse<List<DateDoubleVO>> GetAllocationAllAssetSizeAllUsingGetWithHttpInfo (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all allocation holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all securities assigned to a specific allocation. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;ModelHoldingVO&gt;</returns>
        List<ModelHoldingVO> GetAllocationAllHoldingAllUsingGet (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// List all allocation holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all securities assigned to a specific allocation. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelHoldingVO&gt;</returns>
        ApiResponse<List<ModelHoldingVO>> GetAllocationAllHoldingAllUsingGetWithHttpInfo (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// List all allocation transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PageModelTransaction</returns>
        PageModelTransaction GetAllocationAllTransactionAllUsingGet (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all allocation transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PageModelTransaction</returns>
        ApiResponse<PageModelTransaction> GetAllocationAllTransactionAllUsingGetWithHttpInfo (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all allocations
        /// </summary>
        /// <remarks>
        /// Get details for all allocations defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAllocation</returns>
        PageAllocation GetAllocationAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all allocations
        /// </summary>
        /// <remarks>
        /// Get details for all allocations defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAllocation</returns>
        ApiResponse<PageAllocation> GetAllocationAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all allocations compositions
        /// </summary>
        /// <remarks>
        /// Get the allocation composition for all allocations.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAllocationComposition</returns>
        PageAllocationComposition GetAllocationCompositionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all allocations compositions
        /// </summary>
        /// <remarks>
        /// Get the allocation composition for all allocations.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAllocationComposition</returns>
        ApiResponse<PageAllocationComposition> GetAllocationCompositionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an allocation composition
        /// </summary>
        /// <remarks>
        /// Retrieve the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>AllocationComposition</returns>
        AllocationComposition GetAllocationCompositionUsingGet (Guid? allocationCompositionId);

        /// <summary>
        /// Retrieve an allocation composition
        /// </summary>
        /// <remarks>
        /// Retrieve the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>ApiResponse of AllocationComposition</returns>
        ApiResponse<AllocationComposition> GetAllocationCompositionUsingGetWithHttpInfo (Guid? allocationCompositionId);
        /// <summary>
        /// Retrieve an allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Allocation</returns>
        Allocation GetAllocationUsingGet (Guid? allocationId);

        /// <summary>
        /// Retrieve an allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> GetAllocationUsingGetWithHttpInfo (Guid? allocationId);
        /// <summary>
        /// Update an allocation composition
        /// </summary>
        /// <remarks>
        /// Update the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>AllocationComposition</returns>
        AllocationComposition UpdateAllocationCompositionUsingPut (Object allocationComposition, Guid? allocationCompositionId);

        /// <summary>
        /// Update an allocation composition
        /// </summary>
        /// <remarks>
        /// Update the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>ApiResponse of AllocationComposition</returns>
        ApiResponse<AllocationComposition> UpdateAllocationCompositionUsingPutWithHttpInfo (Object allocationComposition, Guid? allocationCompositionId);
        /// <summary>
        /// Update an allocation
        /// </summary>
        /// <remarks>
        /// Update an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Allocation</returns>
        Allocation UpdateAllocationUsingPut (Object allocation, Guid? allocationId);

        /// <summary>
        /// Update an allocation
        /// </summary>
        /// <remarks>
        /// Update an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>ApiResponse of Allocation</returns>
        ApiResponse<Allocation> UpdateAllocationUsingPutWithHttpInfo (Object allocation, Guid? allocationId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an allocation composition
        /// </summary>
        /// <remarks>
        /// Create a new allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of AllocationComposition</returns>
        System.Threading.Tasks.Task<AllocationComposition> CreateAllocationCompositionUsingPostAsync (AllocationComposition allocRequest);

        /// <summary>
        /// Create an allocation composition
        /// </summary>
        /// <remarks>
        /// Create a new allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of ApiResponse (AllocationComposition)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllocationComposition>> CreateAllocationCompositionUsingPostAsyncWithHttpInfo (AllocationComposition allocRequest);
        /// <summary>
        /// Create an allocation
        /// </summary>
        /// <remarks>
        /// Create a new allocation for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> CreateAllocationUsingPostAsync (Allocation allocationRequest);

        /// <summary>
        /// Create an allocation
        /// </summary>
        /// <remarks>
        /// Create a new allocation for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> CreateAllocationUsingPostAsyncWithHttpInfo (Allocation allocationRequest);
        /// <summary>
        /// Delete an allocation composition
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllocationCompositionUsingDeleteAsync (Guid? allocationCompositionId);

        /// <summary>
        /// Delete an allocation composition
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllocationCompositionUsingDeleteAsyncWithHttpInfo (Guid? allocationCompositionId);
        /// <summary>
        /// Delete an allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllocationUsingDeleteAsync (Guid? allocationId);

        /// <summary>
        /// Delete an allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllocationUsingDeleteAsyncWithHttpInfo (Guid? allocationId);
        /// <summary>
        /// List all Allocation aggregated data overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>Task of AllocationAggregatedVO</returns>
        System.Threading.Tasks.Task<AllocationAggregatedVO> GetAllocationAllAggregateDataUsingGetAsync (Guid? allocationId);

        /// <summary>
        /// List all Allocation aggregated data overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>Task of ApiResponse (AllocationAggregatedVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllocationAggregatedVO>> GetAllocationAllAggregateDataUsingGetAsyncWithHttpInfo (Guid? allocationId);
        /// <summary>
        /// List all allocation asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a specific allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;DateDoubleVO&gt;</returns>
        System.Threading.Tasks.Task<List<DateDoubleVO>> GetAllocationAllAssetSizeAllUsingGetAsync (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all allocation asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a specific allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateDoubleVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DateDoubleVO>>> GetAllocationAllAssetSizeAllUsingGetAsyncWithHttpInfo (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all allocation holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all securities assigned to a specific allocation. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;ModelHoldingVO&gt;</returns>
        System.Threading.Tasks.Task<List<ModelHoldingVO>> GetAllocationAllHoldingAllUsingGetAsync (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null);

        /// <summary>
        /// List all allocation holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all securities assigned to a specific allocation. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelHoldingVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelHoldingVO>>> GetAllocationAllHoldingAllUsingGetAsyncWithHttpInfo (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null);
        /// <summary>
        /// List all allocation transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PageModelTransaction</returns>
        System.Threading.Tasks.Task<PageModelTransaction> GetAllocationAllTransactionAllUsingGetAsync (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all allocation transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PageModelTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageModelTransaction>> GetAllocationAllTransactionAllUsingGetAsyncWithHttpInfo (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all allocations
        /// </summary>
        /// <remarks>
        /// Get details for all allocations defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAllocation</returns>
        System.Threading.Tasks.Task<PageAllocation> GetAllocationAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all allocations
        /// </summary>
        /// <remarks>
        /// Get details for all allocations defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAllocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAllocation>> GetAllocationAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all allocations compositions
        /// </summary>
        /// <remarks>
        /// Get the allocation composition for all allocations.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAllocationComposition</returns>
        System.Threading.Tasks.Task<PageAllocationComposition> GetAllocationCompositionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all allocations compositions
        /// </summary>
        /// <remarks>
        /// Get the allocation composition for all allocations.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAllocationComposition)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAllocationComposition>> GetAllocationCompositionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an allocation composition
        /// </summary>
        /// <remarks>
        /// Retrieve the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of AllocationComposition</returns>
        System.Threading.Tasks.Task<AllocationComposition> GetAllocationCompositionUsingGetAsync (Guid? allocationCompositionId);

        /// <summary>
        /// Retrieve an allocation composition
        /// </summary>
        /// <remarks>
        /// Retrieve the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of ApiResponse (AllocationComposition)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllocationComposition>> GetAllocationCompositionUsingGetAsyncWithHttpInfo (Guid? allocationCompositionId);
        /// <summary>
        /// Retrieve an allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> GetAllocationUsingGetAsync (Guid? allocationId);

        /// <summary>
        /// Retrieve an allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> GetAllocationUsingGetAsyncWithHttpInfo (Guid? allocationId);
        /// <summary>
        /// Update an allocation composition
        /// </summary>
        /// <remarks>
        /// Update the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of AllocationComposition</returns>
        System.Threading.Tasks.Task<AllocationComposition> UpdateAllocationCompositionUsingPutAsync (Object allocationComposition, Guid? allocationCompositionId);

        /// <summary>
        /// Update an allocation composition
        /// </summary>
        /// <remarks>
        /// Update the information of an allocation composition record for an allocation.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of ApiResponse (AllocationComposition)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllocationComposition>> UpdateAllocationCompositionUsingPutAsyncWithHttpInfo (Object allocationComposition, Guid? allocationCompositionId);
        /// <summary>
        /// Update an allocation
        /// </summary>
        /// <remarks>
        /// Update an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of Allocation</returns>
        System.Threading.Tasks.Task<Allocation> UpdateAllocationUsingPutAsync (Object allocation, Guid? allocationId);

        /// <summary>
        /// Update an allocation
        /// </summary>
        /// <remarks>
        /// Update an allocation defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Allocation>> UpdateAllocationUsingPutAsyncWithHttpInfo (Object allocation, Guid? allocationId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AllocationApi : IAllocationApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AllocationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AllocationApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AllocationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AllocationApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an allocation composition Create a new allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>AllocationComposition</returns>
        public AllocationComposition CreateAllocationCompositionUsingPost (AllocationComposition allocRequest)
        {
             ApiResponse<AllocationComposition> localVarResponse = CreateAllocationCompositionUsingPostWithHttpInfo(allocRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an allocation composition Create a new allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>ApiResponse of AllocationComposition</returns>
        public ApiResponse< AllocationComposition > CreateAllocationCompositionUsingPostWithHttpInfo (AllocationComposition allocRequest)
        {
            // verify the required parameter 'allocRequest' is set
            if (allocRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocRequest' when calling AllocationApi->CreateAllocationCompositionUsingPost");

            var localVarPath = "/nucleus/v1/allocation_composition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocRequest != null && allocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAllocationCompositionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationComposition)));
        }

        /// <summary>
        /// Create an allocation composition Create a new allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of AllocationComposition</returns>
        public async System.Threading.Tasks.Task<AllocationComposition> CreateAllocationCompositionUsingPostAsync (AllocationComposition allocRequest)
        {
             ApiResponse<AllocationComposition> localVarResponse = await CreateAllocationCompositionUsingPostAsyncWithHttpInfo(allocRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an allocation composition Create a new allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of ApiResponse (AllocationComposition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllocationComposition>> CreateAllocationCompositionUsingPostAsyncWithHttpInfo (AllocationComposition allocRequest)
        {
            // verify the required parameter 'allocRequest' is set
            if (allocRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocRequest' when calling AllocationApi->CreateAllocationCompositionUsingPost");

            var localVarPath = "/nucleus/v1/allocation_composition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocRequest != null && allocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAllocationCompositionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationComposition)));
        }

        /// <summary>
        /// Create an allocation Create a new allocation for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>Allocation</returns>
        public Allocation CreateAllocationUsingPost (Allocation allocationRequest)
        {
             ApiResponse<Allocation> localVarResponse = CreateAllocationUsingPostWithHttpInfo(allocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an allocation Create a new allocation for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>ApiResponse of Allocation</returns>
        public ApiResponse< Allocation > CreateAllocationUsingPostWithHttpInfo (Allocation allocationRequest)
        {
            // verify the required parameter 'allocationRequest' is set
            if (allocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocationRequest' when calling AllocationApi->CreateAllocationUsingPost");

            var localVarPath = "/nucleus/v1/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationRequest != null && allocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAllocationUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Create an allocation Create a new allocation for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> CreateAllocationUsingPostAsync (Allocation allocationRequest)
        {
             ApiResponse<Allocation> localVarResponse = await CreateAllocationUsingPostAsyncWithHttpInfo(allocationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an allocation Create a new allocation for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationRequest">allocationRequest</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Allocation>> CreateAllocationUsingPostAsyncWithHttpInfo (Allocation allocationRequest)
        {
            // verify the required parameter 'allocationRequest' is set
            if (allocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocationRequest' when calling AllocationApi->CreateAllocationUsingPost");

            var localVarPath = "/nucleus/v1/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationRequest != null && allocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAllocationUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Delete an allocation composition Permanently delete an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns></returns>
        public void DeleteAllocationCompositionUsingDelete (Guid? allocationCompositionId)
        {
             DeleteAllocationCompositionUsingDeleteWithHttpInfo(allocationCompositionId);
        }

        /// <summary>
        /// Delete an allocation composition Permanently delete an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllocationCompositionUsingDeleteWithHttpInfo (Guid? allocationCompositionId)
        {
            // verify the required parameter 'allocationCompositionId' is set
            if (allocationCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'allocationCompositionId' when calling AllocationApi->DeleteAllocationCompositionUsingDelete");

            var localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationCompositionId != null) localVarPathParams.Add("allocation_composition_id", this.Configuration.ApiClient.ParameterToString(allocationCompositionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllocationCompositionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an allocation composition Permanently delete an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllocationCompositionUsingDeleteAsync (Guid? allocationCompositionId)
        {
             await DeleteAllocationCompositionUsingDeleteAsyncWithHttpInfo(allocationCompositionId);

        }

        /// <summary>
        /// Delete an allocation composition Permanently delete an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllocationCompositionUsingDeleteAsyncWithHttpInfo (Guid? allocationCompositionId)
        {
            // verify the required parameter 'allocationCompositionId' is set
            if (allocationCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'allocationCompositionId' when calling AllocationApi->DeleteAllocationCompositionUsingDelete");

            var localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationCompositionId != null) localVarPathParams.Add("allocation_composition_id", this.Configuration.ApiClient.ParameterToString(allocationCompositionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllocationCompositionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an allocation Permanently delete an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns></returns>
        public void DeleteAllocationUsingDelete (Guid? allocationId)
        {
             DeleteAllocationUsingDeleteWithHttpInfo(allocationId);
        }

        /// <summary>
        /// Delete an allocation Permanently delete an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllocationUsingDeleteWithHttpInfo (Guid? allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->DeleteAllocationUsingDelete");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllocationUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an allocation Permanently delete an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllocationUsingDeleteAsync (Guid? allocationId)
        {
             await DeleteAllocationUsingDeleteAsyncWithHttpInfo(allocationId);

        }

        /// <summary>
        /// Delete an allocation Permanently delete an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllocationUsingDeleteAsyncWithHttpInfo (Guid? allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->DeleteAllocationUsingDelete");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllocationUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all Allocation aggregated data overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>AllocationAggregatedVO</returns>
        public AllocationAggregatedVO GetAllocationAllAggregateDataUsingGet (Guid? allocationId)
        {
             ApiResponse<AllocationAggregatedVO> localVarResponse = GetAllocationAllAggregateDataUsingGetWithHttpInfo(allocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Allocation aggregated data overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>ApiResponse of AllocationAggregatedVO</returns>
        public ApiResponse< AllocationAggregatedVO > GetAllocationAllAggregateDataUsingGetWithHttpInfo (Guid? allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllAggregateDataUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/aggregate_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllAggregateDataUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationAggregatedVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationAggregatedVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationAggregatedVO)));
        }

        /// <summary>
        /// List all Allocation aggregated data overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>Task of AllocationAggregatedVO</returns>
        public async System.Threading.Tasks.Task<AllocationAggregatedVO> GetAllocationAllAggregateDataUsingGetAsync (Guid? allocationId)
        {
             ApiResponse<AllocationAggregatedVO> localVarResponse = await GetAllocationAllAggregateDataUsingGetAsyncWithHttpInfo(allocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Allocation aggregated data overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">Allocation Id</param>
        /// <returns>Task of ApiResponse (AllocationAggregatedVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllocationAggregatedVO>> GetAllocationAllAggregateDataUsingGetAsyncWithHttpInfo (Guid? allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllAggregateDataUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/aggregate_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllAggregateDataUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationAggregatedVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationAggregatedVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationAggregatedVO)));
        }

        /// <summary>
        /// List all allocation asset sizes Get a list of asset sizes by date for a specific allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;DateDoubleVO&gt;</returns>
        public List<DateDoubleVO> GetAllocationAllAssetSizeAllUsingGet (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<DateDoubleVO>> localVarResponse = GetAllocationAllAssetSizeAllUsingGetWithHttpInfo(allocationId, endDate, getLatest, isCurrentWeight, sortType, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all allocation asset sizes Get a list of asset sizes by date for a specific allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;DateDoubleVO&gt;</returns>
        public ApiResponse< List<DateDoubleVO> > GetAllocationAllAssetSizeAllUsingGetWithHttpInfo (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllAssetSizeAllUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (isCurrentWeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_current_weight", isCurrentWeight)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateDoubleVO>)));
        }

        /// <summary>
        /// List all allocation asset sizes Get a list of asset sizes by date for a specific allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;DateDoubleVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DateDoubleVO>> GetAllocationAllAssetSizeAllUsingGetAsync (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<DateDoubleVO>> localVarResponse = await GetAllocationAllAssetSizeAllUsingGetAsyncWithHttpInfo(allocationId, endDate, getLatest, isCurrentWeight, sortType, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all allocation asset sizes Get a list of asset sizes by date for a specific allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional)</param>
        /// <param name="isCurrentWeight">is_current_weight (optional, default to true)</param>
        /// <param name="sortType">D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateDoubleVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DateDoubleVO>>> GetAllocationAllAssetSizeAllUsingGetAsyncWithHttpInfo (Guid? allocationId, DateTime? endDate = null, bool? getLatest = null, bool? isCurrentWeight = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllAssetSizeAllUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (isCurrentWeight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "is_current_weight", isCurrentWeight)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateDoubleVO>)));
        }

        /// <summary>
        /// List all allocation holdings Get the information for all securities assigned to a specific allocation. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;ModelHoldingVO&gt;</returns>
        public List<ModelHoldingVO> GetAllocationAllHoldingAllUsingGet (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<List<ModelHoldingVO>> localVarResponse = GetAllocationAllHoldingAllUsingGetWithHttpInfo(allocationId, endDate, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all allocation holdings Get the information for all securities assigned to a specific allocation. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;ModelHoldingVO&gt;</returns>
        public ApiResponse< List<ModelHoldingVO> > GetAllocationAllHoldingAllUsingGetWithHttpInfo (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllHoldingAllUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelHoldingVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelHoldingVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelHoldingVO>)));
        }

        /// <summary>
        /// List all allocation holdings Get the information for all securities assigned to a specific allocation. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;ModelHoldingVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelHoldingVO>> GetAllocationAllHoldingAllUsingGetAsync (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null)
        {
             ApiResponse<List<ModelHoldingVO>> localVarResponse = await GetAllocationAllHoldingAllUsingGetAsyncWithHttpInfo(allocationId, endDate, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all allocation holdings Get the information for all securities assigned to a specific allocation. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ModelHoldingVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelHoldingVO>>> GetAllocationAllHoldingAllUsingGetAsyncWithHttpInfo (Guid? allocationId, DateTime? endDate = null, DateTime? startDate = null)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllHoldingAllUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelHoldingVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelHoldingVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelHoldingVO>)));
        }

        /// <summary>
        /// List all allocation transactions Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PageModelTransaction</returns>
        public PageModelTransaction GetAllocationAllTransactionAllUsingGet (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PageModelTransaction> localVarResponse = GetAllocationAllTransactionAllUsingGetWithHttpInfo(allocationId, ascending, endDate, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all allocation transactions Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PageModelTransaction</returns>
        public ApiResponse< PageModelTransaction > GetAllocationAllTransactionAllUsingGetWithHttpInfo (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelTransaction)));
        }

        /// <summary>
        /// List all allocation transactions Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PageModelTransaction</returns>
        public async System.Threading.Tasks.Task<PageModelTransaction> GetAllocationAllTransactionAllUsingGetAsync (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PageModelTransaction> localVarResponse = await GetAllocationAllTransactionAllUsingGetAsyncWithHttpInfo(allocationId, ascending, endDate, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all allocation transactions Get the information for all transactions made under an allocation to achieve the composition of the allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PageModelTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageModelTransaction>> GetAllocationAllTransactionAllUsingGetAsyncWithHttpInfo (Guid? allocationId, bool? ascending = null, DateTime? endDate = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationAllTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelTransaction)));
        }

        /// <summary>
        /// List all allocations Get details for all allocations defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAllocation</returns>
        public PageAllocation GetAllocationAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAllocation> localVarResponse = GetAllocationAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all allocations Get details for all allocations defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAllocation</returns>
        public ApiResponse< PageAllocation > GetAllocationAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAllocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAllocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAllocation)));
        }

        /// <summary>
        /// List all allocations Get details for all allocations defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAllocation</returns>
        public async System.Threading.Tasks.Task<PageAllocation> GetAllocationAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAllocation> localVarResponse = await GetAllocationAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all allocations Get details for all allocations defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAllocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAllocation>> GetAllocationAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAllocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAllocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAllocation)));
        }

        /// <summary>
        /// List all allocations compositions Get the allocation composition for all allocations.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAllocationComposition</returns>
        public PageAllocationComposition GetAllocationCompositionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAllocationComposition> localVarResponse = GetAllocationCompositionAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all allocations compositions Get the allocation composition for all allocations.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAllocationComposition</returns>
        public ApiResponse< PageAllocationComposition > GetAllocationCompositionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/allocation_composition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationCompositionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAllocationComposition)));
        }

        /// <summary>
        /// List all allocations compositions Get the allocation composition for all allocations.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAllocationComposition</returns>
        public async System.Threading.Tasks.Task<PageAllocationComposition> GetAllocationCompositionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAllocationComposition> localVarResponse = await GetAllocationCompositionAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all allocations compositions Get the allocation composition for all allocations.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAllocationComposition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAllocationComposition>> GetAllocationCompositionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/allocation_composition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationCompositionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAllocationComposition)));
        }

        /// <summary>
        /// Retrieve an allocation composition Retrieve the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>AllocationComposition</returns>
        public AllocationComposition GetAllocationCompositionUsingGet (Guid? allocationCompositionId)
        {
             ApiResponse<AllocationComposition> localVarResponse = GetAllocationCompositionUsingGetWithHttpInfo(allocationCompositionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an allocation composition Retrieve the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>ApiResponse of AllocationComposition</returns>
        public ApiResponse< AllocationComposition > GetAllocationCompositionUsingGetWithHttpInfo (Guid? allocationCompositionId)
        {
            // verify the required parameter 'allocationCompositionId' is set
            if (allocationCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'allocationCompositionId' when calling AllocationApi->GetAllocationCompositionUsingGet");

            var localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationCompositionId != null) localVarPathParams.Add("allocation_composition_id", this.Configuration.ApiClient.ParameterToString(allocationCompositionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationCompositionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationComposition)));
        }

        /// <summary>
        /// Retrieve an allocation composition Retrieve the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of AllocationComposition</returns>
        public async System.Threading.Tasks.Task<AllocationComposition> GetAllocationCompositionUsingGetAsync (Guid? allocationCompositionId)
        {
             ApiResponse<AllocationComposition> localVarResponse = await GetAllocationCompositionUsingGetAsyncWithHttpInfo(allocationCompositionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an allocation composition Retrieve the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of ApiResponse (AllocationComposition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllocationComposition>> GetAllocationCompositionUsingGetAsyncWithHttpInfo (Guid? allocationCompositionId)
        {
            // verify the required parameter 'allocationCompositionId' is set
            if (allocationCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'allocationCompositionId' when calling AllocationApi->GetAllocationCompositionUsingGet");

            var localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationCompositionId != null) localVarPathParams.Add("allocation_composition_id", this.Configuration.ApiClient.ParameterToString(allocationCompositionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationCompositionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationComposition)));
        }

        /// <summary>
        /// Retrieve an allocation Retrieve the information for an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Allocation</returns>
        public Allocation GetAllocationUsingGet (Guid? allocationId)
        {
             ApiResponse<Allocation> localVarResponse = GetAllocationUsingGetWithHttpInfo(allocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an allocation Retrieve the information for an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>ApiResponse of Allocation</returns>
        public ApiResponse< Allocation > GetAllocationUsingGetWithHttpInfo (Guid? allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Retrieve an allocation Retrieve the information for an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> GetAllocationUsingGetAsync (Guid? allocationId)
        {
             ApiResponse<Allocation> localVarResponse = await GetAllocationUsingGetAsyncWithHttpInfo(allocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an allocation Retrieve the information for an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Allocation>> GetAllocationUsingGetAsyncWithHttpInfo (Guid? allocationId)
        {
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->GetAllocationUsingGet");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllocationUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Update an allocation composition Update the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>AllocationComposition</returns>
        public AllocationComposition UpdateAllocationCompositionUsingPut (Object allocationComposition, Guid? allocationCompositionId)
        {
             ApiResponse<AllocationComposition> localVarResponse = UpdateAllocationCompositionUsingPutWithHttpInfo(allocationComposition, allocationCompositionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an allocation composition Update the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>ApiResponse of AllocationComposition</returns>
        public ApiResponse< AllocationComposition > UpdateAllocationCompositionUsingPutWithHttpInfo (Object allocationComposition, Guid? allocationCompositionId)
        {
            // verify the required parameter 'allocationComposition' is set
            if (allocationComposition == null)
                throw new ApiException(400, "Missing required parameter 'allocationComposition' when calling AllocationApi->UpdateAllocationCompositionUsingPut");
            // verify the required parameter 'allocationCompositionId' is set
            if (allocationCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'allocationCompositionId' when calling AllocationApi->UpdateAllocationCompositionUsingPut");

            var localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationCompositionId != null) localVarPathParams.Add("allocation_composition_id", this.Configuration.ApiClient.ParameterToString(allocationCompositionId)); // path parameter
            if (allocationComposition != null && allocationComposition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocationComposition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocationComposition; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAllocationCompositionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationComposition)));
        }

        /// <summary>
        /// Update an allocation composition Update the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of AllocationComposition</returns>
        public async System.Threading.Tasks.Task<AllocationComposition> UpdateAllocationCompositionUsingPutAsync (Object allocationComposition, Guid? allocationCompositionId)
        {
             ApiResponse<AllocationComposition> localVarResponse = await UpdateAllocationCompositionUsingPutAsyncWithHttpInfo(allocationComposition, allocationCompositionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an allocation composition Update the information of an allocation composition record for an allocation.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocationComposition">allocation_composition</param>
        /// <param name="allocationCompositionId">UUID allocation_composition_id</param>
        /// <returns>Task of ApiResponse (AllocationComposition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllocationComposition>> UpdateAllocationCompositionUsingPutAsyncWithHttpInfo (Object allocationComposition, Guid? allocationCompositionId)
        {
            // verify the required parameter 'allocationComposition' is set
            if (allocationComposition == null)
                throw new ApiException(400, "Missing required parameter 'allocationComposition' when calling AllocationApi->UpdateAllocationCompositionUsingPut");
            // verify the required parameter 'allocationCompositionId' is set
            if (allocationCompositionId == null)
                throw new ApiException(400, "Missing required parameter 'allocationCompositionId' when calling AllocationApi->UpdateAllocationCompositionUsingPut");

            var localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationCompositionId != null) localVarPathParams.Add("allocation_composition_id", this.Configuration.ApiClient.ParameterToString(allocationCompositionId)); // path parameter
            if (allocationComposition != null && allocationComposition.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocationComposition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocationComposition; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAllocationCompositionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllocationComposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AllocationComposition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllocationComposition)));
        }

        /// <summary>
        /// Update an allocation Update an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Allocation</returns>
        public Allocation UpdateAllocationUsingPut (Object allocation, Guid? allocationId)
        {
             ApiResponse<Allocation> localVarResponse = UpdateAllocationUsingPutWithHttpInfo(allocation, allocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an allocation Update an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>ApiResponse of Allocation</returns>
        public ApiResponse< Allocation > UpdateAllocationUsingPutWithHttpInfo (Object allocation, Guid? allocationId)
        {
            // verify the required parameter 'allocation' is set
            if (allocation == null)
                throw new ApiException(400, "Missing required parameter 'allocation' when calling AllocationApi->UpdateAllocationUsingPut");
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->UpdateAllocationUsingPut");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (allocation != null && allocation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocation; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAllocationUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

        /// <summary>
        /// Update an allocation Update an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of Allocation</returns>
        public async System.Threading.Tasks.Task<Allocation> UpdateAllocationUsingPutAsync (Object allocation, Guid? allocationId)
        {
             ApiResponse<Allocation> localVarResponse = await UpdateAllocationUsingPutAsyncWithHttpInfo(allocation, allocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an allocation Update an allocation defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocation">allocation</param>
        /// <param name="allocationId">UUID allocation_id</param>
        /// <returns>Task of ApiResponse (Allocation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Allocation>> UpdateAllocationUsingPutAsyncWithHttpInfo (Object allocation, Guid? allocationId)
        {
            // verify the required parameter 'allocation' is set
            if (allocation == null)
                throw new ApiException(400, "Missing required parameter 'allocation' when calling AllocationApi->UpdateAllocationUsingPut");
            // verify the required parameter 'allocationId' is set
            if (allocationId == null)
                throw new ApiException(400, "Missing required parameter 'allocationId' when calling AllocationApi->UpdateAllocationUsingPut");

            var localVarPath = "/nucleus/v1/allocation/{allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocationId != null) localVarPathParams.Add("allocation_id", this.Configuration.ApiClient.ParameterToString(allocationId)); // path parameter
            if (allocation != null && allocation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocation; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAllocationUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Allocation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Allocation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Allocation)));
        }

    }
}
