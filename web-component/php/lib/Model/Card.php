<?php
/**
 * Card
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\admin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Admin API
 *
 * The Hydrogen Admin API
 *
 * OpenAPI spec version: 1.0.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\admin\Model;

use \ArrayAccess;
use \com\hydrogen\admin\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @description Card Object
 * @package  com\hydrogen\admin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Card implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\com\hydrogen\admin\Model\CardAddress[]',
        'business_id' => 'string',
        'card_holder_name' => 'string',
        'card_image' => 'string',
        'card_issuance' => 'string',
        'card_name' => 'string',
        'card_network' => 'string',
        'card_program_id' => 'string',
        'card_type' => 'string',
        'client_id' => 'string',
        'create_date' => '\DateTime',
        'credit_limit' => 'double',
        'currency_code' => 'string',
        'expiry_date' => '\DateTime',
        'fulfillment' => 'string',
        'id' => 'string',
        'institution_id' => 'string',
        'institution_name' => 'string',
        'is_active' => 'bool',
        'is_pin_set' => 'bool',
        'is_primary' => 'bool',
        'is_reloadable' => 'bool',
        'mask' => 'string',
        'metadata' => 'map[string,string]',
        'phone_number' => 'string',
        'portfolio_id' => 'string',
        'prepaid_amount' => 'float',
        'secondary_id' => 'string',
        'status' => 'string',
        'update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'business_id' => 'uuid',
        'card_holder_name' => null,
        'card_image' => null,
        'card_issuance' => null,
        'card_name' => null,
        'card_network' => null,
        'card_program_id' => 'uuid',
        'card_type' => null,
        'client_id' => 'uuid',
        'create_date' => 'date-time',
        'credit_limit' => 'double',
        'currency_code' => null,
        'expiry_date' => 'date',
        'fulfillment' => null,
        'id' => 'uuid',
        'institution_id' => 'uuid',
        'institution_name' => null,
        'is_active' => null,
        'is_pin_set' => null,
        'is_primary' => null,
        'is_reloadable' => null,
        'mask' => null,
        'metadata' => null,
        'phone_number' => null,
        'portfolio_id' => 'uuid',
        'prepaid_amount' => 'float',
        'secondary_id' => null,
        'status' => null,
        'update_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'business_id' => 'business_id',
        'card_holder_name' => 'card_holder_name',
        'card_image' => 'card_image',
        'card_issuance' => 'card_issuance',
        'card_name' => 'card_name',
        'card_network' => 'card_network',
        'card_program_id' => 'card_program_id',
        'card_type' => 'card_type',
        'client_id' => 'client_id',
        'create_date' => 'create_date',
        'credit_limit' => 'credit_limit',
        'currency_code' => 'currency_code',
        'expiry_date' => 'expiry_date',
        'fulfillment' => 'fulfillment',
        'id' => 'id',
        'institution_id' => 'institution_id',
        'institution_name' => 'institution_name',
        'is_active' => 'is_active',
        'is_pin_set' => 'is_pin_set',
        'is_primary' => 'is_primary',
        'is_reloadable' => 'is_reloadable',
        'mask' => 'mask',
        'metadata' => 'metadata',
        'phone_number' => 'phone_number',
        'portfolio_id' => 'portfolio_id',
        'prepaid_amount' => 'prepaid_amount',
        'secondary_id' => 'secondary_id',
        'status' => 'status',
        'update_date' => 'update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'business_id' => 'setBusinessId',
        'card_holder_name' => 'setCardHolderName',
        'card_image' => 'setCardImage',
        'card_issuance' => 'setCardIssuance',
        'card_name' => 'setCardName',
        'card_network' => 'setCardNetwork',
        'card_program_id' => 'setCardProgramId',
        'card_type' => 'setCardType',
        'client_id' => 'setClientId',
        'create_date' => 'setCreateDate',
        'credit_limit' => 'setCreditLimit',
        'currency_code' => 'setCurrencyCode',
        'expiry_date' => 'setExpiryDate',
        'fulfillment' => 'setFulfillment',
        'id' => 'setId',
        'institution_id' => 'setInstitutionId',
        'institution_name' => 'setInstitutionName',
        'is_active' => 'setIsActive',
        'is_pin_set' => 'setIsPinSet',
        'is_primary' => 'setIsPrimary',
        'is_reloadable' => 'setIsReloadable',
        'mask' => 'setMask',
        'metadata' => 'setMetadata',
        'phone_number' => 'setPhoneNumber',
        'portfolio_id' => 'setPortfolioId',
        'prepaid_amount' => 'setPrepaidAmount',
        'secondary_id' => 'setSecondaryId',
        'status' => 'setStatus',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'business_id' => 'getBusinessId',
        'card_holder_name' => 'getCardHolderName',
        'card_image' => 'getCardImage',
        'card_issuance' => 'getCardIssuance',
        'card_name' => 'getCardName',
        'card_network' => 'getCardNetwork',
        'card_program_id' => 'getCardProgramId',
        'card_type' => 'getCardType',
        'client_id' => 'getClientId',
        'create_date' => 'getCreateDate',
        'credit_limit' => 'getCreditLimit',
        'currency_code' => 'getCurrencyCode',
        'expiry_date' => 'getExpiryDate',
        'fulfillment' => 'getFulfillment',
        'id' => 'getId',
        'institution_id' => 'getInstitutionId',
        'institution_name' => 'getInstitutionName',
        'is_active' => 'getIsActive',
        'is_pin_set' => 'getIsPinSet',
        'is_primary' => 'getIsPrimary',
        'is_reloadable' => 'getIsReloadable',
        'mask' => 'getMask',
        'metadata' => 'getMetadata',
        'phone_number' => 'getPhoneNumber',
        'portfolio_id' => 'getPortfolioId',
        'prepaid_amount' => 'getPrepaidAmount',
        'secondary_id' => 'getSecondaryId',
        'status' => 'getStatus',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['business_id'] = isset($data['business_id']) ? $data['business_id'] : null;
        $this->container['card_holder_name'] = isset($data['card_holder_name']) ? $data['card_holder_name'] : null;
        $this->container['card_image'] = isset($data['card_image']) ? $data['card_image'] : null;
        $this->container['card_issuance'] = isset($data['card_issuance']) ? $data['card_issuance'] : null;
        $this->container['card_name'] = isset($data['card_name']) ? $data['card_name'] : null;
        $this->container['card_network'] = isset($data['card_network']) ? $data['card_network'] : null;
        $this->container['card_program_id'] = isset($data['card_program_id']) ? $data['card_program_id'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['fulfillment'] = isset($data['fulfillment']) ? $data['fulfillment'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['institution_id'] = isset($data['institution_id']) ? $data['institution_id'] : null;
        $this->container['institution_name'] = isset($data['institution_name']) ? $data['institution_name'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_pin_set'] = isset($data['is_pin_set']) ? $data['is_pin_set'] : null;
        $this->container['is_primary'] = isset($data['is_primary']) ? $data['is_primary'] : null;
        $this->container['is_reloadable'] = isset($data['is_reloadable']) ? $data['is_reloadable'] : null;
        $this->container['mask'] = isset($data['mask']) ? $data['mask'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['portfolio_id'] = isset($data['portfolio_id']) ? $data['portfolio_id'] : null;
        $this->container['prepaid_amount'] = isset($data['prepaid_amount']) ? $data['prepaid_amount'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_holder_name'] === null) {
            $invalidProperties[] = "'card_holder_name' can't be null";
        }
        if ($this->container['card_issuance'] === null) {
            $invalidProperties[] = "'card_issuance' can't be null";
        }
        if ($this->container['card_name'] === null) {
            $invalidProperties[] = "'card_name' can't be null";
        }
        if ($this->container['card_type'] === null) {
            $invalidProperties[] = "'card_type' can't be null";
        }
        if ($this->container['portfolio_id'] === null) {
            $invalidProperties[] = "'portfolio_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \com\hydrogen\admin\Model\CardAddress[]
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \com\hydrogen\admin\Model\CardAddress[] $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return string
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param string $business_id businessId
     *
     * @return $this
     */
    public function setBusinessId($business_id)
    {
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets card_holder_name
     *
     * @return string
     */
    public function getCardHolderName()
    {
        return $this->container['card_holder_name'];
    }

    /**
     * Sets card_holder_name
     *
     * @param string $card_holder_name cardHolderName
     *
     * @return $this
     */
    public function setCardHolderName($card_holder_name)
    {
        $this->container['card_holder_name'] = $card_holder_name;

        return $this;
    }

    /**
     * Gets card_image
     *
     * @return string
     */
    public function getCardImage()
    {
        return $this->container['card_image'];
    }

    /**
     * Sets card_image
     *
     * @param string $card_image card_image
     *
     * @return $this
     */
    public function setCardImage($card_image)
    {
        $this->container['card_image'] = $card_image;

        return $this;
    }

    /**
     * Gets card_issuance
     *
     * @return string
     */
    public function getCardIssuance()
    {
        return $this->container['card_issuance'];
    }

    /**
     * Sets card_issuance
     *
     * @param string $card_issuance cardIssuance
     *
     * @return $this
     */
    public function setCardIssuance($card_issuance)
    {
        $this->container['card_issuance'] = $card_issuance;

        return $this;
    }

    /**
     * Gets card_name
     *
     * @return string
     */
    public function getCardName()
    {
        return $this->container['card_name'];
    }

    /**
     * Sets card_name
     *
     * @param string $card_name cardName
     *
     * @return $this
     */
    public function setCardName($card_name)
    {
        $this->container['card_name'] = $card_name;

        return $this;
    }

    /**
     * Gets card_network
     *
     * @return string
     */
    public function getCardNetwork()
    {
        return $this->container['card_network'];
    }

    /**
     * Sets card_network
     *
     * @param string $card_network cardNetwork
     *
     * @return $this
     */
    public function setCardNetwork($card_network)
    {
        $this->container['card_network'] = $card_network;

        return $this;
    }

    /**
     * Gets card_program_id
     *
     * @return string
     */
    public function getCardProgramId()
    {
        return $this->container['card_program_id'];
    }

    /**
     * Sets card_program_id
     *
     * @param string $card_program_id cardProgramId
     *
     * @return $this
     */
    public function setCardProgramId($card_program_id)
    {
        $this->container['card_program_id'] = $card_program_id;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type cardType
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id clientId
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit creditLimit
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiryDate
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return string
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param string $fulfillment fulfillment
     *
     * @return $this
     */
    public function setFulfillment($fulfillment)
    {
        $this->container['fulfillment'] = $fulfillment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id institutionId
     *
     * @return $this
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets institution_name
     *
     * @return string
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string $institution_name institutionName
     *
     * @return $this
     */
    public function setInstitutionName($institution_name)
    {
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_pin_set
     *
     * @return bool
     */
    public function getIsPinSet()
    {
        return $this->container['is_pin_set'];
    }

    /**
     * Sets is_pin_set
     *
     * @param bool $is_pin_set is_pin_set
     *
     * @return $this
     */
    public function setIsPinSet($is_pin_set)
    {
        $this->container['is_pin_set'] = $is_pin_set;

        return $this;
    }

    /**
     * Gets is_primary
     *
     * @return bool
     */
    public function getIsPrimary()
    {
        return $this->container['is_primary'];
    }

    /**
     * Sets is_primary
     *
     * @param bool $is_primary is_primary
     *
     * @return $this
     */
    public function setIsPrimary($is_primary)
    {
        $this->container['is_primary'] = $is_primary;

        return $this;
    }

    /**
     * Gets is_reloadable
     *
     * @return bool
     */
    public function getIsReloadable()
    {
        return $this->container['is_reloadable'];
    }

    /**
     * Sets is_reloadable
     *
     * @param bool $is_reloadable is_reloadable
     *
     * @return $this
     */
    public function setIsReloadable($is_reloadable)
    {
        $this->container['is_reloadable'] = $is_reloadable;

        return $this;
    }

    /**
     * Gets mask
     *
     * @return string
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     *
     * @param string $mask mask
     *
     * @return $this
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phoneNumber
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets portfolio_id
     *
     * @return string
     */
    public function getPortfolioId()
    {
        return $this->container['portfolio_id'];
    }

    /**
     * Sets portfolio_id
     *
     * @param string $portfolio_id portfolioId
     *
     * @return $this
     */
    public function setPortfolioId($portfolio_id)
    {
        $this->container['portfolio_id'] = $portfolio_id;

        return $this;
    }

    /**
     * Gets prepaid_amount
     *
     * @return float
     */
    public function getPrepaidAmount()
    {
        return $this->container['prepaid_amount'];
    }

    /**
     * Sets prepaid_amount
     *
     * @param float $prepaid_amount prepaidAmount
     *
     * @return $this
     */
    public function setPrepaidAmount($prepaid_amount)
    {
        $this->container['prepaid_amount'] = $prepaid_amount;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


