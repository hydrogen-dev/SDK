/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import atom_api.ApiException;
import io.swagger.client.model.AccountAllocationPayload;
import io.swagger.client.model.AccountCreatePayload;
import io.swagger.client.model.AccountPermissionPayload;
import io.swagger.client.model.AccountRebalanceBuyOnlyOrderPayload;
import io.swagger.client.model.AccountRebalanceOrderPayload;
import io.swagger.client.model.AccountRebalanceSellOnlyOrderPayload;
import io.swagger.client.model.AccountStagePayload;
import io.swagger.client.model.AccountStatusPayload;
import io.swagger.client.model.AccountSubscribePayload;
import io.swagger.client.model.AccountTransactionResponse;
import io.swagger.client.model.AccountTypePayload;
import io.swagger.client.model.AggregationAccountBalancePayload;
import io.swagger.client.model.AggregationAccountHoldingPayload;
import io.swagger.client.model.AggregationAccountPayload;
import io.swagger.client.model.AggregationAccountTransactionPayload;
import io.swagger.client.model.AllocationAssetSizeResponse;
import io.swagger.client.model.AllocationCompositionPayload;
import io.swagger.client.model.AllocationHoldingsResponse;
import io.swagger.client.model.AllocationPayload;
import io.swagger.client.model.AllocationTransactionResponse;
import io.swagger.client.model.BankLinkPayload;
import io.swagger.client.model.BenchmarkAssetSizeResponse;
import io.swagger.client.model.BenchmarkPayload;
import io.swagger.client.model.BudgetPayload;
import io.swagger.client.model.BulkOrderAccountPayload;
import io.swagger.client.model.BulkOrderClientPayload;
import io.swagger.client.model.BulkOrderFirmPayload;
import io.swagger.client.model.BulkOrderFirmclientaccountResponse;
import io.swagger.client.model.ChangeModelCompositionResponse;
import io.swagger.client.model.ClientAssetSizeResponse;
import io.swagger.client.model.ClientHoldingsResponse;
import io.swagger.client.model.ClientHydroPayload;
import io.swagger.client.model.ClientPayload;
import io.swagger.client.model.ClientResponsePayload;
import io.swagger.client.model.ClientTransactionResponse;
import io.swagger.client.model.CreateAccountResponse;
import io.swagger.client.model.CreateAccountStatusResponse;
import io.swagger.client.model.CreateAggregationAccountBalanceResponse;
import io.swagger.client.model.CreateAggregationAccountHoldingResponse;
import io.swagger.client.model.CreateAggregationAccountResponse;
import io.swagger.client.model.CreateAggregationAccountTransactionResponse;
import io.swagger.client.model.CreateAllocationCompositionResponse;
import io.swagger.client.model.CreateAllocationResponse;
import io.swagger.client.model.CreateBankLinkResponse;
import io.swagger.client.model.CreateBenchmarkResponse;
import io.swagger.client.model.CreateBudgetResponse;
import io.swagger.client.model.CreateClientHydroResponse;
import io.swagger.client.model.CreateClientResponse;
import io.swagger.client.model.CreateClientResponseResponse;
import io.swagger.client.model.CreateDecisionTreeResponse;
import io.swagger.client.model.CreateDepositRequestResponse;
import io.swagger.client.model.CreateFinancialOfferResponse;
import io.swagger.client.model.CreateFundingRequestResponse;
import io.swagger.client.model.CreateGoalResponse;
import io.swagger.client.model.CreateGoalTrackResponse;
import io.swagger.client.model.CreateModelAssetSizeResponse;
import io.swagger.client.model.CreateModelCommentResponse;
import io.swagger.client.model.CreateModelHoldingResponse;
import io.swagger.client.model.CreateModelResponse;
import io.swagger.client.model.CreateModelTransactionResponse;
import io.swagger.client.model.CreateNodeRelationshipResponse;
import io.swagger.client.model.CreateNodeResponse;
import io.swagger.client.model.CreateOrderResponse;
import io.swagger.client.model.CreateOrderStatusResponse;
import io.swagger.client.model.CreateOrderTrackResponse;
import io.swagger.client.model.CreatePortfolioAssetSizeResponse;
import io.swagger.client.model.CreatePortfolioCommentResponse;
import io.swagger.client.model.CreatePortfolioHoldingResponse;
import io.swagger.client.model.CreatePortfolioResponse;
import io.swagger.client.model.CreatePortfolioTransactionResponse;
import io.swagger.client.model.CreateQuestionnaireResponse;
import io.swagger.client.model.CreateScoreResponse;
import io.swagger.client.model.CreateSecurityExclusionResponse;
import io.swagger.client.model.CreateSecurityPriceResponse;
import io.swagger.client.model.CreateSecurityResponse;
import io.swagger.client.model.CreateTransactionCodeResponse;
import io.swagger.client.model.CreateTransferResponse;
import io.swagger.client.model.CreateWithdrawalResponse;
import io.swagger.client.model.DecisionTreePayload;
import io.swagger.client.model.DepositRequestPayload;
import io.swagger.client.model.FinancialOfferPayload;
import io.swagger.client.model.FundingRequestPayload;
import io.swagger.client.model.GetAccountAllocationResponse;
import io.swagger.client.model.GetAccountAssetSizeResponse;
import io.swagger.client.model.GetAccountHoldingResponse;
import io.swagger.client.model.GetAccountPermissionsResponse;
import io.swagger.client.model.GetAccountResponse;
import io.swagger.client.model.GetAccountStageResponse;
import io.swagger.client.model.GetAccountStatusResponse;
import io.swagger.client.model.GetAccountTypeResponse;
import io.swagger.client.model.GetAccountTypeSubresponse;
import io.swagger.client.model.GetAggregationAccountBalanceResponse;
import io.swagger.client.model.GetAggregationAccountHoldingsResponse;
import io.swagger.client.model.GetAggregationAccountTransactionResponse;
import io.swagger.client.model.GetAggregationAccountsResponse;
import io.swagger.client.model.GetAllocationCompositionResponse;
import io.swagger.client.model.GetAllocationResponse;
import io.swagger.client.model.GetBankLinkResponse;
import io.swagger.client.model.GetBenchmarkResponse;
import io.swagger.client.model.GetBudgetResponse;
import io.swagger.client.model.GetBulkOrderResponse;
import io.swagger.client.model.GetClientHydroResponse;
import io.swagger.client.model.GetClientResponse;
import io.swagger.client.model.GetClientResponseResponse;
import io.swagger.client.model.GetDecisionTreeResponse;
import io.swagger.client.model.GetDepositRequestResponse;
import io.swagger.client.model.GetFinancialOfferResponse;
import io.swagger.client.model.GetFundingRequestResponse;
import io.swagger.client.model.GetGoalResponse;
import io.swagger.client.model.GetGoalTrackResponse;
import io.swagger.client.model.GetModelAssetSizeResponse;
import io.swagger.client.model.GetModelCommentResponse;
import io.swagger.client.model.GetModelHoldingResponse;
import io.swagger.client.model.GetModelResponse;
import io.swagger.client.model.GetModelTransactionResponse;
import io.swagger.client.model.GetNodeRelationshipResponse;
import io.swagger.client.model.GetNodeResponse;
import io.swagger.client.model.GetOrderResponse;
import io.swagger.client.model.GetOrderStatusResponse;
import io.swagger.client.model.GetOrderTrackResponse;
import io.swagger.client.model.GetPortfolioAssetSizeResponse;
import io.swagger.client.model.GetPortfolioCommentResponse;
import io.swagger.client.model.GetPortfolioHoldingResponse;
import io.swagger.client.model.GetPortfolioResponse;
import io.swagger.client.model.GetPortfolioTransactionResponse;
import io.swagger.client.model.GetQuestionnaireResponse;
import io.swagger.client.model.GetScoreResponse;
import io.swagger.client.model.GetSecurityExclusionResponse;
import io.swagger.client.model.GetSecurityPriceResponse;
import io.swagger.client.model.GetSecurityResponse;
import io.swagger.client.model.GetTransactionCodeResponse;
import io.swagger.client.model.GetTransferResponse;
import io.swagger.client.model.GetWithdrawalResponse;
import io.swagger.client.model.GoalAssetSizeResponse;
import io.swagger.client.model.GoalHoldingsResponse;
import io.swagger.client.model.GoalPayload;
import io.swagger.client.model.GoalTrackPayload;
import io.swagger.client.model.GoalTransactionsResponse;
import io.swagger.client.model.ModelAssetSizePayload;
import io.swagger.client.model.ModelCommentPayload;
import io.swagger.client.model.ModelCompositionPayload;
import io.swagger.client.model.ModelHoldingPayload;
import io.swagger.client.model.ModelPayload;
import io.swagger.client.model.ModelTransactionPayload;
import io.swagger.client.model.NodePayload;
import io.swagger.client.model.NodeRelationshipPayload;
import io.swagger.client.model.OrderPayload;
import io.swagger.client.model.OrderStatusPayload;
import io.swagger.client.model.OrderTrackPayload;
import io.swagger.client.model.PerformanceResponse;
import io.swagger.client.model.PortfolioAssetSizePayload;
import io.swagger.client.model.PortfolioCommentPayload;
import io.swagger.client.model.PortfolioHoldingPayload;
import io.swagger.client.model.PortfolioPayload;
import io.swagger.client.model.PortfolioRebalanceBuyOnlyOrderPayload;
import io.swagger.client.model.PortfolioRebalanceOrderPayload;
import io.swagger.client.model.PortfolioRebalanceSellOnlyOrderPayload;
import io.swagger.client.model.PortfolioTransactionPayload;
import io.swagger.client.model.QuestionnairePayload;
import io.swagger.client.model.ScorePayload;
import io.swagger.client.model.SecurityExclusionPayload;
import io.swagger.client.model.SecurityPayload;
import io.swagger.client.model.SecurityPricePayload;
import io.swagger.client.model.SellAllAccountPayload;
import io.swagger.client.model.SellAllAccountResponse;
import io.swagger.client.model.SellAllPortfolioPayload;
import io.swagger.client.model.SellAllPortfolioResponse;
import io.swagger.client.model.SpecificAccountAllocationResponse;
import io.swagger.client.model.SpecificAccountPermissionResponse;
import io.swagger.client.model.SpecificAccountResponse;
import io.swagger.client.model.SpecificAccountStageResponse;
import io.swagger.client.model.SpecificAccountStatusResponse;
import io.swagger.client.model.SpecificAggregationAccountBalanceResponse;
import io.swagger.client.model.SpecificAggregationAccountHoldingResponse;
import io.swagger.client.model.SpecificAggregationAccountResponse;
import io.swagger.client.model.SpecificAggregationAccountTransactionResponse;
import io.swagger.client.model.SpecificAllocationCompositionResponse;
import io.swagger.client.model.SpecificAllocationResponse;
import io.swagger.client.model.SpecificBankLinkResponse;
import io.swagger.client.model.SpecificBenchmarkResponse;
import io.swagger.client.model.SpecificBudgetResponse;
import io.swagger.client.model.SpecificClientHydroResponse;
import io.swagger.client.model.SpecificClientResponse;
import io.swagger.client.model.SpecificClientResponseResponse;
import io.swagger.client.model.SpecificDecisionTreeResponse;
import io.swagger.client.model.SpecificDepositRequestResponse;
import io.swagger.client.model.SpecificFinancialOfferResponse;
import io.swagger.client.model.SpecificFundingRequestResponse;
import io.swagger.client.model.SpecificGoalResponse;
import io.swagger.client.model.SpecificGoalTrackResponse;
import io.swagger.client.model.SpecificModelAssetSizeResponse;
import io.swagger.client.model.SpecificModelCommentResponse;
import io.swagger.client.model.SpecificModelHoldingResponse;
import io.swagger.client.model.SpecificModelResponse;
import io.swagger.client.model.SpecificModelTransactionResponse;
import io.swagger.client.model.SpecificNodeRelationshipResponse;
import io.swagger.client.model.SpecificNodeResponse;
import io.swagger.client.model.SpecificOrderResponse;
import io.swagger.client.model.SpecificOrderStatusResponse;
import io.swagger.client.model.SpecificOrderTrackResponse;
import io.swagger.client.model.SpecificPortfolioAssetSizeResponse;
import io.swagger.client.model.SpecificPortfolioCommentResponse;
import io.swagger.client.model.SpecificPortfolioHoldingResponse;
import io.swagger.client.model.SpecificPortfolioResponse;
import io.swagger.client.model.SpecificPortfolioTransactionResponse;
import io.swagger.client.model.SpecificQuestionnaireResponse;
import io.swagger.client.model.SpecificScoreResponse;
import io.swagger.client.model.SpecificSecurityExclusionResponse;
import io.swagger.client.model.SpecificSecurityPriceResponse;
import io.swagger.client.model.SpecificSecurityResponse;
import io.swagger.client.model.SpecificTransactionCodeResponse;
import io.swagger.client.model.SpecificTransferResponse;
import io.swagger.client.model.SpecificWithdrawalResponse;
import io.swagger.client.model.SubscribeAccountResponse;
import io.swagger.client.model.TransactionCodePayload;
import io.swagger.client.model.TransferRequestPayload;
import java.util.UUID;
import io.swagger.client.model.WithdrawalPayload;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NucleusApi
 */
@Ignore
public class NucleusApiTest {

    private final NucleusApi api = new NucleusApi();

    
    /**
     * Delete an account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        UUID accountId = null;
        api.deleteAccount(accountId);

        // TODO: test validations
    }
    
    /**
     * Delete an account allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountAllocationTest() throws ApiException {
        UUID accountAllocationId = null;
        api.deleteAccountAllocation(accountAllocationId);

        // TODO: test validations
    }
    
    /**
     * Delete an account&#39;s permissions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountPermissionTest() throws ApiException {
        UUID accountId = null;
        api.deleteAccountPermission(accountId);

        // TODO: test validations
    }
    
    /**
     * Delete an account stage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountStageTest() throws ApiException {
        UUID stageId = null;
        api.deleteAccountStage(stageId);

        // TODO: test validations
    }
    
    /**
     * Delete an account status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountStatusTest() throws ApiException {
        UUID accountStatusId = null;
        api.deleteAccountStatus(accountStatusId);

        // TODO: test validations
    }
    
    /**
     * Delete an account type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountTypeTest() throws ApiException {
        UUID accountTypeId = null;
        api.deleteAccountType(accountTypeId);

        // TODO: test validations
    }
    
    /**
     * Delete an aggregation account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAggregationAccountTest() throws ApiException {
        UUID aggregationAccountId = null;
        api.deleteAggregationAccount(aggregationAccountId);

        // TODO: test validations
    }
    
    /**
     * Delete an aggregation account balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAggregationAccountBalanceTest() throws ApiException {
        UUID aggregationAccountBalanceId = null;
        api.deleteAggregationAccountBalance(aggregationAccountBalanceId);

        // TODO: test validations
    }
    
    /**
     * Delete an aggregation account holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAggregationAccountHoldingTest() throws ApiException {
        UUID aggregationAccountHoldingId = null;
        api.deleteAggregationAccountHolding(aggregationAccountHoldingId);

        // TODO: test validations
    }
    
    /**
     * Delete an aggregation account transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAggregationAccountTransactionTest() throws ApiException {
        UUID aggregationAccountTransactionId = null;
        api.deleteAggregationAccountTransaction(aggregationAccountTransactionId);

        // TODO: test validations
    }
    
    /**
     * Delete an allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllocationTest() throws ApiException {
        UUID allocationId = null;
        api.deleteAllocation(allocationId);

        // TODO: test validations
    }
    
    /**
     * Delete an allocation composition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllocationCompositionTest() throws ApiException {
        UUID allocationCompositionId = null;
        api.deleteAllocationComposition(allocationCompositionId);

        // TODO: test validations
    }
    
    /**
     * Delete a bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBankLinkTest() throws ApiException {
        UUID bankLinkId = null;
        api.deleteBankLink(bankLinkId);

        // TODO: test validations
    }
    
    /**
     * Delete a benchmark
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBenchmarkTest() throws ApiException {
        UUID benchmarkId = null;
        api.deleteBenchmark(benchmarkId);

        // TODO: test validations
    }
    
    /**
     * Delete a budget
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBudgetTest() throws ApiException {
        UUID budgetId = null;
        api.deleteBudget(budgetId);

        // TODO: test validations
    }
    
    /**
     * Delete a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientTest() throws ApiException {
        UUID clientId = null;
        api.deleteClient(clientId);

        // TODO: test validations
    }
    
    /**
     * Delete a client-hydro relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientHydroTest() throws ApiException {
        UUID clientHydroId = null;
        api.deleteClientHydro(clientHydroId);

        // TODO: test validations
    }
    
    /**
     * Delete a client response
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientResponseTest() throws ApiException {
        UUID clientResponseId = null;
        api.deleteClientResponse(clientResponseId);

        // TODO: test validations
    }
    
    /**
     * Delete a decision tree
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDecisionTreeTest() throws ApiException {
        UUID decisionTreeId = null;
        api.deleteDecisionTree(decisionTreeId);

        // TODO: test validations
    }
    
    /**
     * Delete a deposit request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDepositRequestTest() throws ApiException {
        UUID depositId = null;
        api.deleteDepositRequest(depositId);

        // TODO: test validations
    }
    
    /**
     * Delete a financial offer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFinancialOfferTest() throws ApiException {
        UUID financialOfferId = null;
        api.deleteFinancialOffer(financialOfferId);

        // TODO: test validations
    }
    
    /**
     * Delete a funding request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFundingRequestTest() throws ApiException {
        UUID fundingId = null;
        api.deleteFundingRequest(fundingId);

        // TODO: test validations
    }
    
    /**
     * Delete a goal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGoalTest() throws ApiException {
        UUID goalId = null;
        api.deleteGoal(goalId);

        // TODO: test validations
    }
    
    /**
     * Delete a goal track record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGoalTrackRecordTest() throws ApiException {
        UUID goalTrackId = null;
        api.deleteGoalTrackRecord(goalTrackId);

        // TODO: test validations
    }
    
    /**
     * Delete a model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        UUID modelId = null;
        api.deleteModel(modelId);

        // TODO: test validations
    }
    
    /**
     * Delete a model asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelAssetSizeTest() throws ApiException {
        UUID modelAssetSizeId = null;
        api.deleteModelAssetSize(modelAssetSizeId);

        // TODO: test validations
    }
    
    /**
     * Delete a model commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelCommentTest() throws ApiException {
        UUID modelCommentId = null;
        api.deleteModelComment(modelCommentId);

        // TODO: test validations
    }
    
    /**
     * Delete a model holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelHoldingTest() throws ApiException {
        UUID modelHoldingId = null;
        api.deleteModelHolding(modelHoldingId);

        // TODO: test validations
    }
    
    /**
     * Delete a model transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelTransactionTest() throws ApiException {
        UUID modelTransactionId = null;
        api.deleteModelTransaction(modelTransactionId);

        // TODO: test validations
    }
    
    /**
     * Delete a node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeTest() throws ApiException {
        UUID nodeId = null;
        api.deleteNode(nodeId);

        // TODO: test validations
    }
    
    /**
     * Delete a node relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeRelationshipTest() throws ApiException {
        UUID nodeRelationshipId = null;
        api.deleteNodeRelationship(nodeRelationshipId);

        // TODO: test validations
    }
    
    /**
     * Delete an order record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderRecordTest() throws ApiException {
        UUID orderId = null;
        api.deleteOrderRecord(orderId);

        // TODO: test validations
    }
    
    /**
     * Delete an order status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderStatusTest() throws ApiException {
        UUID orderStatusId = null;
        api.deleteOrderStatus(orderStatusId);

        // TODO: test validations
    }
    
    /**
     * Delete an order tracking record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderTrackingRecordTest() throws ApiException {
        UUID orderTrackId = null;
        api.deleteOrderTrackingRecord(orderTrackId);

        // TODO: test validations
    }
    
    /**
     * Delete a portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioTest() throws ApiException {
        UUID portfolioId = null;
        api.deletePortfolio(portfolioId);

        // TODO: test validations
    }
    
    /**
     * Delete a portfolio asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioAssetSizeTest() throws ApiException {
        UUID portfolioAssetSizeId = null;
        api.deletePortfolioAssetSize(portfolioAssetSizeId);

        // TODO: test validations
    }
    
    /**
     * Delete a portfolio commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioCommentTest() throws ApiException {
        UUID portfolioCommentId = null;
        api.deletePortfolioComment(portfolioCommentId);

        // TODO: test validations
    }
    
    /**
     * Delete a portfolio holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioHoldingTest() throws ApiException {
        UUID portfolioHoldingId = null;
        api.deletePortfolioHolding(portfolioHoldingId);

        // TODO: test validations
    }
    
    /**
     * Delete a portfolio transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioTransactionTest() throws ApiException {
        UUID portfolioTransactionId = null;
        api.deletePortfolioTransaction(portfolioTransactionId);

        // TODO: test validations
    }
    
    /**
     * Delete a questionnaire
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuestionnaireTest() throws ApiException {
        UUID questionnaireId = null;
        api.deleteQuestionnaire(questionnaireId);

        // TODO: test validations
    }
    
    /**
     * Delete a score
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScoreTest() throws ApiException {
        UUID scoreId = null;
        api.deleteScore(scoreId);

        // TODO: test validations
    }
    
    /**
     * Delete a security
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityTest() throws ApiException {
        UUID securityId = null;
        api.deleteSecurity(securityId);

        // TODO: test validations
    }
    
    /**
     * Delete a security exclusion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityExclusionTest() throws ApiException {
        UUID securityExclusionId = null;
        api.deleteSecurityExclusion(securityExclusionId);

        // TODO: test validations
    }
    
    /**
     * Delete a security price
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSecurityPriceTest() throws ApiException {
        UUID securityPriceId = null;
        api.deleteSecurityPrice(securityPriceId);

        // TODO: test validations
    }
    
    /**
     * Delete a transaction code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTransactionCodeTest() throws ApiException {
        UUID transactionCodeId = null;
        api.deleteTransactionCode(transactionCodeId);

        // TODO: test validations
    }
    
    /**
     * Delete a transfer request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTransferRequestTest() throws ApiException {
        UUID transferId = null;
        api.deleteTransferRequest(transferId);

        // TODO: test validations
    }
    
    /**
     * Delete a withdrawal request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWithdrawalRequestTest() throws ApiException {
        UUID withdrawalId = null;
        api.deleteWithdrawalRequest(withdrawalId);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        UUID accountId = null;
        SpecificAccountResponse response = api.getAccount(accountId);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountAllocationTest() throws ApiException {
        UUID accountAllocationId = null;
        SpecificAccountAllocationResponse response = api.getAccountAllocation(accountAllocationId);

        // TODO: test validations
    }
    
    /**
     * List all account allocations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountAllocationsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAccountAllocationResponse response = api.getAccountAllocations(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all account asset sizes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountAssetSizesTest() throws ApiException {
        UUID accountId = null;
        String filter = null;
        GetAccountAssetSizeResponse response = api.getAccountAssetSizes(accountId, filter);

        // TODO: test validations
    }
    
    /**
     * List all account holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountHoldingsTest() throws ApiException {
        UUID accountId = null;
        String filter = null;
        GetAccountHoldingResponse response = api.getAccountHoldings(accountId, filter);

        // TODO: test validations
    }
    
    /**
     * Get account performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPerformanceTest() throws ApiException {
        UUID accountId = null;
        String stat = null;
        PerformanceResponse response = api.getAccountPerformance(accountId, stat);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account&#39;s permission
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPermissionTest() throws ApiException {
        UUID accountId = null;
        SpecificAccountPermissionResponse response = api.getAccountPermission(accountId);

        // TODO: test validations
    }
    
    /**
     * List all account permissions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPermissionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAccountPermissionsResponse response = api.getAccountPermissions(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account stage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStageTest() throws ApiException {
        UUID stageId = null;
        SpecificAccountStageResponse response = api.getAccountStage(stageId);

        // TODO: test validations
    }
    
    /**
     * List all account stages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStagesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAccountStageResponse response = api.getAccountStages(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStatusTest() throws ApiException {
        UUID accountStatusId = null;
        SpecificAccountStatusResponse response = api.getAccountStatus(accountStatusId);

        // TODO: test validations
    }
    
    /**
     * List all account statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStatusesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAccountStatusResponse response = api.getAccountStatuses(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all account transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTransactionsTest() throws ApiException {
        UUID accountId = null;
        String filter = null;
        AccountTransactionResponse response = api.getAccountTransactions(accountId, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an account type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTypeTest() throws ApiException {
        UUID accountTypeId = null;
        GetAccountTypeSubresponse response = api.getAccountType(accountTypeId);

        // TODO: test validations
    }
    
    /**
     * List all account types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTypesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAccountTypeResponse response = api.getAccountTypes(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Get information for all accounts for all clients defined for your firm
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAccountResponse response = api.getAccounts(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an aggregation account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountTest() throws ApiException {
        UUID aggregationAccountId = null;
        SpecificAggregationAccountResponse response = api.getAggregationAccount(aggregationAccountId);

        // TODO: test validations
    }
    
    /**
     * Retrieve an aggregation account balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountBalanceTest() throws ApiException {
        UUID aggregationAccountBalanceId = null;
        SpecificAggregationAccountBalanceResponse response = api.getAggregationAccountBalance(aggregationAccountBalanceId);

        // TODO: test validations
    }
    
    /**
     * List all aggregation account balances
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountBalancesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAggregationAccountBalanceResponse response = api.getAggregationAccountBalances(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an aggregation account holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountHoldingTest() throws ApiException {
        UUID aggregationAccountHoldingId = null;
        SpecificAggregationAccountHoldingResponse response = api.getAggregationAccountHolding(aggregationAccountHoldingId);

        // TODO: test validations
    }
    
    /**
     * List all aggregation account holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountHoldingsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAggregationAccountHoldingsResponse response = api.getAggregationAccountHoldings(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an aggregation account transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountTransactionTest() throws ApiException {
        UUID aggregationAccountTransactionId = null;
        SpecificAggregationAccountTransactionResponse response = api.getAggregationAccountTransaction(aggregationAccountTransactionId);

        // TODO: test validations
    }
    
    /**
     * List all aggregation account transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountTransactionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAggregationAccountTransactionResponse response = api.getAggregationAccountTransactions(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all aggregation accounts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAggregationAccountsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAggregationAccountsResponse response = api.getAggregationAccounts(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationTest() throws ApiException {
        UUID allocationId = null;
        SpecificAllocationResponse response = api.getAllocation(allocationId);

        // TODO: test validations
    }
    
    /**
     * List all allocation asset sizes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationAssetSizesTest() throws ApiException {
        UUID allocationId = null;
        String filter = null;
        AllocationAssetSizeResponse response = api.getAllocationAssetSizes(allocationId, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an allocation composition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationCompositionTest() throws ApiException {
        UUID allocationCompositionId = null;
        SpecificAllocationCompositionResponse response = api.getAllocationComposition(allocationCompositionId);

        // TODO: test validations
    }
    
    /**
     * List all allocation compositions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationCompositionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAllocationCompositionResponse response = api.getAllocationCompositions(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all allocation holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationHoldingsTest() throws ApiException {
        UUID allocationId = null;
        String filter = null;
        AllocationHoldingsResponse response = api.getAllocationHoldings(allocationId, filter);

        // TODO: test validations
    }
    
    /**
     * Get allocation performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationPerformanceTest() throws ApiException {
        UUID allocationId = null;
        String stat = null;
        PerformanceResponse response = api.getAllocationPerformance(allocationId, stat);

        // TODO: test validations
    }
    
    /**
     * List all allocation transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationTransactionsTest() throws ApiException {
        UUID allocationId = null;
        String filter = null;
        AllocationTransactionResponse response = api.getAllocationTransactions(allocationId, filter);

        // TODO: test validations
    }
    
    /**
     * List all allocations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllocationsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetAllocationResponse response = api.getAllocations(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinkTest() throws ApiException {
        UUID bankLinkId = null;
        SpecificBankLinkResponse response = api.getBankLink(bankLinkId);

        // TODO: test validations
    }
    
    /**
     * List all bank links
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBankLinksTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetBankLinkResponse response = api.getBankLinks(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a benchmark
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBenchmarkTest() throws ApiException {
        UUID benchmarkId = null;
        SpecificBenchmarkResponse response = api.getBenchmark(benchmarkId);

        // TODO: test validations
    }
    
    /**
     * List all benchmark asset sizes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBenchmarkAssetSizesTest() throws ApiException {
        UUID benchmarkId = null;
        String filter = null;
        BenchmarkAssetSizeResponse response = api.getBenchmarkAssetSizes(benchmarkId, filter);

        // TODO: test validations
    }
    
    /**
     * Get benchmark performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBenchmarkPerformanceTest() throws ApiException {
        UUID benchmarkId = null;
        String stat = null;
        PerformanceResponse response = api.getBenchmarkPerformance(benchmarkId, stat);

        // TODO: test validations
    }
    
    /**
     * List all benchmarks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBenchmarksTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetBenchmarkResponse response = api.getBenchmarks(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a budget
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBudgetTest() throws ApiException {
        UUID budgetId = null;
        SpecificBudgetResponse response = api.getBudget(budgetId);

        // TODO: test validations
    }
    
    /**
     * List all budgets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBudgetsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetBudgetResponse response = api.getBudgets(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all bulk orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBulkOrdersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetBulkOrderResponse response = api.getBulkOrders(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientTest() throws ApiException {
        UUID clientId = null;
        SpecificClientResponse response = api.getClient(clientId);

        // TODO: test validations
    }
    
    /**
     * List all client asset sizes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientAssetSizesTest() throws ApiException {
        UUID clientId = null;
        String filter = null;
        ClientAssetSizeResponse response = api.getClientAssetSizes(clientId, filter);

        // TODO: test validations
    }
    
    /**
     * List all client holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientHoldingsTest() throws ApiException {
        UUID clientId = null;
        String filter = null;
        ClientHoldingsResponse response = api.getClientHoldings(clientId, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a client-hydro relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientHydroTest() throws ApiException {
        UUID clientHydroId = null;
        SpecificClientHydroResponse response = api.getClientHydro(clientHydroId);

        // TODO: test validations
    }
    
    /**
     * List all client-hydro relationships
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientHydrosTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetClientHydroResponse response = api.getClientHydros(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Get client performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientPerformanceTest() throws ApiException {
        UUID clientId = null;
        String stat = null;
        PerformanceResponse response = api.getClientPerformance(clientId, stat);

        // TODO: test validations
    }
    
    /**
     * Retrieve a client response
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientResponseTest() throws ApiException {
        UUID clientResponseId = null;
        SpecificClientResponseResponse response = api.getClientResponse(clientResponseId);

        // TODO: test validations
    }
    
    /**
     * List all client responses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientResponsesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetClientResponseResponse response = api.getClientResponses(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all client transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientTransactionsTest() throws ApiException {
        UUID clientId = null;
        String filter = null;
        ClientTransactionResponse response = api.getClientTransactions(clientId, filter);

        // TODO: test validations
    }
    
    /**
     * List all clients
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetClientResponse response = api.getClients(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a decision tree
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDecisionTreeTest() throws ApiException {
        UUID decisionTreeId = null;
        SpecificDecisionTreeResponse response = api.getDecisionTree(decisionTreeId);

        // TODO: test validations
    }
    
    /**
     * List all decision trees
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDecisionTreesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetDecisionTreeResponse response = api.getDecisionTrees(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a deposit request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositRequestTest() throws ApiException {
        UUID depositId = null;
        SpecificDepositRequestResponse response = api.getDepositRequest(depositId);

        // TODO: test validations
    }
    
    /**
     * List all deposit requests
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDepositRequestsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetDepositRequestResponse response = api.getDepositRequests(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a financial offer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFinancialOfferTest() throws ApiException {
        UUID financialOfferId = null;
        SpecificFinancialOfferResponse response = api.getFinancialOffer(financialOfferId);

        // TODO: test validations
    }
    
    /**
     * List all financial offers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFinancialOffersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetFinancialOfferResponse response = api.getFinancialOffers(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a funding request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFundingRequestTest() throws ApiException {
        UUID fundingId = null;
        SpecificFundingRequestResponse response = api.getFundingRequest(fundingId);

        // TODO: test validations
    }
    
    /**
     * List all funding requests
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFundingRequestsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetFundingRequestResponse response = api.getFundingRequests(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a goal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalTest() throws ApiException {
        UUID goalId = null;
        SpecificGoalResponse response = api.getGoal(goalId);

        // TODO: test validations
    }
    
    /**
     * List goal asset sizes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalAssetSizesTest() throws ApiException {
        UUID goalId = null;
        UUID clientId = null;
        String filter = null;
        GoalAssetSizeResponse response = api.getGoalAssetSizes(goalId, clientId, filter);

        // TODO: test validations
    }
    
    /**
     * List goal holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalHoldingsTest() throws ApiException {
        UUID goalId = null;
        UUID clientId = null;
        String filter = null;
        GoalHoldingsResponse response = api.getGoalHoldings(goalId, clientId, filter);

        // TODO: test validations
    }
    
    /**
     * Get goal performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalPerformanceTest() throws ApiException {
        UUID goalId = null;
        String stat = null;
        UUID clientId = null;
        PerformanceResponse response = api.getGoalPerformance(goalId, stat, clientId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a goal track record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalTrackRecordTest() throws ApiException {
        UUID goalTrackId = null;
        SpecificGoalTrackResponse response = api.getGoalTrackRecord(goalTrackId);

        // TODO: test validations
    }
    
    /**
     * List all goal track records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalTrackRecordsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetGoalTrackResponse response = api.getGoalTrackRecords(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List goal transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalTransactionsTest() throws ApiException {
        UUID goalId = null;
        UUID clientId = null;
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GoalTransactionsResponse response = api.getGoalTransactions(goalId, clientId, page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all goals
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGoalsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetGoalResponse response = api.getGoals(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelTest() throws ApiException {
        UUID modelId = null;
        SpecificModelResponse response = api.getModel(modelId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a model asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelAssetSizeTest() throws ApiException {
        UUID modelAssetSizeId = null;
        SpecificModelAssetSizeResponse response = api.getModelAssetSize(modelAssetSizeId);

        // TODO: test validations
    }
    
    /**
     * List all model asset sizes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelAssetSizesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetModelAssetSizeResponse response = api.getModelAssetSizes(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a model commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelCommentTest() throws ApiException {
        UUID modelCommentId = null;
        SpecificModelCommentResponse response = api.getModelComment(modelCommentId);

        // TODO: test validations
    }
    
    /**
     * List all model commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelCommentsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetModelCommentResponse response = api.getModelComments(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a model holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelHoldingTest() throws ApiException {
        UUID modelHoldingId = null;
        SpecificModelHoldingResponse response = api.getModelHolding(modelHoldingId);

        // TODO: test validations
    }
    
    /**
     * List all model holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelHoldingsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetModelHoldingResponse response = api.getModelHoldings(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Get model performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelPerformanceTest() throws ApiException {
        UUID modelId = null;
        String stat = null;
        PerformanceResponse response = api.getModelPerformance(modelId, stat);

        // TODO: test validations
    }
    
    /**
     * Retrieve a model transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelTransactionTest() throws ApiException {
        UUID modelTransactionId = null;
        SpecificModelTransactionResponse response = api.getModelTransaction(modelTransactionId);

        // TODO: test validations
    }
    
    /**
     * List all model transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelTransactionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetModelTransactionResponse response = api.getModelTransactions(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetModelResponse response = api.getModels(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeTest() throws ApiException {
        UUID nodeId = null;
        SpecificNodeResponse response = api.getNode(nodeId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a node relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeRelationshipTest() throws ApiException {
        UUID nodeRelationshipId = null;
        SpecificNodeRelationshipResponse response = api.getNodeRelationship(nodeRelationshipId);

        // TODO: test validations
    }
    
    /**
     * List all node relationships
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeRelationshipsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetNodeRelationshipResponse response = api.getNodeRelationships(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all nodes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetNodeResponse response = api.getNodes(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an order record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderRecordTest() throws ApiException {
        UUID orderId = null;
        SpecificOrderResponse response = api.getOrderRecord(orderId);

        // TODO: test validations
    }
    
    /**
     * List all order records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderRecordsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetOrderResponse response = api.getOrderRecords(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an order status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderStatusTest() throws ApiException {
        UUID orderStatusId = null;
        SpecificOrderStatusResponse response = api.getOrderStatus(orderStatusId);

        // TODO: test validations
    }
    
    /**
     * List all order statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderStatusesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetOrderStatusResponse response = api.getOrderStatuses(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve an order tracking record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderTrackingRecordTest() throws ApiException {
        UUID orderTrackId = null;
        SpecificOrderTrackResponse response = api.getOrderTrackingRecord(orderTrackId);

        // TODO: test validations
    }
    
    /**
     * List all order tracking records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderTrackingRecordsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetOrderTrackResponse response = api.getOrderTrackingRecords(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioTest() throws ApiException {
        UUID portfolioId = null;
        SpecificPortfolioResponse response = api.getPortfolio(portfolioId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a portfolio asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioAssetSizeTest() throws ApiException {
        UUID portfolioAssetSizeId = null;
        SpecificPortfolioAssetSizeResponse response = api.getPortfolioAssetSize(portfolioAssetSizeId);

        // TODO: test validations
    }
    
    /**
     * List all portfolio asset sizes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioAssetSizesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetPortfolioAssetSizeResponse response = api.getPortfolioAssetSizes(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a portfolio commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioCommentTest() throws ApiException {
        UUID portfolioCommentId = null;
        SpecificPortfolioCommentResponse response = api.getPortfolioComment(portfolioCommentId);

        // TODO: test validations
    }
    
    /**
     * List all portfolio commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioCommentsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetPortfolioCommentResponse response = api.getPortfolioComments(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a portfolio holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioHoldingTest() throws ApiException {
        UUID portfolioHoldingId = null;
        SpecificPortfolioHoldingResponse response = api.getPortfolioHolding(portfolioHoldingId);

        // TODO: test validations
    }
    
    /**
     * List all portfolio holdings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioHoldingsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetPortfolioHoldingResponse response = api.getPortfolioHoldings(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Get portfolio performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioPerformanceTest() throws ApiException {
        UUID portfolioId = null;
        String stat = null;
        PerformanceResponse response = api.getPortfolioPerformance(portfolioId, stat);

        // TODO: test validations
    }
    
    /**
     * Retrieve a portfolio transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioTransactionTest() throws ApiException {
        UUID portfolioTransactionId = null;
        SpecificPortfolioTransactionResponse response = api.getPortfolioTransaction(portfolioTransactionId);

        // TODO: test validations
    }
    
    /**
     * List all portfolio transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioTransactionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetPortfolioTransactionResponse response = api.getPortfolioTransactions(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all portfolios
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfoliosTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetPortfolioResponse response = api.getPortfolios(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a questionnaire
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionnaireTest() throws ApiException {
        UUID questionnaireId = null;
        SpecificQuestionnaireResponse response = api.getQuestionnaire(questionnaireId);

        // TODO: test validations
    }
    
    /**
     * List all questionnaires
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionnairesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetQuestionnaireResponse response = api.getQuestionnaires(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a score
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScoreTest() throws ApiException {
        UUID scoreId = null;
        SpecificScoreResponse response = api.getScore(scoreId);

        // TODO: test validations
    }
    
    /**
     * List all scores
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScoresTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetScoreResponse response = api.getScores(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all securities
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecuritiesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetSecurityResponse response = api.getSecurities(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a security
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityTest() throws ApiException {
        UUID securityId = null;
        SpecificSecurityResponse response = api.getSecurity(securityId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a security exclusion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityExclusionTest() throws ApiException {
        UUID securityExclusionId = null;
        SpecificSecurityExclusionResponse response = api.getSecurityExclusion(securityExclusionId);

        // TODO: test validations
    }
    
    /**
     * List all security exclusions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityExclusionsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetSecurityExclusionResponse response = api.getSecurityExclusions(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Get security performance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityPerformanceTest() throws ApiException {
        UUID securityId = null;
        String stat = null;
        PerformanceResponse response = api.getSecurityPerformance(securityId, stat);

        // TODO: test validations
    }
    
    /**
     * Retrieve a security price
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityPriceTest() throws ApiException {
        UUID securityPriceId = null;
        SpecificSecurityPriceResponse response = api.getSecurityPrice(securityPriceId);

        // TODO: test validations
    }
    
    /**
     * List all security prices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityPricesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetSecurityPriceResponse response = api.getSecurityPrices(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a transaction code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionCodeTest() throws ApiException {
        UUID transactionCodeId = null;
        SpecificTransactionCodeResponse response = api.getTransactionCode(transactionCodeId);

        // TODO: test validations
    }
    
    /**
     * List all transaction codes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionCodesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetTransactionCodeResponse response = api.getTransactionCodes(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a transfer request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransferRequestTest() throws ApiException {
        UUID transferId = null;
        SpecificTransferResponse response = api.getTransferRequest(transferId);

        // TODO: test validations
    }
    
    /**
     * List all transfer requests
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransferRequestsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetTransferResponse response = api.getTransferRequests(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a withdrawal request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWithdrawalRequestTest() throws ApiException {
        UUID withdrawalId = null;
        SpecificWithdrawalResponse response = api.getWithdrawalRequest(withdrawalId);

        // TODO: test validations
    }
    
    /**
     * List all withdrawal requests
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWithdrawalRequestsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetWithdrawalResponse response = api.getWithdrawalRequests(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Create an account under a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountTest() throws ApiException {
        AccountCreatePayload payload = null;
        CreateAccountResponse response = api.postAccount(payload);

        // TODO: test validations
    }
    
    /**
     * Create an account allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountAllocationTest() throws ApiException {
        AccountAllocationPayload payload = null;
        SpecificAccountAllocationResponse response = api.postAccountAllocation(payload);

        // TODO: test validations
    }
    
    /**
     * Bulk orders for an account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountBulkOrderTest() throws ApiException {
        UUID accountId = null;
        BulkOrderAccountPayload payload = null;
        BulkOrderFirmclientaccountResponse response = api.postAccountBulkOrder(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Create buy-only account rebalance orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountRebalanceBuyOnlyOrderTest() throws ApiException {
        UUID accountId = null;
        AccountRebalanceBuyOnlyOrderPayload payload = null;
        api.postAccountRebalanceBuyOnlyOrder(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Create account rebalance orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountRebalanceOrderTest() throws ApiException {
        UUID accountId = null;
        AccountRebalanceOrderPayload payload = null;
        SpecificOrderTrackResponse response = api.postAccountRebalanceOrder(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Create sell-only account rebalance orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountRebalanceSellOnlyOrderTest() throws ApiException {
        UUID accountId = null;
        AccountRebalanceSellOnlyOrderPayload payload = null;
        api.postAccountRebalanceSellOnlyOrder(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Sell all account order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountSellAllOrderTest() throws ApiException {
        UUID accountId = null;
        SellAllAccountPayload payload = null;
        SellAllAccountResponse response = api.postAccountSellAllOrder(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Create an account stage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountStageTest() throws ApiException {
        AccountStagePayload payload = null;
        SpecificAccountStageResponse response = api.postAccountStage(payload);

        // TODO: test validations
    }
    
    /**
     * Create an account status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountStatusTest() throws ApiException {
        AccountStatusPayload payload = null;
        CreateAccountStatusResponse response = api.postAccountStatus(payload);

        // TODO: test validations
    }
    
    /**
     * Create an account type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAccountTypeTest() throws ApiException {
        AccountTypePayload payload = null;
        GetAccountTypeSubresponse response = api.postAccountType(payload);

        // TODO: test validations
    }
    
    /**
     * Create an aggregation account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAggregationAccountTest() throws ApiException {
        AggregationAccountPayload payload = null;
        CreateAggregationAccountResponse response = api.postAggregationAccount(payload);

        // TODO: test validations
    }
    
    /**
     * Create an aggregation account balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAggregationAccountBalanceTest() throws ApiException {
        AggregationAccountBalancePayload payload = null;
        CreateAggregationAccountBalanceResponse response = api.postAggregationAccountBalance(payload);

        // TODO: test validations
    }
    
    /**
     * Create an aggregation account holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAggregationAccountHoldingTest() throws ApiException {
        AggregationAccountHoldingPayload payload = null;
        CreateAggregationAccountHoldingResponse response = api.postAggregationAccountHolding(payload);

        // TODO: test validations
    }
    
    /**
     * Create an aggregation account transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAggregationAccountTransactionTest() throws ApiException {
        AggregationAccountTransactionPayload payload = null;
        CreateAggregationAccountTransactionResponse response = api.postAggregationAccountTransaction(payload);

        // TODO: test validations
    }
    
    /**
     * Create an allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAllocationTest() throws ApiException {
        AllocationPayload payload = null;
        CreateAllocationResponse response = api.postAllocation(payload);

        // TODO: test validations
    }
    
    /**
     * Create an allocation composition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAllocationCompositionTest() throws ApiException {
        AllocationCompositionPayload payload = null;
        CreateAllocationCompositionResponse response = api.postAllocationComposition(payload);

        // TODO: test validations
    }
    
    /**
     * Create a bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBankLinkTest() throws ApiException {
        BankLinkPayload payload = null;
        CreateBankLinkResponse response = api.postBankLink(payload);

        // TODO: test validations
    }
    
    /**
     * Create a benchmark
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBenchmarkTest() throws ApiException {
        BenchmarkPayload payload = null;
        CreateBenchmarkResponse response = api.postBenchmark(payload);

        // TODO: test validations
    }
    
    /**
     * Create a budget
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBudgetTest() throws ApiException {
        BudgetPayload payload = null;
        CreateBudgetResponse response = api.postBudget(payload);

        // TODO: test validations
    }
    
    /**
     * Bulk orders for your firm
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBulkOrderTest() throws ApiException {
        BulkOrderFirmPayload payload = null;
        BulkOrderFirmclientaccountResponse response = api.postBulkOrder(payload);

        // TODO: test validations
    }
    
    /**
     * Create a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postClientTest() throws ApiException {
        ClientPayload payload = null;
        CreateClientResponse response = api.postClient(payload);

        // TODO: test validations
    }
    
    /**
     * Bulk orders for a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postClientBulkOrderTest() throws ApiException {
        UUID clientId = null;
        BulkOrderClientPayload payload = null;
        BulkOrderFirmclientaccountResponse response = api.postClientBulkOrder(clientId, payload);

        // TODO: test validations
    }
    
    /**
     * Create a client-hydro relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postClientHydroTest() throws ApiException {
        ClientHydroPayload payload = null;
        CreateClientHydroResponse response = api.postClientHydro(payload);

        // TODO: test validations
    }
    
    /**
     * Create a client response
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postClientResponseTest() throws ApiException {
        ClientResponsePayload payload = null;
        CreateClientResponseResponse response = api.postClientResponse(payload);

        // TODO: test validations
    }
    
    /**
     * Create a decision tree
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDecisionTreeTest() throws ApiException {
        DecisionTreePayload payload = null;
        CreateDecisionTreeResponse response = api.postDecisionTree(payload);

        // TODO: test validations
    }
    
    /**
     * Create a deposit request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDepositRequestTest() throws ApiException {
        DepositRequestPayload payload = null;
        CreateDepositRequestResponse response = api.postDepositRequest(payload);

        // TODO: test validations
    }
    
    /**
     * Create a financial offer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFinancialOfferTest() throws ApiException {
        FinancialOfferPayload payload = null;
        CreateFinancialOfferResponse response = api.postFinancialOffer(payload);

        // TODO: test validations
    }
    
    /**
     * Create a funding request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFundingRequestTest() throws ApiException {
        FundingRequestPayload payload = null;
        CreateFundingRequestResponse response = api.postFundingRequest(payload);

        // TODO: test validations
    }
    
    /**
     * Create a goal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGoalTest() throws ApiException {
        GoalPayload payload = null;
        CreateGoalResponse response = api.postGoal(payload);

        // TODO: test validations
    }
    
    /**
     * Create a goal track record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGoalTrackRecordTest() throws ApiException {
        GoalTrackPayload payload = null;
        CreateGoalTrackResponse response = api.postGoalTrackRecord(payload);

        // TODO: test validations
    }
    
    /**
     * Create a model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postModelTest() throws ApiException {
        ModelPayload payload = null;
        CreateModelResponse response = api.postModel(payload);

        // TODO: test validations
    }
    
    /**
     * Create a model asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postModelAssetSizeTest() throws ApiException {
        ModelAssetSizePayload payload = null;
        CreateModelAssetSizeResponse response = api.postModelAssetSize(payload);

        // TODO: test validations
    }
    
    /**
     * Create a model commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postModelCommentTest() throws ApiException {
        ModelCommentPayload payload = null;
        CreateModelCommentResponse response = api.postModelComment(payload);

        // TODO: test validations
    }
    
    /**
     * Create a model holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postModelHoldingTest() throws ApiException {
        ModelHoldingPayload payload = null;
        CreateModelHoldingResponse response = api.postModelHolding(payload);

        // TODO: test validations
    }
    
    /**
     * Create a model transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postModelTransactionTest() throws ApiException {
        ModelTransactionPayload payload = null;
        CreateModelTransactionResponse response = api.postModelTransaction(payload);

        // TODO: test validations
    }
    
    /**
     * Create a node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNodeTest() throws ApiException {
        NodePayload payload = null;
        CreateNodeResponse response = api.postNode(payload);

        // TODO: test validations
    }
    
    /**
     * Create a node relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNodeRelationshipTest() throws ApiException {
        NodeRelationshipPayload payload = null;
        CreateNodeRelationshipResponse response = api.postNodeRelationship(payload);

        // TODO: test validations
    }
    
    /**
     * Create an order record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOrderRecordTest() throws ApiException {
        OrderPayload payload = null;
        CreateOrderResponse response = api.postOrderRecord(payload);

        // TODO: test validations
    }
    
    /**
     * Create an order status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOrderStatusTest() throws ApiException {
        OrderStatusPayload payload = null;
        CreateOrderStatusResponse response = api.postOrderStatus(payload);

        // TODO: test validations
    }
    
    /**
     * Create an order tracking record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOrderTrackingRecordTest() throws ApiException {
        OrderTrackPayload payload = null;
        CreateOrderTrackResponse response = api.postOrderTrackingRecord(payload);

        // TODO: test validations
    }
    
    /**
     * Create a portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioTest() throws ApiException {
        PortfolioPayload payload = null;
        CreatePortfolioResponse response = api.postPortfolio(payload);

        // TODO: test validations
    }
    
    /**
     * Create a portfolio asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioAssetSizeTest() throws ApiException {
        PortfolioAssetSizePayload payload = null;
        CreatePortfolioAssetSizeResponse response = api.postPortfolioAssetSize(payload);

        // TODO: test validations
    }
    
    /**
     * Create a portfolio commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioCommentTest() throws ApiException {
        PortfolioCommentPayload payload = null;
        CreatePortfolioCommentResponse response = api.postPortfolioComment(payload);

        // TODO: test validations
    }
    
    /**
     * Create a portfolio holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioHoldingTest() throws ApiException {
        PortfolioHoldingPayload payload = null;
        CreatePortfolioHoldingResponse response = api.postPortfolioHolding(payload);

        // TODO: test validations
    }
    
    /**
     * Create buy-only portfolio rebalance orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioRebalanceBuyOnlyOrderTest() throws ApiException {
        UUID portfolioId = null;
        PortfolioRebalanceBuyOnlyOrderPayload payload = null;
        PortfolioRebalanceBuyOnlyOrderPayload response = api.postPortfolioRebalanceBuyOnlyOrder(portfolioId, payload);

        // TODO: test validations
    }
    
    /**
     * Create portfolio rebalance orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioRebalanceOrderTest() throws ApiException {
        UUID portfolioId = null;
        PortfolioRebalanceOrderPayload payload = null;
        PortfolioRebalanceOrderPayload response = api.postPortfolioRebalanceOrder(portfolioId, payload);

        // TODO: test validations
    }
    
    /**
     * Create sell-only portfolio rebalance orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioRebalanceSellOnlyOrderTest() throws ApiException {
        UUID portfolioId = null;
        PortfolioRebalanceSellOnlyOrderPayload payload = null;
        PortfolioRebalanceSellOnlyOrderPayload response = api.postPortfolioRebalanceSellOnlyOrder(portfolioId, payload);

        // TODO: test validations
    }
    
    /**
     * Sell all portfolio order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioSellAllOrderTest() throws ApiException {
        UUID portfolioId = null;
        SellAllPortfolioPayload payload = null;
        SellAllPortfolioResponse response = api.postPortfolioSellAllOrder(portfolioId, payload);

        // TODO: test validations
    }
    
    /**
     * Create a portfolio transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortfolioTransactionTest() throws ApiException {
        PortfolioTransactionPayload payload = null;
        CreatePortfolioTransactionResponse response = api.postPortfolioTransaction(payload);

        // TODO: test validations
    }
    
    /**
     * Create a questionnaire
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postQuestionnaireTest() throws ApiException {
        QuestionnairePayload payload = null;
        CreateQuestionnaireResponse response = api.postQuestionnaire(payload);

        // TODO: test validations
    }
    
    /**
     * Create a score
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postScoreTest() throws ApiException {
        ScorePayload payload = null;
        CreateScoreResponse response = api.postScore(payload);

        // TODO: test validations
    }
    
    /**
     * Create a security
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSecurityTest() throws ApiException {
        SecurityPayload payload = null;
        CreateSecurityResponse response = api.postSecurity(payload);

        // TODO: test validations
    }
    
    /**
     * Create a security exclusion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSecurityExclusionTest() throws ApiException {
        SecurityExclusionPayload payload = null;
        CreateSecurityExclusionResponse response = api.postSecurityExclusion(payload);

        // TODO: test validations
    }
    
    /**
     * Create a security price
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSecurityPriceTest() throws ApiException {
        SecurityPricePayload payload = null;
        CreateSecurityPriceResponse response = api.postSecurityPrice(payload);

        // TODO: test validations
    }
    
    /**
     * Create a transaction code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTransactionCodeTest() throws ApiException {
        TransactionCodePayload payload = null;
        CreateTransactionCodeResponse response = api.postTransactionCode(payload);

        // TODO: test validations
    }
    
    /**
     * Create a transfer request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTransferRequestTest() throws ApiException {
        TransferRequestPayload payload = null;
        CreateTransferResponse response = api.postTransferRequest(payload);

        // TODO: test validations
    }
    
    /**
     * Create a withdrawal request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postWithdrawalRequestTest() throws ApiException {
        WithdrawalPayload payload = null;
        CreateWithdrawalResponse response = api.postWithdrawalRequest(payload);

        // TODO: test validations
    }
    
    /**
     * Subscribe an account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeAccountTest() throws ApiException {
        UUID accountId = null;
        AccountSubscribePayload payload = null;
        SubscribeAccountResponse response = api.subscribeAccount(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        UUID accountId = null;
        AccountCreatePayload payload = null;
        SpecificAccountResponse response = api.updateAccount(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an account allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountAllocationTest() throws ApiException {
        UUID accountAllocationId = null;
        AccountAllocationPayload payload = null;
        SpecificAccountAllocationResponse response = api.updateAccountAllocation(accountAllocationId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an account&#39;s permissions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountPermissionTest() throws ApiException {
        UUID accountId = null;
        AccountPermissionPayload payload = null;
        SpecificAccountPermissionResponse response = api.updateAccountPermission(accountId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an account stage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountStageTest() throws ApiException {
        UUID stageId = null;
        AccountStagePayload payload = null;
        SpecificAccountStageResponse response = api.updateAccountStage(stageId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an account status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountStatusTest() throws ApiException {
        UUID accountStatusId = null;
        AccountStatusPayload payload = null;
        SpecificAccountStatusResponse response = api.updateAccountStatus(accountStatusId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an account type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountTypeTest() throws ApiException {
        UUID accountTypeId = null;
        AccountTypePayload payload = null;
        GetAccountTypeSubresponse response = api.updateAccountType(accountTypeId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an aggregation account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAggregationAccountTest() throws ApiException {
        UUID aggregationAccountId = null;
        AggregationAccountPayload payload = null;
        SpecificAggregationAccountResponse response = api.updateAggregationAccount(aggregationAccountId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an aggregation account balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAggregationAccountBalanceTest() throws ApiException {
        UUID aggregationAccountBalanceId = null;
        AggregationAccountBalancePayload payload = null;
        SpecificAggregationAccountBalanceResponse response = api.updateAggregationAccountBalance(aggregationAccountBalanceId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an aggregation account holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAggregationAccountHoldingTest() throws ApiException {
        UUID aggregationAccountHoldingId = null;
        AggregationAccountHoldingPayload payload = null;
        SpecificAggregationAccountHoldingResponse response = api.updateAggregationAccountHolding(aggregationAccountHoldingId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an aggregation account transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAggregationAccountTransactionTest() throws ApiException {
        UUID aggregationAccountTransactionId = null;
        AggregationAccountTransactionPayload payload = null;
        SpecificAggregationAccountTransactionResponse response = api.updateAggregationAccountTransaction(aggregationAccountTransactionId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an allocation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAllocationTest() throws ApiException {
        UUID allocationId = null;
        AllocationPayload payload = null;
        SpecificAllocationResponse response = api.updateAllocation(allocationId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an allocation composition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAllocationCompositionTest() throws ApiException {
        UUID allocationCompositionId = null;
        AllocationCompositionPayload payload = null;
        GetAllocationCompositionResponse response = api.updateAllocationComposition(allocationCompositionId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a bank link
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBankLinkTest() throws ApiException {
        UUID bankLinkId = null;
        BankLinkPayload payload = null;
        SpecificBankLinkResponse response = api.updateBankLink(bankLinkId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a benchmark
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBenchmarkTest() throws ApiException {
        UUID benchmarkId = null;
        BenchmarkPayload payload = null;
        SpecificBenchmarkResponse response = api.updateBenchmark(benchmarkId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a budget
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBudgetTest() throws ApiException {
        UUID budgetId = null;
        BudgetPayload payload = null;
        SpecificBudgetResponse response = api.updateBudget(budgetId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientTest() throws ApiException {
        UUID clientId = null;
        ClientPayload payload = null;
        SpecificClientResponse response = api.updateClient(clientId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a client-hydro relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientHydroTest() throws ApiException {
        UUID clientHydroId = null;
        ClientHydroPayload payload = null;
        SpecificClientHydroResponse response = api.updateClientHydro(clientHydroId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a client response
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientResponseTest() throws ApiException {
        UUID clientResponseId = null;
        ClientResponsePayload payload = null;
        SpecificClientResponseResponse response = api.updateClientResponse(clientResponseId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a decision tree
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDecisionTreeTest() throws ApiException {
        UUID decisionTreeId = null;
        DecisionTreePayload payload = null;
        SpecificDecisionTreeResponse response = api.updateDecisionTree(decisionTreeId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a deposit request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDepositRequestTest() throws ApiException {
        UUID depositId = null;
        DepositRequestPayload payload = null;
        SpecificDepositRequestResponse response = api.updateDepositRequest(depositId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a financial offer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFinancialOfferTest() throws ApiException {
        UUID financialOfferId = null;
        FinancialOfferPayload payload = null;
        SpecificFinancialOfferResponse response = api.updateFinancialOffer(financialOfferId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a funding request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFundingRequestTest() throws ApiException {
        UUID fundingId = null;
        FundingRequestPayload payload = null;
        SpecificFundingRequestResponse response = api.updateFundingRequest(fundingId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a goal
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGoalTest() throws ApiException {
        UUID goalId = null;
        GoalPayload payload = null;
        SpecificGoalResponse response = api.updateGoal(goalId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a goal track record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGoalTrackRecordTest() throws ApiException {
        UUID goalTrackId = null;
        GoalTrackPayload payload = null;
        SpecificGoalTrackResponse response = api.updateGoalTrackRecord(goalTrackId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelTest() throws ApiException {
        UUID modelId = null;
        ModelPayload payload = null;
        SpecificModelResponse response = api.updateModel(modelId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a model asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelAssetSizeTest() throws ApiException {
        UUID modelAssetSizeId = null;
        ModelAssetSizePayload payload = null;
        SpecificModelAssetSizeResponse response = api.updateModelAssetSize(modelAssetSizeId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a model commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelCommentTest() throws ApiException {
        UUID modelCommentId = null;
        ModelCommentPayload payload = null;
        SpecificModelCommentResponse response = api.updateModelComment(modelCommentId, payload);

        // TODO: test validations
    }
    
    /**
     * Change a model composition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelCompositionTest() throws ApiException {
        UUID modelId = null;
        ModelCompositionPayload payload = null;
        ChangeModelCompositionResponse response = api.updateModelComposition(modelId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a model holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelHoldingTest() throws ApiException {
        UUID modelHoldingId = null;
        ModelHoldingPayload payload = null;
        SpecificModelHoldingResponse response = api.updateModelHolding(modelHoldingId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a model transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelTransactionTest() throws ApiException {
        UUID modelTransactionId = null;
        ModelTransactionPayload payload = null;
        SpecificModelTransactionResponse response = api.updateModelTransaction(modelTransactionId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a node
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeTest() throws ApiException {
        UUID nodeId = null;
        NodePayload payload = null;
        SpecificNodeResponse response = api.updateNode(nodeId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a node relationship
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeRelationshipTest() throws ApiException {
        UUID nodeRelationshipId = null;
        NodeRelationshipPayload payload = null;
        SpecificNodeRelationshipResponse response = api.updateNodeRelationship(nodeRelationshipId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an order record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderRecordTest() throws ApiException {
        UUID orderId = null;
        OrderPayload payload = null;
        SpecificOrderResponse response = api.updateOrderRecord(orderId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an order status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderStatusTest() throws ApiException {
        UUID orderStatusId = null;
        OrderStatusPayload payload = null;
        SpecificOrderStatusResponse response = api.updateOrderStatus(orderStatusId, payload);

        // TODO: test validations
    }
    
    /**
     * Update an order tracking record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderTrackingRecordTest() throws ApiException {
        UUID orderTrackId = null;
        OrderTrackPayload payload = null;
        SpecificOrderTrackResponse response = api.updateOrderTrackingRecord(orderTrackId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioTest() throws ApiException {
        UUID portfolioId = null;
        PortfolioPayload payload = null;
        SpecificPortfolioResponse response = api.updatePortfolio(portfolioId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a portfolio asset size
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioAssetSizeTest() throws ApiException {
        UUID portfolioAssetSizeId = null;
        PortfolioAssetSizePayload payload = null;
        SpecificPortfolioAssetSizeResponse response = api.updatePortfolioAssetSize(portfolioAssetSizeId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a portfolio commentary
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioCommentTest() throws ApiException {
        UUID portfolioCommentId = null;
        PortfolioCommentPayload payload = null;
        SpecificPortfolioCommentResponse response = api.updatePortfolioComment(portfolioCommentId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a portfolio holding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioHoldingTest() throws ApiException {
        UUID portfolioHoldingId = null;
        PortfolioHoldingPayload payload = null;
        SpecificPortfolioHoldingResponse response = api.updatePortfolioHolding(portfolioHoldingId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a portfolio transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioTransactionTest() throws ApiException {
        UUID portfolioTransactionId = null;
        PortfolioTransactionPayload payload = null;
        SpecificPortfolioTransactionResponse response = api.updatePortfolioTransaction(portfolioTransactionId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a questionnaire
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuestionnaireTest() throws ApiException {
        UUID questionnaireId = null;
        QuestionnairePayload payload = null;
        SpecificQuestionnaireResponse response = api.updateQuestionnaire(questionnaireId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a score
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateScoreTest() throws ApiException {
        UUID scoreId = null;
        ScorePayload payload = null;
        SpecificScoreResponse response = api.updateScore(scoreId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a security
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSecurityTest() throws ApiException {
        UUID securityId = null;
        SecurityPayload payload = null;
        SpecificSecurityResponse response = api.updateSecurity(securityId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a security exclusion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSecurityExclusionTest() throws ApiException {
        UUID securityExclusionId = null;
        SecurityExclusionPayload payload = null;
        SpecificSecurityExclusionResponse response = api.updateSecurityExclusion(securityExclusionId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a security price
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSecurityPriceTest() throws ApiException {
        UUID securityPriceId = null;
        SecurityPricePayload payload = null;
        SpecificSecurityPriceResponse response = api.updateSecurityPrice(securityPriceId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a transaction code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransactionCodeTest() throws ApiException {
        UUID transactionCodeId = null;
        TransactionCodePayload payload = null;
        SpecificTransactionCodeResponse response = api.updateTransactionCode(transactionCodeId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a transfer request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTransferRequestTest() throws ApiException {
        UUID transferId = null;
        TransferRequestPayload payload = null;
        SpecificTransferResponse response = api.updateTransferRequest(transferId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a withdrawal request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWithdrawalRequestTest() throws ApiException {
        UUID withdrawalId = null;
        WithdrawalPayload payload = null;
        SpecificWithdrawalResponse response = api.updateWithdrawalRequest(withdrawalId, payload);

        // TODO: test validations
    }
    
}
