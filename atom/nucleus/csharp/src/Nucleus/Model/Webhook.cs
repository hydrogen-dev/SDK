/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Webhook Object
    /// </summary>
    [DataContract]
    public partial class Webhook :  IEquatable<Webhook>, IValidatableObject
    {
        /// <summary>
        /// Defines AtomService
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AtomServiceEnum
        {
            
            /// <summary>
            /// Enum Client for value: client
            /// </summary>
            [EnumMember(Value = "client")]
            Client = 1,
            
            /// <summary>
            /// Enum Clientstatus for value: client_status
            /// </summary>
            [EnumMember(Value = "client_status")]
            Clientstatus = 2,
            
            /// <summary>
            /// Enum Accountstatus for value: account_status
            /// </summary>
            [EnumMember(Value = "account_status")]
            Accountstatus = 3,
            
            /// <summary>
            /// Enum Account for value: account
            /// </summary>
            [EnumMember(Value = "account")]
            Account = 4,
            
            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 5,
            
            /// <summary>
            /// Enum Cardstatus for value: card_status
            /// </summary>
            [EnumMember(Value = "card_status")]
            Cardstatus = 6,
            
            /// <summary>
            /// Enum Portfolioassetsize for value: portfolio_asset_size
            /// </summary>
            [EnumMember(Value = "portfolio_asset_size")]
            Portfolioassetsize = 7,
            
            /// <summary>
            /// Enum Portfoliotransaction for value: portfolio_transaction
            /// </summary>
            [EnumMember(Value = "portfolio_transaction")]
            Portfoliotransaction = 8,
            
            /// <summary>
            /// Enum Portfoliotransactionstatus for value: portfolio_transaction_status
            /// </summary>
            [EnumMember(Value = "portfolio_transaction_status")]
            Portfoliotransactionstatus = 9,
            
            /// <summary>
            /// Enum Portfolioholding for value: portfolio_holding
            /// </summary>
            [EnumMember(Value = "portfolio_holding")]
            Portfolioholding = 10,
            
            /// <summary>
            /// Enum Aggregationaccount for value: aggregation_account
            /// </summary>
            [EnumMember(Value = "aggregation_account")]
            Aggregationaccount = 11,
            
            /// <summary>
            /// Enum Aggregationaccountstatus for value: aggregation_account_status
            /// </summary>
            [EnumMember(Value = "aggregation_account_status")]
            Aggregationaccountstatus = 12,
            
            /// <summary>
            /// Enum Notificationclient for value: notification_client
            /// </summary>
            [EnumMember(Value = "notification_client")]
            Notificationclient = 13,
            
            /// <summary>
            /// Enum Aggregationaccountbalance for value: aggregation_account_balance
            /// </summary>
            [EnumMember(Value = "aggregation_account_balance")]
            Aggregationaccountbalance = 14,
            
            /// <summary>
            /// Enum Auditlog for value: audit_log
            /// </summary>
            [EnumMember(Value = "audit_log")]
            Auditlog = 15,
            
            /// <summary>
            /// Enum Supportticket for value: support_ticket
            /// </summary>
            [EnumMember(Value = "support_ticket")]
            Supportticket = 16,
            
            /// <summary>
            /// Enum Featuretrack for value: feature_track
            /// </summary>
            [EnumMember(Value = "feature_track")]
            Featuretrack = 17,
            
            /// <summary>
            /// Enum Aggregationaccounttransaction for value: aggregation_account_transaction
            /// </summary>
            [EnumMember(Value = "aggregation_account_transaction")]
            Aggregationaccounttransaction = 18,
            
            /// <summary>
            /// Enum Aggregationaccounttransactionstatus for value: aggregation_account_transaction_status
            /// </summary>
            [EnumMember(Value = "aggregation_account_transaction_status")]
            Aggregationaccounttransactionstatus = 19,
            
            /// <summary>
            /// Enum Aggregationaccountholding for value: aggregation_account_holding
            /// </summary>
            [EnumMember(Value = "aggregation_account_holding")]
            Aggregationaccountholding = 20,
            
            /// <summary>
            /// Enum Ordertrack for value: order_track
            /// </summary>
            [EnumMember(Value = "order_track")]
            Ordertrack = 21,
            
            /// <summary>
            /// Enum Funding for value: funding
            /// </summary>
            [EnumMember(Value = "funding")]
            Funding = 22,
            
            /// <summary>
            /// Enum Fundingstatus for value: funding_status
            /// </summary>
            [EnumMember(Value = "funding_status")]
            Fundingstatus = 23,
            
            /// <summary>
            /// Enum Budget for value: budget
            /// </summary>
            [EnumMember(Value = "budget")]
            Budget = 24,
            
            /// <summary>
            /// Enum Document for value: document
            /// </summary>
            [EnumMember(Value = "document")]
            Document = 25,
            
            /// <summary>
            /// Enum Clientresponse for value: client_response
            /// </summary>
            [EnumMember(Value = "client_response")]
            Clientresponse = 26,
            
            /// <summary>
            /// Enum Clientverified for value: client_verified
            /// </summary>
            [EnumMember(Value = "client_verified")]
            Clientverified = 27,
            
            /// <summary>
            /// Enum Documentverified for value: document_verified
            /// </summary>
            [EnumMember(Value = "document_verified")]
            Documentverified = 28,
            
            /// <summary>
            /// Enum Banklinkverified for value: bank_link_verified
            /// </summary>
            [EnumMember(Value = "bank_link_verified")]
            Banklinkverified = 29
        }


        /// <summary>
        /// atom_service
        /// </summary>
        /// <value>atom_service</value>
        [DataMember(Name="atom_service", EmitDefaultValue=false)]
        public List<AtomServiceEnum> AtomService { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Webhook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="atomService">atom_service.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="id">id.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="secret">secret.</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="url">url (required).</param>
        public Webhook(List<AtomServiceEnum> atomService = default(List<AtomServiceEnum>), DateTime? createDate = default(DateTime?), Guid? id = default(Guid?), bool? isActive = default(bool?), string secondaryId = default(string), string secret = default(string), DateTime? updateDate = default(DateTime?), string url = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for Webhook and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            this.AtomService = atomService;
            this.CreateDate = createDate;
            this.Id = id;
            this.IsActive = isActive;
            this.SecondaryId = secondaryId;
            this.Secret = secret;
            this.UpdateDate = updateDate;
        }
        

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// isActive
        /// </summary>
        /// <value>isActive</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  AtomService: ").Append(AtomService).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webhook);
        }

        /// <summary>
        /// Returns true if Webhook instances are equal
        /// </summary>
        /// <param name="input">Instance of Webhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AtomService == input.AtomService ||
                    this.AtomService != null &&
                    this.AtomService.SequenceEqual(input.AtomService)
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AtomService != null)
                    hashCode = hashCode * 59 + this.AtomService.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
