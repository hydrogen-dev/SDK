# coding: utf-8

"""
    Hydrogen Electron API

    The Hydrogen Electron API  # noqa: E501

    OpenAPI spec version: 1.3.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from electron_api.configuration import Configuration


class SpendingControlVendorRequestDataVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'control_scope': 'str',
        'control_type': 'str',
        'control_values': 'list[str]',
        'currency_code': 'str',
        'description': 'str',
        'frequency_unit': 'str',
        'is_active': 'bool',
        'limit_value': 'float'
    }

    attribute_map = {
        'client_id': 'client_id',
        'control_scope': 'control_scope',
        'control_type': 'control_type',
        'control_values': 'control_values',
        'currency_code': 'currency_code',
        'description': 'description',
        'frequency_unit': 'frequency_unit',
        'is_active': 'is_active',
        'limit_value': 'limit_value'
    }

    def __init__(self, client_id=None, control_scope=None, control_type=None, control_values=None, currency_code=None, description=None, frequency_unit=None, is_active=None, limit_value=None, _configuration=None):  # noqa: E501
        """SpendingControlVendorRequestDataVO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_id = None
        self._control_scope = None
        self._control_type = None
        self._control_values = None
        self._currency_code = None
        self._description = None
        self._frequency_unit = None
        self._is_active = None
        self._limit_value = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if control_scope is not None:
            self.control_scope = control_scope
        if control_type is not None:
            self.control_type = control_type
        if control_values is not None:
            self.control_values = control_values
        if currency_code is not None:
            self.currency_code = currency_code
        if description is not None:
            self.description = description
        if frequency_unit is not None:
            self.frequency_unit = frequency_unit
        if is_active is not None:
            self.is_active = is_active
        if limit_value is not None:
            self.limit_value = limit_value

    @property
    def client_id(self):
        """Gets the client_id of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The client_id of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SpendingControlVendorRequestDataVO.


        :param client_id: The client_id of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def control_scope(self):
        """Gets the control_scope of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The control_scope of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._control_scope

    @control_scope.setter
    def control_scope(self, control_scope):
        """Sets the control_scope of this SpendingControlVendorRequestDataVO.


        :param control_scope: The control_scope of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._control_scope = control_scope

    @property
    def control_type(self):
        """Gets the control_type of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The control_type of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._control_type

    @control_type.setter
    def control_type(self, control_type):
        """Sets the control_type of this SpendingControlVendorRequestDataVO.


        :param control_type: The control_type of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._control_type = control_type

    @property
    def control_values(self):
        """Gets the control_values of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The control_values of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._control_values

    @control_values.setter
    def control_values(self, control_values):
        """Sets the control_values of this SpendingControlVendorRequestDataVO.


        :param control_values: The control_values of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: list[str]
        """

        self._control_values = control_values

    @property
    def currency_code(self):
        """Gets the currency_code of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The currency_code of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SpendingControlVendorRequestDataVO.


        :param currency_code: The currency_code of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def description(self):
        """Gets the description of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The description of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SpendingControlVendorRequestDataVO.


        :param description: The description of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def frequency_unit(self):
        """Gets the frequency_unit of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The frequency_unit of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: str
        """
        return self._frequency_unit

    @frequency_unit.setter
    def frequency_unit(self, frequency_unit):
        """Sets the frequency_unit of this SpendingControlVendorRequestDataVO.


        :param frequency_unit: The frequency_unit of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: str
        """

        self._frequency_unit = frequency_unit

    @property
    def is_active(self):
        """Gets the is_active of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The is_active of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SpendingControlVendorRequestDataVO.


        :param is_active: The is_active of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def limit_value(self):
        """Gets the limit_value of this SpendingControlVendorRequestDataVO.  # noqa: E501


        :return: The limit_value of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :rtype: float
        """
        return self._limit_value

    @limit_value.setter
    def limit_value(self, limit_value):
        """Sets the limit_value of this SpendingControlVendorRequestDataVO.


        :param limit_value: The limit_value of this SpendingControlVendorRequestDataVO.  # noqa: E501
        :type: float
        """

        self._limit_value = limit_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpendingControlVendorRequestDataVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpendingControlVendorRequestDataVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SpendingControlVendorRequestDataVO):
            return True

        return self.to_dict() != other.to_dict()
