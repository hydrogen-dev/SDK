/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('LifeInsuranceNeedsCalculatorRequest', function() {
      beforeEach(function() {
        instance = new HydrogenProtonApi.LifeInsuranceNeedsCalculatorRequest();
      });

      it('should create an instance of LifeInsuranceNeedsCalculatorRequest', function() {
        // TODO: update the code to test LifeInsuranceNeedsCalculatorRequest
        expect(instance).to.be.a(HydrogenProtonApi.LifeInsuranceNeedsCalculatorRequest);
      });

      it('should have the property clientId (base name: "client_id")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property beneficiaryBequestConfig (base name: "beneficiary_bequest_config")', function() {
        // TODO: update the code to test the property beneficiaryBequestConfig
        expect(instance).to.have.property('beneficiaryBequestConfig');
        // expect(instance.beneficiaryBequestConfig).to.be(expectedValueLiteral);
      });

      it('should have the property educationInflationRate (base name: "education_inflation_rate")', function() {
        // TODO: update the code to test the property educationInflationRate
        expect(instance).to.have.property('educationInflationRate');
        // expect(instance.educationInflationRate).to.be(expectedValueLiteral);
      });

      it('should have the property marginOfError (base name: "margin_of_error")', function() {
        // TODO: update the code to test the property marginOfError
        expect(instance).to.have.property('marginOfError');
        // expect(instance.marginOfError).to.be(expectedValueLiteral);
      });

      it('should have the property liquidAssets (base name: "liquid_assets")', function() {
        // TODO: update the code to test the property liquidAssets
        expect(instance).to.have.property('liquidAssets');
        // expect(instance.liquidAssets).to.be(expectedValueLiteral);
      });

      it('should have the property taxRate (base name: "tax_rate")', function() {
        // TODO: update the code to test the property taxRate
        expect(instance).to.have.property('taxRate');
        // expect(instance.taxRate).to.be(expectedValueLiteral);
      });

      it('should have the property otherDebt (base name: "other_debt")', function() {
        // TODO: update the code to test the property otherDebt
        expect(instance).to.have.property('otherDebt');
        // expect(instance.otherDebt).to.be(expectedValueLiteral);
      });

      it('should have the property endOfLifeExpenses (base name: "end_of_life_expenses")', function() {
        // TODO: update the code to test the property endOfLifeExpenses
        expect(instance).to.have.property('endOfLifeExpenses');
        // expect(instance.endOfLifeExpenses).to.be(expectedValueLiteral);
      });

      it('should have the property existingLifeInsurance (base name: "existing_life_insurance")', function() {
        // TODO: update the code to test the property existingLifeInsurance
        expect(instance).to.have.property('existingLifeInsurance');
        // expect(instance.existingLifeInsurance).to.be(expectedValueLiteral);
      });

      it('should have the property incomeConfig (base name: "income_config")', function() {
        // TODO: update the code to test the property incomeConfig
        expect(instance).to.have.property('incomeConfig');
        // expect(instance.incomeConfig).to.be(expectedValueLiteral);
      });

      it('should have the property mortgageBalance (base name: "mortgage_balance")', function() {
        // TODO: update the code to test the property mortgageBalance
        expect(instance).to.have.property('mortgageBalance');
        // expect(instance.mortgageBalance).to.be(expectedValueLiteral);
      });

      it('should have the property benefitAmountRounding (base name: "benefit_amount_rounding")', function() {
        // TODO: update the code to test the property benefitAmountRounding
        expect(instance).to.have.property('benefitAmountRounding');
        // expect(instance.benefitAmountRounding).to.be(expectedValueLiteral);
      });

      it('should have the property interestRate (base name: "interest_rate")', function() {
        // TODO: update the code to test the property interestRate
        expect(instance).to.have.property('interestRate');
        // expect(instance.interestRate).to.be(expectedValueLiteral);
      });

      it('should have the property childrenEducationConfig (base name: "children_education_config")', function() {
        // TODO: update the code to test the property childrenEducationConfig
        expect(instance).to.have.property('childrenEducationConfig');
        // expect(instance.childrenEducationConfig).to.be(expectedValueLiteral);
      });

      it('should have the property generalInflationRate (base name: "general_inflation_rate")', function() {
        // TODO: update the code to test the property generalInflationRate
        expect(instance).to.have.property('generalInflationRate');
        // expect(instance.generalInflationRate).to.be(expectedValueLiteral);
      });

    });
  });

}));
