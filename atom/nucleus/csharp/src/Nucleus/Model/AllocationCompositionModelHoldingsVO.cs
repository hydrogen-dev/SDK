/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// AllocationCompositionModelHoldingsVO
    /// </summary>
    [DataContract]
    public partial class AllocationCompositionModelHoldingsVO :  IEquatable<AllocationCompositionModelHoldingsVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllocationCompositionModelHoldingsVO" /> class.
        /// </summary>
        /// <param name="modelHoldingDate">modelHoldingDate.</param>
        /// <param name="modelHoldingId">modelHoldingId.</param>
        /// <param name="securityAssetClass">securityAssetClass.</param>
        /// <param name="securityCompositions">securityCompositions.</param>
        /// <param name="securityCountries">securityCountries.</param>
        /// <param name="securityCreateDate">securityCreateDate.</param>
        /// <param name="securityExchange">securityExchange.</param>
        /// <param name="securityId">securityId.</param>
        /// <param name="securityIndustry">securityIndustry.</param>
        /// <param name="securityName">securityName.</param>
        /// <param name="securitySecondaryId">securitySecondaryId.</param>
        /// <param name="securitySector">securitySector.</param>
        /// <param name="securitySecurityClass">securitySecurityClass.</param>
        /// <param name="securityTicker">securityTicker.</param>
        /// <param name="securityUpdateDate">securityUpdateDate.</param>
        public AllocationCompositionModelHoldingsVO(DateTime? modelHoldingDate = default(DateTime?), Guid? modelHoldingId = default(Guid?), string securityAssetClass = default(string), List<SecurityCompositionVO> securityCompositions = default(List<SecurityCompositionVO>), List<SecurityCountryVO> securityCountries = default(List<SecurityCountryVO>), DateTime? securityCreateDate = default(DateTime?), string securityExchange = default(string), Guid? securityId = default(Guid?), string securityIndustry = default(string), string securityName = default(string), string securitySecondaryId = default(string), string securitySector = default(string), string securitySecurityClass = default(string), string securityTicker = default(string), DateTime? securityUpdateDate = default(DateTime?))
        {
            this.ModelHoldingDate = modelHoldingDate;
            this.ModelHoldingId = modelHoldingId;
            this.SecurityAssetClass = securityAssetClass;
            this.SecurityCompositions = securityCompositions;
            this.SecurityCountries = securityCountries;
            this.SecurityCreateDate = securityCreateDate;
            this.SecurityExchange = securityExchange;
            this.SecurityId = securityId;
            this.SecurityIndustry = securityIndustry;
            this.SecurityName = securityName;
            this.SecuritySecondaryId = securitySecondaryId;
            this.SecuritySector = securitySector;
            this.SecuritySecurityClass = securitySecurityClass;
            this.SecurityTicker = securityTicker;
            this.SecurityUpdateDate = securityUpdateDate;
        }
        
        /// <summary>
        /// Gets or Sets ModelHoldingDate
        /// </summary>
        [DataMember(Name="model_holding_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ModelHoldingDate { get; set; }

        /// <summary>
        /// Gets or Sets ModelHoldingId
        /// </summary>
        [DataMember(Name="model_holding_id", EmitDefaultValue=false)]
        public Guid? ModelHoldingId { get; set; }

        /// <summary>
        /// Gets or Sets SecurityAssetClass
        /// </summary>
        [DataMember(Name="security_asset_class", EmitDefaultValue=false)]
        public string SecurityAssetClass { get; set; }

        /// <summary>
        /// Gets or Sets SecurityCompositions
        /// </summary>
        [DataMember(Name="security_compositions", EmitDefaultValue=false)]
        public List<SecurityCompositionVO> SecurityCompositions { get; set; }

        /// <summary>
        /// Gets or Sets SecurityCountries
        /// </summary>
        [DataMember(Name="security_countries", EmitDefaultValue=false)]
        public List<SecurityCountryVO> SecurityCountries { get; set; }

        /// <summary>
        /// Gets or Sets SecurityCreateDate
        /// </summary>
        [DataMember(Name="security_create_date", EmitDefaultValue=false)]
        public DateTime? SecurityCreateDate { get; set; }

        /// <summary>
        /// Gets or Sets SecurityExchange
        /// </summary>
        [DataMember(Name="security_exchange", EmitDefaultValue=false)]
        public string SecurityExchange { get; set; }

        /// <summary>
        /// Gets or Sets SecurityId
        /// </summary>
        [DataMember(Name="security_id", EmitDefaultValue=false)]
        public Guid? SecurityId { get; set; }

        /// <summary>
        /// Gets or Sets SecurityIndustry
        /// </summary>
        [DataMember(Name="security_industry", EmitDefaultValue=false)]
        public string SecurityIndustry { get; set; }

        /// <summary>
        /// Gets or Sets SecurityName
        /// </summary>
        [DataMember(Name="security_name", EmitDefaultValue=false)]
        public string SecurityName { get; set; }

        /// <summary>
        /// Gets or Sets SecuritySecondaryId
        /// </summary>
        [DataMember(Name="security_secondary_id", EmitDefaultValue=false)]
        public string SecuritySecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets SecuritySector
        /// </summary>
        [DataMember(Name="security_sector", EmitDefaultValue=false)]
        public string SecuritySector { get; set; }

        /// <summary>
        /// Gets or Sets SecuritySecurityClass
        /// </summary>
        [DataMember(Name="security_security_class", EmitDefaultValue=false)]
        public string SecuritySecurityClass { get; set; }

        /// <summary>
        /// Gets or Sets SecurityTicker
        /// </summary>
        [DataMember(Name="security_ticker", EmitDefaultValue=false)]
        public string SecurityTicker { get; set; }

        /// <summary>
        /// Gets or Sets SecurityUpdateDate
        /// </summary>
        [DataMember(Name="security_update_date", EmitDefaultValue=false)]
        public DateTime? SecurityUpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllocationCompositionModelHoldingsVO {\n");
            sb.Append("  ModelHoldingDate: ").Append(ModelHoldingDate).Append("\n");
            sb.Append("  ModelHoldingId: ").Append(ModelHoldingId).Append("\n");
            sb.Append("  SecurityAssetClass: ").Append(SecurityAssetClass).Append("\n");
            sb.Append("  SecurityCompositions: ").Append(SecurityCompositions).Append("\n");
            sb.Append("  SecurityCountries: ").Append(SecurityCountries).Append("\n");
            sb.Append("  SecurityCreateDate: ").Append(SecurityCreateDate).Append("\n");
            sb.Append("  SecurityExchange: ").Append(SecurityExchange).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  SecurityIndustry: ").Append(SecurityIndustry).Append("\n");
            sb.Append("  SecurityName: ").Append(SecurityName).Append("\n");
            sb.Append("  SecuritySecondaryId: ").Append(SecuritySecondaryId).Append("\n");
            sb.Append("  SecuritySector: ").Append(SecuritySector).Append("\n");
            sb.Append("  SecuritySecurityClass: ").Append(SecuritySecurityClass).Append("\n");
            sb.Append("  SecurityTicker: ").Append(SecurityTicker).Append("\n");
            sb.Append("  SecurityUpdateDate: ").Append(SecurityUpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllocationCompositionModelHoldingsVO);
        }

        /// <summary>
        /// Returns true if AllocationCompositionModelHoldingsVO instances are equal
        /// </summary>
        /// <param name="input">Instance of AllocationCompositionModelHoldingsVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllocationCompositionModelHoldingsVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ModelHoldingDate == input.ModelHoldingDate ||
                    (this.ModelHoldingDate != null &&
                    this.ModelHoldingDate.Equals(input.ModelHoldingDate))
                ) && 
                (
                    this.ModelHoldingId == input.ModelHoldingId ||
                    (this.ModelHoldingId != null &&
                    this.ModelHoldingId.Equals(input.ModelHoldingId))
                ) && 
                (
                    this.SecurityAssetClass == input.SecurityAssetClass ||
                    (this.SecurityAssetClass != null &&
                    this.SecurityAssetClass.Equals(input.SecurityAssetClass))
                ) && 
                (
                    this.SecurityCompositions == input.SecurityCompositions ||
                    this.SecurityCompositions != null &&
                    this.SecurityCompositions.SequenceEqual(input.SecurityCompositions)
                ) && 
                (
                    this.SecurityCountries == input.SecurityCountries ||
                    this.SecurityCountries != null &&
                    this.SecurityCountries.SequenceEqual(input.SecurityCountries)
                ) && 
                (
                    this.SecurityCreateDate == input.SecurityCreateDate ||
                    (this.SecurityCreateDate != null &&
                    this.SecurityCreateDate.Equals(input.SecurityCreateDate))
                ) && 
                (
                    this.SecurityExchange == input.SecurityExchange ||
                    (this.SecurityExchange != null &&
                    this.SecurityExchange.Equals(input.SecurityExchange))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.SecurityIndustry == input.SecurityIndustry ||
                    (this.SecurityIndustry != null &&
                    this.SecurityIndustry.Equals(input.SecurityIndustry))
                ) && 
                (
                    this.SecurityName == input.SecurityName ||
                    (this.SecurityName != null &&
                    this.SecurityName.Equals(input.SecurityName))
                ) && 
                (
                    this.SecuritySecondaryId == input.SecuritySecondaryId ||
                    (this.SecuritySecondaryId != null &&
                    this.SecuritySecondaryId.Equals(input.SecuritySecondaryId))
                ) && 
                (
                    this.SecuritySector == input.SecuritySector ||
                    (this.SecuritySector != null &&
                    this.SecuritySector.Equals(input.SecuritySector))
                ) && 
                (
                    this.SecuritySecurityClass == input.SecuritySecurityClass ||
                    (this.SecuritySecurityClass != null &&
                    this.SecuritySecurityClass.Equals(input.SecuritySecurityClass))
                ) && 
                (
                    this.SecurityTicker == input.SecurityTicker ||
                    (this.SecurityTicker != null &&
                    this.SecurityTicker.Equals(input.SecurityTicker))
                ) && 
                (
                    this.SecurityUpdateDate == input.SecurityUpdateDate ||
                    (this.SecurityUpdateDate != null &&
                    this.SecurityUpdateDate.Equals(input.SecurityUpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelHoldingDate != null)
                    hashCode = hashCode * 59 + this.ModelHoldingDate.GetHashCode();
                if (this.ModelHoldingId != null)
                    hashCode = hashCode * 59 + this.ModelHoldingId.GetHashCode();
                if (this.SecurityAssetClass != null)
                    hashCode = hashCode * 59 + this.SecurityAssetClass.GetHashCode();
                if (this.SecurityCompositions != null)
                    hashCode = hashCode * 59 + this.SecurityCompositions.GetHashCode();
                if (this.SecurityCountries != null)
                    hashCode = hashCode * 59 + this.SecurityCountries.GetHashCode();
                if (this.SecurityCreateDate != null)
                    hashCode = hashCode * 59 + this.SecurityCreateDate.GetHashCode();
                if (this.SecurityExchange != null)
                    hashCode = hashCode * 59 + this.SecurityExchange.GetHashCode();
                if (this.SecurityId != null)
                    hashCode = hashCode * 59 + this.SecurityId.GetHashCode();
                if (this.SecurityIndustry != null)
                    hashCode = hashCode * 59 + this.SecurityIndustry.GetHashCode();
                if (this.SecurityName != null)
                    hashCode = hashCode * 59 + this.SecurityName.GetHashCode();
                if (this.SecuritySecondaryId != null)
                    hashCode = hashCode * 59 + this.SecuritySecondaryId.GetHashCode();
                if (this.SecuritySector != null)
                    hashCode = hashCode * 59 + this.SecuritySector.GetHashCode();
                if (this.SecuritySecurityClass != null)
                    hashCode = hashCode * 59 + this.SecuritySecurityClass.GetHashCode();
                if (this.SecurityTicker != null)
                    hashCode = hashCode * 59 + this.SecurityTicker.GetHashCode();
                if (this.SecurityUpdateDate != null)
                    hashCode = hashCode * 59 + this.SecurityUpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
