/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenProtonApi.FinancialPlanningApi();
  });

  describe('(package)', function() {
    describe('FinancialPlanningApi', function() {
      describe('educationCalculatorAnnualCost', function() {
        it('should call educationCalculatorAnnualCost successfully', function(done) {
          // TODO: uncomment, update parameter values for educationCalculatorAnnualCost call and complete the assertions
          /*
          var educationCalculatorAnnualCostRequest = new HydrogenProtonApi.EducationCalculatorAnnualCostRequest();
          educationCalculatorAnnualCostRequest.educationInflationRate = 0.0;
          educationCalculatorAnnualCostRequest.decumulationHorizon = 0;
          educationCalculatorAnnualCostRequest.accumulationHorizon = 0;
          educationCalculatorAnnualCostRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          educationCalculatorAnnualCostRequest.taxRate = 0.0;
          educationCalculatorAnnualCostRequest.generalInflationRate = 0.0;
          educationCalculatorAnnualCostRequest.portfolioReturn = 0.0;
          educationCalculatorAnnualCostRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule1();
          educationCalculatorAnnualCostRequest.depositSchedule.depositAmount = 0.0;
          educationCalculatorAnnualCostRequest.depositSchedule.depositFrequencyInterval = "year";
          educationCalculatorAnnualCostRequest.depositSchedule.adjustDepositForInflation = false;
          educationCalculatorAnnualCostRequest.initialBalance = 0.0;
          educationCalculatorAnnualCostRequest.percentOfCostsCovered = 0.0;
          educationCalculatorAnnualCostRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.educationCalculatorAnnualCost(educationCalculatorAnnualCostRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('educationCalculatorDepositAmount', function() {
        it('should call educationCalculatorDepositAmount successfully', function(done) {
          // TODO: uncomment, update parameter values for educationCalculatorDepositAmount call and complete the assertions
          /*
          var educationCalculatorDepositAmountRequest = new HydrogenProtonApi.EducationCalculatorDepositAmountRequest();
          educationCalculatorDepositAmountRequest.educationInflationRate = 0.0;
          educationCalculatorDepositAmountRequest.decumulationHorizon = 0;
          educationCalculatorDepositAmountRequest.accumulationHorizon = 0;
          educationCalculatorDepositAmountRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          educationCalculatorDepositAmountRequest.taxRate = 0.0;
          educationCalculatorDepositAmountRequest.generalInflationRate = 0.0;
          educationCalculatorDepositAmountRequest.totalAnnualCost = 0.0;
          educationCalculatorDepositAmountRequest.portfolioReturn = 0.0;
          educationCalculatorDepositAmountRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule();
          educationCalculatorDepositAmountRequest.depositSchedule.depositFrequencyInterval = "year";
          educationCalculatorDepositAmountRequest.depositSchedule.adjustDepositForInflation = false;
          educationCalculatorDepositAmountRequest.initialBalance = 0.0;
          educationCalculatorDepositAmountRequest.percentOfCostsCovered = 0.0;
          educationCalculatorDepositAmountRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.educationCalculatorDepositAmount(educationCalculatorDepositAmountRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('educationCalculatorPercentCovered', function() {
        it('should call educationCalculatorPercentCovered successfully', function(done) {
          // TODO: uncomment, update parameter values for educationCalculatorPercentCovered call and complete the assertions
          /*
          var educationCalculatorPercentCoveredRequest = new HydrogenProtonApi.EducationCalculatorPercentCoveredRequest();
          educationCalculatorPercentCoveredRequest.educationInflationRate = 0.0;
          educationCalculatorPercentCoveredRequest.decumulationHorizon = 0;
          educationCalculatorPercentCoveredRequest.accumulationHorizon = 0;
          educationCalculatorPercentCoveredRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          educationCalculatorPercentCoveredRequest.taxRate = 0.0;
          educationCalculatorPercentCoveredRequest.generalInflationRate = 0.0;
          educationCalculatorPercentCoveredRequest.totalAnnualCost = 0.0;
          educationCalculatorPercentCoveredRequest.portfolioReturn = 0.0;
          educationCalculatorPercentCoveredRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule1();
          educationCalculatorPercentCoveredRequest.depositSchedule.depositAmount = 0.0;
          educationCalculatorPercentCoveredRequest.depositSchedule.depositFrequencyInterval = "year";
          educationCalculatorPercentCoveredRequest.depositSchedule.adjustDepositForInflation = false;
          educationCalculatorPercentCoveredRequest.initialBalance = 0.0;
          educationCalculatorPercentCoveredRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.educationCalculatorPercentCovered(educationCalculatorPercentCoveredRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mortgageCalculatorDownPayment', function() {
        it('should call mortgageCalculatorDownPayment successfully', function(done) {
          // TODO: uncomment, update parameter values for mortgageCalculatorDownPayment call and complete the assertions
          /*
          var mortgageCalculatorDownPaymentRequest = new HydrogenProtonApi.MortgageCalculatorDownPaymentRequest();
          mortgageCalculatorDownPaymentRequest.periodicPayment = 0.0;
          mortgageCalculatorDownPaymentRequest.homePrice = 0.0;
          mortgageCalculatorDownPaymentRequest.interestRate = 0.0;
          mortgageCalculatorDownPaymentRequest.mortgageTerm = 0;

          instance.mortgageCalculatorDownPayment(mortgageCalculatorDownPaymentRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mortgageCalculatorHomePrice', function() {
        it('should call mortgageCalculatorHomePrice successfully', function(done) {
          // TODO: uncomment, update parameter values for mortgageCalculatorHomePrice call and complete the assertions
          /*
          var mortgageCalculatorHomePriceRequest = new HydrogenProtonApi.MortgageCalculatorHomePriceRequest();
          mortgageCalculatorHomePriceRequest.periodicPayment = 0.0;
          mortgageCalculatorHomePriceRequest.downPayment = 0.0;
          mortgageCalculatorHomePriceRequest.interestRate = 0.0;
          mortgageCalculatorHomePriceRequest.mortgageTerm = 0;

          instance.mortgageCalculatorHomePrice(mortgageCalculatorHomePriceRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('mortgageCalculatorPeriodicPayment', function() {
        it('should call mortgageCalculatorPeriodicPayment successfully', function(done) {
          // TODO: uncomment, update parameter values for mortgageCalculatorPeriodicPayment call and complete the assertions
          /*
          var mortgageCalculatorPeriodicPaymentRequest = new HydrogenProtonApi.MortgageCalculatorPeriodicPaymentRequest();
          mortgageCalculatorPeriodicPaymentRequest.downPayment = 0.0;
          mortgageCalculatorPeriodicPaymentRequest.interestRate = 0.0;
          mortgageCalculatorPeriodicPaymentRequest.homePrice = 0.0;
          mortgageCalculatorPeriodicPaymentRequest.mortgageTerm = 0;

          instance.mortgageCalculatorPeriodicPayment(mortgageCalculatorPeriodicPaymentRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseCalculatorAmount', function() {
        it('should call purchaseCalculatorAmount successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseCalculatorAmount call and complete the assertions
          /*
          var purchaseCalculatorAmountRequest = new HydrogenProtonApi.PurchaseCalculatorAmountRequest();
          purchaseCalculatorAmountRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          purchaseCalculatorAmountRequest.horizonFrequencyInterval = "year";
          purchaseCalculatorAmountRequest.purchaseHorizon = 0;
          purchaseCalculatorAmountRequest.investmentTax = 0.0;
          purchaseCalculatorAmountRequest.portfolioReturn = 0.0;
          purchaseCalculatorAmountRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule1();
          purchaseCalculatorAmountRequest.depositSchedule.depositAmount = 0.0;
          purchaseCalculatorAmountRequest.depositSchedule.depositFrequencyInterval = "year";
          purchaseCalculatorAmountRequest.depositSchedule.adjustDepositForInflation = false;
          purchaseCalculatorAmountRequest.currentSavings = 0.0;
          purchaseCalculatorAmountRequest.inflationRate = 0.0;
          purchaseCalculatorAmountRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.purchaseCalculatorAmount(purchaseCalculatorAmountRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseCalculatorDepositAmount', function() {
        it('should call purchaseCalculatorDepositAmount successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseCalculatorDepositAmount call and complete the assertions
          /*
          var purchaseCalculatorDepositAmountRequest = new HydrogenProtonApi.PurchaseCalculatorDepositAmountRequest();
          purchaseCalculatorDepositAmountRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          purchaseCalculatorDepositAmountRequest.horizonFrequencyInterval = "year";
          purchaseCalculatorDepositAmountRequest.purchaseHorizon = 0;
          purchaseCalculatorDepositAmountRequest.investmentTax = 0.0;
          purchaseCalculatorDepositAmountRequest.portfolioReturn = 0.0;
          purchaseCalculatorDepositAmountRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule();
          purchaseCalculatorDepositAmountRequest.depositSchedule.depositFrequencyInterval = "year";
          purchaseCalculatorDepositAmountRequest.depositSchedule.adjustDepositForInflation = false;
          purchaseCalculatorDepositAmountRequest.currentSavings = 0.0;
          purchaseCalculatorDepositAmountRequest.purchaseAmount = 0.0;
          purchaseCalculatorDepositAmountRequest.inflationRate = 0.0;
          purchaseCalculatorDepositAmountRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.purchaseCalculatorDepositAmount(purchaseCalculatorDepositAmountRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseCalculatorHorizon', function() {
        it('should call purchaseCalculatorHorizon successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseCalculatorHorizon call and complete the assertions
          /*
          var purchaseCalculatorHorizonRequest = new HydrogenProtonApi.PurchaseCalculatorHorizonRequest();
          purchaseCalculatorHorizonRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          purchaseCalculatorHorizonRequest.investmentTax = 0.0;
          purchaseCalculatorHorizonRequest.portfolioReturn = 0.0;
          purchaseCalculatorHorizonRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule1();
          purchaseCalculatorHorizonRequest.depositSchedule.depositAmount = 0.0;
          purchaseCalculatorHorizonRequest.depositSchedule.depositFrequencyInterval = "year";
          purchaseCalculatorHorizonRequest.depositSchedule.adjustDepositForInflation = false;
          purchaseCalculatorHorizonRequest.currentSavings = 0.0;
          purchaseCalculatorHorizonRequest.purchaseAmount = 0.0;
          purchaseCalculatorHorizonRequest.inflationRate = 0.0;
          purchaseCalculatorHorizonRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.purchaseCalculatorHorizon(purchaseCalculatorHorizonRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('retirementCalculatorDepositAmount', function() {
        it('should call retirementCalculatorDepositAmount successfully', function(done) {
          // TODO: uncomment, update parameter values for retirementCalculatorDepositAmount call and complete the assertions
          /*
          var retirementCalculatorDepositAmountRequest = new HydrogenProtonApi.RetirementCalculatorDepositAmountRequest();
          retirementCalculatorDepositAmountRequest.retirementSavings = 0.0;
          retirementCalculatorDepositAmountRequest.currentAge = 0;
          retirementCalculatorDepositAmountRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          retirementCalculatorDepositAmountRequest.retirementIncome = 0.0;
          retirementCalculatorDepositAmountRequest.retirementTax = 0.0;
          retirementCalculatorDepositAmountRequest.deathAge = 0;
          retirementCalculatorDepositAmountRequest.retirementAge = 0;
          retirementCalculatorDepositAmountRequest.percentOfExpensesCovered = 0.0;
          retirementCalculatorDepositAmountRequest.portfolioReturn = 0.0;
          retirementCalculatorDepositAmountRequest.retirementExpenses = 0.0;
          retirementCalculatorDepositAmountRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule();
          retirementCalculatorDepositAmountRequest.depositSchedule.depositFrequencyInterval = "year";
          retirementCalculatorDepositAmountRequest.depositSchedule.adjustDepositForInflation = false;
          retirementCalculatorDepositAmountRequest.inflationRate = 0.0;
          retirementCalculatorDepositAmountRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.retirementCalculatorDepositAmount(retirementCalculatorDepositAmountRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('retirementCalculatorExpenses', function() {
        it('should call retirementCalculatorExpenses successfully', function(done) {
          // TODO: uncomment, update parameter values for retirementCalculatorExpenses call and complete the assertions
          /*
          var retirementCalculatorExpensesRequest = new HydrogenProtonApi.RetirementCalculatorExpensesRequest();
          retirementCalculatorExpensesRequest.retirementSavings = 0.0;
          retirementCalculatorExpensesRequest.currentAge = 0;
          retirementCalculatorExpensesRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          retirementCalculatorExpensesRequest.retirementIncome = 0.0;
          retirementCalculatorExpensesRequest.retirementTax = 0.0;
          retirementCalculatorExpensesRequest.deathAge = 0;
          retirementCalculatorExpensesRequest.retirementAge = 0;
          retirementCalculatorExpensesRequest.percentOfExpensesCovered = 0.0;
          retirementCalculatorExpensesRequest.portfolioReturn = 0.0;
          retirementCalculatorExpensesRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule1();
          retirementCalculatorExpensesRequest.depositSchedule.depositAmount = 0.0;
          retirementCalculatorExpensesRequest.depositSchedule.depositFrequencyInterval = "year";
          retirementCalculatorExpensesRequest.depositSchedule.adjustDepositForInflation = false;
          retirementCalculatorExpensesRequest.inflationRate = 0.0;
          retirementCalculatorExpensesRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.retirementCalculatorExpenses(retirementCalculatorExpensesRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('retirementCalculatorPercentCovered', function() {
        it('should call retirementCalculatorPercentCovered successfully', function(done) {
          // TODO: uncomment, update parameter values for retirementCalculatorPercentCovered call and complete the assertions
          /*
          var retirementCalculatorPercentCoveredRequest = new HydrogenProtonApi.RetirementCalculatorPercentCoveredRequest();
          retirementCalculatorPercentCoveredRequest.retirementSavings = 0.0;
          retirementCalculatorPercentCoveredRequest.currentAge = 0;
          retirementCalculatorPercentCoveredRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          retirementCalculatorPercentCoveredRequest.retirementIncome = 0.0;
          retirementCalculatorPercentCoveredRequest.retirementTax = 0.0;
          retirementCalculatorPercentCoveredRequest.deathAge = 0;
          retirementCalculatorPercentCoveredRequest.retirementAge = 0;
          retirementCalculatorPercentCoveredRequest.portfolioReturn = 0.0;
          retirementCalculatorPercentCoveredRequest.retirementExpenses = 0.0;
          retirementCalculatorPercentCoveredRequest.depositSchedule = new HydrogenProtonApi.CalculatorDepositSchedule1();
          retirementCalculatorPercentCoveredRequest.depositSchedule.depositAmount = 0.0;
          retirementCalculatorPercentCoveredRequest.depositSchedule.depositFrequencyInterval = "year";
          retirementCalculatorPercentCoveredRequest.depositSchedule.adjustDepositForInflation = false;
          retirementCalculatorPercentCoveredRequest.inflationRate = 0.0;
          retirementCalculatorPercentCoveredRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.retirementCalculatorPercentCovered(retirementCalculatorPercentCoveredRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
