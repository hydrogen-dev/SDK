/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BulkOrderFirmPayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BulkOrderFirmPayload'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.BulkOrderSubresponse = factory(root.atom_api.ApiClient, root.atom_api.BulkOrderFirmPayload);
  }
}(this, function(ApiClient, BulkOrderFirmPayload) {
  'use strict';




  /**
   * The BulkOrderSubresponse model module.
   * @module model/BulkOrderSubresponse
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>BulkOrderSubresponse</code>.
   * @alias module:model/BulkOrderSubresponse
   * @class
   * @implements module:model/BulkOrderFirmPayload
   * @param _date {Date} Date for all the orders that should be aggregated together in the bulk order record
   * @param buyTransactionCodeId {String} The ID of the transaction code that will ultimately be used to denote the buy transactions
   * @param sellTransactionCodeId {String} The ID of the transaction code that will ultimately be used to denote the sell transactions
   */
  var exports = function(_date, buyTransactionCodeId, sellTransactionCodeId) {
    var _this = this;

    BulkOrderFirmPayload.call(_this, _date, buyTransactionCodeId, sellTransactionCodeId);



  };

  /**
   * Constructs a <code>BulkOrderSubresponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BulkOrderSubresponse} obj Optional instance to populate.
   * @return {module:model/BulkOrderSubresponse} The populated <code>BulkOrderSubresponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      BulkOrderFirmPayload.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('create_date')) {
        obj['create_date'] = ApiClient.convertToType(data['create_date'], 'String');
      }
      if (data.hasOwnProperty('update_date')) {
        obj['update_date'] = ApiClient.convertToType(data['update_date'], 'String');
      }
    }
    return obj;
  }

  /**
   * ID of the bulk order
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Datetime the bulk order was created
   * @member {String} create_date
   */
  exports.prototype['create_date'] = undefined;
  /**
   * Datetime the bulk order was created
   * @member {String} update_date
   */
  exports.prototype['update_date'] = undefined;

  // Implement BulkOrderFirmPayload interface:
  /**
   * Date for all the orders that should be aggregated together in the bulk order record
   * @member {Date} date
   */
exports.prototype['date'] = undefined;

  /**
   * The ID of the transaction code that will ultimately be used to denote the buy transactions
   * @member {String} buy_transaction_code_id
   */
exports.prototype['buy_transaction_code_id'] = undefined;

  /**
   * The ID of the transaction code that will ultimately be used to denote the sell transactions
   * @member {String} sell_transaction_code_id
   */
exports.prototype['sell_transaction_code_id'] = undefined;



  return exports;
}));


