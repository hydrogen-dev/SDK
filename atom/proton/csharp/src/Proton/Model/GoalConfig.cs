/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// GoalConfig
    /// </summary>
    [DataContract]
    public partial class GoalConfig :  IEquatable<GoalConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoalConfig" /> class.
        /// </summary>
        /// <param name="goalAmount">goalAmount.</param>
        /// <param name="goalInflation">goalInflation (default to 0.0F).</param>
        public GoalConfig(decimal? goalAmount = default(decimal?), float? goalInflation = 0.0F)
        {
            this.GoalAmount = goalAmount;
            // use default value if no "goalInflation" provided
            if (goalInflation == null)
            {
                this.GoalInflation = 0.0F;
            }
            else
            {
                this.GoalInflation = goalInflation;
            }
        }
        
        /// <summary>
        /// Gets or Sets GoalAmount
        /// </summary>
        [DataMember(Name="goal_amount", EmitDefaultValue=false)]
        public decimal? GoalAmount { get; set; }

        /// <summary>
        /// Gets or Sets GoalInflation
        /// </summary>
        [DataMember(Name="goal_inflation", EmitDefaultValue=false)]
        public float? GoalInflation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoalConfig {\n");
            sb.Append("  GoalAmount: ").Append(GoalAmount).Append("\n");
            sb.Append("  GoalInflation: ").Append(GoalInflation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GoalConfig);
        }

        /// <summary>
        /// Returns true if GoalConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of GoalConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoalConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GoalAmount == input.GoalAmount ||
                    (this.GoalAmount != null &&
                    this.GoalAmount.Equals(input.GoalAmount))
                ) && 
                (
                    this.GoalInflation == input.GoalInflation ||
                    (this.GoalInflation != null &&
                    this.GoalInflation.Equals(input.GoalInflation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GoalAmount != null)
                    hashCode = hashCode * 59 + this.GoalAmount.GetHashCode();
                if (this.GoalInflation != null)
                    hashCode = hashCode * 59 + this.GoalInflation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GoalAmount (decimal?) minimum
            if(this.GoalAmount < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GoalAmount, must be a value greater than or equal to 0.", new [] { "GoalAmount" });
            }

            // GoalInflation (float?) minimum
            if(this.GoalInflation < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GoalInflation, must be a value greater than or equal to -1.", new [] { "GoalInflation" });
            }

            yield break;
        }
    }

}
