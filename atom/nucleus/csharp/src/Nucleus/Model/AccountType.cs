/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// AccountType Object
    /// </summary>
    [DataContract]
    public partial class AccountType :  IEquatable<AccountType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountType" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        /// <param name="code">code.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="id">id.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isAsset">isAsset.</param>
        /// <param name="isBusiness">isBusiness.</param>
        /// <param name="isCash">isCash.</param>
        /// <param name="isInvestment">isInvestment.</param>
        /// <param name="isTaxable">isTaxable.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">name (required).</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="subcategory">subcategory.</param>
        /// <param name="updateDate">updateDate.</param>
        public AccountType(string category = default(string), string code = default(string), DateTime? createDate = default(DateTime?), Guid? id = default(Guid?), bool? isActive = default(bool?), bool? isAsset = default(bool?), bool? isBusiness = default(bool?), bool? isCash = default(bool?), bool? isInvestment = default(bool?), bool? isTaxable = default(bool?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string), string secondaryId = default(string), string shortName = default(string), string subcategory = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AccountType and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Category = category;
            this.Code = code;
            this.CreateDate = createDate;
            this.Id = id;
            this.IsActive = isActive;
            this.IsAsset = isAsset;
            this.IsBusiness = isBusiness;
            this.IsCash = isCash;
            this.IsInvestment = isInvestment;
            this.IsTaxable = isTaxable;
            this.Metadata = metadata;
            this.SecondaryId = secondaryId;
            this.ShortName = shortName;
            this.Subcategory = subcategory;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// code
        /// </summary>
        /// <value>code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// isActive
        /// </summary>
        /// <value>isActive</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// isAsset
        /// </summary>
        /// <value>isAsset</value>
        [DataMember(Name="is_asset", EmitDefaultValue=false)]
        public bool? IsAsset { get; set; }

        /// <summary>
        /// isBusiness
        /// </summary>
        /// <value>isBusiness</value>
        [DataMember(Name="is_business", EmitDefaultValue=false)]
        public bool? IsBusiness { get; set; }

        /// <summary>
        /// isCash
        /// </summary>
        /// <value>isCash</value>
        [DataMember(Name="is_cash", EmitDefaultValue=false)]
        public bool? IsCash { get; set; }

        /// <summary>
        /// isInvestment
        /// </summary>
        /// <value>isInvestment</value>
        [DataMember(Name="is_investment", EmitDefaultValue=false)]
        public bool? IsInvestment { get; set; }

        /// <summary>
        /// isTaxable
        /// </summary>
        /// <value>isTaxable</value>
        [DataMember(Name="is_taxable", EmitDefaultValue=false)]
        public bool? IsTaxable { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// shortName
        /// </summary>
        /// <value>shortName</value>
        [DataMember(Name="short_name", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// subcategory
        /// </summary>
        /// <value>subcategory</value>
        [DataMember(Name="subcategory", EmitDefaultValue=false)]
        public string Subcategory { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountType {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsAsset: ").Append(IsAsset).Append("\n");
            sb.Append("  IsBusiness: ").Append(IsBusiness).Append("\n");
            sb.Append("  IsCash: ").Append(IsCash).Append("\n");
            sb.Append("  IsInvestment: ").Append(IsInvestment).Append("\n");
            sb.Append("  IsTaxable: ").Append(IsTaxable).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountType);
        }

        /// <summary>
        /// Returns true if AccountType instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsAsset == input.IsAsset ||
                    (this.IsAsset != null &&
                    this.IsAsset.Equals(input.IsAsset))
                ) && 
                (
                    this.IsBusiness == input.IsBusiness ||
                    (this.IsBusiness != null &&
                    this.IsBusiness.Equals(input.IsBusiness))
                ) && 
                (
                    this.IsCash == input.IsCash ||
                    (this.IsCash != null &&
                    this.IsCash.Equals(input.IsCash))
                ) && 
                (
                    this.IsInvestment == input.IsInvestment ||
                    (this.IsInvestment != null &&
                    this.IsInvestment.Equals(input.IsInvestment))
                ) && 
                (
                    this.IsTaxable == input.IsTaxable ||
                    (this.IsTaxable != null &&
                    this.IsTaxable.Equals(input.IsTaxable))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.Subcategory == input.Subcategory ||
                    (this.Subcategory != null &&
                    this.Subcategory.Equals(input.Subcategory))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsAsset != null)
                    hashCode = hashCode * 59 + this.IsAsset.GetHashCode();
                if (this.IsBusiness != null)
                    hashCode = hashCode * 59 + this.IsBusiness.GetHashCode();
                if (this.IsCash != null)
                    hashCode = hashCode * 59 + this.IsCash.GetHashCode();
                if (this.IsInvestment != null)
                    hashCode = hashCode * 59 + this.IsInvestment.GetHashCode();
                if (this.IsTaxable != null)
                    hashCode = hashCode * 59 + this.IsTaxable.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.Subcategory != null)
                    hashCode = hashCode * 59 + this.Subcategory.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
