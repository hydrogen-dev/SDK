/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenNucleusApi);
  }
}(this, function(expect, HydrogenNucleusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenNucleusApi.AggregationAccountApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AggregationAccountApi', function() {
    describe('getAggregationAccountOverviewByBusinessIdUsingGet', function() {
      it('should call getAggregationAccountOverviewByBusinessIdUsingGet successfully', function(done) {
        // TODO: uncomment, update parameter values for getAggregationAccountOverviewByBusinessIdUsingGet call and complete the assertions
        /*
        var businessId = "businessId_example";
        var opts = {};
        opts.currencyConversion = "currencyConversion_example";

        instance.getAggregationAccountOverviewByBusinessIdUsingGet(businessId, opts, function(error, data, response) {
          if (error) {
            done(error);
            return;
          }
          // TODO: update response assertions
          expect(data).to.be.a(Object);
          // expect(data).to.be(null);

          done();
        });
        */
        // TODO: uncomment and complete method invocation above, then delete this line and the next:
        done();
      });
    });
    describe('createAggregationAccountBalanceBulkUsingPost', function() {
      it('should call createAggregationAccountBalanceBulkUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountBalanceBulkUsingPost
        //instance.createAggregationAccountBalanceBulkUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAggregationAccountBalanceUsingPost', function() {
      it('should call createAggregationAccountBalanceUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountBalanceUsingPost
        //instance.createAggregationAccountBalanceUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAggregationAccountBulkUsingPost', function() {
      it('should call createAggregationAccountBulkUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountBulkUsingPost
        //instance.createAggregationAccountBulkUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAggregationAccountHoldingBulkUsingPost', function() {
      it('should call createAggregationAccountHoldingBulkUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountHoldingBulkUsingPost
        //instance.createAggregationAccountHoldingBulkUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAggregationAccountHoldingUsingPost', function() {
      it('should call createAggregationAccountHoldingUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountHoldingUsingPost
        //instance.createAggregationAccountHoldingUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAggregationAccountTransactionBulkUsingPost', function() {
      it('should call createAggregationAccountTransactionBulkUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountTransactionBulkUsingPost
        //instance.createAggregationAccountTransactionBulkUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAggregationAccountTransactionUsingPost', function() {
      it('should call createAggregationAccountTransactionUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountTransactionUsingPost
        //instance.createAggregationAccountTransactionUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAggregationAccountUsingPost', function() {
      it('should call createAggregationAccountUsingPost successfully', function(done) {
        //uncomment below and update the code to test createAggregationAccountUsingPost
        //instance.createAggregationAccountUsingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAggregationAccountBalanceUsingDelete', function() {
      it('should call deleteAggregationAccountBalanceUsingDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAggregationAccountBalanceUsingDelete
        //instance.deleteAggregationAccountBalanceUsingDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAggregationAccountHoldingUsingDelete', function() {
      it('should call deleteAggregationAccountHoldingUsingDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAggregationAccountHoldingUsingDelete
        //instance.deleteAggregationAccountHoldingUsingDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAggregationAccountTransactionUsingDelete', function() {
      it('should call deleteAggregationAccountTransactionUsingDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAggregationAccountTransactionUsingDelete
        //instance.deleteAggregationAccountTransactionUsingDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAggregationAccountUsingDelete', function() {
      it('should call deleteAggregationAccountUsingDelete successfully', function(done) {
        //uncomment below and update the code to test deleteAggregationAccountUsingDelete
        //instance.deleteAggregationAccountUsingDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountAggregateDataUsingGet', function() {
      it('should call getAggregationAccountAggregateDataUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountAggregateDataUsingGet
        //instance.getAggregationAccountAggregateDataUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountAllUsingGet', function() {
      it('should call getAggregationAccountAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountAllUsingGet
        //instance.getAggregationAccountAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountBalanceAllUsingGet', function() {
      it('should call getAggregationAccountBalanceAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountBalanceAllUsingGet
        //instance.getAggregationAccountBalanceAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountBalanceUsingGet', function() {
      it('should call getAggregationAccountBalanceUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountBalanceUsingGet
        //instance.getAggregationAccountBalanceUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountHoldingAllUsingGet', function() {
      it('should call getAggregationAccountHoldingAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountHoldingAllUsingGet
        //instance.getAggregationAccountHoldingAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountHoldingUsingGet', function() {
      it('should call getAggregationAccountHoldingUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountHoldingUsingGet
        //instance.getAggregationAccountHoldingUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountOverviewUsingGet', function() {
      it('should call getAggregationAccountOverviewUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountOverviewUsingGet
        //instance.getAggregationAccountOverviewUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountTransactionAllUsingGet', function() {
      it('should call getAggregationAccountTransactionAllUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountTransactionAllUsingGet
        //instance.getAggregationAccountTransactionAllUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountTransactionUsingGet', function() {
      it('should call getAggregationAccountTransactionUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountTransactionUsingGet
        //instance.getAggregationAccountTransactionUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAggregationAccountUsingGet', function() {
      it('should call getAggregationAccountUsingGet successfully', function(done) {
        //uncomment below and update the code to test getAggregationAccountUsingGet
        //instance.getAggregationAccountUsingGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAggregationAccountBalanceUsingPut', function() {
      it('should call updateAggregationAccountBalanceUsingPut successfully', function(done) {
        //uncomment below and update the code to test updateAggregationAccountBalanceUsingPut
        //instance.updateAggregationAccountBalanceUsingPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAggregationAccountBulkUsingPut', function() {
      it('should call updateAggregationAccountBulkUsingPut successfully', function(done) {
        //uncomment below and update the code to test updateAggregationAccountBulkUsingPut
        //instance.updateAggregationAccountBulkUsingPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAggregationAccountHoldingBulkUsingPut', function() {
      it('should call updateAggregationAccountHoldingBulkUsingPut successfully', function(done) {
        //uncomment below and update the code to test updateAggregationAccountHoldingBulkUsingPut
        //instance.updateAggregationAccountHoldingBulkUsingPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAggregationAccountHoldingUsingPut', function() {
      it('should call updateAggregationAccountHoldingUsingPut successfully', function(done) {
        //uncomment below and update the code to test updateAggregationAccountHoldingUsingPut
        //instance.updateAggregationAccountHoldingUsingPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAggregationAccountTransactionUsingPut', function() {
      it('should call updateAggregationAccountTransactionUsingPut successfully', function(done) {
        //uncomment below and update the code to test updateAggregationAccountTransactionUsingPut
        //instance.updateAggregationAccountTransactionUsingPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAggregationAccountUsingPut', function() {
      it('should call updateAggregationAccountUsingPut successfully', function(done) {
        //uncomment below and update the code to test updateAggregationAccountUsingPut
        //instance.updateAggregationAccountUsingPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
