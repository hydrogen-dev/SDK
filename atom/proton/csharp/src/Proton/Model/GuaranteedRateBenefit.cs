/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// GuaranteedRateBenefit
    /// </summary>
    [DataContract]
    public partial class GuaranteedRateBenefit :  IEquatable<GuaranteedRateBenefit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GuaranteedRateBenefit" /> class.
        /// </summary>
        /// <param name="maxRate">maxRate.</param>
        /// <param name="endPeriod">endPeriod.</param>
        /// <param name="minRate">minRate (default to 0.0F).</param>
        /// <param name="startPeriod">startPeriod (default to 1).</param>
        public GuaranteedRateBenefit(float? maxRate = default(float?), int? endPeriod = default(int?), float? minRate = 0.0F, int? startPeriod = 1)
        {
            this.MaxRate = maxRate;
            this.EndPeriod = endPeriod;
            // use default value if no "minRate" provided
            if (minRate == null)
            {
                this.MinRate = 0.0F;
            }
            else
            {
                this.MinRate = minRate;
            }
            // use default value if no "startPeriod" provided
            if (startPeriod == null)
            {
                this.StartPeriod = 1;
            }
            else
            {
                this.StartPeriod = startPeriod;
            }
        }
        
        /// <summary>
        /// Gets or Sets MaxRate
        /// </summary>
        [DataMember(Name="max_rate", EmitDefaultValue=false)]
        public float? MaxRate { get; set; }

        /// <summary>
        /// Gets or Sets EndPeriod
        /// </summary>
        [DataMember(Name="end_period", EmitDefaultValue=false)]
        public int? EndPeriod { get; set; }

        /// <summary>
        /// Gets or Sets MinRate
        /// </summary>
        [DataMember(Name="min_rate", EmitDefaultValue=false)]
        public float? MinRate { get; set; }

        /// <summary>
        /// Gets or Sets StartPeriod
        /// </summary>
        [DataMember(Name="start_period", EmitDefaultValue=false)]
        public int? StartPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GuaranteedRateBenefit {\n");
            sb.Append("  MaxRate: ").Append(MaxRate).Append("\n");
            sb.Append("  EndPeriod: ").Append(EndPeriod).Append("\n");
            sb.Append("  MinRate: ").Append(MinRate).Append("\n");
            sb.Append("  StartPeriod: ").Append(StartPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GuaranteedRateBenefit);
        }

        /// <summary>
        /// Returns true if GuaranteedRateBenefit instances are equal
        /// </summary>
        /// <param name="input">Instance of GuaranteedRateBenefit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GuaranteedRateBenefit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxRate == input.MaxRate ||
                    (this.MaxRate != null &&
                    this.MaxRate.Equals(input.MaxRate))
                ) && 
                (
                    this.EndPeriod == input.EndPeriod ||
                    (this.EndPeriod != null &&
                    this.EndPeriod.Equals(input.EndPeriod))
                ) && 
                (
                    this.MinRate == input.MinRate ||
                    (this.MinRate != null &&
                    this.MinRate.Equals(input.MinRate))
                ) && 
                (
                    this.StartPeriod == input.StartPeriod ||
                    (this.StartPeriod != null &&
                    this.StartPeriod.Equals(input.StartPeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxRate != null)
                    hashCode = hashCode * 59 + this.MaxRate.GetHashCode();
                if (this.EndPeriod != null)
                    hashCode = hashCode * 59 + this.EndPeriod.GetHashCode();
                if (this.MinRate != null)
                    hashCode = hashCode * 59 + this.MinRate.GetHashCode();
                if (this.StartPeriod != null)
                    hashCode = hashCode * 59 + this.StartPeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxRate (float?) minimum
            if(this.MaxRate < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxRate, must be a value greater than or equal to -1.", new [] { "MaxRate" });
            }

            // EndPeriod (int?) minimum
            if(this.EndPeriod < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndPeriod, must be a value greater than or equal to 1.", new [] { "EndPeriod" });
            }

            // MinRate (float?) minimum
            if(this.MinRate < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinRate, must be a value greater than or equal to -1.", new [] { "MinRate" });
            }

            // StartPeriod (int?) minimum
            if(this.StartPeriod < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartPeriod, must be a value greater than or equal to 1.", new [] { "StartPeriod" });
            }

            yield break;
        }
    }

}
