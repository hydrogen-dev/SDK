<?php
/**
 * SpendingAnalysisRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * SpendingAnalysisRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpendingAnalysisRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'spendingAnalysisRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_scope' => 'string[]',
        'account_ids' => 'string[]',
        'business_ids' => 'string[]',
        'card_ids' => 'string[]',
        'show_by_merchant' => 'bool',
        'show_by_period' => 'bool',
        'only_cleansed' => 'bool',
        'frequency' => 'int',
        'end_date' => '\DateTime',
        'as_of_date' => '\DateTime',
        'transaction_category_scope' => 'string[]',
        'start_date' => '\DateTime',
        'card_status_scope' => 'string[]',
        'only_active_clients' => 'bool',
        'lookback_periods' => 'int',
        'frequency_unit' => 'string',
        'household_ids' => 'string[]',
        'aggregation_account_ids' => 'string[]',
        'currency_code' => 'string',
        'client_ids' => 'string[]',
        'scope' => 'string',
        'currency_conversion' => 'string',
        'transaction_status_scope' => 'string[]',
        'show_by_category' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_scope' => 'uuid',
        'account_ids' => 'uuid',
        'business_ids' => 'uuid',
        'card_ids' => 'uuid',
        'show_by_merchant' => null,
        'show_by_period' => null,
        'only_cleansed' => null,
        'frequency' => 'int32',
        'end_date' => 'date',
        'as_of_date' => 'date',
        'transaction_category_scope' => 'uuid',
        'start_date' => 'date',
        'card_status_scope' => null,
        'only_active_clients' => null,
        'lookback_periods' => 'int32',
        'frequency_unit' => null,
        'household_ids' => 'uuid',
        'aggregation_account_ids' => 'uuid',
        'currency_code' => null,
        'client_ids' => 'uuid',
        'scope' => null,
        'currency_conversion' => null,
        'transaction_status_scope' => null,
        'show_by_category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_scope' => 'merchant_scope',
        'account_ids' => 'account_ids',
        'business_ids' => 'business_ids',
        'card_ids' => 'card_ids',
        'show_by_merchant' => 'show_by_merchant',
        'show_by_period' => 'show_by_period',
        'only_cleansed' => 'only_cleansed',
        'frequency' => 'frequency',
        'end_date' => 'end_date',
        'as_of_date' => 'as_of_date',
        'transaction_category_scope' => 'transaction_category_scope',
        'start_date' => 'start_date',
        'card_status_scope' => 'card_status_scope',
        'only_active_clients' => 'only_active_clients',
        'lookback_periods' => 'lookback_periods',
        'frequency_unit' => 'frequency_unit',
        'household_ids' => 'household_ids',
        'aggregation_account_ids' => 'aggregation_account_ids',
        'currency_code' => 'currency_code',
        'client_ids' => 'client_ids',
        'scope' => 'scope',
        'currency_conversion' => 'currency_conversion',
        'transaction_status_scope' => 'transaction_status_scope',
        'show_by_category' => 'show_by_category'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_scope' => 'setMerchantScope',
        'account_ids' => 'setAccountIds',
        'business_ids' => 'setBusinessIds',
        'card_ids' => 'setCardIds',
        'show_by_merchant' => 'setShowByMerchant',
        'show_by_period' => 'setShowByPeriod',
        'only_cleansed' => 'setOnlyCleansed',
        'frequency' => 'setFrequency',
        'end_date' => 'setEndDate',
        'as_of_date' => 'setAsOfDate',
        'transaction_category_scope' => 'setTransactionCategoryScope',
        'start_date' => 'setStartDate',
        'card_status_scope' => 'setCardStatusScope',
        'only_active_clients' => 'setOnlyActiveClients',
        'lookback_periods' => 'setLookbackPeriods',
        'frequency_unit' => 'setFrequencyUnit',
        'household_ids' => 'setHouseholdIds',
        'aggregation_account_ids' => 'setAggregationAccountIds',
        'currency_code' => 'setCurrencyCode',
        'client_ids' => 'setClientIds',
        'scope' => 'setScope',
        'currency_conversion' => 'setCurrencyConversion',
        'transaction_status_scope' => 'setTransactionStatusScope',
        'show_by_category' => 'setShowByCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_scope' => 'getMerchantScope',
        'account_ids' => 'getAccountIds',
        'business_ids' => 'getBusinessIds',
        'card_ids' => 'getCardIds',
        'show_by_merchant' => 'getShowByMerchant',
        'show_by_period' => 'getShowByPeriod',
        'only_cleansed' => 'getOnlyCleansed',
        'frequency' => 'getFrequency',
        'end_date' => 'getEndDate',
        'as_of_date' => 'getAsOfDate',
        'transaction_category_scope' => 'getTransactionCategoryScope',
        'start_date' => 'getStartDate',
        'card_status_scope' => 'getCardStatusScope',
        'only_active_clients' => 'getOnlyActiveClients',
        'lookback_periods' => 'getLookbackPeriods',
        'frequency_unit' => 'getFrequencyUnit',
        'household_ids' => 'getHouseholdIds',
        'aggregation_account_ids' => 'getAggregationAccountIds',
        'currency_code' => 'getCurrencyCode',
        'client_ids' => 'getClientIds',
        'scope' => 'getScope',
        'currency_conversion' => 'getCurrencyConversion',
        'transaction_status_scope' => 'getTransactionStatusScope',
        'show_by_category' => 'getShowByCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FREQUENCY_UNIT_DAILY = 'daily';
    const FREQUENCY_UNIT_WEEKLY = 'weekly';
    const FREQUENCY_UNIT_BI_WEEKLY = 'bi-weekly';
    const FREQUENCY_UNIT_MONTHLY = 'monthly';
    const FREQUENCY_UNIT_QUARTERLY = 'quarterly';
    const FREQUENCY_UNIT_ANNUALLY = 'annually';
    const SCOPE_ALL = 'all';
    const SCOPE_EXTERNAL = 'external';
    const SCOPE_INTERNAL = 'internal';
    const SCOPE_CARDS = 'cards';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyUnitAllowableValues()
    {
        return [
            self::FREQUENCY_UNIT_DAILY,
            self::FREQUENCY_UNIT_WEEKLY,
            self::FREQUENCY_UNIT_BI_WEEKLY,
            self::FREQUENCY_UNIT_MONTHLY,
            self::FREQUENCY_UNIT_QUARTERLY,
            self::FREQUENCY_UNIT_ANNUALLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_ALL,
            self::SCOPE_EXTERNAL,
            self::SCOPE_INTERNAL,
            self::SCOPE_CARDS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_scope'] = isset($data['merchant_scope']) ? $data['merchant_scope'] : null;
        $this->container['account_ids'] = isset($data['account_ids']) ? $data['account_ids'] : null;
        $this->container['business_ids'] = isset($data['business_ids']) ? $data['business_ids'] : null;
        $this->container['card_ids'] = isset($data['card_ids']) ? $data['card_ids'] : null;
        $this->container['show_by_merchant'] = isset($data['show_by_merchant']) ? $data['show_by_merchant'] : false;
        $this->container['show_by_period'] = isset($data['show_by_period']) ? $data['show_by_period'] : false;
        $this->container['only_cleansed'] = isset($data['only_cleansed']) ? $data['only_cleansed'] : false;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : 1;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['as_of_date'] = isset($data['as_of_date']) ? $data['as_of_date'] : null;
        $this->container['transaction_category_scope'] = isset($data['transaction_category_scope']) ? $data['transaction_category_scope'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['card_status_scope'] = isset($data['card_status_scope']) ? $data['card_status_scope'] : null;
        $this->container['only_active_clients'] = isset($data['only_active_clients']) ? $data['only_active_clients'] : false;
        $this->container['lookback_periods'] = isset($data['lookback_periods']) ? $data['lookback_periods'] : 0;
        $this->container['frequency_unit'] = isset($data['frequency_unit']) ? $data['frequency_unit'] : null;
        $this->container['household_ids'] = isset($data['household_ids']) ? $data['household_ids'] : null;
        $this->container['aggregation_account_ids'] = isset($data['aggregation_account_ids']) ? $data['aggregation_account_ids'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['client_ids'] = isset($data['client_ids']) ? $data['client_ids'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : 'all';
        $this->container['currency_conversion'] = isset($data['currency_conversion']) ? $data['currency_conversion'] : null;
        $this->container['transaction_status_scope'] = isset($data['transaction_status_scope']) ? $data['transaction_status_scope'] : null;
        $this->container['show_by_category'] = isset($data['show_by_category']) ? $data['show_by_category'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['frequency']) && ($this->container['frequency'] < 1)) {
            $invalidProperties[] = "invalid value for 'frequency', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['lookback_periods']) && ($this->container['lookback_periods'] < 0)) {
            $invalidProperties[] = "invalid value for 'lookback_periods', must be bigger than or equal to 0.";
        }

        if ($this->container['frequency_unit'] === null) {
            $invalidProperties[] = "'frequency_unit' can't be null";
        }
        $allowedValues = $this->getFrequencyUnitAllowableValues();
        if (!is_null($this->container['frequency_unit']) && !in_array($this->container['frequency_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'frequency_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_scope
     *
     * @return string[]
     */
    public function getMerchantScope()
    {
        return $this->container['merchant_scope'];
    }

    /**
     * Sets merchant_scope
     *
     * @param string[] $merchant_scope merchant_scope
     *
     * @return $this
     */
    public function setMerchantScope($merchant_scope)
    {
        $this->container['merchant_scope'] = $merchant_scope;

        return $this;
    }

    /**
     * Gets account_ids
     *
     * @return string[]
     */
    public function getAccountIds()
    {
        return $this->container['account_ids'];
    }

    /**
     * Sets account_ids
     *
     * @param string[] $account_ids account_ids
     *
     * @return $this
     */
    public function setAccountIds($account_ids)
    {
        $this->container['account_ids'] = $account_ids;

        return $this;
    }

    /**
     * Gets business_ids
     *
     * @return string[]
     */
    public function getBusinessIds()
    {
        return $this->container['business_ids'];
    }

    /**
     * Sets business_ids
     *
     * @param string[] $business_ids business_ids
     *
     * @return $this
     */
    public function setBusinessIds($business_ids)
    {
        $this->container['business_ids'] = $business_ids;

        return $this;
    }

    /**
     * Gets card_ids
     *
     * @return string[]
     */
    public function getCardIds()
    {
        return $this->container['card_ids'];
    }

    /**
     * Sets card_ids
     *
     * @param string[] $card_ids card_ids
     *
     * @return $this
     */
    public function setCardIds($card_ids)
    {
        $this->container['card_ids'] = $card_ids;

        return $this;
    }

    /**
     * Gets show_by_merchant
     *
     * @return bool
     */
    public function getShowByMerchant()
    {
        return $this->container['show_by_merchant'];
    }

    /**
     * Sets show_by_merchant
     *
     * @param bool $show_by_merchant show_by_merchant
     *
     * @return $this
     */
    public function setShowByMerchant($show_by_merchant)
    {
        $this->container['show_by_merchant'] = $show_by_merchant;

        return $this;
    }

    /**
     * Gets show_by_period
     *
     * @return bool
     */
    public function getShowByPeriod()
    {
        return $this->container['show_by_period'];
    }

    /**
     * Sets show_by_period
     *
     * @param bool $show_by_period show_by_period
     *
     * @return $this
     */
    public function setShowByPeriod($show_by_period)
    {
        $this->container['show_by_period'] = $show_by_period;

        return $this;
    }

    /**
     * Gets only_cleansed
     *
     * @return bool
     */
    public function getOnlyCleansed()
    {
        return $this->container['only_cleansed'];
    }

    /**
     * Sets only_cleansed
     *
     * @param bool $only_cleansed only_cleansed
     *
     * @return $this
     */
    public function setOnlyCleansed($only_cleansed)
    {
        $this->container['only_cleansed'] = $only_cleansed;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {

        if (!is_null($frequency) && ($frequency < 1)) {
            throw new \InvalidArgumentException('invalid value for $frequency when calling SpendingAnalysisRequest., must be bigger than or equal to 1.');
        }

        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets as_of_date
     *
     * @return \DateTime
     */
    public function getAsOfDate()
    {
        return $this->container['as_of_date'];
    }

    /**
     * Sets as_of_date
     *
     * @param \DateTime $as_of_date as_of_date
     *
     * @return $this
     */
    public function setAsOfDate($as_of_date)
    {
        $this->container['as_of_date'] = $as_of_date;

        return $this;
    }

    /**
     * Gets transaction_category_scope
     *
     * @return string[]
     */
    public function getTransactionCategoryScope()
    {
        return $this->container['transaction_category_scope'];
    }

    /**
     * Sets transaction_category_scope
     *
     * @param string[] $transaction_category_scope transaction_category_scope
     *
     * @return $this
     */
    public function setTransactionCategoryScope($transaction_category_scope)
    {
        $this->container['transaction_category_scope'] = $transaction_category_scope;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets card_status_scope
     *
     * @return string[]
     */
    public function getCardStatusScope()
    {
        return $this->container['card_status_scope'];
    }

    /**
     * Sets card_status_scope
     *
     * @param string[] $card_status_scope card_status_scope
     *
     * @return $this
     */
    public function setCardStatusScope($card_status_scope)
    {
        $this->container['card_status_scope'] = $card_status_scope;

        return $this;
    }

    /**
     * Gets only_active_clients
     *
     * @return bool
     */
    public function getOnlyActiveClients()
    {
        return $this->container['only_active_clients'];
    }

    /**
     * Sets only_active_clients
     *
     * @param bool $only_active_clients only_active_clients
     *
     * @return $this
     */
    public function setOnlyActiveClients($only_active_clients)
    {
        $this->container['only_active_clients'] = $only_active_clients;

        return $this;
    }

    /**
     * Gets lookback_periods
     *
     * @return int
     */
    public function getLookbackPeriods()
    {
        return $this->container['lookback_periods'];
    }

    /**
     * Sets lookback_periods
     *
     * @param int $lookback_periods lookback_periods
     *
     * @return $this
     */
    public function setLookbackPeriods($lookback_periods)
    {

        if (!is_null($lookback_periods) && ($lookback_periods < 0)) {
            throw new \InvalidArgumentException('invalid value for $lookback_periods when calling SpendingAnalysisRequest., must be bigger than or equal to 0.');
        }

        $this->container['lookback_periods'] = $lookback_periods;

        return $this;
    }

    /**
     * Gets frequency_unit
     *
     * @return string
     */
    public function getFrequencyUnit()
    {
        return $this->container['frequency_unit'];
    }

    /**
     * Sets frequency_unit
     *
     * @param string $frequency_unit frequency_unit
     *
     * @return $this
     */
    public function setFrequencyUnit($frequency_unit)
    {
        $allowedValues = $this->getFrequencyUnitAllowableValues();
        if (!in_array($frequency_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'frequency_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency_unit'] = $frequency_unit;

        return $this;
    }

    /**
     * Gets household_ids
     *
     * @return string[]
     */
    public function getHouseholdIds()
    {
        return $this->container['household_ids'];
    }

    /**
     * Sets household_ids
     *
     * @param string[] $household_ids household_ids
     *
     * @return $this
     */
    public function setHouseholdIds($household_ids)
    {
        $this->container['household_ids'] = $household_ids;

        return $this;
    }

    /**
     * Gets aggregation_account_ids
     *
     * @return string[]
     */
    public function getAggregationAccountIds()
    {
        return $this->container['aggregation_account_ids'];
    }

    /**
     * Sets aggregation_account_ids
     *
     * @param string[] $aggregation_account_ids aggregation_account_ids
     *
     * @return $this
     */
    public function setAggregationAccountIds($aggregation_account_ids)
    {
        $this->container['aggregation_account_ids'] = $aggregation_account_ids;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets client_ids
     *
     * @return string[]
     */
    public function getClientIds()
    {
        return $this->container['client_ids'];
    }

    /**
     * Sets client_ids
     *
     * @param string[] $client_ids client_ids
     *
     * @return $this
     */
    public function setClientIds($client_ids)
    {
        $this->container['client_ids'] = $client_ids;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($scope) && !in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets currency_conversion
     *
     * @return string
     */
    public function getCurrencyConversion()
    {
        return $this->container['currency_conversion'];
    }

    /**
     * Sets currency_conversion
     *
     * @param string $currency_conversion currency_conversion
     *
     * @return $this
     */
    public function setCurrencyConversion($currency_conversion)
    {
        $this->container['currency_conversion'] = $currency_conversion;

        return $this;
    }

    /**
     * Gets transaction_status_scope
     *
     * @return string[]
     */
    public function getTransactionStatusScope()
    {
        return $this->container['transaction_status_scope'];
    }

    /**
     * Sets transaction_status_scope
     *
     * @param string[] $transaction_status_scope transaction_status_scope
     *
     * @return $this
     */
    public function setTransactionStatusScope($transaction_status_scope)
    {
        $this->container['transaction_status_scope'] = $transaction_status_scope;

        return $this;
    }

    /**
     * Gets show_by_category
     *
     * @return bool
     */
    public function getShowByCategory()
    {
        return $this->container['show_by_category'];
    }

    /**
     * Sets show_by_category
     *
     * @param bool $show_by_category show_by_category
     *
     * @return $this
     */
    public function setShowByCategory($show_by_category)
    {
        $this->container['show_by_category'] = $show_by_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


