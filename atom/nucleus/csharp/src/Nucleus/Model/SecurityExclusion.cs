/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// SecurityExclusion Object
    /// </summary>
    [DataContract]
    public partial class SecurityExclusion :  IEquatable<SecurityExclusion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExclusion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityExclusion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityExclusion" /> class.
        /// </summary>
        /// <param name="accountId">account id.</param>
        /// <param name="clientId">Client id (required).</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="id">id.</param>
        /// <param name="isRestrictBuy">restrict buy (required).</param>
        /// <param name="isRestrictSell">restrict sell (required).</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="portfolioId">portfolio id.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="securityId">Security id (required).</param>
        /// <param name="updateDate">updateDate.</param>
        public SecurityExclusion(Guid? accountId = default(Guid?), Guid? clientId = default(Guid?), DateTime? createDate = default(DateTime?), Guid? id = default(Guid?), bool? isRestrictBuy = default(bool?), bool? isRestrictSell = default(bool?), Dictionary<string, string> metadata = default(Dictionary<string, string>), Guid? portfolioId = default(Guid?), string secondaryId = default(string), Guid? securityId = default(Guid?), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for SecurityExclusion and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "isRestrictBuy" is required (not null)
            if (isRestrictBuy == null)
            {
                throw new InvalidDataException("isRestrictBuy is a required property for SecurityExclusion and cannot be null");
            }
            else
            {
                this.IsRestrictBuy = isRestrictBuy;
            }
            // to ensure "isRestrictSell" is required (not null)
            if (isRestrictSell == null)
            {
                throw new InvalidDataException("isRestrictSell is a required property for SecurityExclusion and cannot be null");
            }
            else
            {
                this.IsRestrictSell = isRestrictSell;
            }
            // to ensure "securityId" is required (not null)
            if (securityId == null)
            {
                throw new InvalidDataException("securityId is a required property for SecurityExclusion and cannot be null");
            }
            else
            {
                this.SecurityId = securityId;
            }
            this.AccountId = accountId;
            this.CreateDate = createDate;
            this.Id = id;
            this.Metadata = metadata;
            this.PortfolioId = portfolioId;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// account id
        /// </summary>
        /// <value>account id</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// Client id
        /// </summary>
        /// <value>Client id</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// restrict buy
        /// </summary>
        /// <value>restrict buy</value>
        [DataMember(Name="is_restrict_buy", EmitDefaultValue=false)]
        public bool? IsRestrictBuy { get; set; }

        /// <summary>
        /// restrict sell
        /// </summary>
        /// <value>restrict sell</value>
        [DataMember(Name="is_restrict_sell", EmitDefaultValue=false)]
        public bool? IsRestrictSell { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// portfolio id
        /// </summary>
        /// <value>portfolio id</value>
        [DataMember(Name="portfolio_id", EmitDefaultValue=false)]
        public Guid? PortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Security id
        /// </summary>
        /// <value>Security id</value>
        [DataMember(Name="security_id", EmitDefaultValue=false)]
        public Guid? SecurityId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecurityExclusion {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRestrictBuy: ").Append(IsRestrictBuy).Append("\n");
            sb.Append("  IsRestrictSell: ").Append(IsRestrictSell).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityExclusion);
        }

        /// <summary>
        /// Returns true if SecurityExclusion instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityExclusion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityExclusion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsRestrictBuy == input.IsRestrictBuy ||
                    (this.IsRestrictBuy != null &&
                    this.IsRestrictBuy.Equals(input.IsRestrictBuy))
                ) && 
                (
                    this.IsRestrictSell == input.IsRestrictSell ||
                    (this.IsRestrictSell != null &&
                    this.IsRestrictSell.Equals(input.IsRestrictSell))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsRestrictBuy != null)
                    hashCode = hashCode * 59 + this.IsRestrictBuy.GetHashCode();
                if (this.IsRestrictSell != null)
                    hashCode = hashCode * 59 + this.IsRestrictSell.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.PortfolioId != null)
                    hashCode = hashCode * 59 + this.PortfolioId.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.SecurityId != null)
                    hashCode = hashCode * 59 + this.SecurityId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
