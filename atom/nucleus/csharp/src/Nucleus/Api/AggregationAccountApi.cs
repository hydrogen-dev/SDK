/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAggregationAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a bulk aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance records under an aggregation accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>List&lt;AggregationAccountBalance&gt;</returns>
        List<AggregationAccountBalance> CreateAggregationAccountBalanceBulkUsingPost (List<AggregationAccountBalance> aggregationAccountBalance);

        /// <summary>
        /// Create a bulk aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance records under an aggregation accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountBalance&gt;</returns>
        ApiResponse<List<AggregationAccountBalance>> CreateAggregationAccountBalanceBulkUsingPostWithHttpInfo (List<AggregationAccountBalance> aggregationAccountBalance);
        /// <summary>
        /// Create an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>AggregationAccountBalance</returns>
        AggregationAccountBalance CreateAggregationAccountBalanceUsingPost (AggregationAccountBalance aggregationAccountBalance);

        /// <summary>
        /// Create an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>ApiResponse of AggregationAccountBalance</returns>
        ApiResponse<AggregationAccountBalance> CreateAggregationAccountBalanceUsingPostWithHttpInfo (AggregationAccountBalance aggregationAccountBalance);
        /// <summary>
        /// Create a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>List&lt;AggregationAccount&gt;</returns>
        List<AggregationAccount> CreateAggregationAccountBulkUsingPost (List<AggregationAccount> aggregationAccountList);

        /// <summary>
        /// Create a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>ApiResponse of List&lt;AggregationAccount&gt;</returns>
        ApiResponse<List<AggregationAccount>> CreateAggregationAccountBulkUsingPostWithHttpInfo (List<AggregationAccount> aggregationAccountList);
        /// <summary>
        /// Create a bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account holding.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>List&lt;AggregationAccountHolding&gt;</returns>
        List<AggregationAccountHolding> CreateAggregationAccountHoldingBulkUsingPost (List<AggregationAccountHolding> aggregationTransaction);

        /// <summary>
        /// Create a bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account holding.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountHolding&gt;</returns>
        ApiResponse<List<AggregationAccountHolding>> CreateAggregationAccountHoldingBulkUsingPostWithHttpInfo (List<AggregationAccountHolding> aggregationTransaction);
        /// <summary>
        /// Create an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a holding record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>AggregationAccountHolding</returns>
        AggregationAccountHolding CreateAggregationAccountHoldingUsingPost (AggregationAccountHolding aggregationAccountHolding);

        /// <summary>
        /// Create an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a holding record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>ApiResponse of AggregationAccountHolding</returns>
        ApiResponse<AggregationAccountHolding> CreateAggregationAccountHoldingUsingPostWithHttpInfo (AggregationAccountHolding aggregationAccountHolding);
        /// <summary>
        /// Create a bulk aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a bulk transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>List&lt;AggregationAccountTransaction&gt;</returns>
        List<AggregationAccountTransaction> CreateAggregationAccountTransactionBulkUsingPost (List<AggregationAccountTransaction> aggregationAccountTransactions);

        /// <summary>
        /// Create a bulk aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a bulk transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountTransaction&gt;</returns>
        ApiResponse<List<AggregationAccountTransaction>> CreateAggregationAccountTransactionBulkUsingPostWithHttpInfo (List<AggregationAccountTransaction> aggregationAccountTransactions);
        /// <summary>
        /// Create an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>AggregationAccountTransaction</returns>
        AggregationAccountTransaction CreateAggregationAccountTransactionUsingPost (AggregationAccountTransaction aggregationAccountTransaction);

        /// <summary>
        /// Create an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>ApiResponse of AggregationAccountTransaction</returns>
        ApiResponse<AggregationAccountTransaction> CreateAggregationAccountTransactionUsingPostWithHttpInfo (AggregationAccountTransaction aggregationAccountTransaction);
        /// <summary>
        /// Create an aggregation account
        /// </summary>
        /// <remarks>
        /// Create an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>AggregationAccount</returns>
        AggregationAccount CreateAggregationAccountUsingPost (AggregationAccount aggregationAccount);

        /// <summary>
        /// Create an aggregation account
        /// </summary>
        /// <remarks>
        /// Create an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>ApiResponse of AggregationAccount</returns>
        ApiResponse<AggregationAccount> CreateAggregationAccountUsingPostWithHttpInfo (AggregationAccount aggregationAccount);
        /// <summary>
        /// Delete an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Permanently delete a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns></returns>
        void DeleteAggregationAccountBalanceUsingDelete (Guid? aggregationAccountBalanceId);

        /// <summary>
        /// Delete an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Permanently delete a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAggregationAccountBalanceUsingDeleteWithHttpInfo (Guid? aggregationAccountBalanceId);
        /// <summary>
        /// Delete an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns></returns>
        void DeleteAggregationAccountHoldingUsingDelete (Guid? aggregationAccountHoldingId);

        /// <summary>
        /// Delete an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAggregationAccountHoldingUsingDeleteWithHttpInfo (Guid? aggregationAccountHoldingId);
        /// <summary>
        /// Delete an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns></returns>
        void DeleteAggregationAccountTransactionUsingDelete (Guid? aggregationAccountTransactionId);

        /// <summary>
        /// Delete an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAggregationAccountTransactionUsingDeleteWithHttpInfo (Guid? aggregationAccountTransactionId);
        /// <summary>
        /// Delete an aggregation account
        /// </summary>
        /// <remarks>
        /// Permanently delete an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns></returns>
        void DeleteAggregationAccountUsingDelete (Guid? aggregationAccountId);

        /// <summary>
        /// Delete an aggregation account
        /// </summary>
        /// <remarks>
        /// Permanently delete an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAggregationAccountUsingDeleteWithHttpInfo (Guid? aggregationAccountId);
        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Object</returns>
        Object GetAggregationAccountAggregateDataUsingGet (Guid? aggregationAccountId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAggregationAccountAggregateDataUsingGetWithHttpInfo (Guid? aggregationAccountId, string currencyConversion = null);
        /// <summary>
        /// List all aggregation accounts
        /// </summary>
        /// <remarks>
        /// Get information for all aggregation accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccount</returns>
        PageAggregationAccount GetAggregationAccountAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation accounts
        /// </summary>
        /// <remarks>
        /// Get information for all aggregation accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccount</returns>
        ApiResponse<PageAggregationAccount> GetAggregationAccountAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all aggregation account balances
        /// </summary>
        /// <remarks>
        /// Get all of the balance records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccountBalance</returns>
        PageAggregationAccountBalance GetAggregationAccountBalanceAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation account balances
        /// </summary>
        /// <remarks>
        /// Get all of the balance records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccountBalance</returns>
        ApiResponse<PageAggregationAccountBalance> GetAggregationAccountBalanceAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>AggregationAccountBalance</returns>
        AggregationAccountBalance GetAggregationAccountBalanceUsingGet (Guid? aggregationAccountBalanceId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of AggregationAccountBalance</returns>
        ApiResponse<AggregationAccountBalance> GetAggregationAccountBalanceUsingGetWithHttpInfo (Guid? aggregationAccountBalanceId, string currencyConversion = null);
        /// <summary>
        /// List all aggregation account holdings
        /// </summary>
        /// <remarks>
        /// Get all of the holding records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccountHolding</returns>
        PageAggregationAccountHolding GetAggregationAccountHoldingAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation account holdings
        /// </summary>
        /// <remarks>
        /// Get all of the holding records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccountHolding</returns>
        ApiResponse<PageAggregationAccountHolding> GetAggregationAccountHoldingAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>AggregationAccountHolding</returns>
        AggregationAccountHolding GetAggregationAccountHoldingUsingGet (Guid? aggregationAccountHoldingId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of AggregationAccountHolding</returns>
        ApiResponse<AggregationAccountHolding> GetAggregationAccountHoldingUsingGetWithHttpInfo (Guid? aggregationAccountHoldingId, string currencyConversion = null);
        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Object</returns>
        Object GetAggregationAccountOverviewByBusinessIdUsingGet (Guid? businessId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo (Guid? businessId, string currencyConversion = null);
        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Object</returns>
        Object GetAggregationAccountOverviewUsingGet (Guid? clientId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAggregationAccountOverviewUsingGetWithHttpInfo (Guid? clientId, string currencyConversion = null);
        /// <summary>
        /// List all aggregation account transactions
        /// </summary>
        /// <remarks>
        /// Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccountTransaction</returns>
        PageAggregationAccountTransaction GetAggregationAccountTransactionAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation account transactions
        /// </summary>
        /// <remarks>
        /// Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccountTransaction</returns>
        ApiResponse<PageAggregationAccountTransaction> GetAggregationAccountTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>AggregationAccountTransaction</returns>
        AggregationAccountTransaction GetAggregationAccountTransactionUsingGet (Guid? aggregationAccountTransactionId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of AggregationAccountTransaction</returns>
        ApiResponse<AggregationAccountTransaction> GetAggregationAccountTransactionUsingGetWithHttpInfo (Guid? aggregationAccountTransactionId, string currencyConversion = null);
        /// <summary>
        /// Retrieve an aggregation account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>AggregationAccount</returns>
        AggregationAccount GetAggregationAccountUsingGet (Guid? aggregationAccountId);

        /// <summary>
        /// Retrieve an aggregation account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccount</returns>
        ApiResponse<AggregationAccount> GetAggregationAccountUsingGetWithHttpInfo (Guid? aggregationAccountId);
        /// <summary>
        /// Update an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Update a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>AggregationAccountBalance</returns>
        AggregationAccountBalance UpdateAggregationAccountBalanceUsingPut (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId);

        /// <summary>
        /// Update an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Update a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>ApiResponse of AggregationAccountBalance</returns>
        ApiResponse<AggregationAccountBalance> UpdateAggregationAccountBalanceUsingPutWithHttpInfo (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId);
        /// <summary>
        /// Update a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Update a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>List&lt;AggregationAccount&gt;</returns>
        List<AggregationAccount> UpdateAggregationAccountBulkUsingPut (List<Object> aggregationAccountList);

        /// <summary>
        /// Update a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Update a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>ApiResponse of List&lt;AggregationAccount&gt;</returns>
        ApiResponse<List<AggregationAccount>> UpdateAggregationAccountBulkUsingPutWithHttpInfo (List<Object> aggregationAccountList);
        /// <summary>
        /// Update an bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a bulk holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>List&lt;AggregationAccountHolding&gt;</returns>
        List<AggregationAccountHolding> UpdateAggregationAccountHoldingBulkUsingPut (List<Object> aggregationAccountHolding);

        /// <summary>
        /// Update an bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a bulk holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountHolding&gt;</returns>
        ApiResponse<List<AggregationAccountHolding>> UpdateAggregationAccountHoldingBulkUsingPutWithHttpInfo (List<Object> aggregationAccountHolding);
        /// <summary>
        /// Update an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>AggregationAccountHolding</returns>
        AggregationAccountHolding UpdateAggregationAccountHoldingUsingPut (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId);

        /// <summary>
        /// Update an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>ApiResponse of AggregationAccountHolding</returns>
        ApiResponse<AggregationAccountHolding> UpdateAggregationAccountHoldingUsingPutWithHttpInfo (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId);
        /// <summary>
        /// Update an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Update a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>AggregationAccountTransaction</returns>
        AggregationAccountTransaction UpdateAggregationAccountTransactionUsingPut (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId);

        /// <summary>
        /// Update an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Update a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>ApiResponse of AggregationAccountTransaction</returns>
        ApiResponse<AggregationAccountTransaction> UpdateAggregationAccountTransactionUsingPutWithHttpInfo (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId);
        /// <summary>
        /// Update an aggregation account
        /// </summary>
        /// <remarks>
        /// Update the information for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>AggregationAccount</returns>
        AggregationAccount UpdateAggregationAccountUsingPut (Object aggregationAccount, Guid? aggregationAccountId);

        /// <summary>
        /// Update an aggregation account
        /// </summary>
        /// <remarks>
        /// Update the information for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccount</returns>
        ApiResponse<AggregationAccount> UpdateAggregationAccountUsingPutWithHttpInfo (Object aggregationAccount, Guid? aggregationAccountId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a bulk aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance records under an aggregation accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of List&lt;AggregationAccountBalance&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountBalance>> CreateAggregationAccountBalanceBulkUsingPostAsync (List<AggregationAccountBalance> aggregationAccountBalance);

        /// <summary>
        /// Create a bulk aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance records under an aggregation accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountBalance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountBalance>>> CreateAggregationAccountBalanceBulkUsingPostAsyncWithHttpInfo (List<AggregationAccountBalance> aggregationAccountBalance);
        /// <summary>
        /// Create an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of AggregationAccountBalance</returns>
        System.Threading.Tasks.Task<AggregationAccountBalance> CreateAggregationAccountBalanceUsingPostAsync (AggregationAccountBalance aggregationAccountBalance);

        /// <summary>
        /// Create an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Create a balance record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalance)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalance>> CreateAggregationAccountBalanceUsingPostAsyncWithHttpInfo (AggregationAccountBalance aggregationAccountBalance);
        /// <summary>
        /// Create a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of List&lt;AggregationAccount&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccount>> CreateAggregationAccountBulkUsingPostAsync (List<AggregationAccount> aggregationAccountList);

        /// <summary>
        /// Create a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccount>>> CreateAggregationAccountBulkUsingPostAsyncWithHttpInfo (List<AggregationAccount> aggregationAccountList);
        /// <summary>
        /// Create a bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account holding.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>Task of List&lt;AggregationAccountHolding&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountHolding>> CreateAggregationAccountHoldingBulkUsingPostAsync (List<AggregationAccountHolding> aggregationTransaction);

        /// <summary>
        /// Create a bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a bulk aggregation account holding.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountHolding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountHolding>>> CreateAggregationAccountHoldingBulkUsingPostAsyncWithHttpInfo (List<AggregationAccountHolding> aggregationTransaction);
        /// <summary>
        /// Create an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a holding record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of AggregationAccountHolding</returns>
        System.Threading.Tasks.Task<AggregationAccountHolding> CreateAggregationAccountHoldingUsingPostAsync (AggregationAccountHolding aggregationAccountHolding);

        /// <summary>
        /// Create an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Create a holding record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of ApiResponse (AggregationAccountHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountHolding>> CreateAggregationAccountHoldingUsingPostAsyncWithHttpInfo (AggregationAccountHolding aggregationAccountHolding);
        /// <summary>
        /// Create a bulk aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a bulk transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>Task of List&lt;AggregationAccountTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountTransaction>> CreateAggregationAccountTransactionBulkUsingPostAsync (List<AggregationAccountTransaction> aggregationAccountTransactions);

        /// <summary>
        /// Create a bulk aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a bulk transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountTransaction>>> CreateAggregationAccountTransactionBulkUsingPostAsyncWithHttpInfo (List<AggregationAccountTransaction> aggregationAccountTransactions);
        /// <summary>
        /// Create an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>Task of AggregationAccountTransaction</returns>
        System.Threading.Tasks.Task<AggregationAccountTransaction> CreateAggregationAccountTransactionUsingPostAsync (AggregationAccountTransaction aggregationAccountTransaction);

        /// <summary>
        /// Create an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Create a transaction record under an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransaction>> CreateAggregationAccountTransactionUsingPostAsyncWithHttpInfo (AggregationAccountTransaction aggregationAccountTransaction);
        /// <summary>
        /// Create an aggregation account
        /// </summary>
        /// <remarks>
        /// Create an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>Task of AggregationAccount</returns>
        System.Threading.Tasks.Task<AggregationAccount> CreateAggregationAccountUsingPostAsync (AggregationAccount aggregationAccount);

        /// <summary>
        /// Create an aggregation account
        /// </summary>
        /// <remarks>
        /// Create an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>Task of ApiResponse (AggregationAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccount>> CreateAggregationAccountUsingPostAsyncWithHttpInfo (AggregationAccount aggregationAccount);
        /// <summary>
        /// Delete an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Permanently delete a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAggregationAccountBalanceUsingDeleteAsync (Guid? aggregationAccountBalanceId);

        /// <summary>
        /// Delete an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Permanently delete a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountBalanceUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountBalanceId);
        /// <summary>
        /// Delete an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAggregationAccountHoldingUsingDeleteAsync (Guid? aggregationAccountHoldingId);

        /// <summary>
        /// Delete an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountHoldingUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountHoldingId);
        /// <summary>
        /// Delete an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAggregationAccountTransactionUsingDeleteAsync (Guid? aggregationAccountTransactionId);

        /// <summary>
        /// Delete an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountTransactionUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountTransactionId);
        /// <summary>
        /// Delete an aggregation account
        /// </summary>
        /// <remarks>
        /// Permanently delete an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAggregationAccountUsingDeleteAsync (Guid? aggregationAccountId);

        /// <summary>
        /// Delete an aggregation account
        /// </summary>
        /// <remarks>
        /// Permanently delete an aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountId);
        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAggregationAccountAggregateDataUsingGetAsync (Guid? aggregationAccountId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregationAccountAggregateDataUsingGetAsyncWithHttpInfo (Guid? aggregationAccountId, string currencyConversion = null);
        /// <summary>
        /// List all aggregation accounts
        /// </summary>
        /// <remarks>
        /// Get information for all aggregation accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccount</returns>
        System.Threading.Tasks.Task<PageAggregationAccount> GetAggregationAccountAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation accounts
        /// </summary>
        /// <remarks>
        /// Get information for all aggregation accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAggregationAccount>> GetAggregationAccountAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all aggregation account balances
        /// </summary>
        /// <remarks>
        /// Get all of the balance records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccountBalance</returns>
        System.Threading.Tasks.Task<PageAggregationAccountBalance> GetAggregationAccountBalanceAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation account balances
        /// </summary>
        /// <remarks>
        /// Get all of the balance records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccountBalance)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAggregationAccountBalance>> GetAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of AggregationAccountBalance</returns>
        System.Threading.Tasks.Task<AggregationAccountBalance> GetAggregationAccountBalanceUsingGetAsync (Guid? aggregationAccountBalanceId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalance)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalance>> GetAggregationAccountBalanceUsingGetAsyncWithHttpInfo (Guid? aggregationAccountBalanceId, string currencyConversion = null);
        /// <summary>
        /// List all aggregation account holdings
        /// </summary>
        /// <remarks>
        /// Get all of the holding records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccountHolding</returns>
        System.Threading.Tasks.Task<PageAggregationAccountHolding> GetAggregationAccountHoldingAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation account holdings
        /// </summary>
        /// <remarks>
        /// Get all of the holding records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccountHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAggregationAccountHolding>> GetAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of AggregationAccountHolding</returns>
        System.Threading.Tasks.Task<AggregationAccountHolding> GetAggregationAccountHoldingUsingGetAsync (Guid? aggregationAccountHoldingId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (AggregationAccountHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountHolding>> GetAggregationAccountHoldingUsingGetAsyncWithHttpInfo (Guid? aggregationAccountHoldingId, string currencyConversion = null);
        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAggregationAccountOverviewByBusinessIdUsingGetAsync (Guid? businessId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregationAccountOverviewByBusinessIdUsingGetAsyncWithHttpInfo (Guid? businessId, string currencyConversion = null);
        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAggregationAccountOverviewUsingGetAsync (Guid? clientId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregationAccountOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, string currencyConversion = null);
        /// <summary>
        /// List all aggregation account transactions
        /// </summary>
        /// <remarks>
        /// Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccountTransaction</returns>
        System.Threading.Tasks.Task<PageAggregationAccountTransaction> GetAggregationAccountTransactionAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all aggregation account transactions
        /// </summary>
        /// <remarks>
        /// Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccountTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAggregationAccountTransaction>> GetAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of AggregationAccountTransaction</returns>
        System.Threading.Tasks.Task<AggregationAccountTransaction> GetAggregationAccountTransactionUsingGetAsync (Guid? aggregationAccountTransactionId, string currencyConversion = null);

        /// <summary>
        /// Retrieve an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransaction>> GetAggregationAccountTransactionUsingGetAsyncWithHttpInfo (Guid? aggregationAccountTransactionId, string currencyConversion = null);
        /// <summary>
        /// Retrieve an aggregation account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of AggregationAccount</returns>
        System.Threading.Tasks.Task<AggregationAccount> GetAggregationAccountUsingGetAsync (Guid? aggregationAccountId);

        /// <summary>
        /// Retrieve an aggregation account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific aggregation account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccount>> GetAggregationAccountUsingGetAsyncWithHttpInfo (Guid? aggregationAccountId);
        /// <summary>
        /// Update an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Update a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of AggregationAccountBalance</returns>
        System.Threading.Tasks.Task<AggregationAccountBalance> UpdateAggregationAccountBalanceUsingPutAsync (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId);

        /// <summary>
        /// Update an aggregation account balance
        /// </summary>
        /// <remarks>
        /// Update a balance record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalance)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalance>> UpdateAggregationAccountBalanceUsingPutAsyncWithHttpInfo (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId);
        /// <summary>
        /// Update a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Update a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of List&lt;AggregationAccount&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccount>> UpdateAggregationAccountBulkUsingPutAsync (List<Object> aggregationAccountList);

        /// <summary>
        /// Update a bulk aggregation account
        /// </summary>
        /// <remarks>
        /// Update a bulk aggregation account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccount&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccount>>> UpdateAggregationAccountBulkUsingPutAsyncWithHttpInfo (List<Object> aggregationAccountList);
        /// <summary>
        /// Update an bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a bulk holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of List&lt;AggregationAccountHolding&gt;</returns>
        System.Threading.Tasks.Task<List<AggregationAccountHolding>> UpdateAggregationAccountHoldingBulkUsingPutAsync (List<Object> aggregationAccountHolding);

        /// <summary>
        /// Update an bulk aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a bulk holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountHolding&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountHolding>>> UpdateAggregationAccountHoldingBulkUsingPutAsyncWithHttpInfo (List<Object> aggregationAccountHolding);
        /// <summary>
        /// Update an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of AggregationAccountHolding</returns>
        System.Threading.Tasks.Task<AggregationAccountHolding> UpdateAggregationAccountHoldingUsingPutAsync (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId);

        /// <summary>
        /// Update an aggregation account holding
        /// </summary>
        /// <remarks>
        /// Update a holding record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountHolding>> UpdateAggregationAccountHoldingUsingPutAsyncWithHttpInfo (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId);
        /// <summary>
        /// Update an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Update a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of AggregationAccountTransaction</returns>
        System.Threading.Tasks.Task<AggregationAccountTransaction> UpdateAggregationAccountTransactionUsingPutAsync (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId);

        /// <summary>
        /// Update an aggregation account transaction
        /// </summary>
        /// <remarks>
        /// Update a transaction record for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransaction>> UpdateAggregationAccountTransactionUsingPutAsyncWithHttpInfo (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId);
        /// <summary>
        /// Update an aggregation account
        /// </summary>
        /// <remarks>
        /// Update the information for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of AggregationAccount</returns>
        System.Threading.Tasks.Task<AggregationAccount> UpdateAggregationAccountUsingPutAsync (Object aggregationAccount, Guid? aggregationAccountId);

        /// <summary>
        /// Update an aggregation account
        /// </summary>
        /// <remarks>
        /// Update the information for an aggregation account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<AggregationAccount>> UpdateAggregationAccountUsingPutAsyncWithHttpInfo (Object aggregationAccount, Guid? aggregationAccountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AggregationAccountApi : IAggregationAccountApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AggregationAccountApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AggregationAccountApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a bulk aggregation account balance Create a balance records under an aggregation accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>List&lt;AggregationAccountBalance&gt;</returns>
        public List<AggregationAccountBalance> CreateAggregationAccountBalanceBulkUsingPost (List<AggregationAccountBalance> aggregationAccountBalance)
        {
             ApiResponse<List<AggregationAccountBalance>> localVarResponse = CreateAggregationAccountBalanceBulkUsingPostWithHttpInfo(aggregationAccountBalance);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bulk aggregation account balance Create a balance records under an aggregation accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountBalance&gt;</returns>
        public ApiResponse< List<AggregationAccountBalance> > CreateAggregationAccountBalanceBulkUsingPostWithHttpInfo (List<AggregationAccountBalance> aggregationAccountBalance)
        {
            // verify the required parameter 'aggregationAccountBalance' is set
            if (aggregationAccountBalance == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalance' when calling AggregationAccountApi->CreateAggregationAccountBalanceBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalance != null && aggregationAccountBalance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountBalance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountBalance; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountBalanceBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountBalance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountBalance>)));
        }

        /// <summary>
        /// Create a bulk aggregation account balance Create a balance records under an aggregation accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of List&lt;AggregationAccountBalance&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountBalance>> CreateAggregationAccountBalanceBulkUsingPostAsync (List<AggregationAccountBalance> aggregationAccountBalance)
        {
             ApiResponse<List<AggregationAccountBalance>> localVarResponse = await CreateAggregationAccountBalanceBulkUsingPostAsyncWithHttpInfo(aggregationAccountBalance);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bulk aggregation account balance Create a balance records under an aggregation accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountBalance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountBalance>>> CreateAggregationAccountBalanceBulkUsingPostAsyncWithHttpInfo (List<AggregationAccountBalance> aggregationAccountBalance)
        {
            // verify the required parameter 'aggregationAccountBalance' is set
            if (aggregationAccountBalance == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalance' when calling AggregationAccountApi->CreateAggregationAccountBalanceBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalance != null && aggregationAccountBalance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountBalance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountBalance; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountBalanceBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountBalance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountBalance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountBalance>)));
        }

        /// <summary>
        /// Create an aggregation account balance Create a balance record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>AggregationAccountBalance</returns>
        public AggregationAccountBalance CreateAggregationAccountBalanceUsingPost (AggregationAccountBalance aggregationAccountBalance)
        {
             ApiResponse<AggregationAccountBalance> localVarResponse = CreateAggregationAccountBalanceUsingPostWithHttpInfo(aggregationAccountBalance);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an aggregation account balance Create a balance record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>ApiResponse of AggregationAccountBalance</returns>
        public ApiResponse< AggregationAccountBalance > CreateAggregationAccountBalanceUsingPostWithHttpInfo (AggregationAccountBalance aggregationAccountBalance)
        {
            // verify the required parameter 'aggregationAccountBalance' is set
            if (aggregationAccountBalance == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalance' when calling AggregationAccountApi->CreateAggregationAccountBalanceUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalance != null && aggregationAccountBalance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountBalance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountBalance; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountBalanceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalance)));
        }

        /// <summary>
        /// Create an aggregation account balance Create a balance record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of AggregationAccountBalance</returns>
        public async System.Threading.Tasks.Task<AggregationAccountBalance> CreateAggregationAccountBalanceUsingPostAsync (AggregationAccountBalance aggregationAccountBalance)
        {
             ApiResponse<AggregationAccountBalance> localVarResponse = await CreateAggregationAccountBalanceUsingPostAsyncWithHttpInfo(aggregationAccountBalance);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an aggregation account balance Create a balance record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregationAccountBalance</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalance>> CreateAggregationAccountBalanceUsingPostAsyncWithHttpInfo (AggregationAccountBalance aggregationAccountBalance)
        {
            // verify the required parameter 'aggregationAccountBalance' is set
            if (aggregationAccountBalance == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalance' when calling AggregationAccountApi->CreateAggregationAccountBalanceUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalance != null && aggregationAccountBalance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountBalance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountBalance; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountBalanceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalance)));
        }

        /// <summary>
        /// Create a bulk aggregation account Create a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>List&lt;AggregationAccount&gt;</returns>
        public List<AggregationAccount> CreateAggregationAccountBulkUsingPost (List<AggregationAccount> aggregationAccountList)
        {
             ApiResponse<List<AggregationAccount>> localVarResponse = CreateAggregationAccountBulkUsingPostWithHttpInfo(aggregationAccountList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bulk aggregation account Create a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>ApiResponse of List&lt;AggregationAccount&gt;</returns>
        public ApiResponse< List<AggregationAccount> > CreateAggregationAccountBulkUsingPostWithHttpInfo (List<AggregationAccount> aggregationAccountList)
        {
            // verify the required parameter 'aggregationAccountList' is set
            if (aggregationAccountList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountList' when calling AggregationAccountApi->CreateAggregationAccountBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountList != null && aggregationAccountList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccount>)));
        }

        /// <summary>
        /// Create a bulk aggregation account Create a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of List&lt;AggregationAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccount>> CreateAggregationAccountBulkUsingPostAsync (List<AggregationAccount> aggregationAccountList)
        {
             ApiResponse<List<AggregationAccount>> localVarResponse = await CreateAggregationAccountBulkUsingPostAsyncWithHttpInfo(aggregationAccountList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bulk aggregation account Create a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccount>>> CreateAggregationAccountBulkUsingPostAsyncWithHttpInfo (List<AggregationAccount> aggregationAccountList)
        {
            // verify the required parameter 'aggregationAccountList' is set
            if (aggregationAccountList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountList' when calling AggregationAccountApi->CreateAggregationAccountBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountList != null && aggregationAccountList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccount>)));
        }

        /// <summary>
        /// Create a bulk aggregation account holding Create a bulk aggregation account holding.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>List&lt;AggregationAccountHolding&gt;</returns>
        public List<AggregationAccountHolding> CreateAggregationAccountHoldingBulkUsingPost (List<AggregationAccountHolding> aggregationTransaction)
        {
             ApiResponse<List<AggregationAccountHolding>> localVarResponse = CreateAggregationAccountHoldingBulkUsingPostWithHttpInfo(aggregationTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bulk aggregation account holding Create a bulk aggregation account holding.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountHolding&gt;</returns>
        public ApiResponse< List<AggregationAccountHolding> > CreateAggregationAccountHoldingBulkUsingPostWithHttpInfo (List<AggregationAccountHolding> aggregationTransaction)
        {
            // verify the required parameter 'aggregationTransaction' is set
            if (aggregationTransaction == null)
                throw new ApiException(400, "Missing required parameter 'aggregationTransaction' when calling AggregationAccountApi->CreateAggregationAccountHoldingBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationTransaction != null && aggregationTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountHoldingBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountHolding>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountHolding>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountHolding>)));
        }

        /// <summary>
        /// Create a bulk aggregation account holding Create a bulk aggregation account holding.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>Task of List&lt;AggregationAccountHolding&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountHolding>> CreateAggregationAccountHoldingBulkUsingPostAsync (List<AggregationAccountHolding> aggregationTransaction)
        {
             ApiResponse<List<AggregationAccountHolding>> localVarResponse = await CreateAggregationAccountHoldingBulkUsingPostAsyncWithHttpInfo(aggregationTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bulk aggregation account holding Create a bulk aggregation account holding.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationTransaction">aggregationTransaction</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountHolding&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountHolding>>> CreateAggregationAccountHoldingBulkUsingPostAsyncWithHttpInfo (List<AggregationAccountHolding> aggregationTransaction)
        {
            // verify the required parameter 'aggregationTransaction' is set
            if (aggregationTransaction == null)
                throw new ApiException(400, "Missing required parameter 'aggregationTransaction' when calling AggregationAccountApi->CreateAggregationAccountHoldingBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationTransaction != null && aggregationTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountHoldingBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountHolding>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountHolding>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountHolding>)));
        }

        /// <summary>
        /// Create an aggregation account holding Create a holding record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>AggregationAccountHolding</returns>
        public AggregationAccountHolding CreateAggregationAccountHoldingUsingPost (AggregationAccountHolding aggregationAccountHolding)
        {
             ApiResponse<AggregationAccountHolding> localVarResponse = CreateAggregationAccountHoldingUsingPostWithHttpInfo(aggregationAccountHolding);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an aggregation account holding Create a holding record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>ApiResponse of AggregationAccountHolding</returns>
        public ApiResponse< AggregationAccountHolding > CreateAggregationAccountHoldingUsingPostWithHttpInfo (AggregationAccountHolding aggregationAccountHolding)
        {
            // verify the required parameter 'aggregationAccountHolding' is set
            if (aggregationAccountHolding == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHolding' when calling AggregationAccountApi->CreateAggregationAccountHoldingUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHolding != null && aggregationAccountHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountHoldingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHolding)));
        }

        /// <summary>
        /// Create an aggregation account holding Create a holding record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of AggregationAccountHolding</returns>
        public async System.Threading.Tasks.Task<AggregationAccountHolding> CreateAggregationAccountHoldingUsingPostAsync (AggregationAccountHolding aggregationAccountHolding)
        {
             ApiResponse<AggregationAccountHolding> localVarResponse = await CreateAggregationAccountHoldingUsingPostAsyncWithHttpInfo(aggregationAccountHolding);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an aggregation account holding Create a holding record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of ApiResponse (AggregationAccountHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountHolding>> CreateAggregationAccountHoldingUsingPostAsyncWithHttpInfo (AggregationAccountHolding aggregationAccountHolding)
        {
            // verify the required parameter 'aggregationAccountHolding' is set
            if (aggregationAccountHolding == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHolding' when calling AggregationAccountApi->CreateAggregationAccountHoldingUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHolding != null && aggregationAccountHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountHoldingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHolding)));
        }

        /// <summary>
        /// Create a bulk aggregation account transaction Create a bulk transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>List&lt;AggregationAccountTransaction&gt;</returns>
        public List<AggregationAccountTransaction> CreateAggregationAccountTransactionBulkUsingPost (List<AggregationAccountTransaction> aggregationAccountTransactions)
        {
             ApiResponse<List<AggregationAccountTransaction>> localVarResponse = CreateAggregationAccountTransactionBulkUsingPostWithHttpInfo(aggregationAccountTransactions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bulk aggregation account transaction Create a bulk transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountTransaction&gt;</returns>
        public ApiResponse< List<AggregationAccountTransaction> > CreateAggregationAccountTransactionBulkUsingPostWithHttpInfo (List<AggregationAccountTransaction> aggregationAccountTransactions)
        {
            // verify the required parameter 'aggregationAccountTransactions' is set
            if (aggregationAccountTransactions == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactions' when calling AggregationAccountApi->CreateAggregationAccountTransactionBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactions != null && aggregationAccountTransactions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountTransactions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountTransactions; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountTransactionBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountTransaction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountTransaction>)));
        }

        /// <summary>
        /// Create a bulk aggregation account transaction Create a bulk transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>Task of List&lt;AggregationAccountTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountTransaction>> CreateAggregationAccountTransactionBulkUsingPostAsync (List<AggregationAccountTransaction> aggregationAccountTransactions)
        {
             ApiResponse<List<AggregationAccountTransaction>> localVarResponse = await CreateAggregationAccountTransactionBulkUsingPostAsyncWithHttpInfo(aggregationAccountTransactions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bulk aggregation account transaction Create a bulk transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactions">aggregationAccountTransactions</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountTransaction>>> CreateAggregationAccountTransactionBulkUsingPostAsyncWithHttpInfo (List<AggregationAccountTransaction> aggregationAccountTransactions)
        {
            // verify the required parameter 'aggregationAccountTransactions' is set
            if (aggregationAccountTransactions == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactions' when calling AggregationAccountApi->CreateAggregationAccountTransactionBulkUsingPost");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactions != null && aggregationAccountTransactions.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountTransactions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountTransactions; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountTransactionBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountTransaction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountTransaction>)));
        }

        /// <summary>
        /// Create an aggregation account transaction Create a transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>AggregationAccountTransaction</returns>
        public AggregationAccountTransaction CreateAggregationAccountTransactionUsingPost (AggregationAccountTransaction aggregationAccountTransaction)
        {
             ApiResponse<AggregationAccountTransaction> localVarResponse = CreateAggregationAccountTransactionUsingPostWithHttpInfo(aggregationAccountTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an aggregation account transaction Create a transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>ApiResponse of AggregationAccountTransaction</returns>
        public ApiResponse< AggregationAccountTransaction > CreateAggregationAccountTransactionUsingPostWithHttpInfo (AggregationAccountTransaction aggregationAccountTransaction)
        {
            // verify the required parameter 'aggregationAccountTransaction' is set
            if (aggregationAccountTransaction == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransaction' when calling AggregationAccountApi->CreateAggregationAccountTransactionUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransaction != null && aggregationAccountTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransaction)));
        }

        /// <summary>
        /// Create an aggregation account transaction Create a transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>Task of AggregationAccountTransaction</returns>
        public async System.Threading.Tasks.Task<AggregationAccountTransaction> CreateAggregationAccountTransactionUsingPostAsync (AggregationAccountTransaction aggregationAccountTransaction)
        {
             ApiResponse<AggregationAccountTransaction> localVarResponse = await CreateAggregationAccountTransactionUsingPostAsyncWithHttpInfo(aggregationAccountTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an aggregation account transaction Create a transaction record under an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregationAccountTransaction</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransaction>> CreateAggregationAccountTransactionUsingPostAsyncWithHttpInfo (AggregationAccountTransaction aggregationAccountTransaction)
        {
            // verify the required parameter 'aggregationAccountTransaction' is set
            if (aggregationAccountTransaction == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransaction' when calling AggregationAccountApi->CreateAggregationAccountTransactionUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransaction != null && aggregationAccountTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransaction)));
        }

        /// <summary>
        /// Create an aggregation account Create an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>AggregationAccount</returns>
        public AggregationAccount CreateAggregationAccountUsingPost (AggregationAccount aggregationAccount)
        {
             ApiResponse<AggregationAccount> localVarResponse = CreateAggregationAccountUsingPostWithHttpInfo(aggregationAccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an aggregation account Create an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>ApiResponse of AggregationAccount</returns>
        public ApiResponse< AggregationAccount > CreateAggregationAccountUsingPostWithHttpInfo (AggregationAccount aggregationAccount)
        {
            // verify the required parameter 'aggregationAccount' is set
            if (aggregationAccount == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccount' when calling AggregationAccountApi->CreateAggregationAccountUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccount != null && aggregationAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccount; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccount)));
        }

        /// <summary>
        /// Create an aggregation account Create an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>Task of AggregationAccount</returns>
        public async System.Threading.Tasks.Task<AggregationAccount> CreateAggregationAccountUsingPostAsync (AggregationAccount aggregationAccount)
        {
             ApiResponse<AggregationAccount> localVarResponse = await CreateAggregationAccountUsingPostAsyncWithHttpInfo(aggregationAccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an aggregation account Create an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregationAccount</param>
        /// <returns>Task of ApiResponse (AggregationAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccount>> CreateAggregationAccountUsingPostAsyncWithHttpInfo (AggregationAccount aggregationAccount)
        {
            // verify the required parameter 'aggregationAccount' is set
            if (aggregationAccount == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccount' when calling AggregationAccountApi->CreateAggregationAccountUsingPost");

            var localVarPath = "/nucleus/v1/aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccount != null && aggregationAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccount; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAggregationAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccount)));
        }

        /// <summary>
        /// Delete an aggregation account balance Permanently delete a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns></returns>
        public void DeleteAggregationAccountBalanceUsingDelete (Guid? aggregationAccountBalanceId)
        {
             DeleteAggregationAccountBalanceUsingDeleteWithHttpInfo(aggregationAccountBalanceId);
        }

        /// <summary>
        /// Delete an aggregation account balance Permanently delete a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAggregationAccountBalanceUsingDeleteWithHttpInfo (Guid? aggregationAccountBalanceId)
        {
            // verify the required parameter 'aggregationAccountBalanceId' is set
            if (aggregationAccountBalanceId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalanceId' when calling AggregationAccountApi->DeleteAggregationAccountBalanceUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalanceId != null) localVarPathParams.Add("aggregation_account_balance_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountBalanceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountBalanceUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an aggregation account balance Permanently delete a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAggregationAccountBalanceUsingDeleteAsync (Guid? aggregationAccountBalanceId)
        {
             await DeleteAggregationAccountBalanceUsingDeleteAsyncWithHttpInfo(aggregationAccountBalanceId);

        }

        /// <summary>
        /// Delete an aggregation account balance Permanently delete a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountBalanceUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountBalanceId)
        {
            // verify the required parameter 'aggregationAccountBalanceId' is set
            if (aggregationAccountBalanceId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalanceId' when calling AggregationAccountApi->DeleteAggregationAccountBalanceUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalanceId != null) localVarPathParams.Add("aggregation_account_balance_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountBalanceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountBalanceUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an aggregation account holding Permanently delete a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns></returns>
        public void DeleteAggregationAccountHoldingUsingDelete (Guid? aggregationAccountHoldingId)
        {
             DeleteAggregationAccountHoldingUsingDeleteWithHttpInfo(aggregationAccountHoldingId);
        }

        /// <summary>
        /// Delete an aggregation account holding Permanently delete a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAggregationAccountHoldingUsingDeleteWithHttpInfo (Guid? aggregationAccountHoldingId)
        {
            // verify the required parameter 'aggregationAccountHoldingId' is set
            if (aggregationAccountHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHoldingId' when calling AggregationAccountApi->DeleteAggregationAccountHoldingUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHoldingId != null) localVarPathParams.Add("aggregation_account_holding_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountHoldingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an aggregation account holding Permanently delete a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAggregationAccountHoldingUsingDeleteAsync (Guid? aggregationAccountHoldingId)
        {
             await DeleteAggregationAccountHoldingUsingDeleteAsyncWithHttpInfo(aggregationAccountHoldingId);

        }

        /// <summary>
        /// Delete an aggregation account holding Permanently delete a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountHoldingUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountHoldingId)
        {
            // verify the required parameter 'aggregationAccountHoldingId' is set
            if (aggregationAccountHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHoldingId' when calling AggregationAccountApi->DeleteAggregationAccountHoldingUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHoldingId != null) localVarPathParams.Add("aggregation_account_holding_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountHoldingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an aggregation account transaction Permanently delete a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns></returns>
        public void DeleteAggregationAccountTransactionUsingDelete (Guid? aggregationAccountTransactionId)
        {
             DeleteAggregationAccountTransactionUsingDeleteWithHttpInfo(aggregationAccountTransactionId);
        }

        /// <summary>
        /// Delete an aggregation account transaction Permanently delete a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAggregationAccountTransactionUsingDeleteWithHttpInfo (Guid? aggregationAccountTransactionId)
        {
            // verify the required parameter 'aggregationAccountTransactionId' is set
            if (aggregationAccountTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactionId' when calling AggregationAccountApi->DeleteAggregationAccountTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactionId != null) localVarPathParams.Add("aggregation_account_transaction_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an aggregation account transaction Permanently delete a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAggregationAccountTransactionUsingDeleteAsync (Guid? aggregationAccountTransactionId)
        {
             await DeleteAggregationAccountTransactionUsingDeleteAsyncWithHttpInfo(aggregationAccountTransactionId);

        }

        /// <summary>
        /// Delete an aggregation account transaction Permanently delete a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountTransactionUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountTransactionId)
        {
            // verify the required parameter 'aggregationAccountTransactionId' is set
            if (aggregationAccountTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactionId' when calling AggregationAccountApi->DeleteAggregationAccountTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactionId != null) localVarPathParams.Add("aggregation_account_transaction_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an aggregation account Permanently delete an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns></returns>
        public void DeleteAggregationAccountUsingDelete (Guid? aggregationAccountId)
        {
             DeleteAggregationAccountUsingDeleteWithHttpInfo(aggregationAccountId);
        }

        /// <summary>
        /// Delete an aggregation account Permanently delete an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAggregationAccountUsingDeleteWithHttpInfo (Guid? aggregationAccountId)
        {
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->DeleteAggregationAccountUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an aggregation account Permanently delete an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAggregationAccountUsingDeleteAsync (Guid? aggregationAccountId)
        {
             await DeleteAggregationAccountUsingDeleteAsyncWithHttpInfo(aggregationAccountId);

        }

        /// <summary>
        /// Delete an aggregation account Permanently delete an aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAggregationAccountUsingDeleteAsyncWithHttpInfo (Guid? aggregationAccountId)
        {
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->DeleteAggregationAccountUsingDelete");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAggregationAccountUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Object</returns>
        public Object GetAggregationAccountAggregateDataUsingGet (Guid? aggregationAccountId, string currencyConversion = null)
        {
             ApiResponse<Object> localVarResponse = GetAggregationAccountAggregateDataUsingGetWithHttpInfo(aggregationAccountId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAggregationAccountAggregateDataUsingGetWithHttpInfo (Guid? aggregationAccountId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->GetAggregationAccountAggregateDataUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}/aggregate_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountAggregateDataUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAggregationAccountAggregateDataUsingGetAsync (Guid? aggregationAccountId, string currencyConversion = null)
        {
             ApiResponse<Object> localVarResponse = await GetAggregationAccountAggregateDataUsingGetAsyncWithHttpInfo(aggregationAccountId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregationAccountAggregateDataUsingGetAsyncWithHttpInfo (Guid? aggregationAccountId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->GetAggregationAccountAggregateDataUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}/aggregate_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountAggregateDataUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List all aggregation accounts Get information for all aggregation accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccount</returns>
        public PageAggregationAccount GetAggregationAccountAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccount> localVarResponse = GetAggregationAccountAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all aggregation accounts Get information for all aggregation accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccount</returns>
        public ApiResponse< PageAggregationAccount > GetAggregationAccountAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccount)));
        }

        /// <summary>
        /// List all aggregation accounts Get information for all aggregation accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccount</returns>
        public async System.Threading.Tasks.Task<PageAggregationAccount> GetAggregationAccountAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccount> localVarResponse = await GetAggregationAccountAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all aggregation accounts Get information for all aggregation accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAggregationAccount>> GetAggregationAccountAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccount)));
        }

        /// <summary>
        /// List all aggregation account balances Get all of the balance records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccountBalance</returns>
        public PageAggregationAccountBalance GetAggregationAccountBalanceAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccountBalance> localVarResponse = GetAggregationAccountBalanceAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all aggregation account balances Get all of the balance records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccountBalance</returns>
        public ApiResponse< PageAggregationAccountBalance > GetAggregationAccountBalanceAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccountBalance)));
        }

        /// <summary>
        /// List all aggregation account balances Get all of the balance records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccountBalance</returns>
        public async System.Threading.Tasks.Task<PageAggregationAccountBalance> GetAggregationAccountBalanceAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccountBalance> localVarResponse = await GetAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all aggregation account balances Get all of the balance records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccountBalance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAggregationAccountBalance>> GetAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccountBalance)));
        }

        /// <summary>
        /// Retrieve an aggregation account balance Retrieve the information for a specific balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>AggregationAccountBalance</returns>
        public AggregationAccountBalance GetAggregationAccountBalanceUsingGet (Guid? aggregationAccountBalanceId, string currencyConversion = null)
        {
             ApiResponse<AggregationAccountBalance> localVarResponse = GetAggregationAccountBalanceUsingGetWithHttpInfo(aggregationAccountBalanceId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an aggregation account balance Retrieve the information for a specific balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of AggregationAccountBalance</returns>
        public ApiResponse< AggregationAccountBalance > GetAggregationAccountBalanceUsingGetWithHttpInfo (Guid? aggregationAccountBalanceId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountBalanceId' is set
            if (aggregationAccountBalanceId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalanceId' when calling AggregationAccountApi->GetAggregationAccountBalanceUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalanceId != null) localVarPathParams.Add("aggregation_account_balance_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountBalanceId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalance)));
        }

        /// <summary>
        /// Retrieve an aggregation account balance Retrieve the information for a specific balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of AggregationAccountBalance</returns>
        public async System.Threading.Tasks.Task<AggregationAccountBalance> GetAggregationAccountBalanceUsingGetAsync (Guid? aggregationAccountBalanceId, string currencyConversion = null)
        {
             ApiResponse<AggregationAccountBalance> localVarResponse = await GetAggregationAccountBalanceUsingGetAsyncWithHttpInfo(aggregationAccountBalanceId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an aggregation account balance Retrieve the information for a specific balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalance>> GetAggregationAccountBalanceUsingGetAsyncWithHttpInfo (Guid? aggregationAccountBalanceId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountBalanceId' is set
            if (aggregationAccountBalanceId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalanceId' when calling AggregationAccountApi->GetAggregationAccountBalanceUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalanceId != null) localVarPathParams.Add("aggregation_account_balance_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountBalanceId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountBalanceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalance)));
        }

        /// <summary>
        /// List all aggregation account holdings Get all of the holding records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccountHolding</returns>
        public PageAggregationAccountHolding GetAggregationAccountHoldingAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccountHolding> localVarResponse = GetAggregationAccountHoldingAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all aggregation account holdings Get all of the holding records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccountHolding</returns>
        public ApiResponse< PageAggregationAccountHolding > GetAggregationAccountHoldingAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccountHolding)));
        }

        /// <summary>
        /// List all aggregation account holdings Get all of the holding records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccountHolding</returns>
        public async System.Threading.Tasks.Task<PageAggregationAccountHolding> GetAggregationAccountHoldingAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccountHolding> localVarResponse = await GetAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all aggregation account holdings Get all of the holding records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccountHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAggregationAccountHolding>> GetAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccountHolding)));
        }

        /// <summary>
        /// Retrieve an aggregation account holding Retrieve the information for a specific holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>AggregationAccountHolding</returns>
        public AggregationAccountHolding GetAggregationAccountHoldingUsingGet (Guid? aggregationAccountHoldingId, string currencyConversion = null)
        {
             ApiResponse<AggregationAccountHolding> localVarResponse = GetAggregationAccountHoldingUsingGetWithHttpInfo(aggregationAccountHoldingId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an aggregation account holding Retrieve the information for a specific holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of AggregationAccountHolding</returns>
        public ApiResponse< AggregationAccountHolding > GetAggregationAccountHoldingUsingGetWithHttpInfo (Guid? aggregationAccountHoldingId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountHoldingId' is set
            if (aggregationAccountHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHoldingId' when calling AggregationAccountApi->GetAggregationAccountHoldingUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHoldingId != null) localVarPathParams.Add("aggregation_account_holding_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountHoldingId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHolding)));
        }

        /// <summary>
        /// Retrieve an aggregation account holding Retrieve the information for a specific holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of AggregationAccountHolding</returns>
        public async System.Threading.Tasks.Task<AggregationAccountHolding> GetAggregationAccountHoldingUsingGetAsync (Guid? aggregationAccountHoldingId, string currencyConversion = null)
        {
             ApiResponse<AggregationAccountHolding> localVarResponse = await GetAggregationAccountHoldingUsingGetAsyncWithHttpInfo(aggregationAccountHoldingId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an aggregation account holding Retrieve the information for a specific holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (AggregationAccountHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountHolding>> GetAggregationAccountHoldingUsingGetAsyncWithHttpInfo (Guid? aggregationAccountHoldingId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountHoldingId' is set
            if (aggregationAccountHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHoldingId' when calling AggregationAccountApi->GetAggregationAccountHoldingUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHoldingId != null) localVarPathParams.Add("aggregation_account_holding_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountHoldingId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHolding)));
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Object</returns>
        public Object GetAggregationAccountOverviewByBusinessIdUsingGet (Guid? businessId, string currencyConversion = null)
        {
             ApiResponse<Object> localVarResponse = GetAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo(businessId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo (Guid? businessId, string currencyConversion = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling AggregationAccountApi->GetAggregationAccountOverviewByBusinessIdUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/aggregation_account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountOverviewByBusinessIdUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAggregationAccountOverviewByBusinessIdUsingGetAsync (Guid? businessId, string currencyConversion = null)
        {
             ApiResponse<Object> localVarResponse = await GetAggregationAccountOverviewByBusinessIdUsingGetAsyncWithHttpInfo(businessId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregationAccountOverviewByBusinessIdUsingGetAsyncWithHttpInfo (Guid? businessId, string currencyConversion = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling AggregationAccountApi->GetAggregationAccountOverviewByBusinessIdUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/aggregation_account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountOverviewByBusinessIdUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Object</returns>
        public Object GetAggregationAccountOverviewUsingGet (Guid? clientId, string currencyConversion = null)
        {
             ApiResponse<Object> localVarResponse = GetAggregationAccountOverviewUsingGetWithHttpInfo(clientId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAggregationAccountOverviewUsingGetWithHttpInfo (Guid? clientId, string currencyConversion = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AggregationAccountApi->GetAggregationAccountOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/aggregation_account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAggregationAccountOverviewUsingGetAsync (Guid? clientId, string currencyConversion = null)
        {
             ApiResponse<Object> localVarResponse = await GetAggregationAccountOverviewUsingGetAsyncWithHttpInfo(clientId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an aggregation account aggregate data Retrieve the information for a specific aggregation account with aggregate data for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAggregationAccountOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, string currencyConversion = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AggregationAccountApi->GetAggregationAccountOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/aggregation_account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List all aggregation account transactions Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAggregationAccountTransaction</returns>
        public PageAggregationAccountTransaction GetAggregationAccountTransactionAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccountTransaction> localVarResponse = GetAggregationAccountTransactionAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all aggregation account transactions Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAggregationAccountTransaction</returns>
        public ApiResponse< PageAggregationAccountTransaction > GetAggregationAccountTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccountTransaction)));
        }

        /// <summary>
        /// List all aggregation account transactions Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAggregationAccountTransaction</returns>
        public async System.Threading.Tasks.Task<PageAggregationAccountTransaction> GetAggregationAccountTransactionAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAggregationAccountTransaction> localVarResponse = await GetAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all aggregation account transactions Get all of the transaction records for all aggregation accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAggregationAccountTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAggregationAccountTransaction>> GetAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/aggregation_account_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAggregationAccountTransaction)));
        }

        /// <summary>
        /// Retrieve an aggregation account transaction Retrieve the information for a specific transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>AggregationAccountTransaction</returns>
        public AggregationAccountTransaction GetAggregationAccountTransactionUsingGet (Guid? aggregationAccountTransactionId, string currencyConversion = null)
        {
             ApiResponse<AggregationAccountTransaction> localVarResponse = GetAggregationAccountTransactionUsingGetWithHttpInfo(aggregationAccountTransactionId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an aggregation account transaction Retrieve the information for a specific transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of AggregationAccountTransaction</returns>
        public ApiResponse< AggregationAccountTransaction > GetAggregationAccountTransactionUsingGetWithHttpInfo (Guid? aggregationAccountTransactionId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountTransactionId' is set
            if (aggregationAccountTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactionId' when calling AggregationAccountApi->GetAggregationAccountTransactionUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactionId != null) localVarPathParams.Add("aggregation_account_transaction_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountTransactionId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransaction)));
        }

        /// <summary>
        /// Retrieve an aggregation account transaction Retrieve the information for a specific transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of AggregationAccountTransaction</returns>
        public async System.Threading.Tasks.Task<AggregationAccountTransaction> GetAggregationAccountTransactionUsingGetAsync (Guid? aggregationAccountTransactionId, string currencyConversion = null)
        {
             ApiResponse<AggregationAccountTransaction> localVarResponse = await GetAggregationAccountTransactionUsingGetAsyncWithHttpInfo(aggregationAccountTransactionId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an aggregation account transaction Retrieve the information for a specific transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransaction>> GetAggregationAccountTransactionUsingGetAsyncWithHttpInfo (Guid? aggregationAccountTransactionId, string currencyConversion = null)
        {
            // verify the required parameter 'aggregationAccountTransactionId' is set
            if (aggregationAccountTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactionId' when calling AggregationAccountApi->GetAggregationAccountTransactionUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactionId != null) localVarPathParams.Add("aggregation_account_transaction_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountTransactionId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransaction)));
        }

        /// <summary>
        /// Retrieve an aggregation account Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>AggregationAccount</returns>
        public AggregationAccount GetAggregationAccountUsingGet (Guid? aggregationAccountId)
        {
             ApiResponse<AggregationAccount> localVarResponse = GetAggregationAccountUsingGetWithHttpInfo(aggregationAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an aggregation account Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccount</returns>
        public ApiResponse< AggregationAccount > GetAggregationAccountUsingGetWithHttpInfo (Guid? aggregationAccountId)
        {
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->GetAggregationAccountUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccount)));
        }

        /// <summary>
        /// Retrieve an aggregation account Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of AggregationAccount</returns>
        public async System.Threading.Tasks.Task<AggregationAccount> GetAggregationAccountUsingGetAsync (Guid? aggregationAccountId)
        {
             ApiResponse<AggregationAccount> localVarResponse = await GetAggregationAccountUsingGetAsyncWithHttpInfo(aggregationAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an aggregation account Retrieve the information for a specific aggregation account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccount>> GetAggregationAccountUsingGetAsyncWithHttpInfo (Guid? aggregationAccountId)
        {
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->GetAggregationAccountUsingGet");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAggregationAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccount)));
        }

        /// <summary>
        /// Update an aggregation account balance Update a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>AggregationAccountBalance</returns>
        public AggregationAccountBalance UpdateAggregationAccountBalanceUsingPut (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId)
        {
             ApiResponse<AggregationAccountBalance> localVarResponse = UpdateAggregationAccountBalanceUsingPutWithHttpInfo(aggregationAccountBalance, aggregationAccountBalanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an aggregation account balance Update a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>ApiResponse of AggregationAccountBalance</returns>
        public ApiResponse< AggregationAccountBalance > UpdateAggregationAccountBalanceUsingPutWithHttpInfo (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId)
        {
            // verify the required parameter 'aggregationAccountBalance' is set
            if (aggregationAccountBalance == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalance' when calling AggregationAccountApi->UpdateAggregationAccountBalanceUsingPut");
            // verify the required parameter 'aggregationAccountBalanceId' is set
            if (aggregationAccountBalanceId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalanceId' when calling AggregationAccountApi->UpdateAggregationAccountBalanceUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalanceId != null) localVarPathParams.Add("aggregation_account_balance_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountBalanceId)); // path parameter
            if (aggregationAccountBalance != null && aggregationAccountBalance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountBalance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountBalance; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountBalanceUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalance)));
        }

        /// <summary>
        /// Update an aggregation account balance Update a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of AggregationAccountBalance</returns>
        public async System.Threading.Tasks.Task<AggregationAccountBalance> UpdateAggregationAccountBalanceUsingPutAsync (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId)
        {
             ApiResponse<AggregationAccountBalance> localVarResponse = await UpdateAggregationAccountBalanceUsingPutAsyncWithHttpInfo(aggregationAccountBalance, aggregationAccountBalanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an aggregation account balance Update a balance record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountBalance">aggregation_account_balance</param>
        /// <param name="aggregationAccountBalanceId">UUID aggregation_account_balance_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountBalance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountBalance>> UpdateAggregationAccountBalanceUsingPutAsyncWithHttpInfo (Object aggregationAccountBalance, Guid? aggregationAccountBalanceId)
        {
            // verify the required parameter 'aggregationAccountBalance' is set
            if (aggregationAccountBalance == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalance' when calling AggregationAccountApi->UpdateAggregationAccountBalanceUsingPut");
            // verify the required parameter 'aggregationAccountBalanceId' is set
            if (aggregationAccountBalanceId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountBalanceId' when calling AggregationAccountApi->UpdateAggregationAccountBalanceUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountBalanceId != null) localVarPathParams.Add("aggregation_account_balance_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountBalanceId)); // path parameter
            if (aggregationAccountBalance != null && aggregationAccountBalance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountBalance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountBalance; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountBalanceUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountBalance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountBalance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountBalance)));
        }

        /// <summary>
        /// Update a bulk aggregation account Update a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>List&lt;AggregationAccount&gt;</returns>
        public List<AggregationAccount> UpdateAggregationAccountBulkUsingPut (List<Object> aggregationAccountList)
        {
             ApiResponse<List<AggregationAccount>> localVarResponse = UpdateAggregationAccountBulkUsingPutWithHttpInfo(aggregationAccountList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a bulk aggregation account Update a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>ApiResponse of List&lt;AggregationAccount&gt;</returns>
        public ApiResponse< List<AggregationAccount> > UpdateAggregationAccountBulkUsingPutWithHttpInfo (List<Object> aggregationAccountList)
        {
            // verify the required parameter 'aggregationAccountList' is set
            if (aggregationAccountList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountList' when calling AggregationAccountApi->UpdateAggregationAccountBulkUsingPut");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountList != null && aggregationAccountList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountBulkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccount>)));
        }

        /// <summary>
        /// Update a bulk aggregation account Update a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of List&lt;AggregationAccount&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccount>> UpdateAggregationAccountBulkUsingPutAsync (List<Object> aggregationAccountList)
        {
             ApiResponse<List<AggregationAccount>> localVarResponse = await UpdateAggregationAccountBulkUsingPutAsyncWithHttpInfo(aggregationAccountList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a bulk aggregation account Update a bulk aggregation account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountList">aggregationAccountList</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccount&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccount>>> UpdateAggregationAccountBulkUsingPutAsyncWithHttpInfo (List<Object> aggregationAccountList)
        {
            // verify the required parameter 'aggregationAccountList' is set
            if (aggregationAccountList == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountList' when calling AggregationAccountApi->UpdateAggregationAccountBulkUsingPut");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountList != null && aggregationAccountList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountBulkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccount>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccount>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccount>)));
        }

        /// <summary>
        /// Update an bulk aggregation account holding Update a bulk holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>List&lt;AggregationAccountHolding&gt;</returns>
        public List<AggregationAccountHolding> UpdateAggregationAccountHoldingBulkUsingPut (List<Object> aggregationAccountHolding)
        {
             ApiResponse<List<AggregationAccountHolding>> localVarResponse = UpdateAggregationAccountHoldingBulkUsingPutWithHttpInfo(aggregationAccountHolding);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an bulk aggregation account holding Update a bulk holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>ApiResponse of List&lt;AggregationAccountHolding&gt;</returns>
        public ApiResponse< List<AggregationAccountHolding> > UpdateAggregationAccountHoldingBulkUsingPutWithHttpInfo (List<Object> aggregationAccountHolding)
        {
            // verify the required parameter 'aggregationAccountHolding' is set
            if (aggregationAccountHolding == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHolding' when calling AggregationAccountApi->UpdateAggregationAccountHoldingBulkUsingPut");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHolding != null && aggregationAccountHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountHoldingBulkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountHolding>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountHolding>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountHolding>)));
        }

        /// <summary>
        /// Update an bulk aggregation account holding Update a bulk holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of List&lt;AggregationAccountHolding&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregationAccountHolding>> UpdateAggregationAccountHoldingBulkUsingPutAsync (List<Object> aggregationAccountHolding)
        {
             ApiResponse<List<AggregationAccountHolding>> localVarResponse = await UpdateAggregationAccountHoldingBulkUsingPutAsyncWithHttpInfo(aggregationAccountHolding);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an bulk aggregation account holding Update a bulk holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregationAccountHolding</param>
        /// <returns>Task of ApiResponse (List&lt;AggregationAccountHolding&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AggregationAccountHolding>>> UpdateAggregationAccountHoldingBulkUsingPutAsyncWithHttpInfo (List<Object> aggregationAccountHolding)
        {
            // verify the required parameter 'aggregationAccountHolding' is set
            if (aggregationAccountHolding == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHolding' when calling AggregationAccountApi->UpdateAggregationAccountHoldingBulkUsingPut");

            var localVarPath = "/nucleus/v1/bulk_aggregation_account_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHolding != null && aggregationAccountHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountHoldingBulkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AggregationAccountHolding>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AggregationAccountHolding>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AggregationAccountHolding>)));
        }

        /// <summary>
        /// Update an aggregation account holding Update a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>AggregationAccountHolding</returns>
        public AggregationAccountHolding UpdateAggregationAccountHoldingUsingPut (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId)
        {
             ApiResponse<AggregationAccountHolding> localVarResponse = UpdateAggregationAccountHoldingUsingPutWithHttpInfo(aggregationAccountHolding, aggregationAccountHoldingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an aggregation account holding Update a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>ApiResponse of AggregationAccountHolding</returns>
        public ApiResponse< AggregationAccountHolding > UpdateAggregationAccountHoldingUsingPutWithHttpInfo (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId)
        {
            // verify the required parameter 'aggregationAccountHolding' is set
            if (aggregationAccountHolding == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHolding' when calling AggregationAccountApi->UpdateAggregationAccountHoldingUsingPut");
            // verify the required parameter 'aggregationAccountHoldingId' is set
            if (aggregationAccountHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHoldingId' when calling AggregationAccountApi->UpdateAggregationAccountHoldingUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHoldingId != null) localVarPathParams.Add("aggregation_account_holding_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountHoldingId)); // path parameter
            if (aggregationAccountHolding != null && aggregationAccountHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountHoldingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHolding)));
        }

        /// <summary>
        /// Update an aggregation account holding Update a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of AggregationAccountHolding</returns>
        public async System.Threading.Tasks.Task<AggregationAccountHolding> UpdateAggregationAccountHoldingUsingPutAsync (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId)
        {
             ApiResponse<AggregationAccountHolding> localVarResponse = await UpdateAggregationAccountHoldingUsingPutAsyncWithHttpInfo(aggregationAccountHolding, aggregationAccountHoldingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an aggregation account holding Update a holding record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountHolding">aggregation_account_holding</param>
        /// <param name="aggregationAccountHoldingId">UUID aggregation_account_holding_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountHolding>> UpdateAggregationAccountHoldingUsingPutAsyncWithHttpInfo (Object aggregationAccountHolding, Guid? aggregationAccountHoldingId)
        {
            // verify the required parameter 'aggregationAccountHolding' is set
            if (aggregationAccountHolding == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHolding' when calling AggregationAccountApi->UpdateAggregationAccountHoldingUsingPut");
            // verify the required parameter 'aggregationAccountHoldingId' is set
            if (aggregationAccountHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountHoldingId' when calling AggregationAccountApi->UpdateAggregationAccountHoldingUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountHoldingId != null) localVarPathParams.Add("aggregation_account_holding_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountHoldingId)); // path parameter
            if (aggregationAccountHolding != null && aggregationAccountHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountHoldingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountHolding)));
        }

        /// <summary>
        /// Update an aggregation account transaction Update a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>AggregationAccountTransaction</returns>
        public AggregationAccountTransaction UpdateAggregationAccountTransactionUsingPut (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId)
        {
             ApiResponse<AggregationAccountTransaction> localVarResponse = UpdateAggregationAccountTransactionUsingPutWithHttpInfo(aggregationAccountTransaction, aggregationAccountTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an aggregation account transaction Update a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>ApiResponse of AggregationAccountTransaction</returns>
        public ApiResponse< AggregationAccountTransaction > UpdateAggregationAccountTransactionUsingPutWithHttpInfo (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId)
        {
            // verify the required parameter 'aggregationAccountTransaction' is set
            if (aggregationAccountTransaction == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransaction' when calling AggregationAccountApi->UpdateAggregationAccountTransactionUsingPut");
            // verify the required parameter 'aggregationAccountTransactionId' is set
            if (aggregationAccountTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactionId' when calling AggregationAccountApi->UpdateAggregationAccountTransactionUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactionId != null) localVarPathParams.Add("aggregation_account_transaction_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountTransactionId)); // path parameter
            if (aggregationAccountTransaction != null && aggregationAccountTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransaction)));
        }

        /// <summary>
        /// Update an aggregation account transaction Update a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of AggregationAccountTransaction</returns>
        public async System.Threading.Tasks.Task<AggregationAccountTransaction> UpdateAggregationAccountTransactionUsingPutAsync (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId)
        {
             ApiResponse<AggregationAccountTransaction> localVarResponse = await UpdateAggregationAccountTransactionUsingPutAsyncWithHttpInfo(aggregationAccountTransaction, aggregationAccountTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an aggregation account transaction Update a transaction record for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccountTransaction">aggregation_account_transaction</param>
        /// <param name="aggregationAccountTransactionId">UUID aggregation_account_transaction_id</param>
        /// <returns>Task of ApiResponse (AggregationAccountTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccountTransaction>> UpdateAggregationAccountTransactionUsingPutAsyncWithHttpInfo (Object aggregationAccountTransaction, Guid? aggregationAccountTransactionId)
        {
            // verify the required parameter 'aggregationAccountTransaction' is set
            if (aggregationAccountTransaction == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransaction' when calling AggregationAccountApi->UpdateAggregationAccountTransactionUsingPut");
            // verify the required parameter 'aggregationAccountTransactionId' is set
            if (aggregationAccountTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountTransactionId' when calling AggregationAccountApi->UpdateAggregationAccountTransactionUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountTransactionId != null) localVarPathParams.Add("aggregation_account_transaction_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountTransactionId)); // path parameter
            if (aggregationAccountTransaction != null && aggregationAccountTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccountTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccountTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccountTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccountTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccountTransaction)));
        }

        /// <summary>
        /// Update an aggregation account Update the information for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>AggregationAccount</returns>
        public AggregationAccount UpdateAggregationAccountUsingPut (Object aggregationAccount, Guid? aggregationAccountId)
        {
             ApiResponse<AggregationAccount> localVarResponse = UpdateAggregationAccountUsingPutWithHttpInfo(aggregationAccount, aggregationAccountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an aggregation account Update the information for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>ApiResponse of AggregationAccount</returns>
        public ApiResponse< AggregationAccount > UpdateAggregationAccountUsingPutWithHttpInfo (Object aggregationAccount, Guid? aggregationAccountId)
        {
            // verify the required parameter 'aggregationAccount' is set
            if (aggregationAccount == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccount' when calling AggregationAccountApi->UpdateAggregationAccountUsingPut");
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->UpdateAggregationAccountUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter
            if (aggregationAccount != null && aggregationAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccount; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccount)));
        }

        /// <summary>
        /// Update an aggregation account Update the information for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of AggregationAccount</returns>
        public async System.Threading.Tasks.Task<AggregationAccount> UpdateAggregationAccountUsingPutAsync (Object aggregationAccount, Guid? aggregationAccountId)
        {
             ApiResponse<AggregationAccount> localVarResponse = await UpdateAggregationAccountUsingPutAsyncWithHttpInfo(aggregationAccount, aggregationAccountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an aggregation account Update the information for an aggregation account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aggregationAccount">aggregation_account</param>
        /// <param name="aggregationAccountId">UUID aggregation_account_id</param>
        /// <returns>Task of ApiResponse (AggregationAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AggregationAccount>> UpdateAggregationAccountUsingPutAsyncWithHttpInfo (Object aggregationAccount, Guid? aggregationAccountId)
        {
            // verify the required parameter 'aggregationAccount' is set
            if (aggregationAccount == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccount' when calling AggregationAccountApi->UpdateAggregationAccountUsingPut");
            // verify the required parameter 'aggregationAccountId' is set
            if (aggregationAccountId == null)
                throw new ApiException(400, "Missing required parameter 'aggregationAccountId' when calling AggregationAccountApi->UpdateAggregationAccountUsingPut");

            var localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aggregationAccountId != null) localVarPathParams.Add("aggregation_account_id", this.Configuration.ApiClient.ParameterToString(aggregationAccountId)); // path parameter
            if (aggregationAccount != null && aggregationAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aggregationAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aggregationAccount; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAggregationAccountUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AggregationAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AggregationAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AggregationAccount)));
        }

    }
}
