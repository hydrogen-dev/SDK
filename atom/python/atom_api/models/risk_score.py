# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RiskScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'answers': 'list[float]',
        'max_answers': 'list[float]',
        'weights': 'list[float]'
    }

    attribute_map = {
        'answers': 'answers',
        'max_answers': 'max_answers',
        'weights': 'weights'
    }

    def __init__(self, answers=None, max_answers=None, weights=None):  # noqa: E501
        """RiskScore - a model defined in Swagger"""  # noqa: E501

        self._answers = None
        self._max_answers = None
        self._weights = None
        self.discriminator = None

        self.answers = answers
        self.max_answers = max_answers
        if weights is not None:
            self.weights = weights

    @property
    def answers(self):
        """Gets the answers of this RiskScore.  # noqa: E501

        Answer values  # noqa: E501

        :return: The answers of this RiskScore.  # noqa: E501
        :rtype: list[float]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this RiskScore.

        Answer values  # noqa: E501

        :param answers: The answers of this RiskScore.  # noqa: E501
        :type: list[float]
        """
        if answers is None:
            raise ValueError("Invalid value for `answers`, must not be `None`")  # noqa: E501

        self._answers = answers

    @property
    def max_answers(self):
        """Gets the max_answers of this RiskScore.  # noqa: E501

        Maximum possible answer values  # noqa: E501

        :return: The max_answers of this RiskScore.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_answers

    @max_answers.setter
    def max_answers(self, max_answers):
        """Sets the max_answers of this RiskScore.

        Maximum possible answer values  # noqa: E501

        :param max_answers: The max_answers of this RiskScore.  # noqa: E501
        :type: list[float]
        """
        if max_answers is None:
            raise ValueError("Invalid value for `max_answers`, must not be `None`")  # noqa: E501

        self._max_answers = max_answers

    @property
    def weights(self):
        """Gets the weights of this RiskScore.  # noqa: E501

        Weights for each answer  # noqa: E501

        :return: The weights of this RiskScore.  # noqa: E501
        :rtype: list[float]
        """
        return self._weights

    @weights.setter
    def weights(self, weights):
        """Sets the weights of this RiskScore.

        Weights for each answer  # noqa: E501

        :param weights: The weights of this RiskScore.  # noqa: E501
        :type: list[float]
        """

        self._weights = weights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
