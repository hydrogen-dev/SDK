/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiCallback;
import com.hydrogen.proton.ApiResponse;
import com.hydrogen.proton.Configuration;
import com.hydrogen.proton.model.BusinessFinancialHealthCheckRequest;
import com.hydrogen.proton.model.BusinessInvoiceAnalysisRequest;
import com.hydrogen.proton.model.CashAnalysisRequest;
import com.hydrogen.proton.model.CustomerAnalysisRequest;
import com.hydrogen.proton.model.FinancialStatementAnalysisRequest;
import com.hydrogen.proton.ApiClient;
import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.Pair;
import com.hydrogen.proton.ProgressRequestBody;
import com.hydrogen.proton.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessFinancialManagementApi {
    private ApiClient apiClient;

    public BusinessFinancialManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessFinancialManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for businessFinancialHealthCheck
     * @param businessFinancialHealthCheckRequest Request payload for Business Financial Health Check (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call businessFinancialHealthCheckCall(BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = businessFinancialHealthCheckRequest;

        // create path and map variables
        String localVarPath = "/business/financial_health_check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call businessFinancialHealthCheckValidateBeforeCall(BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessFinancialHealthCheckRequest' is set
        if (businessFinancialHealthCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'businessFinancialHealthCheckRequest' when calling businessFinancialHealthCheck(Async)");
        }
        

        com.squareup.okhttp.Call call = businessFinancialHealthCheckCall(businessFinancialHealthCheckRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Business Financial Health Check
     * Calculate a series of financial ratios to assess business financial health
     * @param businessFinancialHealthCheckRequest Request payload for Business Financial Health Check (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> businessFinancialHealthCheck(BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = businessFinancialHealthCheckWithHttpInfo(businessFinancialHealthCheckRequest);
        return resp.getData();
    }

    /**
     * Business Financial Health Check
     * Calculate a series of financial ratios to assess business financial health
     * @param businessFinancialHealthCheckRequest Request payload for Business Financial Health Check (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> businessFinancialHealthCheckWithHttpInfo(BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest) throws ApiException {
        com.squareup.okhttp.Call call = businessFinancialHealthCheckValidateBeforeCall(businessFinancialHealthCheckRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Business Financial Health Check (asynchronously)
     * Calculate a series of financial ratios to assess business financial health
     * @param businessFinancialHealthCheckRequest Request payload for Business Financial Health Check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call businessFinancialHealthCheckAsync(BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = businessFinancialHealthCheckValidateBeforeCall(businessFinancialHealthCheckRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cashAnalysis
     * @param cashAnalysisRequest Request payload for Cash Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cashAnalysisCall(CashAnalysisRequest cashAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cashAnalysisRequest;

        // create path and map variables
        String localVarPath = "/business/cash_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cashAnalysisValidateBeforeCall(CashAnalysisRequest cashAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cashAnalysisRequest' is set
        if (cashAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'cashAnalysisRequest' when calling cashAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = cashAnalysisCall(cashAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cash Analysis
     * Analyze cash activity over time
     * @param cashAnalysisRequest Request payload for Cash Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> cashAnalysis(CashAnalysisRequest cashAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = cashAnalysisWithHttpInfo(cashAnalysisRequest);
        return resp.getData();
    }

    /**
     * Cash Analysis
     * Analyze cash activity over time
     * @param cashAnalysisRequest Request payload for Cash Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> cashAnalysisWithHttpInfo(CashAnalysisRequest cashAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = cashAnalysisValidateBeforeCall(cashAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cash Analysis (asynchronously)
     * Analyze cash activity over time
     * @param cashAnalysisRequest Request payload for Cash Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cashAnalysisAsync(CashAnalysisRequest cashAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cashAnalysisValidateBeforeCall(cashAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerAnalysis
     * @param customerAnalysisRequest Request payload for Customer Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerAnalysisCall(CustomerAnalysisRequest customerAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customerAnalysisRequest;

        // create path and map variables
        String localVarPath = "/business/customer_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerAnalysisValidateBeforeCall(CustomerAnalysisRequest customerAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerAnalysisRequest' is set
        if (customerAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'customerAnalysisRequest' when calling customerAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = customerAnalysisCall(customerAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Customer Analysis
     * Analyze customer revenues over a time period
     * @param customerAnalysisRequest Request payload for Customer Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> customerAnalysis(CustomerAnalysisRequest customerAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = customerAnalysisWithHttpInfo(customerAnalysisRequest);
        return resp.getData();
    }

    /**
     * Customer Analysis
     * Analyze customer revenues over a time period
     * @param customerAnalysisRequest Request payload for Customer Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> customerAnalysisWithHttpInfo(CustomerAnalysisRequest customerAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = customerAnalysisValidateBeforeCall(customerAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Customer Analysis (asynchronously)
     * Analyze customer revenues over a time period
     * @param customerAnalysisRequest Request payload for Customer Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerAnalysisAsync(CustomerAnalysisRequest customerAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerAnalysisValidateBeforeCall(customerAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for financialStatementAnalysis
     * @param financialStatementAnalysisRequest Request payload for Financial Statement Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call financialStatementAnalysisCall(FinancialStatementAnalysisRequest financialStatementAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = financialStatementAnalysisRequest;

        // create path and map variables
        String localVarPath = "/business/financial_statement_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call financialStatementAnalysisValidateBeforeCall(FinancialStatementAnalysisRequest financialStatementAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financialStatementAnalysisRequest' is set
        if (financialStatementAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'financialStatementAnalysisRequest' when calling financialStatementAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = financialStatementAnalysisCall(financialStatementAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Financial Statement Analysis
     * Analyze financial statement accounting data for a business
     * @param financialStatementAnalysisRequest Request payload for Financial Statement Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> financialStatementAnalysis(FinancialStatementAnalysisRequest financialStatementAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = financialStatementAnalysisWithHttpInfo(financialStatementAnalysisRequest);
        return resp.getData();
    }

    /**
     * Financial Statement Analysis
     * Analyze financial statement accounting data for a business
     * @param financialStatementAnalysisRequest Request payload for Financial Statement Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> financialStatementAnalysisWithHttpInfo(FinancialStatementAnalysisRequest financialStatementAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = financialStatementAnalysisValidateBeforeCall(financialStatementAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Financial Statement Analysis (asynchronously)
     * Analyze financial statement accounting data for a business
     * @param financialStatementAnalysisRequest Request payload for Financial Statement Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call financialStatementAnalysisAsync(FinancialStatementAnalysisRequest financialStatementAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = financialStatementAnalysisValidateBeforeCall(financialStatementAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceAnalysis
     * @param invoiceAnalysisRequest Request payload for Invoice Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceAnalysisCall(BusinessInvoiceAnalysisRequest invoiceAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = invoiceAnalysisRequest;

        // create path and map variables
        String localVarPath = "/business/invoice_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceAnalysisValidateBeforeCall(BusinessInvoiceAnalysisRequest invoiceAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoiceAnalysisRequest' is set
        if (invoiceAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'invoiceAnalysisRequest' when calling invoiceAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceAnalysisCall(invoiceAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Invoice Analysis
     * Analyze invoices to understand the context of money owed and paid to a business
     * @param invoiceAnalysisRequest Request payload for Invoice Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> invoiceAnalysis(BusinessInvoiceAnalysisRequest invoiceAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = invoiceAnalysisWithHttpInfo(invoiceAnalysisRequest);
        return resp.getData();
    }

    /**
     * Invoice Analysis
     * Analyze invoices to understand the context of money owed and paid to a business
     * @param invoiceAnalysisRequest Request payload for Invoice Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> invoiceAnalysisWithHttpInfo(BusinessInvoiceAnalysisRequest invoiceAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = invoiceAnalysisValidateBeforeCall(invoiceAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Invoice Analysis (asynchronously)
     * Analyze invoices to understand the context of money owed and paid to a business
     * @param invoiceAnalysisRequest Request payload for Invoice Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceAnalysisAsync(BusinessInvoiceAnalysisRequest invoiceAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceAnalysisValidateBeforeCall(invoiceAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
