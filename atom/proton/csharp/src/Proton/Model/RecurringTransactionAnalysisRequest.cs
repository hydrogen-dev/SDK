/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// RecurringTransactionAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class RecurringTransactionAnalysisRequest :  IEquatable<RecurringTransactionAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            
            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 2,
            
            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 3
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringTransactionAnalysisRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="scope">scope (default to ScopeEnum.All).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="intervalDeviationThreshold">intervalDeviationThreshold (default to 3).</param>
        /// <param name="amountDeviationThreshold">amountDeviationThreshold (default to 0.05F).</param>
        /// <param name="analyzeTransactions">analyzeTransactions (default to true).</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="flagTransactions">flagTransactions (default to false).</param>
        /// <param name="transactionStatusScope">transactionStatusScope.</param>
        /// <param name="onlyCleansed">onlyCleansed (default to false).</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        /// <param name="showRecurringDetails">showRecurringDetails (default to false).</param>
        public RecurringTransactionAnalysisRequest(string currencyCode = default(string), Guid? clientId = default(Guid?), ScopeEnum? scope = ScopeEnum.All, DateTime? endDate = default(DateTime?), List<Guid?> accountIds = default(List<Guid?>), string currencyConversion = default(string), int? intervalDeviationThreshold = 3, float? amountDeviationThreshold = 0.05F, bool? analyzeTransactions = true, DateTime? startDate = default(DateTime?), bool? flagTransactions = false, List<string> transactionStatusScope = default(List<string>), bool? onlyCleansed = false, List<Guid?> aggregationAccountIds = default(List<Guid?>), bool? showRecurringDetails = false)
        {
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = ScopeEnum.All;
            }
            else
            {
                this.Scope = scope;
            }
            this.EndDate = endDate;
            this.AccountIds = accountIds;
            this.CurrencyConversion = currencyConversion;
            // use default value if no "intervalDeviationThreshold" provided
            if (intervalDeviationThreshold == null)
            {
                this.IntervalDeviationThreshold = 3;
            }
            else
            {
                this.IntervalDeviationThreshold = intervalDeviationThreshold;
            }
            // use default value if no "amountDeviationThreshold" provided
            if (amountDeviationThreshold == null)
            {
                this.AmountDeviationThreshold = 0.05F;
            }
            else
            {
                this.AmountDeviationThreshold = amountDeviationThreshold;
            }
            // use default value if no "analyzeTransactions" provided
            if (analyzeTransactions == null)
            {
                this.AnalyzeTransactions = true;
            }
            else
            {
                this.AnalyzeTransactions = analyzeTransactions;
            }
            this.StartDate = startDate;
            // use default value if no "flagTransactions" provided
            if (flagTransactions == null)
            {
                this.FlagTransactions = false;
            }
            else
            {
                this.FlagTransactions = flagTransactions;
            }
            this.TransactionStatusScope = transactionStatusScope;
            // use default value if no "onlyCleansed" provided
            if (onlyCleansed == null)
            {
                this.OnlyCleansed = false;
            }
            else
            {
                this.OnlyCleansed = onlyCleansed;
            }
            this.AggregationAccountIds = aggregationAccountIds;
            // use default value if no "showRecurringDetails" provided
            if (showRecurringDetails == null)
            {
                this.ShowRecurringDetails = false;
            }
            else
            {
                this.ShowRecurringDetails = showRecurringDetails;
            }
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }


        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets IntervalDeviationThreshold
        /// </summary>
        [DataMember(Name="interval_deviation_threshold", EmitDefaultValue=false)]
        public int? IntervalDeviationThreshold { get; set; }

        /// <summary>
        /// Gets or Sets AmountDeviationThreshold
        /// </summary>
        [DataMember(Name="amount_deviation_threshold", EmitDefaultValue=false)]
        public float? AmountDeviationThreshold { get; set; }

        /// <summary>
        /// Gets or Sets AnalyzeTransactions
        /// </summary>
        [DataMember(Name="analyze_transactions", EmitDefaultValue=false)]
        public bool? AnalyzeTransactions { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets FlagTransactions
        /// </summary>
        [DataMember(Name="flag_transactions", EmitDefaultValue=false)]
        public bool? FlagTransactions { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusScope
        /// </summary>
        [DataMember(Name="transaction_status_scope", EmitDefaultValue=false)]
        public List<string> TransactionStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets OnlyCleansed
        /// </summary>
        [DataMember(Name="only_cleansed", EmitDefaultValue=false)]
        public bool? OnlyCleansed { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Gets or Sets ShowRecurringDetails
        /// </summary>
        [DataMember(Name="show_recurring_details", EmitDefaultValue=false)]
        public bool? ShowRecurringDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecurringTransactionAnalysisRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  IntervalDeviationThreshold: ").Append(IntervalDeviationThreshold).Append("\n");
            sb.Append("  AmountDeviationThreshold: ").Append(AmountDeviationThreshold).Append("\n");
            sb.Append("  AnalyzeTransactions: ").Append(AnalyzeTransactions).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  FlagTransactions: ").Append(FlagTransactions).Append("\n");
            sb.Append("  TransactionStatusScope: ").Append(TransactionStatusScope).Append("\n");
            sb.Append("  OnlyCleansed: ").Append(OnlyCleansed).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("  ShowRecurringDetails: ").Append(ShowRecurringDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurringTransactionAnalysisRequest);
        }

        /// <summary>
        /// Returns true if RecurringTransactionAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurringTransactionAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurringTransactionAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.IntervalDeviationThreshold == input.IntervalDeviationThreshold ||
                    (this.IntervalDeviationThreshold != null &&
                    this.IntervalDeviationThreshold.Equals(input.IntervalDeviationThreshold))
                ) && 
                (
                    this.AmountDeviationThreshold == input.AmountDeviationThreshold ||
                    (this.AmountDeviationThreshold != null &&
                    this.AmountDeviationThreshold.Equals(input.AmountDeviationThreshold))
                ) && 
                (
                    this.AnalyzeTransactions == input.AnalyzeTransactions ||
                    (this.AnalyzeTransactions != null &&
                    this.AnalyzeTransactions.Equals(input.AnalyzeTransactions))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.FlagTransactions == input.FlagTransactions ||
                    (this.FlagTransactions != null &&
                    this.FlagTransactions.Equals(input.FlagTransactions))
                ) && 
                (
                    this.TransactionStatusScope == input.TransactionStatusScope ||
                    this.TransactionStatusScope != null &&
                    this.TransactionStatusScope.SequenceEqual(input.TransactionStatusScope)
                ) && 
                (
                    this.OnlyCleansed == input.OnlyCleansed ||
                    (this.OnlyCleansed != null &&
                    this.OnlyCleansed.Equals(input.OnlyCleansed))
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                ) && 
                (
                    this.ShowRecurringDetails == input.ShowRecurringDetails ||
                    (this.ShowRecurringDetails != null &&
                    this.ShowRecurringDetails.Equals(input.ShowRecurringDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.IntervalDeviationThreshold != null)
                    hashCode = hashCode * 59 + this.IntervalDeviationThreshold.GetHashCode();
                if (this.AmountDeviationThreshold != null)
                    hashCode = hashCode * 59 + this.AmountDeviationThreshold.GetHashCode();
                if (this.AnalyzeTransactions != null)
                    hashCode = hashCode * 59 + this.AnalyzeTransactions.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.FlagTransactions != null)
                    hashCode = hashCode * 59 + this.FlagTransactions.GetHashCode();
                if (this.TransactionStatusScope != null)
                    hashCode = hashCode * 59 + this.TransactionStatusScope.GetHashCode();
                if (this.OnlyCleansed != null)
                    hashCode = hashCode * 59 + this.OnlyCleansed.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                if (this.ShowRecurringDetails != null)
                    hashCode = hashCode * 59 + this.ShowRecurringDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IntervalDeviationThreshold (int?) minimum
            if(this.IntervalDeviationThreshold < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IntervalDeviationThreshold, must be a value greater than or equal to 0.", new [] { "IntervalDeviationThreshold" });
            }

            // AmountDeviationThreshold (float?) maximum
            if(this.AmountDeviationThreshold > (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountDeviationThreshold, must be a value less than or equal to 1.", new [] { "AmountDeviationThreshold" });
            }

            // AmountDeviationThreshold (float?) minimum
            if(this.AmountDeviationThreshold < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountDeviationThreshold, must be a value greater than or equal to 0.", new [] { "AmountDeviationThreshold" });
            }

            yield break;
        }
    }

}
