=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NucleusApi
  class FundingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bank link
    # Create a new bank link for an account.
    # @param bank_link_info_request bankLinkInfoRequest
    # @param [Hash] opts the optional parameters
    # @return [BankLink]
    def create_bank_link_using_post(bank_link_info_request, opts = {})
      data, _status_code, _headers = create_bank_link_using_post_with_http_info(bank_link_info_request, opts)
      data
    end

    # Create a bank link
    # Create a new bank link for an account.
    # @param bank_link_info_request bankLinkInfoRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankLink, Fixnum, Hash)>] BankLink data, response status code and response headers
    def create_bank_link_using_post_with_http_info(bank_link_info_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.create_bank_link_using_post ...'
      end
      # verify the required parameter 'bank_link_info_request' is set
      if @api_client.config.client_side_validation && bank_link_info_request.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_info_request' when calling FundingApi.create_bank_link_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bank_link_info_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#create_bank_link_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a funding transaction request
    # Create a new funding transaction request for an account.
    # @param funding_transaction_request fundingTransactionRequest
    # @param [Hash] opts the optional parameters
    # @return [FundingTransaction]
    def create_funding_transaction_using_post(funding_transaction_request, opts = {})
      data, _status_code, _headers = create_funding_transaction_using_post_with_http_info(funding_transaction_request, opts)
      data
    end

    # Create a funding transaction request
    # Create a new funding transaction request for an account.
    # @param funding_transaction_request fundingTransactionRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingTransaction, Fixnum, Hash)>] FundingTransaction data, response status code and response headers
    def create_funding_transaction_using_post_with_http_info(funding_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.create_funding_transaction_using_post ...'
      end
      # verify the required parameter 'funding_transaction_request' is set
      if @api_client.config.client_side_validation && funding_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'funding_transaction_request' when calling FundingApi.create_funding_transaction_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding_transaction'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(funding_transaction_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#create_funding_transaction_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a funding request
    # Create a new funding request for an account. 
    # @param funding_request fundingRequest
    # @param [Hash] opts the optional parameters
    # @return [Funding]
    def create_funding_using_post(funding_request, opts = {})
      data, _status_code, _headers = create_funding_using_post_with_http_info(funding_request, opts)
      data
    end

    # Create a funding request
    # Create a new funding request for an account. 
    # @param funding_request fundingRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Funding, Fixnum, Hash)>] Funding data, response status code and response headers
    def create_funding_using_post_with_http_info(funding_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.create_funding_using_post ...'
      end
      # verify the required parameter 'funding_request' is set
      if @api_client.config.client_side_validation && funding_request.nil?
        fail ArgumentError, "Missing the required parameter 'funding_request' when calling FundingApi.create_funding_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(funding_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Funding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#create_funding_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a transfer requests
    # Create a new external account transfer for a client account.
    # @param external_account_transfer_request externalAccountTransferRequest
    # @param [Hash] opts the optional parameters
    # @return [ExternalAccountTransfer]
    def create_transfer_using_post(external_account_transfer_request, opts = {})
      data, _status_code, _headers = create_transfer_using_post_with_http_info(external_account_transfer_request, opts)
      data
    end

    # Create a transfer requests
    # Create a new external account transfer for a client account.
    # @param external_account_transfer_request externalAccountTransferRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalAccountTransfer, Fixnum, Hash)>] ExternalAccountTransfer data, response status code and response headers
    def create_transfer_using_post_with_http_info(external_account_transfer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.create_transfer_using_post ...'
      end
      # verify the required parameter 'external_account_transfer_request' is set
      if @api_client.config.client_side_validation && external_account_transfer_request.nil?
        fail ArgumentError, "Missing the required parameter 'external_account_transfer_request' when calling FundingApi.create_transfer_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(external_account_transfer_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExternalAccountTransfer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#create_transfer_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a bank link
    # Permanently delete a bank link defined for an account.
    # @param bank_link_id UUID bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bank_link_using_delete(bank_link_id, opts = {})
      delete_bank_link_using_delete_with_http_info(bank_link_id, opts)
      nil
    end

    # Delete a bank link
    # Permanently delete a bank link defined for an account.
    # @param bank_link_id UUID bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bank_link_using_delete_with_http_info(bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.delete_bank_link_using_delete ...'
      end
      # verify the required parameter 'bank_link_id' is set
      if @api_client.config.client_side_validation && bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_id' when calling FundingApi.delete_bank_link_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link/{bank_link_id}'.sub('{' + 'bank_link_id' + '}', bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#delete_bank_link_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a funding transaction request
    # Permanently delete a funding transaction request for an account.
    # @param funding_transaction_id UUID funding_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_funding_transaction_using_delete(funding_transaction_id, opts = {})
      delete_funding_transaction_using_delete_with_http_info(funding_transaction_id, opts)
      nil
    end

    # Delete a funding transaction request
    # Permanently delete a funding transaction request for an account.
    # @param funding_transaction_id UUID funding_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_funding_transaction_using_delete_with_http_info(funding_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.delete_funding_transaction_using_delete ...'
      end
      # verify the required parameter 'funding_transaction_id' is set
      if @api_client.config.client_side_validation && funding_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_transaction_id' when calling FundingApi.delete_funding_transaction_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding_transaction/{funding_transaction_id}'.sub('{' + 'funding_transaction_id' + '}', funding_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#delete_funding_transaction_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a funding request
    # Permanently delete a funding request defined for an account.
    # @param funding_id UUID funding_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_funding_using_delete(funding_id, opts = {})
      delete_funding_using_delete_with_http_info(funding_id, opts)
      nil
    end

    # Delete a funding request
    # Permanently delete a funding request defined for an account.
    # @param funding_id UUID funding_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_funding_using_delete_with_http_info(funding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.delete_funding_using_delete ...'
      end
      # verify the required parameter 'funding_id' is set
      if @api_client.config.client_side_validation && funding_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_id' when calling FundingApi.delete_funding_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding/{funding_id}'.sub('{' + 'funding_id' + '}', funding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#delete_funding_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a transfer request
    # Permanently delete a external account transfer from a client account.
    # @param transfer_id UUID external_account_transfer_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transfer_using_delete(transfer_id, opts = {})
      delete_transfer_using_delete_with_http_info(transfer_id, opts)
      nil
    end

    # Delete a transfer request
    # Permanently delete a external account transfer from a client account.
    # @param transfer_id UUID external_account_transfer_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transfer_using_delete_with_http_info(transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.delete_transfer_using_delete ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling FundingApi.delete_transfer_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer/{transfer_id}'.sub('{' + 'transfer_id' + '}', transfer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#delete_transfer_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all bank links
    # Get all bank links defined for all clients defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageBankLink]
    def get_bank_link_all_using_get(opts = {})
      data, _status_code, _headers = get_bank_link_all_using_get_with_http_info(opts)
      data
    end

    # List all bank links
    # Get all bank links defined for all clients defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageBankLink, Fixnum, Hash)>] PageBankLink data, response status code and response headers
    def get_bank_link_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_bank_link_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageBankLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_bank_link_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a bank link
    # Retrieve the information for a bank link for an account.
    # @param bank_link_id UUID bank_link_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [BankLink]
    def get_bank_link_using_get(bank_link_id, opts = {})
      data, _status_code, _headers = get_bank_link_using_get_with_http_info(bank_link_id, opts)
      data
    end

    # Retrieve a bank link
    # Retrieve the information for a bank link for an account.
    # @param bank_link_id UUID bank_link_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(BankLink, Fixnum, Hash)>] BankLink data, response status code and response headers
    def get_bank_link_using_get_with_http_info(bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_bank_link_using_get ...'
      end
      # verify the required parameter 'bank_link_id' is set
      if @api_client.config.client_side_validation && bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_id' when calling FundingApi.get_bank_link_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link/{bank_link_id}'.sub('{' + 'bank_link_id' + '}', bank_link_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_bank_link_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all funding requests 
    # Get the information for all funding requests defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageFunding]
    def get_funding_all_using_get(opts = {})
      data, _status_code, _headers = get_funding_all_using_get_with_http_info(opts)
      data
    end

    # List all funding requests 
    # Get the information for all funding requests defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageFunding, Fixnum, Hash)>] PageFunding data, response status code and response headers
    def get_funding_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_funding_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/funding'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageFunding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_funding_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all funding transaction requests
    # Get the information for all funding transaction requests for all clients.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageFundingTransaction]
    def get_funding_transaction_all_using_get(opts = {})
      data, _status_code, _headers = get_funding_transaction_all_using_get_with_http_info(opts)
      data
    end

    # List all funding transaction requests
    # Get the information for all funding transaction requests for all clients.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageFundingTransaction, Fixnum, Hash)>] PageFundingTransaction data, response status code and response headers
    def get_funding_transaction_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_funding_transaction_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/funding_transaction'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageFundingTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_funding_transaction_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a funding transaction request
    # Retrieve the information for a funding transaction request for an account.
    # @param funding_transaction_id UUID funding_transaction_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [FundingTransaction]
    def get_funding_transaction_using_get(funding_transaction_id, opts = {})
      data, _status_code, _headers = get_funding_transaction_using_get_with_http_info(funding_transaction_id, opts)
      data
    end

    # Retrieve a funding transaction request
    # Retrieve the information for a funding transaction request for an account.
    # @param funding_transaction_id UUID funding_transaction_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(FundingTransaction, Fixnum, Hash)>] FundingTransaction data, response status code and response headers
    def get_funding_transaction_using_get_with_http_info(funding_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_funding_transaction_using_get ...'
      end
      # verify the required parameter 'funding_transaction_id' is set
      if @api_client.config.client_side_validation && funding_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_transaction_id' when calling FundingApi.get_funding_transaction_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding_transaction/{funding_transaction_id}'.sub('{' + 'funding_transaction_id' + '}', funding_transaction_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_funding_transaction_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a funding request
    # Retrieve the information for a funding request for an account.
    # @param funding_id UUID funding_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Funding]
    def get_funding_using_get(funding_id, opts = {})
      data, _status_code, _headers = get_funding_using_get_with_http_info(funding_id, opts)
      data
    end

    # Retrieve a funding request
    # Retrieve the information for a funding request for an account.
    # @param funding_id UUID funding_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(Funding, Fixnum, Hash)>] Funding data, response status code and response headers
    def get_funding_using_get_with_http_info(funding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_funding_using_get ...'
      end
      # verify the required parameter 'funding_id' is set
      if @api_client.config.client_side_validation && funding_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_id' when calling FundingApi.get_funding_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding/{funding_id}'.sub('{' + 'funding_id' + '}', funding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Funding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_funding_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all transfer requests
    # Get the information for all external account transfers defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageExternalAccountTransfer]
    def get_transfer_all_using_get(opts = {})
      data, _status_code, _headers = get_transfer_all_using_get_with_http_info(opts)
      data
    end

    # List all transfer requests
    # Get the information for all external account transfers defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageExternalAccountTransfer, Fixnum, Hash)>] PageExternalAccountTransfer data, response status code and response headers
    def get_transfer_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_transfer_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageExternalAccountTransfer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_transfer_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a transfer request
    # Retrieve the information for a external account transfer for an account.
    # @param transfer_id UUID external_account_transfer_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [ExternalAccountTransfer]
    def get_transfer_using_get(transfer_id, opts = {})
      data, _status_code, _headers = get_transfer_using_get_with_http_info(transfer_id, opts)
      data
    end

    # Retrieve a transfer request
    # Retrieve the information for a external account transfer for an account.
    # @param transfer_id UUID external_account_transfer_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(ExternalAccountTransfer, Fixnum, Hash)>] ExternalAccountTransfer data, response status code and response headers
    def get_transfer_using_get_with_http_info(transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.get_transfer_using_get ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling FundingApi.get_transfer_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer/{transfer_id}'.sub('{' + 'transfer_id' + '}', transfer_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExternalAccountTransfer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#get_transfer_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update list of bank link
    # Update bank link list for an account.
    # @param bank_link_list bankLinkList
    # @param [Hash] opts the optional parameters
    # @return [Array<BankLink>]
    def update_bank_link_bulk_using_put(bank_link_list, opts = {})
      data, _status_code, _headers = update_bank_link_bulk_using_put_with_http_info(bank_link_list, opts)
      data
    end

    # Update list of bank link
    # Update bank link list for an account.
    # @param bank_link_list bankLinkList
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BankLink>, Fixnum, Hash)>] Array<BankLink> data, response status code and response headers
    def update_bank_link_bulk_using_put_with_http_info(bank_link_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.update_bank_link_bulk_using_put ...'
      end
      # verify the required parameter 'bank_link_list' is set
      if @api_client.config.client_side_validation && bank_link_list.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_list' when calling FundingApi.update_bank_link_bulk_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/bulk_bank_link'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bank_link_list)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BankLink>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#update_bank_link_bulk_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a bank link
    # Update the information for a bank link for an account.
    # @param bank_link bank_link
    # @param bank_link_id UUID bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [BankLink]
    def update_bank_link_using_put(bank_link, bank_link_id, opts = {})
      data, _status_code, _headers = update_bank_link_using_put_with_http_info(bank_link, bank_link_id, opts)
      data
    end

    # Update a bank link
    # Update the information for a bank link for an account.
    # @param bank_link bank_link
    # @param bank_link_id UUID bank_link_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankLink, Fixnum, Hash)>] BankLink data, response status code and response headers
    def update_bank_link_using_put_with_http_info(bank_link, bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.update_bank_link_using_put ...'
      end
      # verify the required parameter 'bank_link' is set
      if @api_client.config.client_side_validation && bank_link.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link' when calling FundingApi.update_bank_link_using_put"
      end
      # verify the required parameter 'bank_link_id' is set
      if @api_client.config.client_side_validation && bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_id' when calling FundingApi.update_bank_link_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link/{bank_link_id}'.sub('{' + 'bank_link_id' + '}', bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bank_link)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#update_bank_link_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a funding transaction request
    # Update the information for a funding transaction request for an account.
    # @param funding_transaction fundingTransaction
    # @param funding_transaction_id UUID funding_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [FundingTransaction]
    def update_funding_transaction_using_put(funding_transaction, funding_transaction_id, opts = {})
      data, _status_code, _headers = update_funding_transaction_using_put_with_http_info(funding_transaction, funding_transaction_id, opts)
      data
    end

    # Update a funding transaction request
    # Update the information for a funding transaction request for an account.
    # @param funding_transaction fundingTransaction
    # @param funding_transaction_id UUID funding_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(FundingTransaction, Fixnum, Hash)>] FundingTransaction data, response status code and response headers
    def update_funding_transaction_using_put_with_http_info(funding_transaction, funding_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.update_funding_transaction_using_put ...'
      end
      # verify the required parameter 'funding_transaction' is set
      if @api_client.config.client_side_validation && funding_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'funding_transaction' when calling FundingApi.update_funding_transaction_using_put"
      end
      # verify the required parameter 'funding_transaction_id' is set
      if @api_client.config.client_side_validation && funding_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_transaction_id' when calling FundingApi.update_funding_transaction_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding_transaction/{funding_transaction_id}'.sub('{' + 'funding_transaction_id' + '}', funding_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(funding_transaction)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FundingTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#update_funding_transaction_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a funding request
    # Update the information for a funding request for an account.
    # @param funding funding
    # @param funding_id UUID funding_id
    # @param [Hash] opts the optional parameters
    # @return [Funding]
    def update_funding_using_put(funding, funding_id, opts = {})
      data, _status_code, _headers = update_funding_using_put_with_http_info(funding, funding_id, opts)
      data
    end

    # Update a funding request
    # Update the information for a funding request for an account.
    # @param funding funding
    # @param funding_id UUID funding_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Funding, Fixnum, Hash)>] Funding data, response status code and response headers
    def update_funding_using_put_with_http_info(funding, funding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.update_funding_using_put ...'
      end
      # verify the required parameter 'funding' is set
      if @api_client.config.client_side_validation && funding.nil?
        fail ArgumentError, "Missing the required parameter 'funding' when calling FundingApi.update_funding_using_put"
      end
      # verify the required parameter 'funding_id' is set
      if @api_client.config.client_side_validation && funding_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_id' when calling FundingApi.update_funding_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding/{funding_id}'.sub('{' + 'funding_id' + '}', funding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(funding)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Funding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#update_funding_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a transfer request
    # Update the information for a external account transfer for a client account. 
    # @param transfer transfer
    # @param transfer_id UUID external_account_transfer_id
    # @param [Hash] opts the optional parameters
    # @return [ExternalAccountTransfer]
    def update_transfer_using_put(transfer, transfer_id, opts = {})
      data, _status_code, _headers = update_transfer_using_put_with_http_info(transfer, transfer_id, opts)
      data
    end

    # Update a transfer request
    # Update the information for a external account transfer for a client account. 
    # @param transfer transfer
    # @param transfer_id UUID external_account_transfer_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExternalAccountTransfer, Fixnum, Hash)>] ExternalAccountTransfer data, response status code and response headers
    def update_transfer_using_put_with_http_info(transfer, transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FundingApi.update_transfer_using_put ...'
      end
      # verify the required parameter 'transfer' is set
      if @api_client.config.client_side_validation && transfer.nil?
        fail ArgumentError, "Missing the required parameter 'transfer' when calling FundingApi.update_transfer_using_put"
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling FundingApi.update_transfer_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer/{transfer_id}'.sub('{' + 'transfer_id' + '}', transfer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transfer)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ExternalAccountTransfer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FundingApi#update_transfer_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
