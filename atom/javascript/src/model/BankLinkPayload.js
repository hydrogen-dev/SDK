/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SecondaryId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SecondaryId'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.BankLinkPayload = factory(root.atom_api.ApiClient, root.atom_api.SecondaryId);
  }
}(this, function(ApiClient, SecondaryId) {
  'use strict';




  /**
   * The BankLinkPayload model module.
   * @module model/BankLinkPayload
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>BankLinkPayload</code>.
   * @alias module:model/BankLinkPayload
   * @class
   * @param bankAccountHolder {String} Name of the individual that owns the bank account
   * @param bankAccountNumber {String} Account number of the bank account
   * @param name {String} Name of the bank for the bank link, e.g. HSBC
   * @param routing {String} Routing number of the bank for the bank link
   */
  var exports = function(bankAccountHolder, bankAccountNumber, name, routing) {
    var _this = this;


    _this['bank_account_holder'] = bankAccountHolder;
    _this['bank_account_number'] = bankAccountNumber;
    _this['name'] = name;
    _this['routing'] = routing;











  };

  /**
   * Constructs a <code>BankLinkPayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BankLinkPayload} obj Optional instance to populate.
   * @return {module:model/BankLinkPayload} The populated <code>BankLinkPayload</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('account_id')) {
        obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
      }
      if (data.hasOwnProperty('bank_account_holder')) {
        obj['bank_account_holder'] = ApiClient.convertToType(data['bank_account_holder'], 'String');
      }
      if (data.hasOwnProperty('bank_account_number')) {
        obj['bank_account_number'] = ApiClient.convertToType(data['bank_account_number'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('routing')) {
        obj['routing'] = ApiClient.convertToType(data['routing'], 'String');
      }
      if (data.hasOwnProperty('routing_wire')) {
        obj['routing_wire'] = ApiClient.convertToType(data['routing_wire'], 'String');
      }
      if (data.hasOwnProperty('bank_account_name')) {
        obj['bank_account_name'] = ApiClient.convertToType(data['bank_account_name'], 'String');
      }
      if (data.hasOwnProperty('currency_code')) {
        obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
      }
      if (data.hasOwnProperty('balance')) {
        obj['balance'] = ApiClient.convertToType(data['balance'], 'String');
      }
      if (data.hasOwnProperty('available_balance')) {
        obj['available_balance'] = ApiClient.convertToType(data['available_balance'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('is_active')) {
        obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
      }
      if (data.hasOwnProperty('is_link_verified')) {
        obj['is_link_verified'] = ApiClient.convertToType(data['is_link_verified'], 'Boolean');
      }
      if (data.hasOwnProperty('link_verified_date')) {
        obj['link_verified_date'] = ApiClient.convertToType(data['link_verified_date'], 'Date');
      }
      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
      }
      if (data.hasOwnProperty('secondary_id')) {
        obj['secondary_id'] = SecondaryId.constructFromObject(data['secondary_id']);
      }
    }
    return obj;
  }

  /**
   * The ID for the account to which the bank link belongs
   * @member {String} account_id
   */
  exports.prototype['account_id'] = undefined;
  /**
   * Name of the individual that owns the bank account
   * @member {String} bank_account_holder
   */
  exports.prototype['bank_account_holder'] = undefined;
  /**
   * Account number of the bank account
   * @member {String} bank_account_number
   */
  exports.prototype['bank_account_number'] = undefined;
  /**
   * Name of the bank for the bank link, e.g. HSBC
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Routing number of the bank for the bank link
   * @member {String} routing
   */
  exports.prototype['routing'] = undefined;
  /**
   * Routing number of the bank for the bank link used for wire transfers
   * @member {String} routing_wire
   */
  exports.prototype['routing_wire'] = undefined;
  /**
   * Name of the bank account, e.g. Mike’s HSBC Checking
   * @member {String} bank_account_name
   */
  exports.prototype['bank_account_name'] = undefined;
  /**
   * Alphabetic currency code for the base currency of the bank account linked, limited to 3 characters
   * @member {String} currency_code
   */
  exports.prototype['currency_code'] = undefined;
  /**
   * Current balance of the bank account
   * @member {String} balance
   */
  exports.prototype['balance'] = undefined;
  /**
   * Available balance of the bank account, usually taking into consideration pending transactions or available overdraft
   * @member {String} available_balance
   */
  exports.prototype['available_balance'] = undefined;
  /**
   * Used to indicate the type of bank account for this bank link such as a ‘savings’ account
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Indicates if the bank link is active. Defaults to true which indicates it is active
   * @member {Boolean} is_active
   * @default true
   */
  exports.prototype['is_active'] = true;
  /**
   * Indicates if the bank link has been verified. Defaults to false which indicates it has not been verified
   * @member {Boolean} is_link_verified
   * @default false
   */
  exports.prototype['is_link_verified'] = false;
  /**
   * Date and time that the bank link was verified
   * @member {Date} link_verified_date
   */
  exports.prototype['link_verified_date'] = undefined;
  /**
   * Custom information associated with the bank link in the format key:value
   * @member {Object} metadata
   */
  exports.prototype['metadata'] = undefined;
  /**
   * @member {module:model/SecondaryId} secondary_id
   */
  exports.prototype['secondary_id'] = undefined;



  return exports;
}));


