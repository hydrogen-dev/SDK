/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PageRiskProfile', 'model/RiskProfile'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PageRiskProfile'), require('../model/RiskProfile'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.RiskProfileApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.PageRiskProfile, root.HydrogenNucleusApi.RiskProfile);
  }
}(this, function(ApiClient, PageRiskProfile, RiskProfile) {
  'use strict';

  /**
   * RiskProfile service.
   * @module api/RiskProfileApi
   * @version 1.9.5
   */

  /**
   * Constructs a new RiskProfileApi. 
   * @alias module:api/RiskProfileApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRiskProfileUsingPost operation.
     * @callback module:api/RiskProfileApi~createRiskProfileUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RiskProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Risk Profile
     * Create a new Risk Profile. 
     * @param {module:model/RiskProfile} riskProfile riskProfile
     * @param {module:api/RiskProfileApi~createRiskProfileUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RiskProfile}
     */
    this.createRiskProfileUsingPost = function(riskProfile, callback) {
      var postBody = riskProfile;

      // verify the required parameter 'riskProfile' is set
      if (riskProfile === undefined || riskProfile === null) {
        throw new Error("Missing the required parameter 'riskProfile' when calling createRiskProfileUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = RiskProfile;

      return this.apiClient.callApi(
        '/nucleus/v1/risk_profile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRiskProfileUsingDelete operation.
     * @callback module:api/RiskProfileApi~deleteRiskProfileUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Risk Profile
     * Permanently Delete a Risk Profile.
     * @param {String} riskProfileId UUID risk_profile_id
     * @param {module:api/RiskProfileApi~deleteRiskProfileUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRiskProfileUsingDelete = function(riskProfileId, callback) {
      var postBody = null;

      // verify the required parameter 'riskProfileId' is set
      if (riskProfileId === undefined || riskProfileId === null) {
        throw new Error("Missing the required parameter 'riskProfileId' when calling deleteRiskProfileUsingDelete");
      }


      var pathParams = {
        'risk_profile_id': riskProfileId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/risk_profile/{risk_profile_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRiskProfileAllUsingGet operation.
     * @callback module:api/RiskProfileApi~getRiskProfileAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageRiskProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Risk Profile
     * Get All Risk Profile. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/RiskProfileApi~getRiskProfileAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageRiskProfile}
     */
    this.getRiskProfileAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageRiskProfile;

      return this.apiClient.callApi(
        '/nucleus/v1/risk_profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRiskProfileUsingGet operation.
     * @callback module:api/RiskProfileApi~getRiskProfileUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RiskProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Risk Profile
     * Get a Risk Profile. 
     * @param {String} riskProfileId UUID risk_profile_id
     * @param {module:api/RiskProfileApi~getRiskProfileUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RiskProfile}
     */
    this.getRiskProfileUsingGet = function(riskProfileId, callback) {
      var postBody = null;

      // verify the required parameter 'riskProfileId' is set
      if (riskProfileId === undefined || riskProfileId === null) {
        throw new Error("Missing the required parameter 'riskProfileId' when calling getRiskProfileUsingGet");
      }


      var pathParams = {
        'risk_profile_id': riskProfileId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RiskProfile;

      return this.apiClient.callApi(
        '/nucleus/v1/risk_profile/{risk_profile_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRiskProfileUsingPut operation.
     * @callback module:api/RiskProfileApi~updateRiskProfileUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RiskProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Risk Profile
     * Update a Risk Profile. 
     * @param {module:model/RiskProfile} riskProfile risk_profile
     * @param {String} riskProfileId UUID risk_profile_id
     * @param {module:api/RiskProfileApi~updateRiskProfileUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RiskProfile}
     */
    this.updateRiskProfileUsingPut = function(riskProfile, riskProfileId, callback) {
      var postBody = riskProfile;

      // verify the required parameter 'riskProfile' is set
      if (riskProfile === undefined || riskProfile === null) {
        throw new Error("Missing the required parameter 'riskProfile' when calling updateRiskProfileUsingPut");
      }

      // verify the required parameter 'riskProfileId' is set
      if (riskProfileId === undefined || riskProfileId === null) {
        throw new Error("Missing the required parameter 'riskProfileId' when calling updateRiskProfileUsingPut");
      }


      var pathParams = {
        'risk_profile_id': riskProfileId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = RiskProfile;

      return this.apiClient.callApi(
        '/nucleus/v1/risk_profile/{risk_profile_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
