/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// SpendingControl Object
    /// </summary>
    [DataContract]
    public partial class SpendingControl :  IEquatable<SpendingControl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingControl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpendingControl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingControl" /> class.
        /// </summary>
        /// <param name="clientGroup">client_group.</param>
        /// <param name="clientId">client_id.</param>
        /// <param name="controlScope">controlScope (required).</param>
        /// <param name="controlType">controlType (required).</param>
        /// <param name="controlValues">control_values.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="currencyCode">currency_code (required).</param>
        /// <param name="description">description.</param>
        /// <param name="frequency">frequency.</param>
        /// <param name="frequencyUnit">frequency_unit.</param>
        /// <param name="id">id.</param>
        /// <param name="isActive">is_active.</param>
        /// <param name="limitValue">limitValue.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="updateDate">updateDate.</param>
        public SpendingControl(string clientGroup = default(string), Guid? clientId = default(Guid?), string controlScope = default(string), string controlType = default(string), List<string> controlValues = default(List<string>), DateTime? createDate = default(DateTime?), string currencyCode = default(string), string description = default(string), int? frequency = default(int?), string frequencyUnit = default(string), Guid? id = default(Guid?), bool? isActive = default(bool?), double? limitValue = default(double?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string secondaryId = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "controlScope" is required (not null)
            if (controlScope == null)
            {
                throw new InvalidDataException("controlScope is a required property for SpendingControl and cannot be null");
            }
            else
            {
                this.ControlScope = controlScope;
            }
            // to ensure "controlType" is required (not null)
            if (controlType == null)
            {
                throw new InvalidDataException("controlType is a required property for SpendingControl and cannot be null");
            }
            else
            {
                this.ControlType = controlType;
            }
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for SpendingControl and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            this.ClientGroup = clientGroup;
            this.ClientId = clientId;
            this.ControlValues = controlValues;
            this.CreateDate = createDate;
            this.Description = description;
            this.Frequency = frequency;
            this.FrequencyUnit = frequencyUnit;
            this.Id = id;
            this.IsActive = isActive;
            this.LimitValue = limitValue;
            this.Metadata = metadata;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// client_group
        /// </summary>
        /// <value>client_group</value>
        [DataMember(Name="client_group", EmitDefaultValue=false)]
        public string ClientGroup { get; set; }

        /// <summary>
        /// client_id
        /// </summary>
        /// <value>client_id</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// controlScope
        /// </summary>
        /// <value>controlScope</value>
        [DataMember(Name="control_scope", EmitDefaultValue=false)]
        public string ControlScope { get; set; }

        /// <summary>
        /// controlType
        /// </summary>
        /// <value>controlType</value>
        [DataMember(Name="control_type", EmitDefaultValue=false)]
        public string ControlType { get; set; }

        /// <summary>
        /// control_values
        /// </summary>
        /// <value>control_values</value>
        [DataMember(Name="control_values", EmitDefaultValue=false)]
        public List<string> ControlValues { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// currency_code
        /// </summary>
        /// <value>currency_code</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// frequency
        /// </summary>
        /// <value>frequency</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; set; }

        /// <summary>
        /// frequency_unit
        /// </summary>
        /// <value>frequency_unit</value>
        [DataMember(Name="frequency_unit", EmitDefaultValue=false)]
        public string FrequencyUnit { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// is_active
        /// </summary>
        /// <value>is_active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// limitValue
        /// </summary>
        /// <value>limitValue</value>
        [DataMember(Name="limit_value", EmitDefaultValue=false)]
        public double? LimitValue { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpendingControl {\n");
            sb.Append("  ClientGroup: ").Append(ClientGroup).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ControlScope: ").Append(ControlScope).Append("\n");
            sb.Append("  ControlType: ").Append(ControlType).Append("\n");
            sb.Append("  ControlValues: ").Append(ControlValues).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  FrequencyUnit: ").Append(FrequencyUnit).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LimitValue: ").Append(LimitValue).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpendingControl);
        }

        /// <summary>
        /// Returns true if SpendingControl instances are equal
        /// </summary>
        /// <param name="input">Instance of SpendingControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpendingControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientGroup == input.ClientGroup ||
                    (this.ClientGroup != null &&
                    this.ClientGroup.Equals(input.ClientGroup))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ControlScope == input.ControlScope ||
                    (this.ControlScope != null &&
                    this.ControlScope.Equals(input.ControlScope))
                ) && 
                (
                    this.ControlType == input.ControlType ||
                    (this.ControlType != null &&
                    this.ControlType.Equals(input.ControlType))
                ) && 
                (
                    this.ControlValues == input.ControlValues ||
                    this.ControlValues != null &&
                    this.ControlValues.SequenceEqual(input.ControlValues)
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.FrequencyUnit == input.FrequencyUnit ||
                    (this.FrequencyUnit != null &&
                    this.FrequencyUnit.Equals(input.FrequencyUnit))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LimitValue == input.LimitValue ||
                    (this.LimitValue != null &&
                    this.LimitValue.Equals(input.LimitValue))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientGroup != null)
                    hashCode = hashCode * 59 + this.ClientGroup.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ControlScope != null)
                    hashCode = hashCode * 59 + this.ControlScope.GetHashCode();
                if (this.ControlType != null)
                    hashCode = hashCode * 59 + this.ControlType.GetHashCode();
                if (this.ControlValues != null)
                    hashCode = hashCode * 59 + this.ControlValues.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.FrequencyUnit != null)
                    hashCode = hashCode * 59 + this.FrequencyUnit.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LimitValue != null)
                    hashCode = hashCode * 59 + this.LimitValue.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
