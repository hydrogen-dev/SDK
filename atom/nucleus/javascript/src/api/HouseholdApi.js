/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AvailableDateDoubleVO', 'model/Household', 'model/PageHousehold', 'model/PagePortfolioHoldingAgg', 'model/PagePortfolioTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AvailableDateDoubleVO'), require('../model/Household'), require('../model/PageHousehold'), require('../model/PagePortfolioHoldingAgg'), require('../model/PagePortfolioTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.HouseholdApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.AvailableDateDoubleVO, root.HydrogenNucleusApi.Household, root.HydrogenNucleusApi.PageHousehold, root.HydrogenNucleusApi.PagePortfolioHoldingAgg, root.HydrogenNucleusApi.PagePortfolioTransaction);
  }
}(this, function(ApiClient, AvailableDateDoubleVO, Household, PageHousehold, PagePortfolioHoldingAgg, PagePortfolioTransaction) {
  'use strict';

  /**
   * Household service.
   * @module api/HouseholdApi
   * @version 1.9.5
   */

  /**
   * Constructs a new HouseholdApi. 
   * @alias module:api/HouseholdApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createHouseholdUsingPost operation.
     * @callback module:api/HouseholdApi~createHouseholdUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Household} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Household
     * Create a new household, with your firm.
     * @param {module:model/Household} household household
     * @param {module:api/HouseholdApi~createHouseholdUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Household}
     */
    this.createHouseholdUsingPost = function(household, callback) {
      var postBody = household;

      // verify the required parameter 'household' is set
      if (household === undefined || household === null) {
        throw new Error("Missing the required parameter 'household' when calling createHouseholdUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Household;

      return this.apiClient.callApi(
        '/nucleus/v1/household', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHouseholdUsingDelete operation.
     * @callback module:api/HouseholdApi~deleteHouseholdUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Household
     * Permanently delete a household
     * @param {String} householdId UUID household_id
     * @param {module:api/HouseholdApi~deleteHouseholdUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteHouseholdUsingDelete = function(householdId, callback) {
      var postBody = null;

      // verify the required parameter 'householdId' is set
      if (householdId === undefined || householdId === null) {
        throw new Error("Missing the required parameter 'householdId' when calling deleteHouseholdUsingDelete");
      }


      var pathParams = {
        'household_id': householdId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/household/{household_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHouseholdAllUsingGet operation.
     * @callback module:api/HouseholdApi~getHouseholdAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageHousehold} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all household
     * Get details for all Household.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/HouseholdApi~getHouseholdAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageHousehold}
     */
    this.getHouseholdAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageHousehold;

      return this.apiClient.callApi(
        '/nucleus/v1/household', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHouseholdClientAssetSizeUsingGet operation.
     * @callback module:api/HouseholdApi~getHouseholdClientAssetSizeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AvailableDateDoubleVO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all household client asset sizes
     * Get a list of asset sizes per date for a client&#39;s household.
     * @param {String} householdId UUID household_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {Date} opts.endDate end date (default to null)
     * @param {Boolean} opts.excludeSubledger true or false
     * @param {Boolean} opts.getLatest true or false
     * @param {String} opts.sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
     * @param {Date} opts.startDate start date (default to null)
     * @param {module:api/HouseholdApi~getHouseholdClientAssetSizeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AvailableDateDoubleVO>}
     */
    this.getHouseholdClientAssetSizeUsingGet = function(householdId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'householdId' is set
      if (householdId === undefined || householdId === null) {
        throw new Error("Missing the required parameter 'householdId' when calling getHouseholdClientAssetSizeUsingGet");
      }


      var pathParams = {
        'household_id': householdId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion'],
        'end_date': opts['endDate'],
        'exclude_subledger': opts['excludeSubledger'],
        'get_latest': opts['getLatest'],
        'sort_type': opts['sortType'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [AvailableDateDoubleVO];

      return this.apiClient.callApi(
        '/nucleus/v1/household/{household_id}/asset_size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHouseholdClientHoldingUsingGet operation.
     * @callback module:api/HouseholdApi~getHouseholdClientHoldingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioHoldingAgg} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all household&#39;s clientIds holdings
     * Get the information for all the securities that are currently being held by a household&#39;s client ids registered with your firm.
     * @param {String} householdId UUID household_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion USD
     * @param {Date} opts.endDate end date - yyyy-mm-dd
     * @param {String} opts.filter filter
     * @param {Boolean} opts.getLatest true or false
     * @param {String} opts.orderBy order_by (default to date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {Date} opts.startDate start date - yyyy-mm-dd
     * @param {module:api/HouseholdApi~getHouseholdClientHoldingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioHoldingAgg}
     */
    this.getHouseholdClientHoldingUsingGet = function(householdId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'householdId' is set
      if (householdId === undefined || householdId === null) {
        throw new Error("Missing the required parameter 'householdId' when calling getHouseholdClientHoldingUsingGet");
      }


      var pathParams = {
        'household_id': householdId
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'end_date': opts['endDate'],
        'filter': opts['filter'],
        'get_latest': opts['getLatest'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioHoldingAgg;

      return this.apiClient.callApi(
        '/nucleus/v1/household/{household_id}/holding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHouseholdClientTransactionUsingGet operation.
     * @callback module:api/HouseholdApi~getHouseholdClientTransactionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all household&#39;s client ids transactions
     * Get the information for all transactions under a household client ids registered with your firm.
     * @param {String} householdId UUID household_id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion USD
     * @param {Date} opts.endDate end date
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {Date} opts.startDate start date
     * @param {module:api/HouseholdApi~getHouseholdClientTransactionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioTransaction}
     */
    this.getHouseholdClientTransactionUsingGet = function(householdId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'householdId' is set
      if (householdId === undefined || householdId === null) {
        throw new Error("Missing the required parameter 'householdId' when calling getHouseholdClientTransactionUsingGet");
      }


      var pathParams = {
        'household_id': householdId
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'end_date': opts['endDate'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
        'start_date': opts['startDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/household/{household_id}/transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHouseholdUsingGet operation.
     * @callback module:api/HouseholdApi~getHouseholdUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Household} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Household
     * Retrieve the information for a Household.
     * @param {String} householdId UUID household_id
     * @param {module:api/HouseholdApi~getHouseholdUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Household}
     */
    this.getHouseholdUsingGet = function(householdId, callback) {
      var postBody = null;

      // verify the required parameter 'householdId' is set
      if (householdId === undefined || householdId === null) {
        throw new Error("Missing the required parameter 'householdId' when calling getHouseholdUsingGet");
      }


      var pathParams = {
        'household_id': householdId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Household;

      return this.apiClient.callApi(
        '/nucleus/v1/household/{household_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHouseholdUsingPut operation.
     * @callback module:api/HouseholdApi~updateHouseholdUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Household} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Household
     * Update the information for a Household.
     * @param {Object} household household
     * @param {String} householdId UUID household_id
     * @param {module:api/HouseholdApi~updateHouseholdUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Household}
     */
    this.updateHouseholdUsingPut = function(household, householdId, callback) {
      var postBody = household;

      // verify the required parameter 'household' is set
      if (household === undefined || household === null) {
        throw new Error("Missing the required parameter 'household' when calling updateHouseholdUsingPut");
      }

      // verify the required parameter 'householdId' is set
      if (householdId === undefined || householdId === null) {
        throw new Error("Missing the required parameter 'householdId' when calling updateHouseholdUsingPut");
      }


      var pathParams = {
        'household_id': householdId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Household;

      return this.apiClient.callApi(
        '/nucleus/v1/household/{household_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
