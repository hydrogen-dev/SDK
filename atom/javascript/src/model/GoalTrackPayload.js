/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SecondaryId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SecondaryId'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.GoalTrackPayload = factory(root.atom_api.ApiClient, root.atom_api.SecondaryId);
  }
}(this, function(ApiClient, SecondaryId) {
  'use strict';




  /**
   * The GoalTrackPayload model module.
   * @module model/GoalTrackPayload
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>GoalTrackPayload</code>.
   * @alias module:model/GoalTrackPayload
   * @class
   * @param goalId {String} The ID of a goal to which the goal track record pertains
   */
  var exports = function(goalId) {
    var _this = this;

    _this['goal_id'] = goalId;















  };

  /**
   * Constructs a <code>GoalTrackPayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GoalTrackPayload} obj Optional instance to populate.
   * @return {module:model/GoalTrackPayload} The populated <code>GoalTrackPayload</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('goal_id')) {
        obj['goal_id'] = ApiClient.convertToType(data['goal_id'], 'String');
      }
      if (data.hasOwnProperty('client_id')) {
        obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
      }
      if (data.hasOwnProperty('goal_amount')) {
        obj['goal_amount'] = ApiClient.convertToType(data['goal_amount'], 'Number');
      }
      if (data.hasOwnProperty('accumulation_horizon')) {
        obj['accumulation_horizon'] = ApiClient.convertToType(data['accumulation_horizon'], 'Number');
      }
      if (data.hasOwnProperty('decumulation_horizon')) {
        obj['decumulation_horizon'] = ApiClient.convertToType(data['decumulation_horizon'], 'Number');
      }
      if (data.hasOwnProperty('accounts')) {
        obj['accounts'] = ApiClient.convertToType(data['accounts'], ['String']);
      }
      if (data.hasOwnProperty('current_investment')) {
        obj['current_investment'] = ApiClient.convertToType(data['current_investment'], 'Number');
      }
      if (data.hasOwnProperty('on_track')) {
        obj['on_track'] = ApiClient.convertToType(data['on_track'], 'Boolean');
      }
      if (data.hasOwnProperty('progress')) {
        obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
      }
      if (data.hasOwnProperty('goal_probability')) {
        obj['goal_probability'] = ApiClient.convertToType(data['goal_probability'], 'Number');
      }
      if (data.hasOwnProperty('goal_achievement_score')) {
        obj['goal_achievement_score'] = ApiClient.convertToType(data['goal_achievement_score'], 'Number');
      }
      if (data.hasOwnProperty('projection_balance')) {
        obj['projection_balance'] = ApiClient.convertToType(data['projection_balance'], 'Number');
      }
      if (data.hasOwnProperty('projection_date')) {
        obj['projection_date'] = ApiClient.convertToType(data['projection_date'], 'Date');
      }
      if (data.hasOwnProperty('status_time_stamp')) {
        obj['status_time_stamp'] = ApiClient.convertToType(data['status_time_stamp'], 'String');
      }
      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
      }
      if (data.hasOwnProperty('secondary_id')) {
        obj['secondary_id'] = SecondaryId.constructFromObject(data['secondary_id']);
      }
    }
    return obj;
  }

  /**
   * The ID of a goal to which the goal track record pertains
   * @member {String} goal_id
   */
  exports.prototype['goal_id'] = undefined;
  /**
   * The ID of a client to whom the goal for the goal track record belongs
   * @member {String} client_id
   */
  exports.prototype['client_id'] = undefined;
  /**
   * Target amount for the goal
   * @member {Number} goal_amount
   */
  exports.prototype['goal_amount'] = undefined;
  /**
   * The time horizon of the goal during the accumulation phase, in years
   * @member {Number} accumulation_horizon
   */
  exports.prototype['accumulation_horizon'] = undefined;
  /**
   * The time horizon of the goal during the decumulation phase, in years
   * @member {Number} decumulation_horizon
   */
  exports.prototype['decumulation_horizon'] = undefined;
  /**
   * List of accounts linked to the goal
   * @member {Array.<String>} accounts
   */
  exports.prototype['accounts'] = undefined;
  /**
   * The current amount invested toward the goal
   * @member {Number} current_investment
   */
  exports.prototype['current_investment'] = undefined;
  /**
   * Indicator for whether or not the goal is on track to be met. true indicates it is on track (no default)
   * @member {Boolean} on_track
   */
  exports.prototype['on_track'] = undefined;
  /**
   * The goal progress percentage as a decimal
   * @member {Number} progress
   */
  exports.prototype['progress'] = undefined;
  /**
   * The probability of achieving the goal with the clientâ€™s given investments
   * @member {Number} goal_probability
   */
  exports.prototype['goal_probability'] = undefined;
  /**
   * Probability of achieving the goal in relation to the confidence target of a simulation
   * @member {Number} goal_achievement_score
   */
  exports.prototype['goal_achievement_score'] = undefined;
  /**
   * The projected balance of the goal
   * @member {Number} projection_balance
   */
  exports.prototype['projection_balance'] = undefined;
  /**
   * The date of the projected balance of the goal
   * @member {Date} projection_date
   */
  exports.prototype['projection_date'] = undefined;
  /**
   * Date and time to which this goal track record applies, defaults to the current timestamp
   * @member {String} status_time_stamp
   */
  exports.prototype['status_time_stamp'] = undefined;
  /**
   * Custom information associated with the goal track record in the format key:value
   * @member {Object} metadata
   */
  exports.prototype['metadata'] = undefined;
  /**
   * @member {module:model/SecondaryId} secondary_id
   */
  exports.prototype['secondary_id'] = undefined;



  return exports;
}));


