/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBudgetApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a budget request
        /// </summary>
        /// <remarks>
        /// Create a new budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>Budget</returns>
        Budget CreateBudgetUsingPost (Budget budgetRequest);

        /// <summary>
        /// Create a budget request
        /// </summary>
        /// <remarks>
        /// Create a new budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>ApiResponse of Budget</returns>
        ApiResponse<Budget> CreateBudgetUsingPostWithHttpInfo (Budget budgetRequest);
        /// <summary>
        /// Delete a budget request
        /// </summary>
        /// <remarks>
        /// Permanently delete a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns></returns>
        void DeleteBudgetUsingDelete (Guid? budgetId);

        /// <summary>
        /// Delete a budget request
        /// </summary>
        /// <remarks>
        /// Permanently delete a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBudgetUsingDeleteWithHttpInfo (Guid? budgetId);
        /// <summary>
        /// List all budget requests
        /// </summary>
        /// <remarks>
        /// Get the information for all budget requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBudget</returns>
        PageBudget GetBudgetAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all budget requests
        /// </summary>
        /// <remarks>
        /// Get the information for all budget requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBudget</returns>
        ApiResponse<PageBudget> GetBudgetAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a budget request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Budget</returns>
        Budget GetBudgetUsingGet (Guid? budgetId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a budget request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Budget</returns>
        ApiResponse<Budget> GetBudgetUsingGetWithHttpInfo (Guid? budgetId, string currencyConversion = null);
        /// <summary>
        /// Update a budget request
        /// </summary>
        /// <remarks>
        /// Update the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Budget</returns>
        Budget UpdateBudgetUsingPut (Object budget, Guid? budgetId);

        /// <summary>
        /// Update a budget request
        /// </summary>
        /// <remarks>
        /// Update the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>ApiResponse of Budget</returns>
        ApiResponse<Budget> UpdateBudgetUsingPutWithHttpInfo (Object budget, Guid? budgetId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a budget request
        /// </summary>
        /// <remarks>
        /// Create a new budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>Task of Budget</returns>
        System.Threading.Tasks.Task<Budget> CreateBudgetUsingPostAsync (Budget budgetRequest);

        /// <summary>
        /// Create a budget request
        /// </summary>
        /// <remarks>
        /// Create a new budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>Task of ApiResponse (Budget)</returns>
        System.Threading.Tasks.Task<ApiResponse<Budget>> CreateBudgetUsingPostAsyncWithHttpInfo (Budget budgetRequest);
        /// <summary>
        /// Delete a budget request
        /// </summary>
        /// <remarks>
        /// Permanently delete a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBudgetUsingDeleteAsync (Guid? budgetId);

        /// <summary>
        /// Delete a budget request
        /// </summary>
        /// <remarks>
        /// Permanently delete a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBudgetUsingDeleteAsyncWithHttpInfo (Guid? budgetId);
        /// <summary>
        /// List all budget requests
        /// </summary>
        /// <remarks>
        /// Get the information for all budget requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBudget</returns>
        System.Threading.Tasks.Task<PageBudget> GetBudgetAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all budget requests
        /// </summary>
        /// <remarks>
        /// Get the information for all budget requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBudget)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageBudget>> GetBudgetAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a budget request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Budget</returns>
        System.Threading.Tasks.Task<Budget> GetBudgetUsingGetAsync (Guid? budgetId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a budget request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Budget)</returns>
        System.Threading.Tasks.Task<ApiResponse<Budget>> GetBudgetUsingGetAsyncWithHttpInfo (Guid? budgetId, string currencyConversion = null);
        /// <summary>
        /// Update a budget request
        /// </summary>
        /// <remarks>
        /// Update the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of Budget</returns>
        System.Threading.Tasks.Task<Budget> UpdateBudgetUsingPutAsync (Object budget, Guid? budgetId);

        /// <summary>
        /// Update a budget request
        /// </summary>
        /// <remarks>
        /// Update the information for a budget request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of ApiResponse (Budget)</returns>
        System.Threading.Tasks.Task<ApiResponse<Budget>> UpdateBudgetUsingPutAsyncWithHttpInfo (Object budget, Guid? budgetId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BudgetApi : IBudgetApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BudgetApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BudgetApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a budget request Create a new budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>Budget</returns>
        public Budget CreateBudgetUsingPost (Budget budgetRequest)
        {
             ApiResponse<Budget> localVarResponse = CreateBudgetUsingPostWithHttpInfo(budgetRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a budget request Create a new budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>ApiResponse of Budget</returns>
        public ApiResponse< Budget > CreateBudgetUsingPostWithHttpInfo (Budget budgetRequest)
        {
            // verify the required parameter 'budgetRequest' is set
            if (budgetRequest == null)
                throw new ApiException(400, "Missing required parameter 'budgetRequest' when calling BudgetApi->CreateBudgetUsingPost");

            var localVarPath = "/nucleus/v1/budget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetRequest != null && budgetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(budgetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = budgetRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBudgetUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Budget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Budget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Budget)));
        }

        /// <summary>
        /// Create a budget request Create a new budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>Task of Budget</returns>
        public async System.Threading.Tasks.Task<Budget> CreateBudgetUsingPostAsync (Budget budgetRequest)
        {
             ApiResponse<Budget> localVarResponse = await CreateBudgetUsingPostAsyncWithHttpInfo(budgetRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a budget request Create a new budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetRequest">budgetRequest</param>
        /// <returns>Task of ApiResponse (Budget)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Budget>> CreateBudgetUsingPostAsyncWithHttpInfo (Budget budgetRequest)
        {
            // verify the required parameter 'budgetRequest' is set
            if (budgetRequest == null)
                throw new ApiException(400, "Missing required parameter 'budgetRequest' when calling BudgetApi->CreateBudgetUsingPost");

            var localVarPath = "/nucleus/v1/budget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetRequest != null && budgetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(budgetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = budgetRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBudgetUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Budget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Budget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Budget)));
        }

        /// <summary>
        /// Delete a budget request Permanently delete a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns></returns>
        public void DeleteBudgetUsingDelete (Guid? budgetId)
        {
             DeleteBudgetUsingDeleteWithHttpInfo(budgetId);
        }

        /// <summary>
        /// Delete a budget request Permanently delete a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBudgetUsingDeleteWithHttpInfo (Guid? budgetId)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling BudgetApi->DeleteBudgetUsingDelete");

            var localVarPath = "/nucleus/v1/budget/{budget_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBudgetUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a budget request Permanently delete a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBudgetUsingDeleteAsync (Guid? budgetId)
        {
             await DeleteBudgetUsingDeleteAsyncWithHttpInfo(budgetId);

        }

        /// <summary>
        /// Delete a budget request Permanently delete a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBudgetUsingDeleteAsyncWithHttpInfo (Guid? budgetId)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling BudgetApi->DeleteBudgetUsingDelete");

            var localVarPath = "/nucleus/v1/budget/{budget_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBudgetUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all budget requests Get the information for all budget requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBudget</returns>
        public PageBudget GetBudgetAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBudget> localVarResponse = GetBudgetAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all budget requests Get the information for all budget requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBudget</returns>
        public ApiResponse< PageBudget > GetBudgetAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/budget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBudgetAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBudget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBudget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBudget)));
        }

        /// <summary>
        /// List all budget requests Get the information for all budget requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBudget</returns>
        public async System.Threading.Tasks.Task<PageBudget> GetBudgetAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBudget> localVarResponse = await GetBudgetAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all budget requests Get the information for all budget requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBudget)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageBudget>> GetBudgetAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/budget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBudgetAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBudget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBudget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBudget)));
        }

        /// <summary>
        /// Retrieve a budget request Retrieve the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Budget</returns>
        public Budget GetBudgetUsingGet (Guid? budgetId, string currencyConversion = null)
        {
             ApiResponse<Budget> localVarResponse = GetBudgetUsingGetWithHttpInfo(budgetId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a budget request Retrieve the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Budget</returns>
        public ApiResponse< Budget > GetBudgetUsingGetWithHttpInfo (Guid? budgetId, string currencyConversion = null)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling BudgetApi->GetBudgetUsingGet");

            var localVarPath = "/nucleus/v1/budget/{budget_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBudgetUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Budget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Budget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Budget)));
        }

        /// <summary>
        /// Retrieve a budget request Retrieve the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Budget</returns>
        public async System.Threading.Tasks.Task<Budget> GetBudgetUsingGetAsync (Guid? budgetId, string currencyConversion = null)
        {
             ApiResponse<Budget> localVarResponse = await GetBudgetUsingGetAsyncWithHttpInfo(budgetId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a budget request Retrieve the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetId">UUID budget_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Budget)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Budget>> GetBudgetUsingGetAsyncWithHttpInfo (Guid? budgetId, string currencyConversion = null)
        {
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling BudgetApi->GetBudgetUsingGet");

            var localVarPath = "/nucleus/v1/budget/{budget_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBudgetUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Budget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Budget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Budget)));
        }

        /// <summary>
        /// Update a budget request Update the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Budget</returns>
        public Budget UpdateBudgetUsingPut (Object budget, Guid? budgetId)
        {
             ApiResponse<Budget> localVarResponse = UpdateBudgetUsingPutWithHttpInfo(budget, budgetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a budget request Update the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>ApiResponse of Budget</returns>
        public ApiResponse< Budget > UpdateBudgetUsingPutWithHttpInfo (Object budget, Guid? budgetId)
        {
            // verify the required parameter 'budget' is set
            if (budget == null)
                throw new ApiException(400, "Missing required parameter 'budget' when calling BudgetApi->UpdateBudgetUsingPut");
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling BudgetApi->UpdateBudgetUsingPut");

            var localVarPath = "/nucleus/v1/budget/{budget_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (budget != null && budget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(budget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = budget; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBudgetUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Budget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Budget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Budget)));
        }

        /// <summary>
        /// Update a budget request Update the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of Budget</returns>
        public async System.Threading.Tasks.Task<Budget> UpdateBudgetUsingPutAsync (Object budget, Guid? budgetId)
        {
             ApiResponse<Budget> localVarResponse = await UpdateBudgetUsingPutAsyncWithHttpInfo(budget, budgetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a budget request Update the information for a budget request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budget">budget</param>
        /// <param name="budgetId">UUID budget_id</param>
        /// <returns>Task of ApiResponse (Budget)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Budget>> UpdateBudgetUsingPutAsyncWithHttpInfo (Object budget, Guid? budgetId)
        {
            // verify the required parameter 'budget' is set
            if (budget == null)
                throw new ApiException(400, "Missing required parameter 'budget' when calling BudgetApi->UpdateBudgetUsingPut");
            // verify the required parameter 'budgetId' is set
            if (budgetId == null)
                throw new ApiException(400, "Missing required parameter 'budgetId' when calling BudgetApi->UpdateBudgetUsingPut");

            var localVarPath = "/nucleus/v1/budget/{budget_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (budgetId != null) localVarPathParams.Add("budget_id", this.Configuration.ApiClient.ParameterToString(budgetId)); // path parameter
            if (budget != null && budget.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(budget); // http body (model) parameter
            }
            else
            {
                localVarPostBody = budget; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBudgetUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Budget>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Budget) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Budget)));
        }

    }
}
