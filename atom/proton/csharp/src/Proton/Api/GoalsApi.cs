/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Proton.Client;
using Proton.ModelEntity;

namespace Proton.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Goal Accumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GoalAccumulationAllocation (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest);

        /// <summary>
        /// Goal Accumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GoalAccumulationAllocationWithHttpInfo (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest);
        /// <summary>
        /// Goal Accumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GoalAccumulationRecommendation (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest);

        /// <summary>
        /// Goal Accumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GoalAccumulationRecommendationWithHttpInfo (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest);
        /// <summary>
        /// Goal Accumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GoalAccumulationStatus (GoalAccumulationStatusRequest goalAccumulationStatusRequest);

        /// <summary>
        /// Goal Accumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GoalAccumulationStatusWithHttpInfo (GoalAccumulationStatusRequest goalAccumulationStatusRequest);
        /// <summary>
        /// Goal Decumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GoalDecumulationAllocation (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest);

        /// <summary>
        /// Goal Decumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GoalDecumulationAllocationWithHttpInfo (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest);
        /// <summary>
        /// Goal Decumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GoalDecumulationRecommendation (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest);

        /// <summary>
        /// Goal Decumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GoalDecumulationRecommendationWithHttpInfo (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest);
        /// <summary>
        /// Goal Decumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GoalDecumulationStatus (GoalDecumulationStatusRequest goalDecumulationStatusRequest);

        /// <summary>
        /// Goal Decumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GoalDecumulationStatusWithHttpInfo (GoalDecumulationStatusRequest goalDecumulationStatusRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Goal Accumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GoalAccumulationAllocationAsync (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest);

        /// <summary>
        /// Goal Accumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalAccumulationAllocationAsyncWithHttpInfo (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest);
        /// <summary>
        /// Goal Accumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GoalAccumulationRecommendationAsync (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest);

        /// <summary>
        /// Goal Accumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalAccumulationRecommendationAsyncWithHttpInfo (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest);
        /// <summary>
        /// Goal Accumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GoalAccumulationStatusAsync (GoalAccumulationStatusRequest goalAccumulationStatusRequest);

        /// <summary>
        /// Goal Accumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of an accumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalAccumulationStatusAsyncWithHttpInfo (GoalAccumulationStatusRequest goalAccumulationStatusRequest);
        /// <summary>
        /// Goal Decumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GoalDecumulationAllocationAsync (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest);

        /// <summary>
        /// Goal Decumulation Allocation
        /// </summary>
        /// <remarks>
        /// Allocate based on a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalDecumulationAllocationAsyncWithHttpInfo (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest);
        /// <summary>
        /// Goal Decumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GoalDecumulationRecommendationAsync (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest);

        /// <summary>
        /// Goal Decumulation Recommendation
        /// </summary>
        /// <remarks>
        /// Generate recommendations to achieve a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalDecumulationRecommendationAsyncWithHttpInfo (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest);
        /// <summary>
        /// Goal Decumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GoalDecumulationStatusAsync (GoalDecumulationStatusRequest goalDecumulationStatusRequest);

        /// <summary>
        /// Goal Decumulation Status
        /// </summary>
        /// <remarks>
        /// Track the status of a decumulation goal
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalDecumulationStatusAsyncWithHttpInfo (GoalDecumulationStatusRequest goalDecumulationStatusRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GoalsApi : IGoalsApi
    {
        private Proton.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalsApi(String basePath)
        {
            this.Configuration = new Proton.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GoalsApi(Proton.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Proton.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Proton.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Proton.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Goal Accumulation Allocation Allocate based on an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GoalAccumulationAllocation (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GoalAccumulationAllocationWithHttpInfo(goalAccumulationAllocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Goal Accumulation Allocation Allocate based on an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GoalAccumulationAllocationWithHttpInfo (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest)
        {
            // verify the required parameter 'goalAccumulationAllocationRequest' is set
            if (goalAccumulationAllocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalAccumulationAllocationRequest' when calling GoalsApi->GoalAccumulationAllocation");

            var localVarPath = "/goal_accumulation/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalAccumulationAllocationRequest != null && goalAccumulationAllocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalAccumulationAllocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalAccumulationAllocationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalAccumulationAllocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Accumulation Allocation Allocate based on an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GoalAccumulationAllocationAsync (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GoalAccumulationAllocationAsyncWithHttpInfo(goalAccumulationAllocationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Goal Accumulation Allocation Allocate based on an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationAllocationRequest">Request payload for Goal Accumulation Allocation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalAccumulationAllocationAsyncWithHttpInfo (GoalAccumulationAllocationRequest goalAccumulationAllocationRequest)
        {
            // verify the required parameter 'goalAccumulationAllocationRequest' is set
            if (goalAccumulationAllocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalAccumulationAllocationRequest' when calling GoalsApi->GoalAccumulationAllocation");

            var localVarPath = "/goal_accumulation/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalAccumulationAllocationRequest != null && goalAccumulationAllocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalAccumulationAllocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalAccumulationAllocationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalAccumulationAllocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Accumulation Recommendation Generate recommendations to achieve an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GoalAccumulationRecommendation (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GoalAccumulationRecommendationWithHttpInfo(goalAccumulationRecommendationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Goal Accumulation Recommendation Generate recommendations to achieve an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GoalAccumulationRecommendationWithHttpInfo (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest)
        {
            // verify the required parameter 'goalAccumulationRecommendationRequest' is set
            if (goalAccumulationRecommendationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalAccumulationRecommendationRequest' when calling GoalsApi->GoalAccumulationRecommendation");

            var localVarPath = "/goal_accumulation/recommendation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalAccumulationRecommendationRequest != null && goalAccumulationRecommendationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalAccumulationRecommendationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalAccumulationRecommendationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalAccumulationRecommendation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Accumulation Recommendation Generate recommendations to achieve an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GoalAccumulationRecommendationAsync (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GoalAccumulationRecommendationAsyncWithHttpInfo(goalAccumulationRecommendationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Goal Accumulation Recommendation Generate recommendations to achieve an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationRecommendationRequest">Request payload for Goal Accumulation Recommendation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalAccumulationRecommendationAsyncWithHttpInfo (GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest)
        {
            // verify the required parameter 'goalAccumulationRecommendationRequest' is set
            if (goalAccumulationRecommendationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalAccumulationRecommendationRequest' when calling GoalsApi->GoalAccumulationRecommendation");

            var localVarPath = "/goal_accumulation/recommendation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalAccumulationRecommendationRequest != null && goalAccumulationRecommendationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalAccumulationRecommendationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalAccumulationRecommendationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalAccumulationRecommendation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Accumulation Status Track the status of an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GoalAccumulationStatus (GoalAccumulationStatusRequest goalAccumulationStatusRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GoalAccumulationStatusWithHttpInfo(goalAccumulationStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Goal Accumulation Status Track the status of an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GoalAccumulationStatusWithHttpInfo (GoalAccumulationStatusRequest goalAccumulationStatusRequest)
        {
            // verify the required parameter 'goalAccumulationStatusRequest' is set
            if (goalAccumulationStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalAccumulationStatusRequest' when calling GoalsApi->GoalAccumulationStatus");

            var localVarPath = "/goal_accumulation/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalAccumulationStatusRequest != null && goalAccumulationStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalAccumulationStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalAccumulationStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalAccumulationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Accumulation Status Track the status of an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GoalAccumulationStatusAsync (GoalAccumulationStatusRequest goalAccumulationStatusRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GoalAccumulationStatusAsyncWithHttpInfo(goalAccumulationStatusRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Goal Accumulation Status Track the status of an accumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalAccumulationStatusRequest">Request payload for Goal Accumulation Status</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalAccumulationStatusAsyncWithHttpInfo (GoalAccumulationStatusRequest goalAccumulationStatusRequest)
        {
            // verify the required parameter 'goalAccumulationStatusRequest' is set
            if (goalAccumulationStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalAccumulationStatusRequest' when calling GoalsApi->GoalAccumulationStatus");

            var localVarPath = "/goal_accumulation/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalAccumulationStatusRequest != null && goalAccumulationStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalAccumulationStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalAccumulationStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalAccumulationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Decumulation Allocation Allocate based on a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GoalDecumulationAllocation (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GoalDecumulationAllocationWithHttpInfo(goalDecumulationAllocationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Goal Decumulation Allocation Allocate based on a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GoalDecumulationAllocationWithHttpInfo (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest)
        {
            // verify the required parameter 'goalDecumulationAllocationRequest' is set
            if (goalDecumulationAllocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalDecumulationAllocationRequest' when calling GoalsApi->GoalDecumulationAllocation");

            var localVarPath = "/goal_decumulation/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalDecumulationAllocationRequest != null && goalDecumulationAllocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalDecumulationAllocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalDecumulationAllocationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalDecumulationAllocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Decumulation Allocation Allocate based on a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GoalDecumulationAllocationAsync (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GoalDecumulationAllocationAsyncWithHttpInfo(goalDecumulationAllocationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Goal Decumulation Allocation Allocate based on a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationAllocationRequest">Request payload for Goal Decumulation Allocation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalDecumulationAllocationAsyncWithHttpInfo (GoalDecumulationAllocationRequest goalDecumulationAllocationRequest)
        {
            // verify the required parameter 'goalDecumulationAllocationRequest' is set
            if (goalDecumulationAllocationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalDecumulationAllocationRequest' when calling GoalsApi->GoalDecumulationAllocation");

            var localVarPath = "/goal_decumulation/allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalDecumulationAllocationRequest != null && goalDecumulationAllocationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalDecumulationAllocationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalDecumulationAllocationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalDecumulationAllocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Decumulation Recommendation Generate recommendations to achieve a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GoalDecumulationRecommendation (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GoalDecumulationRecommendationWithHttpInfo(goalDecumulationRecommendationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Goal Decumulation Recommendation Generate recommendations to achieve a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GoalDecumulationRecommendationWithHttpInfo (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest)
        {
            // verify the required parameter 'goalDecumulationRecommendationRequest' is set
            if (goalDecumulationRecommendationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalDecumulationRecommendationRequest' when calling GoalsApi->GoalDecumulationRecommendation");

            var localVarPath = "/goal_decumulation/recommendation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalDecumulationRecommendationRequest != null && goalDecumulationRecommendationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalDecumulationRecommendationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalDecumulationRecommendationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalDecumulationRecommendation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Decumulation Recommendation Generate recommendations to achieve a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GoalDecumulationRecommendationAsync (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GoalDecumulationRecommendationAsyncWithHttpInfo(goalDecumulationRecommendationRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Goal Decumulation Recommendation Generate recommendations to achieve a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationRecommendationRequest">Request payload for Goal Decumulation Recommendation</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalDecumulationRecommendationAsyncWithHttpInfo (GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest)
        {
            // verify the required parameter 'goalDecumulationRecommendationRequest' is set
            if (goalDecumulationRecommendationRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalDecumulationRecommendationRequest' when calling GoalsApi->GoalDecumulationRecommendation");

            var localVarPath = "/goal_decumulation/recommendation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalDecumulationRecommendationRequest != null && goalDecumulationRecommendationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalDecumulationRecommendationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalDecumulationRecommendationRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalDecumulationRecommendation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Decumulation Status Track the status of a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GoalDecumulationStatus (GoalDecumulationStatusRequest goalDecumulationStatusRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GoalDecumulationStatusWithHttpInfo(goalDecumulationStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Goal Decumulation Status Track the status of a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GoalDecumulationStatusWithHttpInfo (GoalDecumulationStatusRequest goalDecumulationStatusRequest)
        {
            // verify the required parameter 'goalDecumulationStatusRequest' is set
            if (goalDecumulationStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalDecumulationStatusRequest' when calling GoalsApi->GoalDecumulationStatus");

            var localVarPath = "/goal_decumulation/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalDecumulationStatusRequest != null && goalDecumulationStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalDecumulationStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalDecumulationStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalDecumulationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Goal Decumulation Status Track the status of a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GoalDecumulationStatusAsync (GoalDecumulationStatusRequest goalDecumulationStatusRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GoalDecumulationStatusAsyncWithHttpInfo(goalDecumulationStatusRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Goal Decumulation Status Track the status of a decumulation goal
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalDecumulationStatusRequest">Request payload for Goal Decumulation Status</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GoalDecumulationStatusAsyncWithHttpInfo (GoalDecumulationStatusRequest goalDecumulationStatusRequest)
        {
            // verify the required parameter 'goalDecumulationStatusRequest' is set
            if (goalDecumulationStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalDecumulationStatusRequest' when calling GoalsApi->GoalDecumulationStatus");

            var localVarPath = "/goal_decumulation/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (goalDecumulationStatusRequest != null && goalDecumulationStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalDecumulationStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalDecumulationStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GoalDecumulationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

    }
}
