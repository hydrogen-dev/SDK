<?php
/**
 * ResourceApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\nucleus\ApiException;
use com\hydrogen\nucleus\Configuration;
use com\hydrogen\nucleus\HeaderSelector;
use com\hydrogen\nucleus\ObjectSerializer;

/**
 * ResourceApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createFxRateBulkUsingPost
     *
     * Create a bulk fxRate
     *
     * @param  \com\hydrogen\nucleus\Model\FxRate[] $fx_rate_list fxRateList (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\FxRate[]
     */
    public function createFxRateBulkUsingPost($fx_rate_list)
    {
        list($response) = $this->createFxRateBulkUsingPostWithHttpInfo($fx_rate_list);
        return $response;
    }

    /**
     * Operation createFxRateBulkUsingPostWithHttpInfo
     *
     * Create a bulk fxRate
     *
     * @param  \com\hydrogen\nucleus\Model\FxRate[] $fx_rate_list fxRateList (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\FxRate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createFxRateBulkUsingPostWithHttpInfo($fx_rate_list)
    {
        $returnType = '\com\hydrogen\nucleus\Model\FxRate[]';
        $request = $this->createFxRateBulkUsingPostRequest($fx_rate_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\FxRate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFxRateBulkUsingPostAsync
     *
     * Create a bulk fxRate
     *
     * @param  \com\hydrogen\nucleus\Model\FxRate[] $fx_rate_list fxRateList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFxRateBulkUsingPostAsync($fx_rate_list)
    {
        return $this->createFxRateBulkUsingPostAsyncWithHttpInfo($fx_rate_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createFxRateBulkUsingPostAsyncWithHttpInfo
     *
     * Create a bulk fxRate
     *
     * @param  \com\hydrogen\nucleus\Model\FxRate[] $fx_rate_list fxRateList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFxRateBulkUsingPostAsyncWithHttpInfo($fx_rate_list)
    {
        $returnType = '\com\hydrogen\nucleus\Model\FxRate[]';
        $request = $this->createFxRateBulkUsingPostRequest($fx_rate_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFxRateBulkUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\FxRate[] $fx_rate_list fxRateList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createFxRateBulkUsingPostRequest($fx_rate_list)
    {
        // verify the required parameter 'fx_rate_list' is set
        if ($fx_rate_list === null || (is_array($fx_rate_list) && count($fx_rate_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fx_rate_list when calling createFxRateBulkUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/resource/fx_rate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($fx_rate_list)) {
            $_tempBody = $fx_rate_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInstitutionUsingPost
     *
     * Create a institution
     *
     * @param  \com\hydrogen\nucleus\Model\Institution $institution institution (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Institution
     */
    public function createInstitutionUsingPost($institution)
    {
        list($response) = $this->createInstitutionUsingPostWithHttpInfo($institution);
        return $response;
    }

    /**
     * Operation createInstitutionUsingPostWithHttpInfo
     *
     * Create a institution
     *
     * @param  \com\hydrogen\nucleus\Model\Institution $institution institution (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Institution, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInstitutionUsingPostWithHttpInfo($institution)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Institution';
        $request = $this->createInstitutionUsingPostRequest($institution);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Institution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInstitutionUsingPostAsync
     *
     * Create a institution
     *
     * @param  \com\hydrogen\nucleus\Model\Institution $institution institution (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInstitutionUsingPostAsync($institution)
    {
        return $this->createInstitutionUsingPostAsyncWithHttpInfo($institution)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInstitutionUsingPostAsyncWithHttpInfo
     *
     * Create a institution
     *
     * @param  \com\hydrogen\nucleus\Model\Institution $institution institution (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInstitutionUsingPostAsyncWithHttpInfo($institution)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Institution';
        $request = $this->createInstitutionUsingPostRequest($institution);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInstitutionUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\Institution $institution institution (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInstitutionUsingPostRequest($institution)
    {
        // verify the required parameter 'institution' is set
        if ($institution === null || (is_array($institution) && count($institution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $institution when calling createInstitutionUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/resource/institution';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($institution)) {
            $_tempBody = $institution;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInstitutionUsingDelete
     *
     * Delete a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInstitutionUsingDelete($institution_id)
    {
        $this->deleteInstitutionUsingDeleteWithHttpInfo($institution_id);
    }

    /**
     * Operation deleteInstitutionUsingDeleteWithHttpInfo
     *
     * Delete a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInstitutionUsingDeleteWithHttpInfo($institution_id)
    {
        $returnType = '';
        $request = $this->deleteInstitutionUsingDeleteRequest($institution_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInstitutionUsingDeleteAsync
     *
     * Delete a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInstitutionUsingDeleteAsync($institution_id)
    {
        return $this->deleteInstitutionUsingDeleteAsyncWithHttpInfo($institution_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInstitutionUsingDeleteAsyncWithHttpInfo
     *
     * Delete a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInstitutionUsingDeleteAsyncWithHttpInfo($institution_id)
    {
        $returnType = '';
        $request = $this->deleteInstitutionUsingDeleteRequest($institution_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInstitutionUsingDelete'
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteInstitutionUsingDeleteRequest($institution_id)
    {
        // verify the required parameter 'institution_id' is set
        if ($institution_id === null || (is_array($institution_id) && count($institution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $institution_id when calling deleteInstitutionUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/resource/institution/{institution_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($institution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'institution_id' . '}',
                ObjectSerializer::toPathValue($institution_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountResultForMapping
     *
     * Get all account category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_account_category_id hydrogen_account_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getAccountResultForMapping($filter = null, $hydrogen_account_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        list($response) = $this->getAccountResultForMappingWithHttpInfo($filter, $hydrogen_account_category_id, $match_primary, $tenant_name, $vendor_name);
        return $response;
    }

    /**
     * Operation getAccountResultForMappingWithHttpInfo
     *
     * Get all account category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_account_category_id hydrogen_account_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountResultForMappingWithHttpInfo($filter = null, $hydrogen_account_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        $returnType = 'object[]';
        $request = $this->getAccountResultForMappingRequest($filter, $hydrogen_account_category_id, $match_primary, $tenant_name, $vendor_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountResultForMappingAsync
     *
     * Get all account category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_account_category_id hydrogen_account_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountResultForMappingAsync($filter = null, $hydrogen_account_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        return $this->getAccountResultForMappingAsyncWithHttpInfo($filter, $hydrogen_account_category_id, $match_primary, $tenant_name, $vendor_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountResultForMappingAsyncWithHttpInfo
     *
     * Get all account category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_account_category_id hydrogen_account_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountResultForMappingAsyncWithHttpInfo($filter = null, $hydrogen_account_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        $returnType = 'object[]';
        $request = $this->getAccountResultForMappingRequest($filter, $hydrogen_account_category_id, $match_primary, $tenant_name, $vendor_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountResultForMapping'
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_account_category_id hydrogen_account_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountResultForMappingRequest($filter = null, $hydrogen_account_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {

        $resourcePath = '/nucleus/v1/resource/account_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($hydrogen_account_category_id !== null) {
            $queryParams['hydrogen_account_category_id'] = ObjectSerializer::toQueryValue($hydrogen_account_category_id);
        }
        // query params
        if ($match_primary !== null) {
            $queryParams['match_primary'] = ObjectSerializer::toQueryValue($match_primary);
        }
        // query params
        if ($tenant_name !== null) {
            $queryParams['tenant_name'] = ObjectSerializer::toQueryValue($tenant_name);
        }
        // query params
        if ($vendor_name !== null) {
            $queryParams['vendor_name'] = ObjectSerializer::toQueryValue($vendor_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllCountryUsingGet
     *
     * Get All Countries
     *
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Country[]
     */
    public function getAllCountryUsingGet()
    {
        list($response) = $this->getAllCountryUsingGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllCountryUsingGetWithHttpInfo
     *
     * Get All Countries
     *
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Country[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllCountryUsingGetWithHttpInfo()
    {
        $returnType = '\com\hydrogen\nucleus\Model\Country[]';
        $request = $this->getAllCountryUsingGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Country[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllCountryUsingGetAsync
     *
     * Get All Countries
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCountryUsingGetAsync()
    {
        return $this->getAllCountryUsingGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllCountryUsingGetAsyncWithHttpInfo
     *
     * Get All Countries
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCountryUsingGetAsyncWithHttpInfo()
    {
        $returnType = '\com\hydrogen\nucleus\Model\Country[]';
        $request = $this->getAllCountryUsingGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllCountryUsingGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllCountryUsingGetRequest()
    {

        $resourcePath = '/nucleus/v1/resource/country';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllCurrencyUsingGet
     *
     * Get All Currencies
     *
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Currency[]
     */
    public function getAllCurrencyUsingGet()
    {
        list($response) = $this->getAllCurrencyUsingGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllCurrencyUsingGetWithHttpInfo
     *
     * Get All Currencies
     *
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Currency[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllCurrencyUsingGetWithHttpInfo()
    {
        $returnType = '\com\hydrogen\nucleus\Model\Currency[]';
        $request = $this->getAllCurrencyUsingGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Currency[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllCurrencyUsingGetAsync
     *
     * Get All Currencies
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCurrencyUsingGetAsync()
    {
        return $this->getAllCurrencyUsingGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllCurrencyUsingGetAsyncWithHttpInfo
     *
     * Get All Currencies
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllCurrencyUsingGetAsyncWithHttpInfo()
    {
        $returnType = '\com\hydrogen\nucleus\Model\Currency[]';
        $request = $this->getAllCurrencyUsingGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllCurrencyUsingGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllCurrencyUsingGetRequest()
    {

        $resourcePath = '/nucleus/v1/resource/currency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllMerchantCategoryCodeUsingGet
     *
     * Get All Merchant Category Codes
     *
     * @param  string $filter filter (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\MerchantCategoryCode[]
     */
    public function getAllMerchantCategoryCodeUsingGet($filter = null)
    {
        list($response) = $this->getAllMerchantCategoryCodeUsingGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation getAllMerchantCategoryCodeUsingGetWithHttpInfo
     *
     * Get All Merchant Category Codes
     *
     * @param  string $filter filter (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\MerchantCategoryCode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllMerchantCategoryCodeUsingGetWithHttpInfo($filter = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\MerchantCategoryCode[]';
        $request = $this->getAllMerchantCategoryCodeUsingGetRequest($filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\MerchantCategoryCode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllMerchantCategoryCodeUsingGetAsync
     *
     * Get All Merchant Category Codes
     *
     * @param  string $filter filter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMerchantCategoryCodeUsingGetAsync($filter = null)
    {
        return $this->getAllMerchantCategoryCodeUsingGetAsyncWithHttpInfo($filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllMerchantCategoryCodeUsingGetAsyncWithHttpInfo
     *
     * Get All Merchant Category Codes
     *
     * @param  string $filter filter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMerchantCategoryCodeUsingGetAsyncWithHttpInfo($filter = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\MerchantCategoryCode[]';
        $request = $this->getAllMerchantCategoryCodeUsingGetRequest($filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllMerchantCategoryCodeUsingGet'
     *
     * @param  string $filter filter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllMerchantCategoryCodeUsingGetRequest($filter = null)
    {

        $resourcePath = '/nucleus/v1/resource/merchant_category_code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllStatesUsingGet
     *
     * List all state resource
     *
     * @param  string $country_code country_code (optional, default to US)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\State[]
     */
    public function getAllStatesUsingGet($country_code = 'US')
    {
        list($response) = $this->getAllStatesUsingGetWithHttpInfo($country_code);
        return $response;
    }

    /**
     * Operation getAllStatesUsingGetWithHttpInfo
     *
     * List all state resource
     *
     * @param  string $country_code country_code (optional, default to US)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\State[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllStatesUsingGetWithHttpInfo($country_code = 'US')
    {
        $returnType = '\com\hydrogen\nucleus\Model\State[]';
        $request = $this->getAllStatesUsingGetRequest($country_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\State[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllStatesUsingGetAsync
     *
     * List all state resource
     *
     * @param  string $country_code country_code (optional, default to US)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllStatesUsingGetAsync($country_code = 'US')
    {
        return $this->getAllStatesUsingGetAsyncWithHttpInfo($country_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllStatesUsingGetAsyncWithHttpInfo
     *
     * List all state resource
     *
     * @param  string $country_code country_code (optional, default to US)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllStatesUsingGetAsyncWithHttpInfo($country_code = 'US')
    {
        $returnType = '\com\hydrogen\nucleus\Model\State[]';
        $request = $this->getAllStatesUsingGetRequest($country_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllStatesUsingGet'
     *
     * @param  string $country_code country_code (optional, default to US)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllStatesUsingGetRequest($country_code = 'US')
    {

        $resourcePath = '/nucleus/v1/resource/state';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($country_code !== null) {
            $queryParams['country_code'] = ObjectSerializer::toQueryValue($country_code);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllStatisticsUsingGet
     *
     * List all statistic resource
     *
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,\com\hydrogen\nucleus\Model\StatisticResourceVO[]]
     */
    public function getAllStatisticsUsingGet()
    {
        list($response) = $this->getAllStatisticsUsingGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAllStatisticsUsingGetWithHttpInfo
     *
     * List all statistic resource
     *
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,\com\hydrogen\nucleus\Model\StatisticResourceVO[]], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllStatisticsUsingGetWithHttpInfo()
    {
        $returnType = 'map[string,\com\hydrogen\nucleus\Model\StatisticResourceVO[]]';
        $request = $this->getAllStatisticsUsingGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,\com\hydrogen\nucleus\Model\StatisticResourceVO[]]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllStatisticsUsingGetAsync
     *
     * List all statistic resource
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllStatisticsUsingGetAsync()
    {
        return $this->getAllStatisticsUsingGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllStatisticsUsingGetAsyncWithHttpInfo
     *
     * List all statistic resource
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllStatisticsUsingGetAsyncWithHttpInfo()
    {
        $returnType = 'map[string,\com\hydrogen\nucleus\Model\StatisticResourceVO[]]';
        $request = $this->getAllStatisticsUsingGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllStatisticsUsingGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllStatisticsUsingGetRequest()
    {

        $resourcePath = '/nucleus/v1/resource/statistic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrencyExchangeRateAllUsingGet
     *
     * List all fxRates
     *
     * @param  string $filter filter (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\FxRateView[]
     */
    public function getCurrencyExchangeRateAllUsingGet($filter = null)
    {
        list($response) = $this->getCurrencyExchangeRateAllUsingGetWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation getCurrencyExchangeRateAllUsingGetWithHttpInfo
     *
     * List all fxRates
     *
     * @param  string $filter filter (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\FxRateView[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrencyExchangeRateAllUsingGetWithHttpInfo($filter = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\FxRateView[]';
        $request = $this->getCurrencyExchangeRateAllUsingGetRequest($filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\FxRateView[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrencyExchangeRateAllUsingGetAsync
     *
     * List all fxRates
     *
     * @param  string $filter filter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyExchangeRateAllUsingGetAsync($filter = null)
    {
        return $this->getCurrencyExchangeRateAllUsingGetAsyncWithHttpInfo($filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrencyExchangeRateAllUsingGetAsyncWithHttpInfo
     *
     * List all fxRates
     *
     * @param  string $filter filter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrencyExchangeRateAllUsingGetAsyncWithHttpInfo($filter = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\FxRateView[]';
        $request = $this->getCurrencyExchangeRateAllUsingGetRequest($filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrencyExchangeRateAllUsingGet'
     *
     * @param  string $filter filter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCurrencyExchangeRateAllUsingGetRequest($filter = null)
    {

        $resourcePath = '/nucleus/v1/resource/fx_rate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstitutionAllUsingGet
     *
     * List all institutions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageInstitution_
     */
    public function getInstitutionAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getInstitutionAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getInstitutionAllUsingGetWithHttpInfo
     *
     * List all institutions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageInstitution_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstitutionAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInstitution_';
        $request = $this->getInstitutionAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageInstitution_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInstitutionAllUsingGetAsync
     *
     * List all institutions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getInstitutionAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstitutionAllUsingGetAsyncWithHttpInfo
     *
     * List all institutions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageInstitution_';
        $request = $this->getInstitutionAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstitutionAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInstitutionAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/resource/institution';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstitutionUsingGet
     *
     * Retrieve a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Institution
     */
    public function getInstitutionUsingGet($institution_id)
    {
        list($response) = $this->getInstitutionUsingGetWithHttpInfo($institution_id);
        return $response;
    }

    /**
     * Operation getInstitutionUsingGetWithHttpInfo
     *
     * Retrieve a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Institution, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstitutionUsingGetWithHttpInfo($institution_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Institution';
        $request = $this->getInstitutionUsingGetRequest($institution_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Institution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInstitutionUsingGetAsync
     *
     * Retrieve a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionUsingGetAsync($institution_id)
    {
        return $this->getInstitutionUsingGetAsyncWithHttpInfo($institution_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstitutionUsingGetAsyncWithHttpInfo
     *
     * Retrieve a institution
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstitutionUsingGetAsyncWithHttpInfo($institution_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Institution';
        $request = $this->getInstitutionUsingGetRequest($institution_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstitutionUsingGet'
     *
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInstitutionUsingGetRequest($institution_id)
    {
        // verify the required parameter 'institution_id' is set
        if ($institution_id === null || (is_array($institution_id) && count($institution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $institution_id when calling getInstitutionUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/resource/institution/{institution_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($institution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'institution_id' . '}',
                ObjectSerializer::toPathValue($institution_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMerchantsAllUsingGet
     *
     * Get all merchants
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to id)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\MXMerchantRes
     */
    public function getMerchantsAllUsingGet($ascending = 'false', $filter = null, $order_by = 'id', $page = '0', $size = '25')
    {
        list($response) = $this->getMerchantsAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getMerchantsAllUsingGetWithHttpInfo
     *
     * Get all merchants
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to id)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\MXMerchantRes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMerchantsAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'id', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\MXMerchantRes';
        $request = $this->getMerchantsAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\MXMerchantRes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMerchantsAllUsingGetAsync
     *
     * Get all merchants
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to id)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantsAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'id', $page = '0', $size = '25')
    {
        return $this->getMerchantsAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMerchantsAllUsingGetAsyncWithHttpInfo
     *
     * Get all merchants
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to id)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMerchantsAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'id', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\MXMerchantRes';
        $request = $this->getMerchantsAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMerchantsAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to id)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMerchantsAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'id', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/resource/merchant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionResultForMapping
     *
     * Get all transaction category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_transaction_category_id hydrogen_transaction_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getTransactionResultForMapping($filter = null, $hydrogen_transaction_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        list($response) = $this->getTransactionResultForMappingWithHttpInfo($filter, $hydrogen_transaction_category_id, $match_primary, $tenant_name, $vendor_name);
        return $response;
    }

    /**
     * Operation getTransactionResultForMappingWithHttpInfo
     *
     * Get all transaction category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_transaction_category_id hydrogen_transaction_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionResultForMappingWithHttpInfo($filter = null, $hydrogen_transaction_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        $returnType = 'object[]';
        $request = $this->getTransactionResultForMappingRequest($filter, $hydrogen_transaction_category_id, $match_primary, $tenant_name, $vendor_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionResultForMappingAsync
     *
     * Get all transaction category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_transaction_category_id hydrogen_transaction_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionResultForMappingAsync($filter = null, $hydrogen_transaction_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        return $this->getTransactionResultForMappingAsyncWithHttpInfo($filter, $hydrogen_transaction_category_id, $match_primary, $tenant_name, $vendor_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionResultForMappingAsyncWithHttpInfo
     *
     * Get all transaction category mapping
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_transaction_category_id hydrogen_transaction_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionResultForMappingAsyncWithHttpInfo($filter = null, $hydrogen_transaction_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {
        $returnType = 'object[]';
        $request = $this->getTransactionResultForMappingRequest($filter, $hydrogen_transaction_category_id, $match_primary, $tenant_name, $vendor_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionResultForMapping'
     *
     * @param  string $filter filter (optional)
     * @param  string $hydrogen_transaction_category_id hydrogen_transaction_category_id (optional)
     * @param  bool $match_primary match_primary (optional, default to false)
     * @param  string $tenant_name tenant_name (optional)
     * @param  string $vendor_name vendor_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionResultForMappingRequest($filter = null, $hydrogen_transaction_category_id = null, $match_primary = 'false', $tenant_name = null, $vendor_name = null)
    {

        $resourcePath = '/nucleus/v1/resource/transaction_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($hydrogen_transaction_category_id !== null) {
            $queryParams['hydrogen_transaction_category_id'] = ObjectSerializer::toQueryValue($hydrogen_transaction_category_id);
        }
        // query params
        if ($match_primary !== null) {
            $queryParams['match_primary'] = ObjectSerializer::toQueryValue($match_primary);
        }
        // query params
        if ($tenant_name !== null) {
            $queryParams['tenant_name'] = ObjectSerializer::toQueryValue($tenant_name);
        }
        // query params
        if ($vendor_name !== null) {
            $queryParams['vendor_name'] = ObjectSerializer::toQueryValue($vendor_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInstitutionUsingPut
     *
     * Update a institution
     *
     * @param  object $institution institution (required)
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Institution
     */
    public function updateInstitutionUsingPut($institution, $institution_id)
    {
        list($response) = $this->updateInstitutionUsingPutWithHttpInfo($institution, $institution_id);
        return $response;
    }

    /**
     * Operation updateInstitutionUsingPutWithHttpInfo
     *
     * Update a institution
     *
     * @param  object $institution institution (required)
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Institution, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInstitutionUsingPutWithHttpInfo($institution, $institution_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Institution';
        $request = $this->updateInstitutionUsingPutRequest($institution, $institution_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Institution',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInstitutionUsingPutAsync
     *
     * Update a institution
     *
     * @param  object $institution institution (required)
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInstitutionUsingPutAsync($institution, $institution_id)
    {
        return $this->updateInstitutionUsingPutAsyncWithHttpInfo($institution, $institution_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInstitutionUsingPutAsyncWithHttpInfo
     *
     * Update a institution
     *
     * @param  object $institution institution (required)
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInstitutionUsingPutAsyncWithHttpInfo($institution, $institution_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Institution';
        $request = $this->updateInstitutionUsingPutRequest($institution, $institution_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInstitutionUsingPut'
     *
     * @param  object $institution institution (required)
     * @param  string $institution_id UUID institution_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInstitutionUsingPutRequest($institution, $institution_id)
    {
        // verify the required parameter 'institution' is set
        if ($institution === null || (is_array($institution) && count($institution) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $institution when calling updateInstitutionUsingPut'
            );
        }
        // verify the required parameter 'institution_id' is set
        if ($institution_id === null || (is_array($institution_id) && count($institution_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $institution_id when calling updateInstitutionUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/resource/institution/{institution_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($institution_id !== null) {
            $resourcePath = str_replace(
                '{' . 'institution_id' . '}',
                ObjectSerializer::toPathValue($institution_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($institution)) {
            $_tempBody = $institution;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
