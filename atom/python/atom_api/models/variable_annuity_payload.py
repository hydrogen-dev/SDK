# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.annuity_deposit_schedule import AnnuityDepositSchedule  # noqa: F401,E501


class VariableAnnuityPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_tickers': 'list[str]',
        'portfolio_weights': 'list[float]',
        'accumulation_horizon': 'int',
        'decumulation_horizon': 'int',
        'initial_balance': 'float',
        'frequency_interval': 'str',
        'deposit_schedule': 'AnnuityDepositSchedule'
    }

    attribute_map = {
        'portfolio_tickers': 'portfolio_tickers',
        'portfolio_weights': 'portfolio_weights',
        'accumulation_horizon': 'accumulation_horizon',
        'decumulation_horizon': 'decumulation_horizon',
        'initial_balance': 'initial_balance',
        'frequency_interval': 'frequency_interval',
        'deposit_schedule': 'deposit_schedule'
    }

    def __init__(self, portfolio_tickers=None, portfolio_weights=None, accumulation_horizon=None, decumulation_horizon=None, initial_balance=None, frequency_interval=None, deposit_schedule=None):  # noqa: E501
        """VariableAnnuityPayload - a model defined in Swagger"""  # noqa: E501

        self._portfolio_tickers = None
        self._portfolio_weights = None
        self._accumulation_horizon = None
        self._decumulation_horizon = None
        self._initial_balance = None
        self._frequency_interval = None
        self._deposit_schedule = None
        self.discriminator = None

        self.portfolio_tickers = portfolio_tickers
        self.portfolio_weights = portfolio_weights
        self.accumulation_horizon = accumulation_horizon
        self.decumulation_horizon = decumulation_horizon
        self.initial_balance = initial_balance
        if frequency_interval is not None:
            self.frequency_interval = frequency_interval
        if deposit_schedule is not None:
            self.deposit_schedule = deposit_schedule

    @property
    def portfolio_tickers(self):
        """Gets the portfolio_tickers of this VariableAnnuityPayload.  # noqa: E501

        Portfolio tickers, referencing securities defined in the Nucleus API.  # noqa: E501

        :return: The portfolio_tickers of this VariableAnnuityPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._portfolio_tickers

    @portfolio_tickers.setter
    def portfolio_tickers(self, portfolio_tickers):
        """Sets the portfolio_tickers of this VariableAnnuityPayload.

        Portfolio tickers, referencing securities defined in the Nucleus API.  # noqa: E501

        :param portfolio_tickers: The portfolio_tickers of this VariableAnnuityPayload.  # noqa: E501
        :type: list[str]
        """
        if portfolio_tickers is None:
            raise ValueError("Invalid value for `portfolio_tickers`, must not be `None`")  # noqa: E501

        self._portfolio_tickers = portfolio_tickers

    @property
    def portfolio_weights(self):
        """Gets the portfolio_weights of this VariableAnnuityPayload.  # noqa: E501

        Portfolio weights, corresponding to portfolio_tickers. Must sum to 1.0.  # noqa: E501

        :return: The portfolio_weights of this VariableAnnuityPayload.  # noqa: E501
        :rtype: list[float]
        """
        return self._portfolio_weights

    @portfolio_weights.setter
    def portfolio_weights(self, portfolio_weights):
        """Sets the portfolio_weights of this VariableAnnuityPayload.

        Portfolio weights, corresponding to portfolio_tickers. Must sum to 1.0.  # noqa: E501

        :param portfolio_weights: The portfolio_weights of this VariableAnnuityPayload.  # noqa: E501
        :type: list[float]
        """
        if portfolio_weights is None:
            raise ValueError("Invalid value for `portfolio_weights`, must not be `None`")  # noqa: E501

        self._portfolio_weights = portfolio_weights

    @property
    def accumulation_horizon(self):
        """Gets the accumulation_horizon of this VariableAnnuityPayload.  # noqa: E501

        The number of years until the payout phase begins.  # noqa: E501

        :return: The accumulation_horizon of this VariableAnnuityPayload.  # noqa: E501
        :rtype: int
        """
        return self._accumulation_horizon

    @accumulation_horizon.setter
    def accumulation_horizon(self, accumulation_horizon):
        """Sets the accumulation_horizon of this VariableAnnuityPayload.

        The number of years until the payout phase begins.  # noqa: E501

        :param accumulation_horizon: The accumulation_horizon of this VariableAnnuityPayload.  # noqa: E501
        :type: int
        """
        if accumulation_horizon is None:
            raise ValueError("Invalid value for `accumulation_horizon`, must not be `None`")  # noqa: E501

        self._accumulation_horizon = accumulation_horizon

    @property
    def decumulation_horizon(self):
        """Gets the decumulation_horizon of this VariableAnnuityPayload.  # noqa: E501

        The number of years in the payout or decumulation phase.  # noqa: E501

        :return: The decumulation_horizon of this VariableAnnuityPayload.  # noqa: E501
        :rtype: int
        """
        return self._decumulation_horizon

    @decumulation_horizon.setter
    def decumulation_horizon(self, decumulation_horizon):
        """Sets the decumulation_horizon of this VariableAnnuityPayload.

        The number of years in the payout or decumulation phase.  # noqa: E501

        :param decumulation_horizon: The decumulation_horizon of this VariableAnnuityPayload.  # noqa: E501
        :type: int
        """
        if decumulation_horizon is None:
            raise ValueError("Invalid value for `decumulation_horizon`, must not be `None`")  # noqa: E501

        self._decumulation_horizon = decumulation_horizon

    @property
    def initial_balance(self):
        """Gets the initial_balance of this VariableAnnuityPayload.  # noqa: E501

        The starting balance in the annuity plan, prior to any ongoing contributions. Must be greater than or equal to 0.  # noqa: E501

        :return: The initial_balance of this VariableAnnuityPayload.  # noqa: E501
        :rtype: float
        """
        return self._initial_balance

    @initial_balance.setter
    def initial_balance(self, initial_balance):
        """Sets the initial_balance of this VariableAnnuityPayload.

        The starting balance in the annuity plan, prior to any ongoing contributions. Must be greater than or equal to 0.  # noqa: E501

        :param initial_balance: The initial_balance of this VariableAnnuityPayload.  # noqa: E501
        :type: float
        """
        if initial_balance is None:
            raise ValueError("Invalid value for `initial_balance`, must not be `None`")  # noqa: E501
        if initial_balance is not None and initial_balance < 0:  # noqa: E501
            raise ValueError("Invalid value for `initial_balance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._initial_balance = initial_balance

    @property
    def frequency_interval(self):
        """Gets the frequency_interval of this VariableAnnuityPayload.  # noqa: E501

        Unit of time associated with accumulation_horizon, decumulation_horizon, start, end, and annuity payments.  # noqa: E501

        :return: The frequency_interval of this VariableAnnuityPayload.  # noqa: E501
        :rtype: str
        """
        return self._frequency_interval

    @frequency_interval.setter
    def frequency_interval(self, frequency_interval):
        """Sets the frequency_interval of this VariableAnnuityPayload.

        Unit of time associated with accumulation_horizon, decumulation_horizon, start, end, and annuity payments.  # noqa: E501

        :param frequency_interval: The frequency_interval of this VariableAnnuityPayload.  # noqa: E501
        :type: str
        """

        self._frequency_interval = frequency_interval

    @property
    def deposit_schedule(self):
        """Gets the deposit_schedule of this VariableAnnuityPayload.  # noqa: E501


        :return: The deposit_schedule of this VariableAnnuityPayload.  # noqa: E501
        :rtype: AnnuityDepositSchedule
        """
        return self._deposit_schedule

    @deposit_schedule.setter
    def deposit_schedule(self, deposit_schedule):
        """Sets the deposit_schedule of this VariableAnnuityPayload.


        :param deposit_schedule: The deposit_schedule of this VariableAnnuityPayload.  # noqa: E501
        :type: AnnuityDepositSchedule
        """

        self._deposit_schedule = deposit_schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VariableAnnuityPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VariableAnnuityPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
