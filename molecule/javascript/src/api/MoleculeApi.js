/**
 * Hydrogen Molecule API
 * The Hydrogen Molecule API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CurrencyBalanceGetResponse', 'model/CurrencyBalanceSpecificResponse', 'model/CurrencyTransferGetResponse', 'model/CurrencyTransferPayload', 'model/CurrencyTransferSpecificResponse', 'model/TokenBalanceGetResponse', 'model/TokenBalanceSpecificResponse', 'model/TokenCreatePayload', 'model/TokenCreateResponse', 'model/TokenCrowdsalePayload', 'model/TokenDeployPayload', 'model/TokenGetResponse', 'model/TokenPurchasePayload', 'model/TokenSpecificResponse', 'model/TokenSupplyGetResponse', 'model/TokenSupplySpecificResponse', 'model/TokenTransferGetResponse', 'model/TokenTransferPayload', 'model/TokenTransferSpecificResponse', 'model/TokenUpdatePayload', 'model/TokenWhitelistPayload', 'model/WalletCreatePayload', 'model/WalletCreateResponse', 'model/WalletGetResponse', 'model/WalletKeyCreatePayload', 'model/WalletKeyCreateResponse', 'model/WalletKeyGeneratorPayload', 'model/WalletKeyGetResponse', 'model/WalletKeySpecificResponse', 'model/WalletSpecificResponse', 'model/WalletUpdatePayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CurrencyBalanceGetResponse'), require('../model/CurrencyBalanceSpecificResponse'), require('../model/CurrencyTransferGetResponse'), require('../model/CurrencyTransferPayload'), require('../model/CurrencyTransferSpecificResponse'), require('../model/TokenBalanceGetResponse'), require('../model/TokenBalanceSpecificResponse'), require('../model/TokenCreatePayload'), require('../model/TokenCreateResponse'), require('../model/TokenCrowdsalePayload'), require('../model/TokenDeployPayload'), require('../model/TokenGetResponse'), require('../model/TokenPurchasePayload'), require('../model/TokenSpecificResponse'), require('../model/TokenSupplyGetResponse'), require('../model/TokenSupplySpecificResponse'), require('../model/TokenTransferGetResponse'), require('../model/TokenTransferPayload'), require('../model/TokenTransferSpecificResponse'), require('../model/TokenUpdatePayload'), require('../model/TokenWhitelistPayload'), require('../model/WalletCreatePayload'), require('../model/WalletCreateResponse'), require('../model/WalletGetResponse'), require('../model/WalletKeyCreatePayload'), require('../model/WalletKeyCreateResponse'), require('../model/WalletKeyGeneratorPayload'), require('../model/WalletKeyGetResponse'), require('../model/WalletKeySpecificResponse'), require('../model/WalletSpecificResponse'), require('../model/WalletUpdatePayload'));
  } else {
    // Browser globals (root is window)
    if (!root.molecule_api) {
      root.molecule_api = {};
    }
    root.molecule_api.MoleculeApi = factory(root.molecule_api.ApiClient, root.molecule_api.CurrencyBalanceGetResponse, root.molecule_api.CurrencyBalanceSpecificResponse, root.molecule_api.CurrencyTransferGetResponse, root.molecule_api.CurrencyTransferPayload, root.molecule_api.CurrencyTransferSpecificResponse, root.molecule_api.TokenBalanceGetResponse, root.molecule_api.TokenBalanceSpecificResponse, root.molecule_api.TokenCreatePayload, root.molecule_api.TokenCreateResponse, root.molecule_api.TokenCrowdsalePayload, root.molecule_api.TokenDeployPayload, root.molecule_api.TokenGetResponse, root.molecule_api.TokenPurchasePayload, root.molecule_api.TokenSpecificResponse, root.molecule_api.TokenSupplyGetResponse, root.molecule_api.TokenSupplySpecificResponse, root.molecule_api.TokenTransferGetResponse, root.molecule_api.TokenTransferPayload, root.molecule_api.TokenTransferSpecificResponse, root.molecule_api.TokenUpdatePayload, root.molecule_api.TokenWhitelistPayload, root.molecule_api.WalletCreatePayload, root.molecule_api.WalletCreateResponse, root.molecule_api.WalletGetResponse, root.molecule_api.WalletKeyCreatePayload, root.molecule_api.WalletKeyCreateResponse, root.molecule_api.WalletKeyGeneratorPayload, root.molecule_api.WalletKeyGetResponse, root.molecule_api.WalletKeySpecificResponse, root.molecule_api.WalletSpecificResponse, root.molecule_api.WalletUpdatePayload);
  }
}(this, function(ApiClient, CurrencyBalanceGetResponse, CurrencyBalanceSpecificResponse, CurrencyTransferGetResponse, CurrencyTransferPayload, CurrencyTransferSpecificResponse, TokenBalanceGetResponse, TokenBalanceSpecificResponse, TokenCreatePayload, TokenCreateResponse, TokenCrowdsalePayload, TokenDeployPayload, TokenGetResponse, TokenPurchasePayload, TokenSpecificResponse, TokenSupplyGetResponse, TokenSupplySpecificResponse, TokenTransferGetResponse, TokenTransferPayload, TokenTransferSpecificResponse, TokenUpdatePayload, TokenWhitelistPayload, WalletCreatePayload, WalletCreateResponse, WalletGetResponse, WalletKeyCreatePayload, WalletKeyCreateResponse, WalletKeyGeneratorPayload, WalletKeyGetResponse, WalletKeySpecificResponse, WalletSpecificResponse, WalletUpdatePayload) {
  'use strict';

  /**
   * Molecule service.
   * @module api/MoleculeApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MoleculeApi. 
   * @alias module:api/MoleculeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/MoleculeApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a token
     * @param {String} tokenId UUID of a token
     * @param {module:api/MoleculeApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteToken = function(tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling deleteToken");
      }


      var pathParams = {
        'token_id': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/molecule/v1/token/{token_id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencyBalance operation.
     * @callback module:api/MoleculeApi~getCurrencyBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyBalanceSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a currency balance
     * @param {String} currencyBalanceId UUID of a currency balance
     * @param {module:api/MoleculeApi~getCurrencyBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyBalanceSpecificResponse}
     */
    this.getCurrencyBalance = function(currencyBalanceId, callback) {
      var postBody = null;

      // verify the required parameter 'currencyBalanceId' is set
      if (currencyBalanceId === undefined || currencyBalanceId === null) {
        throw new Error("Missing the required parameter 'currencyBalanceId' when calling getCurrencyBalance");
      }


      var pathParams = {
        'currency_balance_id': currencyBalanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CurrencyBalanceSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/currency_balance/{currency_balance_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencyBalances operation.
     * @callback module:api/MoleculeApi~getCurrencyBalancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyBalanceGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all currency balances recorded in your application.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getCurrencyBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyBalanceGetResponse}
     */
    this.getCurrencyBalances = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CurrencyBalanceGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/currency_balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencyTransfer operation.
     * @callback module:api/MoleculeApi~getCurrencyTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyTransferSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a currency transfer
     * @param {String} currencyTransferId UUID of a currency transfer
     * @param {module:api/MoleculeApi~getCurrencyTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyTransferSpecificResponse}
     */
    this.getCurrencyTransfer = function(currencyTransferId, callback) {
      var postBody = null;

      // verify the required parameter 'currencyTransferId' is set
      if (currencyTransferId === undefined || currencyTransferId === null) {
        throw new Error("Missing the required parameter 'currencyTransferId' when calling getCurrencyTransfer");
      }


      var pathParams = {
        'currency_transfer_id': currencyTransferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CurrencyTransferSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/currency_transfer/{currency_transfer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrencyTransfers operation.
     * @callback module:api/MoleculeApi~getCurrencyTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyTransferGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all currency transfers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getCurrencyTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyTransferGetResponse}
     */
    this.getCurrencyTransfers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CurrencyTransferGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/currency_transfer', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/MoleculeApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a token
     * @param {String} tokenId UUID of a token
     * @param {module:api/MoleculeApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenSpecificResponse}
     */
    this.getToken = function(tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling getToken");
      }


      var pathParams = {
        'token_id': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token/{token_id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenBalance operation.
     * @callback module:api/MoleculeApi~getTokenBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenBalanceSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a token balance
     * @param {String} tokenBalanceId UUID of a token balance
     * @param {module:api/MoleculeApi~getTokenBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenBalanceSpecificResponse}
     */
    this.getTokenBalance = function(tokenBalanceId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenBalanceId' is set
      if (tokenBalanceId === undefined || tokenBalanceId === null) {
        throw new Error("Missing the required parameter 'tokenBalanceId' when calling getTokenBalance");
      }


      var pathParams = {
        'token_balance_id': tokenBalanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenBalanceSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token_balance/{token_balance_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenBalances operation.
     * @callback module:api/MoleculeApi~getTokenBalancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenBalanceGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all token balances defined for your application.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getTokenBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenBalanceGetResponse}
     */
    this.getTokenBalances = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenBalanceGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token_balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenSupplies operation.
     * @callback module:api/MoleculeApi~getTokenSuppliesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenSupplyGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all token supplies defined for your application.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getTokenSuppliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenSupplyGetResponse}
     */
    this.getTokenSupplies = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenSupplyGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token_supply', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenSupply operation.
     * @callback module:api/MoleculeApi~getTokenSupplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenSupplySpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a token supply
     * @param {String} tokenSupplyId UUID of a token supply
     * @param {module:api/MoleculeApi~getTokenSupplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenSupplySpecificResponse}
     */
    this.getTokenSupply = function(tokenSupplyId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenSupplyId' is set
      if (tokenSupplyId === undefined || tokenSupplyId === null) {
        throw new Error("Missing the required parameter 'tokenSupplyId' when calling getTokenSupply");
      }


      var pathParams = {
        'token_supply_id': tokenSupplyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenSupplySpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token_supply/{token_supply_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenTransfer operation.
     * @callback module:api/MoleculeApi~getTokenTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenTransferSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a token transfer
     * @param {String} tokenTransferId UUID of a token transfer
     * @param {module:api/MoleculeApi~getTokenTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenTransferSpecificResponse}
     */
    this.getTokenTransfer = function(tokenTransferId, callback) {
      var postBody = null;

      // verify the required parameter 'tokenTransferId' is set
      if (tokenTransferId === undefined || tokenTransferId === null) {
        throw new Error("Missing the required parameter 'tokenTransferId' when calling getTokenTransfer");
      }


      var pathParams = {
        'token_transfer_id': tokenTransferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenTransferSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token_transfer/{token_transfer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokenTransfers operation.
     * @callback module:api/MoleculeApi~getTokenTransfersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenTransferGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all token transfers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getTokenTransfersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenTransferGetResponse}
     */
    this.getTokenTransfers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenTransferGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token_transfer', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTokens operation.
     * @callback module:api/MoleculeApi~getTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all tokens defined for your firm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenGetResponse}
     */
    this.getTokens = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWallet operation.
     * @callback module:api/MoleculeApi~getWalletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a wallet
     * @param {String} walletId UUID of a wallet
     * @param {module:api/MoleculeApi~getWalletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletSpecificResponse}
     */
    this.getWallet = function(walletId, callback) {
      var postBody = null;

      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling getWallet");
      }


      var pathParams = {
        'wallet_id': walletId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet/{wallet_id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWalletKey operation.
     * @callback module:api/MoleculeApi~getWalletKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletKeySpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a wallet key
     * @param {String} walletKeyId UUID of a wallet key
     * @param {module:api/MoleculeApi~getWalletKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletKeySpecificResponse}
     */
    this.getWalletKey = function(walletKeyId, callback) {
      var postBody = null;

      // verify the required parameter 'walletKeyId' is set
      if (walletKeyId === undefined || walletKeyId === null) {
        throw new Error("Missing the required parameter 'walletKeyId' when calling getWalletKey");
      }


      var pathParams = {
        'wallet_key_id': walletKeyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletKeySpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet_key/{wallet_key_id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWalletKeys operation.
     * @callback module:api/MoleculeApi~getWalletKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletKeyGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all wallet keys associated with wallets defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getWalletKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletKeyGetResponse}
     */
    this.getWalletKeys = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletKeyGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet_key', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWallets operation.
     * @callback module:api/MoleculeApi~getWalletsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all wallets defined for your firm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {module:api/MoleculeApi~getWalletsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletGetResponse}
     */
    this.getWallets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletGetResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCurrencyTransfer operation.
     * @callback module:api/MoleculeApi~postCurrencyTransferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer currency between wallets
     * @param {module:model/CurrencyTransferPayload} payload 
     * @param {module:api/MoleculeApi~postCurrencyTransferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postCurrencyTransfer = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postCurrencyTransfer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/molecule/v1/currency_transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postToken operation.
     * @callback module:api/MoleculeApi~postTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a token under your firm.
     * @param {module:model/TokenCreatePayload} payload 
     * @param {module:api/MoleculeApi~postTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenCreateResponse}
     */
    this.postToken = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenCreateResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTokenCrowdsale operation.
     * @callback module:api/MoleculeApi~postTokenCrowdsaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer tokens to a token&#39;s crowdsale address.
     * @param {module:model/TokenCrowdsalePayload} payload 
     * @param {module:api/MoleculeApi~postTokenCrowdsaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenCreateResponse}
     */
    this.postTokenCrowdsale = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postTokenCrowdsale");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenCreateResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token/crowdsale', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTokenDeploy operation.
     * @callback module:api/MoleculeApi~postTokenDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a secuirty token contract and its crowdsale contract to blockchain.
     * @param {module:model/TokenDeployPayload} payload 
     * @param {module:api/MoleculeApi~postTokenDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenCreateResponse}
     */
    this.postTokenDeploy = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postTokenDeploy");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenCreateResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token/deploy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTokenPurchase operation.
     * @callback module:api/MoleculeApi~postTokenPurchaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Participate in a token&#39;s crowdsale and purchase tokens.
     * @param {module:model/TokenPurchasePayload} payload 
     * @param {module:api/MoleculeApi~postTokenPurchaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postTokenPurchase = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postTokenPurchase");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/molecule/v1/token/purchase', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTokenTransfer operation.
     * @callback module:api/MoleculeApi~postTokenTransferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer tokens between wallets
     * @param {module:model/TokenTransferPayload} payload 
     * @param {module:api/MoleculeApi~postTokenTransferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postTokenTransfer = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postTokenTransfer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/molecule/v1/token_transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTokenWhitelist operation.
     * @callback module:api/MoleculeApi~postTokenWhitelistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an investor to a token&#39;s whitelist
     * @param {module:model/TokenWhitelistPayload} payload 
     * @param {module:api/MoleculeApi~postTokenWhitelistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postTokenWhitelist = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postTokenWhitelist");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/molecule/v1/token/whitelist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postWallet operation.
     * @callback module:api/MoleculeApi~postWalletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a wallet under your firm.
     * @param {module:model/WalletCreatePayload} payload 
     * @param {module:api/MoleculeApi~postWalletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletCreateResponse}
     */
    this.postWallet = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postWallet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletCreateResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postWalletKey operation.
     * @callback module:api/MoleculeApi~postWalletKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletKeyCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate an existing key pair with a wallet defined for your firm.
     * @param {module:model/WalletKeyCreatePayload} payload 
     * @param {module:api/MoleculeApi~postWalletKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletKeyCreateResponse}
     */
    this.postWalletKey = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postWalletKey");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletKeyCreateResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet_key', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postWalletKeyGenerator operation.
     * @callback module:api/MoleculeApi~postWalletKeyGeneratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletKeyCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a wallet key using the Key Service and associate with a wallet defined for your firm.
     * @param {module:model/WalletKeyGeneratorPayload} payload 
     * @param {module:api/MoleculeApi~postWalletKeyGeneratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletKeyCreateResponse}
     */
    this.postWalletKeyGenerator = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postWalletKeyGenerator");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletKeyCreateResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet_key/generator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateToken operation.
     * @callback module:api/MoleculeApi~updateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a token
     * @param {String} tokenId UUID of a token
     * @param {module:model/TokenUpdatePayload} payload 
     * @param {module:api/MoleculeApi~updateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenSpecificResponse}
     */
    this.updateToken = function(tokenId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling updateToken");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateToken");
      }


      var pathParams = {
        'token_id': tokenId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TokenSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/token/{token_id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWallet operation.
     * @callback module:api/MoleculeApi~updateWalletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletSpecificResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a wallet
     * @param {String} walletId UUID of a wallet
     * @param {module:model/WalletUpdatePayload} payload 
     * @param {module:api/MoleculeApi~updateWalletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletSpecificResponse}
     */
    this.updateWallet = function(walletId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling updateWallet");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateWallet");
      }


      var pathParams = {
        'wallet_id': walletId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WalletSpecificResponse;

      return this.apiClient.callApi(
        '/molecule/v1/wallet/{wallet_id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
