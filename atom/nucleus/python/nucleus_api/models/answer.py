# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class Answer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_date': 'datetime',
        'id': 'str',
        'image': 'str',
        'is_default': 'bool',
        'label': 'str',
        'metadata': 'dict(str, str)',
        'order_index': 'str',
        'question': 'Question',
        'question_id': 'str',
        'secondary_id': 'str',
        'tooltip': 'str',
        'update_date': 'datetime',
        'value': 'str',
        'weight': 'float'
    }

    attribute_map = {
        'create_date': 'create_date',
        'id': 'id',
        'image': 'image',
        'is_default': 'is_default',
        'label': 'label',
        'metadata': 'metadata',
        'order_index': 'order_index',
        'question': 'question',
        'question_id': 'question_id',
        'secondary_id': 'secondary_id',
        'tooltip': 'tooltip',
        'update_date': 'update_date',
        'value': 'value',
        'weight': 'weight'
    }

    def __init__(self, create_date=None, id=None, image=None, is_default=None, label=None, metadata=None, order_index=None, question=None, question_id=None, secondary_id=None, tooltip=None, update_date=None, value=None, weight=None, _configuration=None):  # noqa: E501
        """Answer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_date = None
        self._id = None
        self._image = None
        self._is_default = None
        self._label = None
        self._metadata = None
        self._order_index = None
        self._question = None
        self._question_id = None
        self._secondary_id = None
        self._tooltip = None
        self._update_date = None
        self._value = None
        self._weight = None
        self.discriminator = None

        if create_date is not None:
            self.create_date = create_date
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if is_default is not None:
            self.is_default = is_default
        if label is not None:
            self.label = label
        if metadata is not None:
            self.metadata = metadata
        if order_index is not None:
            self.order_index = order_index
        if question is not None:
            self.question = question
        if question_id is not None:
            self.question_id = question_id
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if tooltip is not None:
            self.tooltip = tooltip
        if update_date is not None:
            self.update_date = update_date
        self.value = value
        if weight is not None:
            self.weight = weight

    @property
    def create_date(self):
        """Gets the create_date of this Answer.  # noqa: E501


        :return: The create_date of this Answer.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Answer.


        :param create_date: The create_date of this Answer.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def id(self):
        """Gets the id of this Answer.  # noqa: E501


        :return: The id of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Answer.


        :param id: The id of this Answer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Answer.  # noqa: E501

        image  # noqa: E501

        :return: The image of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Answer.

        image  # noqa: E501

        :param image: The image of this Answer.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def is_default(self):
        """Gets the is_default of this Answer.  # noqa: E501

        isDefault  # noqa: E501

        :return: The is_default of this Answer.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Answer.

        isDefault  # noqa: E501

        :param is_default: The is_default of this Answer.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def label(self):
        """Gets the label of this Answer.  # noqa: E501

        label  # noqa: E501

        :return: The label of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Answer.

        label  # noqa: E501

        :param label: The label of this Answer.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def metadata(self):
        """Gets the metadata of this Answer.  # noqa: E501

        metadata  # noqa: E501

        :return: The metadata of this Answer.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Answer.

        metadata  # noqa: E501

        :param metadata: The metadata of this Answer.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def order_index(self):
        """Gets the order_index of this Answer.  # noqa: E501

        orderIndex  # noqa: E501

        :return: The order_index of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._order_index

    @order_index.setter
    def order_index(self, order_index):
        """Sets the order_index of this Answer.

        orderIndex  # noqa: E501

        :param order_index: The order_index of this Answer.  # noqa: E501
        :type: str
        """

        self._order_index = order_index

    @property
    def question(self):
        """Gets the question of this Answer.  # noqa: E501


        :return: The question of this Answer.  # noqa: E501
        :rtype: Question
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Answer.


        :param question: The question of this Answer.  # noqa: E501
        :type: Question
        """

        self._question = question

    @property
    def question_id(self):
        """Gets the question_id of this Answer.  # noqa: E501

        questionId  # noqa: E501

        :return: The question_id of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this Answer.

        questionId  # noqa: E501

        :param question_id: The question_id of this Answer.  # noqa: E501
        :type: str
        """

        self._question_id = question_id

    @property
    def secondary_id(self):
        """Gets the secondary_id of this Answer.  # noqa: E501


        :return: The secondary_id of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this Answer.


        :param secondary_id: The secondary_id of this Answer.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def tooltip(self):
        """Gets the tooltip of this Answer.  # noqa: E501


        :return: The tooltip of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this Answer.


        :param tooltip: The tooltip of this Answer.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def update_date(self):
        """Gets the update_date of this Answer.  # noqa: E501


        :return: The update_date of this Answer.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Answer.


        :param update_date: The update_date of this Answer.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def value(self):
        """Gets the value of this Answer.  # noqa: E501

        value  # noqa: E501

        :return: The value of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Answer.

        value  # noqa: E501

        :param value: The value of this Answer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def weight(self):
        """Gets the weight of this Answer.  # noqa: E501

        weight  # noqa: E501

        :return: The weight of this Answer.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Answer.

        weight  # noqa: E501

        :param weight: The weight of this Answer.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Answer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Answer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Answer):
            return True

        return self.to_dict() != other.to_dict()
