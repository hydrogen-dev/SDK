/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiCallback;
import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.ApiResponse;
import com.hydrogen.proton.Configuration;
import com.hydrogen.proton.Pair;
import com.hydrogen.proton.ProgressRequestBody;
import com.hydrogen.proton.model.BudgetCalculatorRequest;
import com.hydrogen.proton.model.CashFlowAnalysisRequest;
import com.hydrogen.proton.model.FeeAnalysisRequest;
import com.hydrogen.proton.model.FinancialPictureRequest;
import com.hydrogen.proton.model.RecurringTransactionAnalysisRequest;
import com.hydrogen.proton.model.SpendingAnalysisRequest;
import com.hydrogen.proton.ApiClient;
import com.hydrogen.proton.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonalFinancialManagementApi {
    private ApiClient apiClient;

    public PersonalFinancialManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonalFinancialManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for budgetCalculator
     * @param budgetCalculatorRequest Request payload for Budget Calculator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call budgetCalculatorCall(BudgetCalculatorRequest budgetCalculatorRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = budgetCalculatorRequest;

        // create path and map variables
        String localVarPath = "/budget_calculator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call budgetCalculatorValidateBeforeCall(BudgetCalculatorRequest budgetCalculatorRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetCalculatorRequest' is set
        if (budgetCalculatorRequest == null) {
            throw new ApiException("Missing the required parameter 'budgetCalculatorRequest' when calling budgetCalculator(Async)");
        }
        

        com.squareup.okhttp.Call call = budgetCalculatorCall(budgetCalculatorRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Budget Calculator
     * Analyze spending against a defined budget
     * @param budgetCalculatorRequest Request payload for Budget Calculator (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> budgetCalculator(BudgetCalculatorRequest budgetCalculatorRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = budgetCalculatorWithHttpInfo(budgetCalculatorRequest);
        return resp.getData();
    }

    /**
     * Budget Calculator
     * Analyze spending against a defined budget
     * @param budgetCalculatorRequest Request payload for Budget Calculator (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> budgetCalculatorWithHttpInfo(BudgetCalculatorRequest budgetCalculatorRequest) throws ApiException {
        com.squareup.okhttp.Call call = budgetCalculatorValidateBeforeCall(budgetCalculatorRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Budget Calculator (asynchronously)
     * Analyze spending against a defined budget
     * @param budgetCalculatorRequest Request payload for Budget Calculator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call budgetCalculatorAsync(BudgetCalculatorRequest budgetCalculatorRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = budgetCalculatorValidateBeforeCall(budgetCalculatorRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cashFlowAnalysis
     * @param cashFlowAnalysisRequest Request payload for Cash Flow Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cashFlowAnalysisCall(CashFlowAnalysisRequest cashFlowAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cashFlowAnalysisRequest;

        // create path and map variables
        String localVarPath = "/cash_flow_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cashFlowAnalysisValidateBeforeCall(CashFlowAnalysisRequest cashFlowAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cashFlowAnalysisRequest' is set
        if (cashFlowAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'cashFlowAnalysisRequest' when calling cashFlowAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = cashFlowAnalysisCall(cashFlowAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cash Flow Analysis
     * Analyze income, expenses, and net income
     * @param cashFlowAnalysisRequest Request payload for Cash Flow Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> cashFlowAnalysis(CashFlowAnalysisRequest cashFlowAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = cashFlowAnalysisWithHttpInfo(cashFlowAnalysisRequest);
        return resp.getData();
    }

    /**
     * Cash Flow Analysis
     * Analyze income, expenses, and net income
     * @param cashFlowAnalysisRequest Request payload for Cash Flow Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> cashFlowAnalysisWithHttpInfo(CashFlowAnalysisRequest cashFlowAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = cashFlowAnalysisValidateBeforeCall(cashFlowAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cash Flow Analysis (asynchronously)
     * Analyze income, expenses, and net income
     * @param cashFlowAnalysisRequest Request payload for Cash Flow Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cashFlowAnalysisAsync(CashFlowAnalysisRequest cashFlowAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cashFlowAnalysisValidateBeforeCall(cashFlowAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for feeAnalysis
     * @param feeAnalysisRequest Request payload for Fee Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call feeAnalysisCall(FeeAnalysisRequest feeAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = feeAnalysisRequest;

        // create path and map variables
        String localVarPath = "/fee_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call feeAnalysisValidateBeforeCall(FeeAnalysisRequest feeAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'feeAnalysisRequest' is set
        if (feeAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'feeAnalysisRequest' when calling feeAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = feeAnalysisCall(feeAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * RFee Analysis
     * Analyze fee data
     * @param feeAnalysisRequest Request payload for Fee Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> feeAnalysis(FeeAnalysisRequest feeAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = feeAnalysisWithHttpInfo(feeAnalysisRequest);
        return resp.getData();
    }

    /**
     * RFee Analysis
     * Analyze fee data
     * @param feeAnalysisRequest Request payload for Fee Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> feeAnalysisWithHttpInfo(FeeAnalysisRequest feeAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = feeAnalysisValidateBeforeCall(feeAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * RFee Analysis (asynchronously)
     * Analyze fee data
     * @param feeAnalysisRequest Request payload for Fee Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call feeAnalysisAsync(FeeAnalysisRequest feeAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = feeAnalysisValidateBeforeCall(feeAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for financialPicture
     * @param financialPictureRequest Request payload for Financial Picture (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call financialPictureCall(FinancialPictureRequest financialPictureRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = financialPictureRequest;

        // create path and map variables
        String localVarPath = "/financial_picture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call financialPictureValidateBeforeCall(FinancialPictureRequest financialPictureRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financialPictureRequest' is set
        if (financialPictureRequest == null) {
            throw new ApiException("Missing the required parameter 'financialPictureRequest' when calling financialPicture(Async)");
        }
        

        com.squareup.okhttp.Call call = financialPictureCall(financialPictureRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Financial Picture
     * Assess assets, liabilities, and net worth
     * @param financialPictureRequest Request payload for Financial Picture (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> financialPicture(FinancialPictureRequest financialPictureRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = financialPictureWithHttpInfo(financialPictureRequest);
        return resp.getData();
    }

    /**
     * Financial Picture
     * Assess assets, liabilities, and net worth
     * @param financialPictureRequest Request payload for Financial Picture (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> financialPictureWithHttpInfo(FinancialPictureRequest financialPictureRequest) throws ApiException {
        com.squareup.okhttp.Call call = financialPictureValidateBeforeCall(financialPictureRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Financial Picture (asynchronously)
     * Assess assets, liabilities, and net worth
     * @param financialPictureRequest Request payload for Financial Picture (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call financialPictureAsync(FinancialPictureRequest financialPictureRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = financialPictureValidateBeforeCall(financialPictureRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recurringTransactionAnalysis
     * @param recurringTransactionAnalysisRequest Request payload for Recurring Transaction Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recurringTransactionAnalysisCall(RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = recurringTransactionAnalysisRequest;

        // create path and map variables
        String localVarPath = "/recurring_transaction_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recurringTransactionAnalysisValidateBeforeCall(RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recurringTransactionAnalysisRequest' is set
        if (recurringTransactionAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'recurringTransactionAnalysisRequest' when calling recurringTransactionAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = recurringTransactionAnalysisCall(recurringTransactionAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Recurring Transaction Analysis
     * Analyze recurring transactions
     * @param recurringTransactionAnalysisRequest Request payload for Recurring Transaction Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> recurringTransactionAnalysis(RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = recurringTransactionAnalysisWithHttpInfo(recurringTransactionAnalysisRequest);
        return resp.getData();
    }

    /**
     * Recurring Transaction Analysis
     * Analyze recurring transactions
     * @param recurringTransactionAnalysisRequest Request payload for Recurring Transaction Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> recurringTransactionAnalysisWithHttpInfo(RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = recurringTransactionAnalysisValidateBeforeCall(recurringTransactionAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recurring Transaction Analysis (asynchronously)
     * Analyze recurring transactions
     * @param recurringTransactionAnalysisRequest Request payload for Recurring Transaction Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recurringTransactionAnalysisAsync(RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recurringTransactionAnalysisValidateBeforeCall(recurringTransactionAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spendingAnalysis
     * @param spendingAnalysisRequest Request payload for Spending Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spendingAnalysisCall(SpendingAnalysisRequest spendingAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = spendingAnalysisRequest;

        // create path and map variables
        String localVarPath = "/spending_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spendingAnalysisValidateBeforeCall(SpendingAnalysisRequest spendingAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spendingAnalysisRequest' is set
        if (spendingAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'spendingAnalysisRequest' when calling spendingAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = spendingAnalysisCall(spendingAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Spending Analysis
     * Analyze spending transaction activity
     * @param spendingAnalysisRequest Request payload for Spending Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> spendingAnalysis(SpendingAnalysisRequest spendingAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = spendingAnalysisWithHttpInfo(spendingAnalysisRequest);
        return resp.getData();
    }

    /**
     * Spending Analysis
     * Analyze spending transaction activity
     * @param spendingAnalysisRequest Request payload for Spending Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> spendingAnalysisWithHttpInfo(SpendingAnalysisRequest spendingAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = spendingAnalysisValidateBeforeCall(spendingAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Spending Analysis (asynchronously)
     * Analyze spending transaction activity
     * @param spendingAnalysisRequest Request payload for Spending Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spendingAnalysisAsync(SpendingAnalysisRequest spendingAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spendingAnalysisValidateBeforeCall(spendingAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
