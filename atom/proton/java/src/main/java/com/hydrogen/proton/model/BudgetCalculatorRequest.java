/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.LocalDate;

/**
 * BudgetCalculatorRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-04-28T09:20:08.129Z")
public class BudgetCalculatorRequest {
  /**
   * Gets or Sets scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    ALL("all"),
    
    EXTERNAL("external"),
    
    INTERNAL("internal");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scope")
  private ScopeEnum scope = ScopeEnum.ALL;

  @SerializedName("currency_conversion")
  private String currencyConversion = null;

  @SerializedName("relative_lookback")
  private Boolean relativeLookback = true;

  @SerializedName("budget_id")
  private UUID budgetId = null;

  @SerializedName("as_of_date")
  private LocalDate asOfDate = null;

  @SerializedName("show_average_spend")
  private Boolean showAverageSpend = false;

  @SerializedName("lookback_periods")
  private Integer lookbackPeriods = 1;

  @SerializedName("budget_details")
  private BudgetDetails budgetDetails = null;

  @SerializedName("transaction_status_scope")
  private List<String> transactionStatusScope = null;

  @SerializedName("only_cleansed")
  private Boolean onlyCleansed = false;

  @SerializedName("show_budget_track")
  private Boolean showBudgetTrack = true;

  public BudgetCalculatorRequest scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @ApiModelProperty(value = "")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public BudgetCalculatorRequest currencyConversion(String currencyConversion) {
    this.currencyConversion = currencyConversion;
    return this;
  }

   /**
   * Get currencyConversion
   * @return currencyConversion
  **/
  @ApiModelProperty(value = "")
  public String getCurrencyConversion() {
    return currencyConversion;
  }

  public void setCurrencyConversion(String currencyConversion) {
    this.currencyConversion = currencyConversion;
  }

  public BudgetCalculatorRequest relativeLookback(Boolean relativeLookback) {
    this.relativeLookback = relativeLookback;
    return this;
  }

   /**
   * Get relativeLookback
   * @return relativeLookback
  **/
  @ApiModelProperty(value = "")
  public Boolean isRelativeLookback() {
    return relativeLookback;
  }

  public void setRelativeLookback(Boolean relativeLookback) {
    this.relativeLookback = relativeLookback;
  }

  public BudgetCalculatorRequest budgetId(UUID budgetId) {
    this.budgetId = budgetId;
    return this;
  }

   /**
   * Get budgetId
   * @return budgetId
  **/
  @ApiModelProperty(value = "")
  public UUID getBudgetId() {
    return budgetId;
  }

  public void setBudgetId(UUID budgetId) {
    this.budgetId = budgetId;
  }

  public BudgetCalculatorRequest asOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Get asOfDate
   * @return asOfDate
  **/
  @ApiModelProperty(value = "")
  public LocalDate getAsOfDate() {
    return asOfDate;
  }

  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
  }

  public BudgetCalculatorRequest showAverageSpend(Boolean showAverageSpend) {
    this.showAverageSpend = showAverageSpend;
    return this;
  }

   /**
   * Get showAverageSpend
   * @return showAverageSpend
  **/
  @ApiModelProperty(value = "")
  public Boolean isShowAverageSpend() {
    return showAverageSpend;
  }

  public void setShowAverageSpend(Boolean showAverageSpend) {
    this.showAverageSpend = showAverageSpend;
  }

  public BudgetCalculatorRequest lookbackPeriods(Integer lookbackPeriods) {
    this.lookbackPeriods = lookbackPeriods;
    return this;
  }

   /**
   * Get lookbackPeriods
   * minimum: 1
   * @return lookbackPeriods
  **/
  @ApiModelProperty(value = "")
  public Integer getLookbackPeriods() {
    return lookbackPeriods;
  }

  public void setLookbackPeriods(Integer lookbackPeriods) {
    this.lookbackPeriods = lookbackPeriods;
  }

  public BudgetCalculatorRequest budgetDetails(BudgetDetails budgetDetails) {
    this.budgetDetails = budgetDetails;
    return this;
  }

   /**
   * Get budgetDetails
   * @return budgetDetails
  **/
  @ApiModelProperty(value = "")
  public BudgetDetails getBudgetDetails() {
    return budgetDetails;
  }

  public void setBudgetDetails(BudgetDetails budgetDetails) {
    this.budgetDetails = budgetDetails;
  }

  public BudgetCalculatorRequest transactionStatusScope(List<String> transactionStatusScope) {
    this.transactionStatusScope = transactionStatusScope;
    return this;
  }

  public BudgetCalculatorRequest addTransactionStatusScopeItem(String transactionStatusScopeItem) {
    if (this.transactionStatusScope == null) {
      this.transactionStatusScope = new ArrayList<String>();
    }
    this.transactionStatusScope.add(transactionStatusScopeItem);
    return this;
  }

   /**
   * Get transactionStatusScope
   * @return transactionStatusScope
  **/
  @ApiModelProperty(value = "")
  public List<String> getTransactionStatusScope() {
    return transactionStatusScope;
  }

  public void setTransactionStatusScope(List<String> transactionStatusScope) {
    this.transactionStatusScope = transactionStatusScope;
  }

  public BudgetCalculatorRequest onlyCleansed(Boolean onlyCleansed) {
    this.onlyCleansed = onlyCleansed;
    return this;
  }

   /**
   * Get onlyCleansed
   * @return onlyCleansed
  **/
  @ApiModelProperty(value = "")
  public Boolean isOnlyCleansed() {
    return onlyCleansed;
  }

  public void setOnlyCleansed(Boolean onlyCleansed) {
    this.onlyCleansed = onlyCleansed;
  }

  public BudgetCalculatorRequest showBudgetTrack(Boolean showBudgetTrack) {
    this.showBudgetTrack = showBudgetTrack;
    return this;
  }

   /**
   * Get showBudgetTrack
   * @return showBudgetTrack
  **/
  @ApiModelProperty(value = "")
  public Boolean isShowBudgetTrack() {
    return showBudgetTrack;
  }

  public void setShowBudgetTrack(Boolean showBudgetTrack) {
    this.showBudgetTrack = showBudgetTrack;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetCalculatorRequest budgetCalculatorRequest = (BudgetCalculatorRequest) o;
    return Objects.equals(this.scope, budgetCalculatorRequest.scope) &&
        Objects.equals(this.currencyConversion, budgetCalculatorRequest.currencyConversion) &&
        Objects.equals(this.relativeLookback, budgetCalculatorRequest.relativeLookback) &&
        Objects.equals(this.budgetId, budgetCalculatorRequest.budgetId) &&
        Objects.equals(this.asOfDate, budgetCalculatorRequest.asOfDate) &&
        Objects.equals(this.showAverageSpend, budgetCalculatorRequest.showAverageSpend) &&
        Objects.equals(this.lookbackPeriods, budgetCalculatorRequest.lookbackPeriods) &&
        Objects.equals(this.budgetDetails, budgetCalculatorRequest.budgetDetails) &&
        Objects.equals(this.transactionStatusScope, budgetCalculatorRequest.transactionStatusScope) &&
        Objects.equals(this.onlyCleansed, budgetCalculatorRequest.onlyCleansed) &&
        Objects.equals(this.showBudgetTrack, budgetCalculatorRequest.showBudgetTrack);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, currencyConversion, relativeLookback, budgetId, asOfDate, showAverageSpend, lookbackPeriods, budgetDetails, transactionStatusScope, onlyCleansed, showBudgetTrack);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetCalculatorRequest {\n");
    
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    sb.append("    relativeLookback: ").append(toIndentedString(relativeLookback)).append("\n");
    sb.append("    budgetId: ").append(toIndentedString(budgetId)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    showAverageSpend: ").append(toIndentedString(showAverageSpend)).append("\n");
    sb.append("    lookbackPeriods: ").append(toIndentedString(lookbackPeriods)).append("\n");
    sb.append("    budgetDetails: ").append(toIndentedString(budgetDetails)).append("\n");
    sb.append("    transactionStatusScope: ").append(toIndentedString(transactionStatusScope)).append("\n");
    sb.append("    onlyCleansed: ").append(toIndentedString(onlyCleansed)).append("\n");
    sb.append("    showBudgetTrack: ").append(toIndentedString(showBudgetTrack)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

