<?php
/**
 * FundingTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * FundingTransaction Class Doc Comment
 *
 * @category Class
 * @description FundingTransaction Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FundingTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FundingTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'amount' => 'double',
        'comments' => 'string',
        'create_date' => '\DateTime',
        'currency_code' => 'string',
        'fees' => 'double',
        'funding_id' => 'string',
        'id' => 'string',
        'invested_date' => '\DateTime',
        'is_deposit' => 'bool',
        'last_request_date' => '\DateTime',
        'metadata' => 'map[string,string]',
        'portfolio_id' => 'string',
        'portfolio_transaction_id' => 'string',
        'received_date' => '\DateTime',
        'secondary_id' => 'string',
        'status' => 'string',
        'status_time_stamp' => '\DateTime',
        'type' => 'string',
        'update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'uuid',
        'amount' => 'double',
        'comments' => null,
        'create_date' => 'date-time',
        'currency_code' => null,
        'fees' => 'double',
        'funding_id' => 'uuid',
        'id' => 'uuid',
        'invested_date' => 'date-time',
        'is_deposit' => null,
        'last_request_date' => 'date-time',
        'metadata' => null,
        'portfolio_id' => 'uuid',
        'portfolio_transaction_id' => 'uuid',
        'received_date' => 'date-time',
        'secondary_id' => null,
        'status' => null,
        'status_time_stamp' => 'date-time',
        'type' => null,
        'update_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'amount' => 'amount',
        'comments' => 'comments',
        'create_date' => 'create_date',
        'currency_code' => 'currency_code',
        'fees' => 'fees',
        'funding_id' => 'funding_id',
        'id' => 'id',
        'invested_date' => 'invested_date',
        'is_deposit' => 'is_deposit',
        'last_request_date' => 'last_request_date',
        'metadata' => 'metadata',
        'portfolio_id' => 'portfolio_id',
        'portfolio_transaction_id' => 'portfolio_transaction_id',
        'received_date' => 'received_date',
        'secondary_id' => 'secondary_id',
        'status' => 'status',
        'status_time_stamp' => 'status_time_stamp',
        'type' => 'type',
        'update_date' => 'update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'amount' => 'setAmount',
        'comments' => 'setComments',
        'create_date' => 'setCreateDate',
        'currency_code' => 'setCurrencyCode',
        'fees' => 'setFees',
        'funding_id' => 'setFundingId',
        'id' => 'setId',
        'invested_date' => 'setInvestedDate',
        'is_deposit' => 'setIsDeposit',
        'last_request_date' => 'setLastRequestDate',
        'metadata' => 'setMetadata',
        'portfolio_id' => 'setPortfolioId',
        'portfolio_transaction_id' => 'setPortfolioTransactionId',
        'received_date' => 'setReceivedDate',
        'secondary_id' => 'setSecondaryId',
        'status' => 'setStatus',
        'status_time_stamp' => 'setStatusTimeStamp',
        'type' => 'setType',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'amount' => 'getAmount',
        'comments' => 'getComments',
        'create_date' => 'getCreateDate',
        'currency_code' => 'getCurrencyCode',
        'fees' => 'getFees',
        'funding_id' => 'getFundingId',
        'id' => 'getId',
        'invested_date' => 'getInvestedDate',
        'is_deposit' => 'getIsDeposit',
        'last_request_date' => 'getLastRequestDate',
        'metadata' => 'getMetadata',
        'portfolio_id' => 'getPortfolioId',
        'portfolio_transaction_id' => 'getPortfolioTransactionId',
        'received_date' => 'getReceivedDate',
        'secondary_id' => 'getSecondaryId',
        'status' => 'getStatus',
        'status_time_stamp' => 'getStatusTimeStamp',
        'type' => 'getType',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['funding_id'] = isset($data['funding_id']) ? $data['funding_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invested_date'] = isset($data['invested_date']) ? $data['invested_date'] : null;
        $this->container['is_deposit'] = isset($data['is_deposit']) ? $data['is_deposit'] : null;
        $this->container['last_request_date'] = isset($data['last_request_date']) ? $data['last_request_date'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['portfolio_id'] = isset($data['portfolio_id']) ? $data['portfolio_id'] : null;
        $this->container['portfolio_transaction_id'] = isset($data['portfolio_transaction_id']) ? $data['portfolio_transaction_id'] : null;
        $this->container['received_date'] = isset($data['received_date']) ? $data['received_date'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_time_stamp'] = isset($data['status_time_stamp']) ? $data['status_time_stamp'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['funding_id'] === null) {
            $invalidProperties[] = "'funding_id' can't be null";
        }
        if ($this->container['is_deposit'] === null) {
            $invalidProperties[] = "'is_deposit' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id accountId
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return double
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param double $fees fees
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets funding_id
     *
     * @return string
     */
    public function getFundingId()
    {
        return $this->container['funding_id'];
    }

    /**
     * Sets funding_id
     *
     * @param string $funding_id fundingId
     *
     * @return $this
     */
    public function setFundingId($funding_id)
    {
        $this->container['funding_id'] = $funding_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invested_date
     *
     * @return \DateTime
     */
    public function getInvestedDate()
    {
        return $this->container['invested_date'];
    }

    /**
     * Sets invested_date
     *
     * @param \DateTime $invested_date investedDate
     *
     * @return $this
     */
    public function setInvestedDate($invested_date)
    {
        $this->container['invested_date'] = $invested_date;

        return $this;
    }

    /**
     * Gets is_deposit
     *
     * @return bool
     */
    public function getIsDeposit()
    {
        return $this->container['is_deposit'];
    }

    /**
     * Sets is_deposit
     *
     * @param bool $is_deposit is deposit
     *
     * @return $this
     */
    public function setIsDeposit($is_deposit)
    {
        $this->container['is_deposit'] = $is_deposit;

        return $this;
    }

    /**
     * Gets last_request_date
     *
     * @return \DateTime
     */
    public function getLastRequestDate()
    {
        return $this->container['last_request_date'];
    }

    /**
     * Sets last_request_date
     *
     * @param \DateTime $last_request_date lastRequestDate
     *
     * @return $this
     */
    public function setLastRequestDate($last_request_date)
    {
        $this->container['last_request_date'] = $last_request_date;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets portfolio_id
     *
     * @return string
     */
    public function getPortfolioId()
    {
        return $this->container['portfolio_id'];
    }

    /**
     * Sets portfolio_id
     *
     * @param string $portfolio_id portfolio_id
     *
     * @return $this
     */
    public function setPortfolioId($portfolio_id)
    {
        $this->container['portfolio_id'] = $portfolio_id;

        return $this;
    }

    /**
     * Gets portfolio_transaction_id
     *
     * @return string
     */
    public function getPortfolioTransactionId()
    {
        return $this->container['portfolio_transaction_id'];
    }

    /**
     * Sets portfolio_transaction_id
     *
     * @param string $portfolio_transaction_id portfolioTransactionId
     *
     * @return $this
     */
    public function setPortfolioTransactionId($portfolio_transaction_id)
    {
        $this->container['portfolio_transaction_id'] = $portfolio_transaction_id;

        return $this;
    }

    /**
     * Gets received_date
     *
     * @return \DateTime
     */
    public function getReceivedDate()
    {
        return $this->container['received_date'];
    }

    /**
     * Sets received_date
     *
     * @param \DateTime $received_date receivedDate
     *
     * @return $this
     */
    public function setReceivedDate($received_date)
    {
        $this->container['received_date'] = $received_date;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_time_stamp
     *
     * @return \DateTime
     */
    public function getStatusTimeStamp()
    {
        return $this->container['status_time_stamp'];
    }

    /**
     * Sets status_time_stamp
     *
     * @param \DateTime $status_time_stamp statusTimeStamp
     *
     * @return $this
     */
    public function setStatusTimeStamp($status_time_stamp)
    {
        $this->container['status_time_stamp'] = $status_time_stamp;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


