/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// OrderRebalanceRequest
    /// </summary>
    [DataContract]
    public partial class OrderRebalanceRequest :  IEquatable<OrderRebalanceRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines OrderScope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderScopeEnum
        {
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            
            /// <summary>
            /// Enum Buyonly for value: buy_only
            /// </summary>
            [EnumMember(Value = "buy_only")]
            Buyonly = 2,
            
            /// <summary>
            /// Enum Sellonly for value: sell_only
            /// </summary>
            [EnumMember(Value = "sell_only")]
            Sellonly = 3
        }

        /// <summary>
        /// Gets or Sets OrderScope
        /// </summary>
        [DataMember(Name="order_scope", EmitDefaultValue=false)]
        public OrderScopeEnum OrderScope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRebalanceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderRebalanceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRebalanceRequest" /> class.
        /// </summary>
        /// <param name="nonFractional">nonFractional (default to false).</param>
        /// <param name="orderScope">orderScope (required).</param>
        /// <param name="buyThreshold">buyThreshold (default to 0.0F).</param>
        /// <param name="commitOrders">commitOrders (default to true).</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="portThreshold">portThreshold (default to 0.0F).</param>
        /// <param name="useCashAvailable">useCashAvailable (default to false).</param>
        /// <param name="useStrategic">useStrategic (default to false).</param>
        /// <param name="sellTransactionCodeId">sellTransactionCodeId.</param>
        /// <param name="buyTransactionCodeId">buyTransactionCodeId.</param>
        /// <param name="cashPortfolioId">cashPortfolioId.</param>
        /// <param name="restrictionsOn">restrictionsOn (default to false).</param>
        /// <param name="sellThreshold">sellThreshold (default to 0.0F).</param>
        /// <param name="portfolioId">portfolioId.</param>
        public OrderRebalanceRequest(bool? nonFractional = false, OrderScopeEnum orderScope = default(OrderScopeEnum), float? buyThreshold = 0.0F, bool? commitOrders = true, Guid? accountId = default(Guid?), float? portThreshold = 0.0F, bool? useCashAvailable = false, bool? useStrategic = false, Guid? sellTransactionCodeId = default(Guid?), Guid? buyTransactionCodeId = default(Guid?), Guid? cashPortfolioId = default(Guid?), bool? restrictionsOn = false, float? sellThreshold = 0.0F, Guid? portfolioId = default(Guid?))
        {
            // to ensure "orderScope" is required (not null)
            if (orderScope == null)
            {
                throw new InvalidDataException("orderScope is a required property for OrderRebalanceRequest and cannot be null");
            }
            else
            {
                this.OrderScope = orderScope;
            }
            // use default value if no "nonFractional" provided
            if (nonFractional == null)
            {
                this.NonFractional = false;
            }
            else
            {
                this.NonFractional = nonFractional;
            }
            // use default value if no "buyThreshold" provided
            if (buyThreshold == null)
            {
                this.BuyThreshold = 0.0F;
            }
            else
            {
                this.BuyThreshold = buyThreshold;
            }
            // use default value if no "commitOrders" provided
            if (commitOrders == null)
            {
                this.CommitOrders = true;
            }
            else
            {
                this.CommitOrders = commitOrders;
            }
            this.AccountId = accountId;
            // use default value if no "portThreshold" provided
            if (portThreshold == null)
            {
                this.PortThreshold = 0.0F;
            }
            else
            {
                this.PortThreshold = portThreshold;
            }
            // use default value if no "useCashAvailable" provided
            if (useCashAvailable == null)
            {
                this.UseCashAvailable = false;
            }
            else
            {
                this.UseCashAvailable = useCashAvailable;
            }
            // use default value if no "useStrategic" provided
            if (useStrategic == null)
            {
                this.UseStrategic = false;
            }
            else
            {
                this.UseStrategic = useStrategic;
            }
            this.SellTransactionCodeId = sellTransactionCodeId;
            this.BuyTransactionCodeId = buyTransactionCodeId;
            this.CashPortfolioId = cashPortfolioId;
            // use default value if no "restrictionsOn" provided
            if (restrictionsOn == null)
            {
                this.RestrictionsOn = false;
            }
            else
            {
                this.RestrictionsOn = restrictionsOn;
            }
            // use default value if no "sellThreshold" provided
            if (sellThreshold == null)
            {
                this.SellThreshold = 0.0F;
            }
            else
            {
                this.SellThreshold = sellThreshold;
            }
            this.PortfolioId = portfolioId;
        }
        
        /// <summary>
        /// Gets or Sets NonFractional
        /// </summary>
        [DataMember(Name="non_fractional", EmitDefaultValue=false)]
        public bool? NonFractional { get; set; }


        /// <summary>
        /// Gets or Sets BuyThreshold
        /// </summary>
        [DataMember(Name="buy_threshold", EmitDefaultValue=false)]
        public float? BuyThreshold { get; set; }

        /// <summary>
        /// Gets or Sets CommitOrders
        /// </summary>
        [DataMember(Name="commit_orders", EmitDefaultValue=false)]
        public bool? CommitOrders { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets PortThreshold
        /// </summary>
        [DataMember(Name="port_threshold", EmitDefaultValue=false)]
        public float? PortThreshold { get; set; }

        /// <summary>
        /// Gets or Sets UseCashAvailable
        /// </summary>
        [DataMember(Name="use_cash_available", EmitDefaultValue=false)]
        public bool? UseCashAvailable { get; set; }

        /// <summary>
        /// Gets or Sets UseStrategic
        /// </summary>
        [DataMember(Name="use_strategic", EmitDefaultValue=false)]
        public bool? UseStrategic { get; set; }

        /// <summary>
        /// Gets or Sets SellTransactionCodeId
        /// </summary>
        [DataMember(Name="sell_transaction_code_id", EmitDefaultValue=false)]
        public Guid? SellTransactionCodeId { get; set; }

        /// <summary>
        /// Gets or Sets BuyTransactionCodeId
        /// </summary>
        [DataMember(Name="buy_transaction_code_id", EmitDefaultValue=false)]
        public Guid? BuyTransactionCodeId { get; set; }

        /// <summary>
        /// Gets or Sets CashPortfolioId
        /// </summary>
        [DataMember(Name="cash_portfolio_id", EmitDefaultValue=false)]
        public Guid? CashPortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets RestrictionsOn
        /// </summary>
        [DataMember(Name="restrictions_on", EmitDefaultValue=false)]
        public bool? RestrictionsOn { get; set; }

        /// <summary>
        /// Gets or Sets SellThreshold
        /// </summary>
        [DataMember(Name="sell_threshold", EmitDefaultValue=false)]
        public float? SellThreshold { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name="portfolio_id", EmitDefaultValue=false)]
        public Guid? PortfolioId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderRebalanceRequest {\n");
            sb.Append("  NonFractional: ").Append(NonFractional).Append("\n");
            sb.Append("  OrderScope: ").Append(OrderScope).Append("\n");
            sb.Append("  BuyThreshold: ").Append(BuyThreshold).Append("\n");
            sb.Append("  CommitOrders: ").Append(CommitOrders).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  PortThreshold: ").Append(PortThreshold).Append("\n");
            sb.Append("  UseCashAvailable: ").Append(UseCashAvailable).Append("\n");
            sb.Append("  UseStrategic: ").Append(UseStrategic).Append("\n");
            sb.Append("  SellTransactionCodeId: ").Append(SellTransactionCodeId).Append("\n");
            sb.Append("  BuyTransactionCodeId: ").Append(BuyTransactionCodeId).Append("\n");
            sb.Append("  CashPortfolioId: ").Append(CashPortfolioId).Append("\n");
            sb.Append("  RestrictionsOn: ").Append(RestrictionsOn).Append("\n");
            sb.Append("  SellThreshold: ").Append(SellThreshold).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderRebalanceRequest);
        }

        /// <summary>
        /// Returns true if OrderRebalanceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderRebalanceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderRebalanceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NonFractional == input.NonFractional ||
                    (this.NonFractional != null &&
                    this.NonFractional.Equals(input.NonFractional))
                ) && 
                (
                    this.OrderScope == input.OrderScope ||
                    (this.OrderScope != null &&
                    this.OrderScope.Equals(input.OrderScope))
                ) && 
                (
                    this.BuyThreshold == input.BuyThreshold ||
                    (this.BuyThreshold != null &&
                    this.BuyThreshold.Equals(input.BuyThreshold))
                ) && 
                (
                    this.CommitOrders == input.CommitOrders ||
                    (this.CommitOrders != null &&
                    this.CommitOrders.Equals(input.CommitOrders))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.PortThreshold == input.PortThreshold ||
                    (this.PortThreshold != null &&
                    this.PortThreshold.Equals(input.PortThreshold))
                ) && 
                (
                    this.UseCashAvailable == input.UseCashAvailable ||
                    (this.UseCashAvailable != null &&
                    this.UseCashAvailable.Equals(input.UseCashAvailable))
                ) && 
                (
                    this.UseStrategic == input.UseStrategic ||
                    (this.UseStrategic != null &&
                    this.UseStrategic.Equals(input.UseStrategic))
                ) && 
                (
                    this.SellTransactionCodeId == input.SellTransactionCodeId ||
                    (this.SellTransactionCodeId != null &&
                    this.SellTransactionCodeId.Equals(input.SellTransactionCodeId))
                ) && 
                (
                    this.BuyTransactionCodeId == input.BuyTransactionCodeId ||
                    (this.BuyTransactionCodeId != null &&
                    this.BuyTransactionCodeId.Equals(input.BuyTransactionCodeId))
                ) && 
                (
                    this.CashPortfolioId == input.CashPortfolioId ||
                    (this.CashPortfolioId != null &&
                    this.CashPortfolioId.Equals(input.CashPortfolioId))
                ) && 
                (
                    this.RestrictionsOn == input.RestrictionsOn ||
                    (this.RestrictionsOn != null &&
                    this.RestrictionsOn.Equals(input.RestrictionsOn))
                ) && 
                (
                    this.SellThreshold == input.SellThreshold ||
                    (this.SellThreshold != null &&
                    this.SellThreshold.Equals(input.SellThreshold))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NonFractional != null)
                    hashCode = hashCode * 59 + this.NonFractional.GetHashCode();
                if (this.OrderScope != null)
                    hashCode = hashCode * 59 + this.OrderScope.GetHashCode();
                if (this.BuyThreshold != null)
                    hashCode = hashCode * 59 + this.BuyThreshold.GetHashCode();
                if (this.CommitOrders != null)
                    hashCode = hashCode * 59 + this.CommitOrders.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.PortThreshold != null)
                    hashCode = hashCode * 59 + this.PortThreshold.GetHashCode();
                if (this.UseCashAvailable != null)
                    hashCode = hashCode * 59 + this.UseCashAvailable.GetHashCode();
                if (this.UseStrategic != null)
                    hashCode = hashCode * 59 + this.UseStrategic.GetHashCode();
                if (this.SellTransactionCodeId != null)
                    hashCode = hashCode * 59 + this.SellTransactionCodeId.GetHashCode();
                if (this.BuyTransactionCodeId != null)
                    hashCode = hashCode * 59 + this.BuyTransactionCodeId.GetHashCode();
                if (this.CashPortfolioId != null)
                    hashCode = hashCode * 59 + this.CashPortfolioId.GetHashCode();
                if (this.RestrictionsOn != null)
                    hashCode = hashCode * 59 + this.RestrictionsOn.GetHashCode();
                if (this.SellThreshold != null)
                    hashCode = hashCode * 59 + this.SellThreshold.GetHashCode();
                if (this.PortfolioId != null)
                    hashCode = hashCode * 59 + this.PortfolioId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BuyThreshold (float?) minimum
            if(this.BuyThreshold < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BuyThreshold, must be a value greater than or equal to 0.", new [] { "BuyThreshold" });
            }

            // PortThreshold (float?) minimum
            if(this.PortThreshold < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortThreshold, must be a value greater than or equal to 0.", new [] { "PortThreshold" });
            }

            // SellThreshold (float?) minimum
            if(this.SellThreshold < (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SellThreshold, must be a value greater than or equal to 1.", new [] { "SellThreshold" });
            }

            yield break;
        }
    }

}
