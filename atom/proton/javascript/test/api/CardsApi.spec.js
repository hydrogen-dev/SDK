/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenProtonApi.CardsApi();
  });

  describe('(package)', function() {
    describe('CardsApi', function() {
      describe('cardAnalysis', function() {
        it('should call cardAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for cardAnalysis call and complete the assertions
          /*
          var cardAnalysisRequest = new HydrogenProtonApi.CardAnalysisRequest();
          cardAnalysisRequest.currencyCode = "";
          cardAnalysisRequest.clientId = """00000000-0000-0000-0000-000000000000";
          cardAnalysisRequest.showHistory = false;
          cardAnalysisRequest.responseLimit = 0;
          cardAnalysisRequest.currencyConversion = "";
          cardAnalysisRequest.endDate = new Date();
          cardAnalysisRequest.historyFrequencyInterval = "day";
          cardAnalysisRequest.showTopCards = false;
          cardAnalysisRequest.startDate = new Date();
          cardAnalysisRequest.businessId = """00000000-0000-0000-0000-000000000000";
          cardAnalysisRequest.transactionStatusScope = [""];
          cardAnalysisRequest.cardStatusScope = [""];
          cardAnalysisRequest.showTopCardholders = false;
          cardAnalysisRequest.cardProgramId = """00000000-0000-0000-0000-000000000000";
          cardAnalysisRequest.showTopBusinesses = false;

          instance.cardAnalysis(cardAnalysisRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cardLimitCheck', function() {
        it('should call cardLimitCheck successfully', function(done) {
          // TODO: uncomment, update parameter values for cardLimitCheck call and complete the assertions
          /*
          var cardLimitCheckRequest = new HydrogenProtonApi.CardLimitCheckRequest();
          cardLimitCheckRequest.currencyCode = "";
          cardLimitCheckRequest.clientId = """00000000-0000-0000-0000-000000000000";
          cardLimitCheckRequest.asOfDate = new Date();
          cardLimitCheckRequest.transactionStatusScope = [""];
          cardLimitCheckRequest.createLog = false;

          instance.cardLimitCheck(cardLimitCheckRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cardTransactionAuthorization', function() {
        it('should call cardTransactionAuthorization successfully', function(done) {
          // TODO: uncomment, update parameter values for cardTransactionAuthorization call and complete the assertions
          /*
          var cardTransactionAuthorizationRequest = new HydrogenProtonApi.CardTransactionAuthorizationRequest();
          cardTransactionAuthorizationRequest.currencyCode = "";
          cardTransactionAuthorizationRequest.memo = "";
          cardTransactionAuthorizationRequest.partialAuth = false;
          cardTransactionAuthorizationRequest.transactionType = "atm_withdrawal";
          cardTransactionAuthorizationRequest.description = "";
          cardTransactionAuthorizationRequest.transactionCategoryId = """00000000-0000-0000-0000-000000000000";
          cardTransactionAuthorizationRequest.useAuditLog = false;
          cardTransactionAuthorizationRequest.merchantCategoryCode = 0;
          cardTransactionAuthorizationRequest.cardId = """00000000-0000-0000-0000-000000000000";
          cardTransactionAuthorizationRequest.transactionCategory = "";
          cardTransactionAuthorizationRequest.cleanseData = false;
          cardTransactionAuthorizationRequest.authType = ["spending_control"]"spending_control";
          cardTransactionAuthorizationRequest.mid = "";
          cardTransactionAuthorizationRequest.transactionStatusScope = [""];
          cardTransactionAuthorizationRequest.location = new HydrogenProtonApi.Location();
          cardTransactionAuthorizationRequest.location.country = "";
          cardTransactionAuthorizationRequest.merchant = "";
          cardTransactionAuthorizationRequest.amount = 0.0;
          cardTransactionAuthorizationRequest._date = new Date();
          cardTransactionAuthorizationRequest.merchantId = """00000000-0000-0000-0000-000000000000";

          instance.cardTransactionAuthorization(cardTransactionAuthorizationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
