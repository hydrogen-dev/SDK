<?php
/**
 * Settings
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * Settings Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Settings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_drift_factor' => 'float',
        'drift_rebal' => 'bool',
        'downside' => 'bool',
        'tax_efficiency_id' => 'int',
        'period_rebal' => 'bool',
        'rebalance_period' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_drift_factor' => 'float',
        'drift_rebal' => null,
        'downside' => null,
        'tax_efficiency_id' => 'int32',
        'period_rebal' => null,
        'rebalance_period' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_drift_factor' => 'default_drift_factor',
        'drift_rebal' => 'drift_rebal',
        'downside' => 'downside',
        'tax_efficiency_id' => 'tax_efficiency_id',
        'period_rebal' => 'period_rebal',
        'rebalance_period' => 'rebalance_period'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_drift_factor' => 'setDefaultDriftFactor',
        'drift_rebal' => 'setDriftRebal',
        'downside' => 'setDownside',
        'tax_efficiency_id' => 'setTaxEfficiencyId',
        'period_rebal' => 'setPeriodRebal',
        'rebalance_period' => 'setRebalancePeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_drift_factor' => 'getDefaultDriftFactor',
        'drift_rebal' => 'getDriftRebal',
        'downside' => 'getDownside',
        'tax_efficiency_id' => 'getTaxEfficiencyId',
        'period_rebal' => 'getPeriodRebal',
        'rebalance_period' => 'getRebalancePeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TAX_EFFICIENCY_ID_0 = 0;
    const TAX_EFFICIENCY_ID_1 = 1;
    const TAX_EFFICIENCY_ID_2 = 2;
    const TAX_EFFICIENCY_ID_3 = 3;
    const TAX_EFFICIENCY_ID_4 = 4;
    const REBALANCE_PERIOD_0 = 0;
    const REBALANCE_PERIOD_1 = 1;
    const REBALANCE_PERIOD_2 = 2;
    const REBALANCE_PERIOD_3 = 3;
    const REBALANCE_PERIOD_4 = 4;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxEfficiencyIdAllowableValues()
    {
        return [
            self::TAX_EFFICIENCY_ID_0,
            self::TAX_EFFICIENCY_ID_1,
            self::TAX_EFFICIENCY_ID_2,
            self::TAX_EFFICIENCY_ID_3,
            self::TAX_EFFICIENCY_ID_4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRebalancePeriodAllowableValues()
    {
        return [
            self::REBALANCE_PERIOD_0,
            self::REBALANCE_PERIOD_1,
            self::REBALANCE_PERIOD_2,
            self::REBALANCE_PERIOD_3,
            self::REBALANCE_PERIOD_4,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_drift_factor'] = isset($data['default_drift_factor']) ? $data['default_drift_factor'] : null;
        $this->container['drift_rebal'] = isset($data['drift_rebal']) ? $data['drift_rebal'] : null;
        $this->container['downside'] = isset($data['downside']) ? $data['downside'] : null;
        $this->container['tax_efficiency_id'] = isset($data['tax_efficiency_id']) ? $data['tax_efficiency_id'] : null;
        $this->container['period_rebal'] = isset($data['period_rebal']) ? $data['period_rebal'] : null;
        $this->container['rebalance_period'] = isset($data['rebalance_period']) ? $data['rebalance_period'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['default_drift_factor']) && ($this->container['default_drift_factor'] < 0)) {
            $invalidProperties[] = "invalid value for 'default_drift_factor', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTaxEfficiencyIdAllowableValues();
        if (!is_null($this->container['tax_efficiency_id']) && !in_array($this->container['tax_efficiency_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_efficiency_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRebalancePeriodAllowableValues();
        if (!is_null($this->container['rebalance_period']) && !in_array($this->container['rebalance_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rebalance_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_drift_factor
     *
     * @return float
     */
    public function getDefaultDriftFactor()
    {
        return $this->container['default_drift_factor'];
    }

    /**
     * Sets default_drift_factor
     *
     * @param float $default_drift_factor default_drift_factor
     *
     * @return $this
     */
    public function setDefaultDriftFactor($default_drift_factor)
    {

        if (!is_null($default_drift_factor) && ($default_drift_factor < 0)) {
            throw new \InvalidArgumentException('invalid value for $default_drift_factor when calling Settings., must be bigger than or equal to 0.');
        }

        $this->container['default_drift_factor'] = $default_drift_factor;

        return $this;
    }

    /**
     * Gets drift_rebal
     *
     * @return bool
     */
    public function getDriftRebal()
    {
        return $this->container['drift_rebal'];
    }

    /**
     * Sets drift_rebal
     *
     * @param bool $drift_rebal drift_rebal
     *
     * @return $this
     */
    public function setDriftRebal($drift_rebal)
    {
        $this->container['drift_rebal'] = $drift_rebal;

        return $this;
    }

    /**
     * Gets downside
     *
     * @return bool
     */
    public function getDownside()
    {
        return $this->container['downside'];
    }

    /**
     * Sets downside
     *
     * @param bool $downside downside
     *
     * @return $this
     */
    public function setDownside($downside)
    {
        $this->container['downside'] = $downside;

        return $this;
    }

    /**
     * Gets tax_efficiency_id
     *
     * @return int
     */
    public function getTaxEfficiencyId()
    {
        return $this->container['tax_efficiency_id'];
    }

    /**
     * Sets tax_efficiency_id
     *
     * @param int $tax_efficiency_id tax_efficiency_id
     *
     * @return $this
     */
    public function setTaxEfficiencyId($tax_efficiency_id)
    {
        $allowedValues = $this->getTaxEfficiencyIdAllowableValues();
        if (!is_null($tax_efficiency_id) && !in_array($tax_efficiency_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_efficiency_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_efficiency_id'] = $tax_efficiency_id;

        return $this;
    }

    /**
     * Gets period_rebal
     *
     * @return bool
     */
    public function getPeriodRebal()
    {
        return $this->container['period_rebal'];
    }

    /**
     * Sets period_rebal
     *
     * @param bool $period_rebal period_rebal
     *
     * @return $this
     */
    public function setPeriodRebal($period_rebal)
    {
        $this->container['period_rebal'] = $period_rebal;

        return $this;
    }

    /**
     * Gets rebalance_period
     *
     * @return int
     */
    public function getRebalancePeriod()
    {
        return $this->container['rebalance_period'];
    }

    /**
     * Sets rebalance_period
     *
     * @param int $rebalance_period rebalance_period
     *
     * @return $this
     */
    public function setRebalancePeriod($rebalance_period)
    {
        $allowedValues = $this->getRebalancePeriodAllowableValues();
        if (!is_null($rebalance_period) && !in_array($rebalance_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rebalance_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rebalance_period'] = $rebalance_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


