/*
 * Hydrogen Electron API
 * The Hydrogen Electron API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.24
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenElectronApi);
  }
}(this, function(expect, HydrogenElectronApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenElectronApi.CardApi();
  });

  describe('(package)', function() {
    describe('CardApi', function() {
      describe('createCardCloseUsingPost', function() {
        it('should call createCardCloseUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardCloseUsingPost call and complete the assertions
          /*
          var closeRequest = new HydrogenElectronApi.CardBaseRequestCO();
          closeRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          closeRequest.reason = "";
          closeRequest.vendorRequest = ;

          instance.createCardCloseUsingPost(closeRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardIssueUsingPost', function() {
        it('should call createCardIssueUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardIssueUsingPost call and complete the assertions
          /*
          var issueRequest = new HydrogenElectronApi.CardBaseRequestCO();
          issueRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          issueRequest.reason = "";
          issueRequest.vendorRequest = ;

          instance.createCardIssueUsingPost(issueRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardLoadUsingPost', function() {
        it('should call createCardLoadUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardLoadUsingPost call and complete the assertions
          /*
          var loadRequest = new HydrogenElectronApi.CardLoadRequestCO();
          loadRequest.nucleusFundingId = """00000000-0000-0000-0000-000000000000";
          loadRequest.reason = "";

          instance.createCardLoadUsingPost(loadRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.CardLoadUnloadResponseVO);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.cardStatus).to.be.a('string');
            expect(data.cardStatus).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardReactivateUsingPost', function() {
        it('should call createCardReactivateUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardReactivateUsingPost call and complete the assertions
          /*
          var reactivateRequest = new HydrogenElectronApi.CardBaseRequestCO();
          reactivateRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          reactivateRequest.reason = "";
          reactivateRequest.vendorRequest = ;

          instance.createCardReactivateUsingPost(reactivateRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardReplaceUsingPost', function() {
        it('should call createCardReplaceUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardReplaceUsingPost call and complete the assertions
          /*
          var request = new HydrogenElectronApi.CardBaseRequestCO();
          request.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          request.reason = "";
          request.vendorRequest = ;

          instance.createCardReplaceUsingPost(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.CardReplaceResponseVO);
            expect(data.cardStatus).to.be.a('string');
            expect(data.cardStatus).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.newNucleusCardId).to.be.a('string');
            expect(data.newNucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.replacedNucleusCardId).to.be.a('string');
            expect(data.replacedNucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardSpendingControlUsingPost', function() {
        it('should call createCardSpendingControlUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardSpendingControlUsingPost call and complete the assertions
          /*
          var request = new HydrogenElectronApi.CardSpendingControlRequestCO();
          request.nucleusSpendingControlId = """00000000-0000-0000-0000-000000000000";

          instance.createCardSpendingControlUsingPost(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.CardSpendingControlResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusSpendingControlId).to.be.a('string');
            expect(data.nucleusSpendingControlId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenElectronApi.SpendingControlVendorRequestDataVO);
                  expect(data.vendorRequestData.clientId).to.be.a('string');
              expect(data.vendorRequestData.clientId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorRequestData.controlScope).to.be.a('string');
              expect(data.vendorRequestData.controlScope).to.be("");
              expect(data.vendorRequestData.controlType).to.be.a('string');
              expect(data.vendorRequestData.controlType).to.be("");
              {
                let dataCtr = data.vendorRequestData.controlValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.vendorRequestData.currencyCode).to.be.a('string');
              expect(data.vendorRequestData.currencyCode).to.be("");
              expect(data.vendorRequestData.description).to.be.a('string');
              expect(data.vendorRequestData.description).to.be("");
              expect(data.vendorRequestData.frequencyUnit).to.be.a('string');
              expect(data.vendorRequestData.frequencyUnit).to.be("");
              expect(data.vendorRequestData.isActive).to.be.a('boolean');
              expect(data.vendorRequestData.isActive).to.be(false);
              expect(data.vendorRequestData.limitValue).to.be.a('number');
              expect(data.vendorRequestData.limitValue).to.be(0.0);
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardSuspendUsingPost', function() {
        it('should call createCardSuspendUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardSuspendUsingPost call and complete the assertions
          /*
          var suspendRequest = new HydrogenElectronApi.CardBaseRequestCO();
          suspendRequest.nucleusCardId = """00000000-0000-0000-0000-000000000000";
          suspendRequest.reason = "";
          suspendRequest.vendorRequest = ;

          instance.createCardSuspendUsingPost(suspendRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.BaseResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCardUnloadUsingPost', function() {
        it('should call createCardUnloadUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCardUnloadUsingPost call and complete the assertions
          /*
          var reloadRequest = new HydrogenElectronApi.CardUnloadRequestCO();
          reloadRequest.nucleusFundingId = """00000000-0000-0000-0000-000000000000";
          reloadRequest.reason = "";

          instance.createCardUnloadUsingPost(reloadRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.CardLoadUnloadResponseVO);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.cardStatus).to.be.a('string');
            expect(data.cardStatus).to.be("");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusCardId).to.be.a('string');
            expect(data.nucleusCardId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.nucleusFundingId).to.be.a('string');
            expect(data.nucleusFundingId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createClientCardUsingPost', function() {
        it('should call createClientCardUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createClientCardUsingPost call and complete the assertions
          /*
          var cardClientRequestCO = new HydrogenElectronApi.CardClientRequestCO();
          cardClientRequestCO.nucleusClientId = """00000000-0000-0000-0000-000000000000";
          cardClientRequestCO.vendorRequest = {key: ""};

          instance.createClientCardUsingPost(cardClientRequestCO, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.CreateCardClientResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCardReserveAccountDetailsUsingGet', function() {
        it('should call getCardReserveAccountDetailsUsingGet successfully', function(done) {
          // TODO: uncomment getCardReserveAccountDetailsUsingGet call and complete the assertions
          /*

          instance.getCardReserveAccountDetailsUsingGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.CardReserveAccountResponseVO);
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(0.0);
            expect(data.balanceAvailable).to.be.a('number');
            expect(data.balanceAvailable).to.be(0.0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.overdraftLimit).to.be.a('number');
            expect(data.overdraftLimit).to.be(0.0);
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();
            expect(data.walletId).to.be.a('string');
            expect(data.walletId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCardSpendingControlUsingPut', function() {
        it('should call updateCardSpendingControlUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCardSpendingControlUsingPut call and complete the assertions
          /*
          var nucleusSpendingControlId = "nucleusSpendingControlId_example";

          instance.updateCardSpendingControlUsingPut(nucleusSpendingControlId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.CardSpendingControlResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusSpendingControlId).to.be.a('string');
            expect(data.nucleusSpendingControlId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(HydrogenElectronApi.SpendingControlVendorRequestDataVO);
                  expect(data.vendorRequestData.clientId).to.be.a('string');
              expect(data.vendorRequestData.clientId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.vendorRequestData.controlScope).to.be.a('string');
              expect(data.vendorRequestData.controlScope).to.be("");
              expect(data.vendorRequestData.controlType).to.be.a('string');
              expect(data.vendorRequestData.controlType).to.be("");
              {
                let dataCtr = data.vendorRequestData.controlValues;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.vendorRequestData.currencyCode).to.be.a('string');
              expect(data.vendorRequestData.currencyCode).to.be("");
              expect(data.vendorRequestData.description).to.be.a('string');
              expect(data.vendorRequestData.description).to.be("");
              expect(data.vendorRequestData.frequencyUnit).to.be.a('string');
              expect(data.vendorRequestData.frequencyUnit).to.be("");
              expect(data.vendorRequestData.isActive).to.be.a('boolean');
              expect(data.vendorRequestData.isActive).to.be(false);
              expect(data.vendorRequestData.limitValue).to.be.a('number');
              expect(data.vendorRequestData.limitValue).to.be(0.0);
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateClientCardUsingPut', function() {
        it('should call updateClientCardUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateClientCardUsingPut call and complete the assertions
          /*
          var nucleusClientId = "nucleusClientId_example";

          instance.updateClientCardUsingPut(nucleusClientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenElectronApi.UpdateCardClientResponseVO);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.nucleusClientId).to.be.a('string');
            expect(data.nucleusClientId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.vendorRequestData).to.be.a(Object);
            expect(data.vendorRequestData).to.be();
            expect(data.vendorResponse).to.be.a(Object);
            expect(data.vendorResponse).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
