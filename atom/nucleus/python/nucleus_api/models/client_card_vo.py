# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class ClientCardVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_date': 'datetime',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'middle_name': 'str',
        'status': 'str',
        'title': 'str'
    }

    attribute_map = {
        'create_date': 'create_date',
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'middle_name': 'middle_name',
        'status': 'status',
        'title': 'title'
    }

    def __init__(self, create_date=None, email=None, first_name=None, last_name=None, middle_name=None, status=None, title=None, _configuration=None):  # noqa: E501
        """ClientCardVO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create_date = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._middle_name = None
        self._status = None
        self._title = None
        self.discriminator = None

        if create_date is not None:
            self.create_date = create_date
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if middle_name is not None:
            self.middle_name = middle_name
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title

    @property
    def create_date(self):
        """Gets the create_date of this ClientCardVO.  # noqa: E501

        createDate  # noqa: E501

        :return: The create_date of this ClientCardVO.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ClientCardVO.

        createDate  # noqa: E501

        :param create_date: The create_date of this ClientCardVO.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def email(self):
        """Gets the email of this ClientCardVO.  # noqa: E501

        email  # noqa: E501

        :return: The email of this ClientCardVO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClientCardVO.

        email  # noqa: E501

        :param email: The email of this ClientCardVO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ClientCardVO.  # noqa: E501

        firstName  # noqa: E501

        :return: The first_name of this ClientCardVO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClientCardVO.

        firstName  # noqa: E501

        :param first_name: The first_name of this ClientCardVO.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ClientCardVO.  # noqa: E501

        last_name  # noqa: E501

        :return: The last_name of this ClientCardVO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ClientCardVO.

        last_name  # noqa: E501

        :param last_name: The last_name of this ClientCardVO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this ClientCardVO.  # noqa: E501

        middleName  # noqa: E501

        :return: The middle_name of this ClientCardVO.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this ClientCardVO.

        middleName  # noqa: E501

        :param middle_name: The middle_name of this ClientCardVO.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def status(self):
        """Gets the status of this ClientCardVO.  # noqa: E501

        status  # noqa: E501

        :return: The status of this ClientCardVO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientCardVO.

        status  # noqa: E501

        :param status: The status of this ClientCardVO.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this ClientCardVO.  # noqa: E501

        email  # noqa: E501

        :return: The title of this ClientCardVO.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ClientCardVO.

        email  # noqa: E501

        :param title: The title of this ClientCardVO.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientCardVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCardVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientCardVO):
            return True

        return self.to_dict() != other.to_dict()
