/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OptConfig'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OptConfig'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenProtonApi) {
      root.HydrogenProtonApi = {};
    }
    root.HydrogenProtonApi.RiskAllocationRequest = factory(root.HydrogenProtonApi.ApiClient, root.HydrogenProtonApi.OptConfig);
  }
}(this, function(ApiClient, OptConfig) {
  'use strict';

  /**
   * The RiskAllocationRequest model module.
   * @module model/RiskAllocationRequest
   * @version 1.9.2
   */

  /**
   * Constructs a new <code>RiskAllocationRequest</code>.
   * @alias module:model/RiskAllocationRequest
   * @class
   * @param allocationMethod {module:model/RiskAllocationRequest.AllocationMethodEnum} 
   */
  var exports = function(allocationMethod) {
    this.allocationMethod = allocationMethod;
  };

  /**
   * Constructs a <code>RiskAllocationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RiskAllocationRequest} obj Optional instance to populate.
   * @return {module:model/RiskAllocationRequest} The populated <code>RiskAllocationRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('client_id'))
        obj.clientId = ApiClient.convertToType(data['client_id'], 'String');
      if (data.hasOwnProperty('allocation_method'))
        obj.allocationMethod = ApiClient.convertToType(data['allocation_method'], 'String');
      if (data.hasOwnProperty('opt_config'))
        obj.optConfig = OptConfig.constructFromObject(data['opt_config']);
      if (data.hasOwnProperty('market_data_source'))
        obj.marketDataSource = ApiClient.convertToType(data['market_data_source'], 'String');
      if (data.hasOwnProperty('risk_score'))
        obj.riskScore = ApiClient.convertToType(data['risk_score'], 'Number');
      if (data.hasOwnProperty('use_proxy_data'))
        obj.useProxyData = ApiClient.convertToType(data['use_proxy_data'], 'Boolean');
      if (data.hasOwnProperty('allocations'))
        obj.allocations = ApiClient.convertToType(data['allocations'], ['String']);
    }
    return obj;
  }

  /**
   * @member {String} clientId
   */
  exports.prototype.clientId = undefined;

  /**
   * @member {module:model/RiskAllocationRequest.AllocationMethodEnum} allocationMethod
   */
  exports.prototype.allocationMethod = undefined;

  /**
   * @member {module:model/OptConfig} optConfig
   */
  exports.prototype.optConfig = undefined;

  /**
   * @member {module:model/RiskAllocationRequest.MarketDataSourceEnum} marketDataSource
   * @default 'nucleus'
   */
  exports.prototype.marketDataSource = 'nucleus';

  /**
   * @member {Number} riskScore
   */
  exports.prototype.riskScore = undefined;

  /**
   * @member {Boolean} useProxyData
   * @default false
   */
  exports.prototype.useProxyData = false;

  /**
   * @member {Array.<String>} allocations
   */
  exports.prototype.allocations = undefined;



  /**
   * Allowed values for the <code>allocationMethod</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AllocationMethodEnum = {
    /**
     * value: "select"
     * @const
     */
    select: "select",

    /**
     * value: "create"
     * @const
     */
    create: "create"
  };


  /**
   * Allowed values for the <code>marketDataSource</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MarketDataSourceEnum = {
    /**
     * value: "nucleus"
     * @const
     */
    nucleus: "nucleus",

    /**
     * value: "integration"
     * @const
     */
    integration: "integration"
  };

  return exports;

}));
