=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NucleusApi
  class ResourceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bulk fxRate
    # Create a bulk fxRate.
    # @param fx_rate_list fxRateList
    # @param [Hash] opts the optional parameters
    # @return [Array<FxRate>]
    def create_fx_rate_bulk_using_post(fx_rate_list, opts = {})
      data, _status_code, _headers = create_fx_rate_bulk_using_post_with_http_info(fx_rate_list, opts)
      data
    end

    # Create a bulk fxRate
    # Create a bulk fxRate.
    # @param fx_rate_list fxRateList
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FxRate>, Fixnum, Hash)>] Array<FxRate> data, response status code and response headers
    def create_fx_rate_bulk_using_post_with_http_info(fx_rate_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.create_fx_rate_bulk_using_post ...'
      end
      # verify the required parameter 'fx_rate_list' is set
      if @api_client.config.client_side_validation && fx_rate_list.nil?
        fail ArgumentError, "Missing the required parameter 'fx_rate_list' when calling ResourceApi.create_fx_rate_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/fx_rate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(fx_rate_list)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FxRate>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#create_fx_rate_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a institution
    # Create a new institution.
    # @param institution institution
    # @param [Hash] opts the optional parameters
    # @return [Institution]
    def create_institution_using_post(institution, opts = {})
      data, _status_code, _headers = create_institution_using_post_with_http_info(institution, opts)
      data
    end

    # Create a institution
    # Create a new institution.
    # @param institution institution
    # @param [Hash] opts the optional parameters
    # @return [Array<(Institution, Fixnum, Hash)>] Institution data, response status code and response headers
    def create_institution_using_post_with_http_info(institution, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.create_institution_using_post ...'
      end
      # verify the required parameter 'institution' is set
      if @api_client.config.client_side_validation && institution.nil?
        fail ArgumentError, "Missing the required parameter 'institution' when calling ResourceApi.create_institution_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/institution'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(institution)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Institution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#create_institution_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a institution
    # Delete a institution. 
    # @param institution_id UUID institution_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_institution_using_delete(institution_id, opts = {})
      delete_institution_using_delete_with_http_info(institution_id, opts)
      nil
    end

    # Delete a institution
    # Delete a institution. 
    # @param institution_id UUID institution_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_institution_using_delete_with_http_info(institution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.delete_institution_using_delete ...'
      end
      # verify the required parameter 'institution_id' is set
      if @api_client.config.client_side_validation && institution_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_id' when calling ResourceApi.delete_institution_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/institution/{institution_id}'.sub('{' + 'institution_id' + '}', institution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#delete_institution_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all account category mapping
    # Get all account category mapping
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @option opts [String] :hydrogen_account_category_id hydrogen_account_category_id
    # @option opts [BOOLEAN] :match_primary match_primary (default to false)
    # @option opts [String] :tenant_name tenant_name
    # @option opts [String] :vendor_name vendor_name
    # @return [Array<Object>]
    def get_account_result_for_mapping(opts = {})
      data, _status_code, _headers = get_account_result_for_mapping_with_http_info(opts)
      data
    end

    # Get all account category mapping
    # Get all account category mapping
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @option opts [String] :hydrogen_account_category_id hydrogen_account_category_id
    # @option opts [BOOLEAN] :match_primary match_primary
    # @option opts [String] :tenant_name tenant_name
    # @option opts [String] :vendor_name vendor_name
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_account_result_for_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_account_result_for_mapping ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/account_category'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'hydrogen_account_category_id'] = opts[:'hydrogen_account_category_id'] if !opts[:'hydrogen_account_category_id'].nil?
      query_params[:'match_primary'] = opts[:'match_primary'] if !opts[:'match_primary'].nil?
      query_params[:'tenant_name'] = opts[:'tenant_name'] if !opts[:'tenant_name'].nil?
      query_params[:'vendor_name'] = opts[:'vendor_name'] if !opts[:'vendor_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_account_result_for_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Countries
    # Get All Countries. 
    # @param [Hash] opts the optional parameters
    # @return [Array<Country>]
    def get_all_country_using_get(opts = {})
      data, _status_code, _headers = get_all_country_using_get_with_http_info(opts)
      data
    end

    # Get All Countries
    # Get All Countries. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Country>, Fixnum, Hash)>] Array<Country> data, response status code and response headers
    def get_all_country_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_all_country_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/country'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Country>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_all_country_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Currencies
    # Get All Currencies. 
    # @param [Hash] opts the optional parameters
    # @return [Array<Currency>]
    def get_all_currency_using_get(opts = {})
      data, _status_code, _headers = get_all_currency_using_get_with_http_info(opts)
      data
    end

    # Get All Currencies
    # Get All Currencies. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Currency>, Fixnum, Hash)>] Array<Currency> data, response status code and response headers
    def get_all_currency_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_all_currency_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/currency'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Currency>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_all_currency_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get All Merchant Category Codes
    # Get All Merchant Category Codes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @return [Array<MerchantCategoryCode>]
    def get_all_merchant_category_code_using_get(opts = {})
      data, _status_code, _headers = get_all_merchant_category_code_using_get_with_http_info(opts)
      data
    end

    # Get All Merchant Category Codes
    # Get All Merchant Category Codes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @return [Array<(Array<MerchantCategoryCode>, Fixnum, Hash)>] Array<MerchantCategoryCode> data, response status code and response headers
    def get_all_merchant_category_code_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_all_merchant_category_code_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/merchant_category_code'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MerchantCategoryCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_all_merchant_category_code_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all state resource
    # Get the information for all possible state resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code country_code (default to US)
    # @return [Array<State>]
    def get_all_states_using_get(opts = {})
      data, _status_code, _headers = get_all_states_using_get_with_http_info(opts)
      data
    end

    # List all state resource
    # Get the information for all possible state resource.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country_code country_code
    # @return [Array<(Array<State>, Fixnum, Hash)>] Array<State> data, response status code and response headers
    def get_all_states_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_all_states_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/state'

      # query parameters
      query_params = {}
      query_params[:'country_code'] = opts[:'country_code'] if !opts[:'country_code'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<State>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_all_states_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all statistic resource
    # Get the information for all possible statistic resource.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<StatisticResourceVO>>]
    def get_all_statistics_using_get(opts = {})
      data, _status_code, _headers = get_all_statistics_using_get_with_http_info(opts)
      data
    end

    # List all statistic resource
    # Get the information for all possible statistic resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<StatisticResourceVO>>, Fixnum, Hash)>] Hash<String, Array<StatisticResourceVO>> data, response status code and response headers
    def get_all_statistics_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_all_statistics_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/statistic'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Array<StatisticResourceVO>>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_all_statistics_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all fxRates
    # Get information for all fxRates defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @return [Array<FxRateView>]
    def get_currency_exchange_rate_all_using_get(opts = {})
      data, _status_code, _headers = get_currency_exchange_rate_all_using_get_with_http_info(opts)
      data
    end

    # List all fxRates
    # Get information for all fxRates defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @return [Array<(Array<FxRateView>, Fixnum, Hash)>] Array<FxRateView> data, response status code and response headers
    def get_currency_exchange_rate_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_currency_exchange_rate_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/fx_rate'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FxRateView>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_currency_exchange_rate_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all institutions
    # List all institution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageInstitution]
    def get_institution_all_using_get(opts = {})
      data, _status_code, _headers = get_institution_all_using_get_with_http_info(opts)
      data
    end

    # List all institutions
    # List all institution.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageInstitution, Fixnum, Hash)>] PageInstitution data, response status code and response headers
    def get_institution_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_institution_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/institution'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageInstitution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_institution_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a institution
    # Retrieve a institution. 
    # @param institution_id UUID institution_id
    # @param [Hash] opts the optional parameters
    # @return [Institution]
    def get_institution_using_get(institution_id, opts = {})
      data, _status_code, _headers = get_institution_using_get_with_http_info(institution_id, opts)
      data
    end

    # Retrieve a institution
    # Retrieve a institution. 
    # @param institution_id UUID institution_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Institution, Fixnum, Hash)>] Institution data, response status code and response headers
    def get_institution_using_get_with_http_info(institution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_institution_using_get ...'
      end
      # verify the required parameter 'institution_id' is set
      if @api_client.config.client_side_validation && institution_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_id' when calling ResourceApi.get_institution_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/institution/{institution_id}'.sub('{' + 'institution_id' + '}', institution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Institution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_institution_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all merchants
    # List all merchants.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to id)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [MXMerchantRes]
    def get_merchants_all_using_get(opts = {})
      data, _status_code, _headers = get_merchants_all_using_get_with_http_info(opts)
      data
    end

    # Get all merchants
    # List all merchants.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(MXMerchantRes, Fixnum, Hash)>] MXMerchantRes data, response status code and response headers
    def get_merchants_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_merchants_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/merchant'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MXMerchantRes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_merchants_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all transaction category mapping
    # Get all transaction category mapping
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @option opts [String] :hydrogen_transaction_category_id hydrogen_transaction_category_id
    # @option opts [BOOLEAN] :match_primary match_primary (default to false)
    # @option opts [String] :tenant_name tenant_name
    # @option opts [String] :vendor_name vendor_name
    # @return [Array<Object>]
    def get_transaction_result_for_mapping(opts = {})
      data, _status_code, _headers = get_transaction_result_for_mapping_with_http_info(opts)
      data
    end

    # Get all transaction category mapping
    # Get all transaction category mapping
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @option opts [String] :hydrogen_transaction_category_id hydrogen_transaction_category_id
    # @option opts [BOOLEAN] :match_primary match_primary
    # @option opts [String] :tenant_name tenant_name
    # @option opts [String] :vendor_name vendor_name
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_transaction_result_for_mapping_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.get_transaction_result_for_mapping ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/transaction_category'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'hydrogen_transaction_category_id'] = opts[:'hydrogen_transaction_category_id'] if !opts[:'hydrogen_transaction_category_id'].nil?
      query_params[:'match_primary'] = opts[:'match_primary'] if !opts[:'match_primary'].nil?
      query_params[:'tenant_name'] = opts[:'tenant_name'] if !opts[:'tenant_name'].nil?
      query_params[:'vendor_name'] = opts[:'vendor_name'] if !opts[:'vendor_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#get_transaction_result_for_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a institution
    # Update a institution.
    # @param institution institution
    # @param institution_id UUID institution_id
    # @param [Hash] opts the optional parameters
    # @return [Institution]
    def update_institution_using_put(institution, institution_id, opts = {})
      data, _status_code, _headers = update_institution_using_put_with_http_info(institution, institution_id, opts)
      data
    end

    # Update a institution
    # Update a institution.
    # @param institution institution
    # @param institution_id UUID institution_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Institution, Fixnum, Hash)>] Institution data, response status code and response headers
    def update_institution_using_put_with_http_info(institution, institution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ResourceApi.update_institution_using_put ...'
      end
      # verify the required parameter 'institution' is set
      if @api_client.config.client_side_validation && institution.nil?
        fail ArgumentError, "Missing the required parameter 'institution' when calling ResourceApi.update_institution_using_put"
      end
      # verify the required parameter 'institution_id' is set
      if @api_client.config.client_side_validation && institution_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_id' when calling ResourceApi.update_institution_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/resource/institution/{institution_id}'.sub('{' + 'institution_id' + '}', institution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(institution)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Institution')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ResourceApi#update_institution_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
