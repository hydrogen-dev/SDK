# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenRestrictionsPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_age': 'float',
        'max_age': 'float',
        'min_annual_income': 'float',
        'max_annual_income': 'float',
        'min_household_income': 'float',
        'max_household_income': 'float',
        'min_net_worth': 'float',
        'max_net_worth': 'float',
        'min_credit_score': 'float',
        'max_credit_score': 'float',
        'accreditation_required': 'bool',
        'kyc_required': 'bool',
        'include_country': 'list[str]',
        'exclude_country': 'list[str]'
    }

    attribute_map = {
        'min_age': 'min_age',
        'max_age': 'max_age',
        'min_annual_income': 'min_annual_income',
        'max_annual_income': 'max_annual_income',
        'min_household_income': 'min_household_income',
        'max_household_income': 'max_household_income',
        'min_net_worth': 'min_net_worth',
        'max_net_worth': 'max_net_worth',
        'min_credit_score': 'min_credit_score',
        'max_credit_score': 'max_credit_score',
        'accreditation_required': 'accreditation_required',
        'kyc_required': 'kyc_required',
        'include_country': 'include_country',
        'exclude_country': 'exclude_country'
    }

    def __init__(self, min_age=None, max_age=None, min_annual_income=None, max_annual_income=None, min_household_income=None, max_household_income=None, min_net_worth=None, max_net_worth=None, min_credit_score=None, max_credit_score=None, accreditation_required=None, kyc_required=None, include_country=None, exclude_country=None):  # noqa: E501
        """TokenRestrictionsPayload - a model defined in Swagger"""  # noqa: E501

        self._min_age = None
        self._max_age = None
        self._min_annual_income = None
        self._max_annual_income = None
        self._min_household_income = None
        self._max_household_income = None
        self._min_net_worth = None
        self._max_net_worth = None
        self._min_credit_score = None
        self._max_credit_score = None
        self._accreditation_required = None
        self._kyc_required = None
        self._include_country = None
        self._exclude_country = None
        self.discriminator = None

        if min_age is not None:
            self.min_age = min_age
        if max_age is not None:
            self.max_age = max_age
        if min_annual_income is not None:
            self.min_annual_income = min_annual_income
        if max_annual_income is not None:
            self.max_annual_income = max_annual_income
        if min_household_income is not None:
            self.min_household_income = min_household_income
        if max_household_income is not None:
            self.max_household_income = max_household_income
        if min_net_worth is not None:
            self.min_net_worth = min_net_worth
        if max_net_worth is not None:
            self.max_net_worth = max_net_worth
        if min_credit_score is not None:
            self.min_credit_score = min_credit_score
        if max_credit_score is not None:
            self.max_credit_score = max_credit_score
        if accreditation_required is not None:
            self.accreditation_required = accreditation_required
        if kyc_required is not None:
            self.kyc_required = kyc_required
        if include_country is not None:
            self.include_country = include_country
        if exclude_country is not None:
            self.exclude_country = exclude_country

    @property
    def min_age(self):
        """Gets the min_age of this TokenRestrictionsPayload.  # noqa: E501

        Investors older than this age will be allowed to invest  # noqa: E501

        :return: The min_age of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._min_age

    @min_age.setter
    def min_age(self, min_age):
        """Sets the min_age of this TokenRestrictionsPayload.

        Investors older than this age will be allowed to invest  # noqa: E501

        :param min_age: The min_age of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._min_age = min_age

    @property
    def max_age(self):
        """Gets the max_age of this TokenRestrictionsPayload.  # noqa: E501

        Investors younger than this age will be allowed to invest  # noqa: E501

        :return: The max_age of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this TokenRestrictionsPayload.

        Investors younger than this age will be allowed to invest  # noqa: E501

        :param max_age: The max_age of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._max_age = max_age

    @property
    def min_annual_income(self):
        """Gets the min_annual_income of this TokenRestrictionsPayload.  # noqa: E501

        Investors with an annual income higher than this number will be allowed to invest  # noqa: E501

        :return: The min_annual_income of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._min_annual_income

    @min_annual_income.setter
    def min_annual_income(self, min_annual_income):
        """Sets the min_annual_income of this TokenRestrictionsPayload.

        Investors with an annual income higher than this number will be allowed to invest  # noqa: E501

        :param min_annual_income: The min_annual_income of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._min_annual_income = min_annual_income

    @property
    def max_annual_income(self):
        """Gets the max_annual_income of this TokenRestrictionsPayload.  # noqa: E501

        Investors with an annual income lower than this number will be allowed to invest  # noqa: E501

        :return: The max_annual_income of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_annual_income

    @max_annual_income.setter
    def max_annual_income(self, max_annual_income):
        """Sets the max_annual_income of this TokenRestrictionsPayload.

        Investors with an annual income lower than this number will be allowed to invest  # noqa: E501

        :param max_annual_income: The max_annual_income of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._max_annual_income = max_annual_income

    @property
    def min_household_income(self):
        """Gets the min_household_income of this TokenRestrictionsPayload.  # noqa: E501

        Investors with an household income higher than this number will be allowed to invest  # noqa: E501

        :return: The min_household_income of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._min_household_income

    @min_household_income.setter
    def min_household_income(self, min_household_income):
        """Sets the min_household_income of this TokenRestrictionsPayload.

        Investors with an household income higher than this number will be allowed to invest  # noqa: E501

        :param min_household_income: The min_household_income of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._min_household_income = min_household_income

    @property
    def max_household_income(self):
        """Gets the max_household_income of this TokenRestrictionsPayload.  # noqa: E501

        Investors with an household income lower than this number will be allowed to invest  # noqa: E501

        :return: The max_household_income of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_household_income

    @max_household_income.setter
    def max_household_income(self, max_household_income):
        """Sets the max_household_income of this TokenRestrictionsPayload.

        Investors with an household income lower than this number will be allowed to invest  # noqa: E501

        :param max_household_income: The max_household_income of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._max_household_income = max_household_income

    @property
    def min_net_worth(self):
        """Gets the min_net_worth of this TokenRestrictionsPayload.  # noqa: E501

        Investors with a net worth higher than this number will be allowed to invest  # noqa: E501

        :return: The min_net_worth of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._min_net_worth

    @min_net_worth.setter
    def min_net_worth(self, min_net_worth):
        """Sets the min_net_worth of this TokenRestrictionsPayload.

        Investors with a net worth higher than this number will be allowed to invest  # noqa: E501

        :param min_net_worth: The min_net_worth of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._min_net_worth = min_net_worth

    @property
    def max_net_worth(self):
        """Gets the max_net_worth of this TokenRestrictionsPayload.  # noqa: E501

        Investors with a net worth lower than this number will be allowed to invest  # noqa: E501

        :return: The max_net_worth of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_net_worth

    @max_net_worth.setter
    def max_net_worth(self, max_net_worth):
        """Sets the max_net_worth of this TokenRestrictionsPayload.

        Investors with a net worth lower than this number will be allowed to invest  # noqa: E501

        :param max_net_worth: The max_net_worth of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._max_net_worth = max_net_worth

    @property
    def min_credit_score(self):
        """Gets the min_credit_score of this TokenRestrictionsPayload.  # noqa: E501

        Investors with a credit score higher than this number will be allowed to invest  # noqa: E501

        :return: The min_credit_score of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._min_credit_score

    @min_credit_score.setter
    def min_credit_score(self, min_credit_score):
        """Sets the min_credit_score of this TokenRestrictionsPayload.

        Investors with a credit score higher than this number will be allowed to invest  # noqa: E501

        :param min_credit_score: The min_credit_score of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._min_credit_score = min_credit_score

    @property
    def max_credit_score(self):
        """Gets the max_credit_score of this TokenRestrictionsPayload.  # noqa: E501

        Investors with a credit score lower than this number will be allowed to invest  # noqa: E501

        :return: The max_credit_score of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: float
        """
        return self._max_credit_score

    @max_credit_score.setter
    def max_credit_score(self, max_credit_score):
        """Sets the max_credit_score of this TokenRestrictionsPayload.

        Investors with a credit score lower than this number will be allowed to invest  # noqa: E501

        :param max_credit_score: The max_credit_score of this TokenRestrictionsPayload.  # noqa: E501
        :type: float
        """

        self._max_credit_score = max_credit_score

    @property
    def accreditation_required(self):
        """Gets the accreditation_required of this TokenRestrictionsPayload.  # noqa: E501

        Only accredited investors will be allowed to invest  # noqa: E501

        :return: The accreditation_required of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: bool
        """
        return self._accreditation_required

    @accreditation_required.setter
    def accreditation_required(self, accreditation_required):
        """Sets the accreditation_required of this TokenRestrictionsPayload.

        Only accredited investors will be allowed to invest  # noqa: E501

        :param accreditation_required: The accreditation_required of this TokenRestrictionsPayload.  # noqa: E501
        :type: bool
        """

        self._accreditation_required = accreditation_required

    @property
    def kyc_required(self):
        """Gets the kyc_required of this TokenRestrictionsPayload.  # noqa: E501

        Investors who are verified by a Know-Your-Customer vendor will be allowed to invest  # noqa: E501

        :return: The kyc_required of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: bool
        """
        return self._kyc_required

    @kyc_required.setter
    def kyc_required(self, kyc_required):
        """Sets the kyc_required of this TokenRestrictionsPayload.

        Investors who are verified by a Know-Your-Customer vendor will be allowed to invest  # noqa: E501

        :param kyc_required: The kyc_required of this TokenRestrictionsPayload.  # noqa: E501
        :type: bool
        """

        self._kyc_required = kyc_required

    @property
    def include_country(self):
        """Gets the include_country of this TokenRestrictionsPayload.  # noqa: E501

        Investors residing in these countries will be allowed to invest  # noqa: E501

        :return: The include_country of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_country

    @include_country.setter
    def include_country(self, include_country):
        """Sets the include_country of this TokenRestrictionsPayload.

        Investors residing in these countries will be allowed to invest  # noqa: E501

        :param include_country: The include_country of this TokenRestrictionsPayload.  # noqa: E501
        :type: list[str]
        """

        self._include_country = include_country

    @property
    def exclude_country(self):
        """Gets the exclude_country of this TokenRestrictionsPayload.  # noqa: E501

        Investors residing outside of these countries will be allowed to invest  # noqa: E501

        :return: The exclude_country of this TokenRestrictionsPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_country

    @exclude_country.setter
    def exclude_country(self, exclude_country):
        """Sets the exclude_country of this TokenRestrictionsPayload.

        Investors residing outside of these countries will be allowed to invest  # noqa: E501

        :param exclude_country: The exclude_country of this TokenRestrictionsPayload.  # noqa: E501
        :type: list[str]
        """

        self._exclude_country = exclude_country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenRestrictionsPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenRestrictionsPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
