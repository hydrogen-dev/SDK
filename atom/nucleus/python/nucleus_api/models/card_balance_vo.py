# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class CardBalanceVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'float',
        'balance_available': 'float',
        'balance_timestamp': 'datetime',
        'currency_code': 'str'
    }

    attribute_map = {
        'balance': 'balance',
        'balance_available': 'balance_available',
        'balance_timestamp': 'balance_timestamp',
        'currency_code': 'currency_code'
    }

    def __init__(self, balance=None, balance_available=None, balance_timestamp=None, currency_code=None, _configuration=None):  # noqa: E501
        """CardBalanceVO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._balance = None
        self._balance_available = None
        self._balance_timestamp = None
        self._currency_code = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if balance_available is not None:
            self.balance_available = balance_available
        if balance_timestamp is not None:
            self.balance_timestamp = balance_timestamp
        if currency_code is not None:
            self.currency_code = currency_code

    @property
    def balance(self):
        """Gets the balance of this CardBalanceVO.  # noqa: E501

        balance  # noqa: E501

        :return: The balance of this CardBalanceVO.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CardBalanceVO.

        balance  # noqa: E501

        :param balance: The balance of this CardBalanceVO.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def balance_available(self):
        """Gets the balance_available of this CardBalanceVO.  # noqa: E501

        balanceAvailable  # noqa: E501

        :return: The balance_available of this CardBalanceVO.  # noqa: E501
        :rtype: float
        """
        return self._balance_available

    @balance_available.setter
    def balance_available(self, balance_available):
        """Sets the balance_available of this CardBalanceVO.

        balanceAvailable  # noqa: E501

        :param balance_available: The balance_available of this CardBalanceVO.  # noqa: E501
        :type: float
        """

        self._balance_available = balance_available

    @property
    def balance_timestamp(self):
        """Gets the balance_timestamp of this CardBalanceVO.  # noqa: E501

        balanceTimestamp  # noqa: E501

        :return: The balance_timestamp of this CardBalanceVO.  # noqa: E501
        :rtype: datetime
        """
        return self._balance_timestamp

    @balance_timestamp.setter
    def balance_timestamp(self, balance_timestamp):
        """Sets the balance_timestamp of this CardBalanceVO.

        balanceTimestamp  # noqa: E501

        :param balance_timestamp: The balance_timestamp of this CardBalanceVO.  # noqa: E501
        :type: datetime
        """

        self._balance_timestamp = balance_timestamp

    @property
    def currency_code(self):
        """Gets the currency_code of this CardBalanceVO.  # noqa: E501

        currencyCode  # noqa: E501

        :return: The currency_code of this CardBalanceVO.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CardBalanceVO.

        currencyCode  # noqa: E501

        :param currency_code: The currency_code of this CardBalanceVO.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardBalanceVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardBalanceVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CardBalanceVO):
            return True

        return self.to_dict() != other.to_dict()
