=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module NucleusApi
  # Goal Simulation Result Object
  class GoalTrack
    attr_accessor :accounts

    # accumulationHorizon
    attr_accessor :accumulation_horizon

    # clientId
    attr_accessor :client_id

    attr_accessor :create_date

    # currentInvestment
    attr_accessor :current_investment

    # decumulationHorizon
    attr_accessor :decumulation_horizon

    # goalAchievementScore
    attr_accessor :goal_achievement_score

    # goalAmount
    attr_accessor :goal_amount

    # goalId
    attr_accessor :goal_id

    # goalProbability
    attr_accessor :goal_probability

    attr_accessor :id

    # metadata
    attr_accessor :metadata

    # onTrack
    attr_accessor :on_track

    # progress
    attr_accessor :progress

    # projectionBalance
    attr_accessor :projection_balance

    # projectionDate
    attr_accessor :projection_date

    attr_accessor :secondary_id

    # statusTimeStamp
    attr_accessor :status_time_stamp

    attr_accessor :update_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'accounts' => :'accounts',
        :'accumulation_horizon' => :'accumulation_horizon',
        :'client_id' => :'client_id',
        :'create_date' => :'create_date',
        :'current_investment' => :'current_investment',
        :'decumulation_horizon' => :'decumulation_horizon',
        :'goal_achievement_score' => :'goal_achievement_score',
        :'goal_amount' => :'goal_amount',
        :'goal_id' => :'goal_id',
        :'goal_probability' => :'goal_probability',
        :'id' => :'id',
        :'metadata' => :'metadata',
        :'on_track' => :'on_track',
        :'progress' => :'progress',
        :'projection_balance' => :'projection_balance',
        :'projection_date' => :'projection_date',
        :'secondary_id' => :'secondary_id',
        :'status_time_stamp' => :'status_time_stamp',
        :'update_date' => :'update_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'accounts' => :'Array<GoalTrackAccounts>',
        :'accumulation_horizon' => :'Float',
        :'client_id' => :'String',
        :'create_date' => :'DateTime',
        :'current_investment' => :'Float',
        :'decumulation_horizon' => :'Float',
        :'goal_achievement_score' => :'Float',
        :'goal_amount' => :'Float',
        :'goal_id' => :'String',
        :'goal_probability' => :'Float',
        :'id' => :'String',
        :'metadata' => :'Hash<String, String>',
        :'on_track' => :'BOOLEAN',
        :'progress' => :'Float',
        :'projection_balance' => :'Float',
        :'projection_date' => :'Date',
        :'secondary_id' => :'String',
        :'status_time_stamp' => :'DateTime',
        :'update_date' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'accounts')
        if (value = attributes[:'accounts']).is_a?(Array)
          self.accounts = value
        end
      end

      if attributes.has_key?(:'accumulation_horizon')
        self.accumulation_horizon = attributes[:'accumulation_horizon']
      end

      if attributes.has_key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'current_investment')
        self.current_investment = attributes[:'current_investment']
      end

      if attributes.has_key?(:'decumulation_horizon')
        self.decumulation_horizon = attributes[:'decumulation_horizon']
      end

      if attributes.has_key?(:'goal_achievement_score')
        self.goal_achievement_score = attributes[:'goal_achievement_score']
      end

      if attributes.has_key?(:'goal_amount')
        self.goal_amount = attributes[:'goal_amount']
      end

      if attributes.has_key?(:'goal_id')
        self.goal_id = attributes[:'goal_id']
      end

      if attributes.has_key?(:'goal_probability')
        self.goal_probability = attributes[:'goal_probability']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'on_track')
        self.on_track = attributes[:'on_track']
      end

      if attributes.has_key?(:'progress')
        self.progress = attributes[:'progress']
      end

      if attributes.has_key?(:'projection_balance')
        self.projection_balance = attributes[:'projection_balance']
      end

      if attributes.has_key?(:'projection_date')
        self.projection_date = attributes[:'projection_date']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'status_time_stamp')
        self.status_time_stamp = attributes[:'status_time_stamp']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @goal_id.nil?
        invalid_properties.push('invalid value for "goal_id", goal_id cannot be nil.')
      end

      if @status_time_stamp.nil?
        invalid_properties.push('invalid value for "status_time_stamp", status_time_stamp cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @goal_id.nil?
      return false if @status_time_stamp.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          accounts == o.accounts &&
          accumulation_horizon == o.accumulation_horizon &&
          client_id == o.client_id &&
          create_date == o.create_date &&
          current_investment == o.current_investment &&
          decumulation_horizon == o.decumulation_horizon &&
          goal_achievement_score == o.goal_achievement_score &&
          goal_amount == o.goal_amount &&
          goal_id == o.goal_id &&
          goal_probability == o.goal_probability &&
          id == o.id &&
          metadata == o.metadata &&
          on_track == o.on_track &&
          progress == o.progress &&
          projection_balance == o.projection_balance &&
          projection_date == o.projection_date &&
          secondary_id == o.secondary_id &&
          status_time_stamp == o.status_time_stamp &&
          update_date == o.update_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [accounts, accumulation_horizon, client_id, create_date, current_investment, decumulation_horizon, goal_achievement_score, goal_amount, goal_id, goal_probability, id, metadata, on_track, progress, projection_balance, projection_date, secondary_id, status_time_stamp, update_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        (value)
      when :Date
        (value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NucleusApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end


    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
