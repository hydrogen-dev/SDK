/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountApiTests
    {
        private AccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountApi
            //Assert.IsInstanceOfType(typeof(AccountApi), instance, "instance is a AccountApi");
        }

        
        /// <summary>
        /// Test CreateAccountAllocationMappingUsingPost
        /// </summary>
        [Test]
        public void CreateAccountAllocationMappingUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountAllocationMapping allocRequest = null;
            //var response = instance.CreateAccountAllocationMappingUsingPost(allocRequest);
            //Assert.IsInstanceOf<AccountAllocationMapping> (response, "response is AccountAllocationMapping");
        }
        
        /// <summary>
        /// Test CreateAccountStatusUsingPost
        /// </summary>
        [Test]
        public void CreateAccountStatusUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountStatus accountStatusRequest = null;
            //var response = instance.CreateAccountStatusUsingPost(accountStatusRequest);
            //Assert.IsInstanceOf<AccountStatus> (response, "response is AccountStatus");
        }
        
        /// <summary>
        /// Test CreateAccountTypeUsingPost
        /// </summary>
        [Test]
        public void CreateAccountTypeUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AccountType accountTypeRequest = null;
            //var response = instance.CreateAccountTypeUsingPost(accountTypeRequest);
            //Assert.IsInstanceOf<AccountType> (response, "response is AccountType");
        }
        
        /// <summary>
        /// Test CreateAccountUsingPost
        /// </summary>
        [Test]
        public void CreateAccountUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Account account = null;
            //var response = instance.CreateAccountUsingPost(account);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test DeleteAccountAllocationMappingUsingDelete
        /// </summary>
        [Test]
        public void DeleteAccountAllocationMappingUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountAllocationId = null;
            //instance.DeleteAccountAllocationMappingUsingDelete(accountAllocationId);
            
        }
        
        /// <summary>
        /// Test DeleteAccountPermissionUsingDELETE
        /// </summary>
        [Test]
        public void DeleteAccountPermissionUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //var response = instance.DeleteAccountPermissionUsingDELETE(accountId);
            //Assert.IsInstanceOf<AccountPermissionVO> (response, "response is AccountPermissionVO");
        }
        
        /// <summary>
        /// Test DeleteAccountStatusUsingDelete
        /// </summary>
        [Test]
        public void DeleteAccountStatusUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountStatusId = null;
            //instance.DeleteAccountStatusUsingDelete(accountStatusId);
            
        }
        
        /// <summary>
        /// Test DeleteAccountTypeUsingDelete
        /// </summary>
        [Test]
        public void DeleteAccountTypeUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountTypeId = null;
            //instance.DeleteAccountTypeUsingDelete(accountTypeId);
            
        }
        
        /// <summary>
        /// Test DeleteAccountUsingDelete
        /// </summary>
        [Test]
        public void DeleteAccountUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //instance.DeleteAccountUsingDelete(accountId);
            
        }
        
        /// <summary>
        /// Test GetAccountAllUsingGet
        /// </summary>
        [Test]
        public void GetAccountAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAccountAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAccount> (response, "response is PageAccount");
        }
        
        /// <summary>
        /// Test GetAccountAllocationMappingAllUsingGet
        /// </summary>
        [Test]
        public void GetAccountAllocationMappingAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAccountAllocationMappingAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAccountAllocationMapping> (response, "response is PageAccountAllocationMapping");
        }
        
        /// <summary>
        /// Test GetAccountAllocationMappingUsingGet
        /// </summary>
        [Test]
        public void GetAccountAllocationMappingUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountAllocationId = null;
            //var response = instance.GetAccountAllocationMappingUsingGet(accountAllocationId);
            //Assert.IsInstanceOf<AccountAllocationMapping> (response, "response is AccountAllocationMapping");
        }
        
        /// <summary>
        /// Test GetAccountAssetSizeAggAllUsingGet
        /// </summary>
        [Test]
        public void GetAccountAssetSizeAggAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //string currencyConversion = null;
            //DateTime? endDate = null;
            //bool? excludeSubledger = null;
            //bool? getLatest = null;
            //string sortType = null;
            //DateTime? startDate = null;
            //var response = instance.GetAccountAssetSizeAggAllUsingGet(accountId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
            //Assert.IsInstanceOf<List<AvailableDateDoubleVO>> (response, "response is List<AvailableDateDoubleVO>");
        }
        
        /// <summary>
        /// Test GetAccountOverviewUsingGet
        /// </summary>
        [Test]
        public void GetAccountOverviewUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //bool? ascending = null;
            //string orderBy = null;
            //var response = instance.GetAccountOverviewUsingGet(accountId, ascending, orderBy);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAccountPermissionUsingGET
        /// </summary>
        [Test]
        public void GetAccountPermissionUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //var response = instance.GetAccountPermissionUsingGET(accountId);
            //Assert.IsInstanceOf<AccountPermissionVO> (response, "response is AccountPermissionVO");
        }
        
        /// <summary>
        /// Test GetAccountStatusAllUsingGet
        /// </summary>
        [Test]
        public void GetAccountStatusAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAccountStatusAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAccountStatus> (response, "response is PageAccountStatus");
        }
        
        /// <summary>
        /// Test GetAccountStatusUsingGet
        /// </summary>
        [Test]
        public void GetAccountStatusUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountStatusId = null;
            //var response = instance.GetAccountStatusUsingGet(accountStatusId);
            //Assert.IsInstanceOf<AccountStatus> (response, "response is AccountStatus");
        }
        
        /// <summary>
        /// Test GetAccountTypeAllUsingGet
        /// </summary>
        [Test]
        public void GetAccountTypeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAccountTypeAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAccountType> (response, "response is PageAccountType");
        }
        
        /// <summary>
        /// Test GetAccountTypeUsingGet
        /// </summary>
        [Test]
        public void GetAccountTypeUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountTypeId = null;
            //var response = instance.GetAccountTypeUsingGet(accountTypeId);
            //Assert.IsInstanceOf<AccountType> (response, "response is AccountType");
        }
        
        /// <summary>
        /// Test GetAccountUsingGet
        /// </summary>
        [Test]
        public void GetAccountUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //var response = instance.GetAccountUsingGet(accountId);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test GetAllAccountPermissionUsingGET
        /// </summary>
        [Test]
        public void GetAllAccountPermissionUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAllAccountPermissionUsingGET(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAccountPermissionVO> (response, "response is PageAccountPermissionVO");
        }
        
        /// <summary>
        /// Test GetPortfolioHoldingAggAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioHoldingAggAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //bool? ascending = null;
            //string currencyConversion = null;
            //DateTime? endDate = null;
            //string filter = null;
            //bool? getLatest = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //DateTime? startDate = null;
            //var response = instance.GetPortfolioHoldingAggAllUsingGet(accountId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
            //Assert.IsInstanceOf<PagePortfolioHoldingAgg> (response, "response is PagePortfolioHoldingAgg");
        }
        
        /// <summary>
        /// Test GetPortfolioTransactionAggAllUsingGet
        /// </summary>
        [Test]
        public void GetPortfolioTransactionAggAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //bool? ascending = null;
            //string currencyConversion = null;
            //DateTime? endDate = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //DateTime? startDate = null;
            //var response = instance.GetPortfolioTransactionAggAllUsingGet(accountId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
            //Assert.IsInstanceOf<PagePortfolioTransaction> (response, "response is PagePortfolioTransaction");
        }
        
        /// <summary>
        /// Test InsertAccountAndRelatedPermissionUsingPOST
        /// </summary>
        [Test]
        public void InsertAccountAndRelatedPermissionUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AclClientPermissionVO aclClientPermissionVO = null;
            //var response = instance.InsertAccountAndRelatedPermissionUsingPOST(aclClientPermissionVO);
            //Assert.IsInstanceOf<AccountPermissionVO> (response, "response is AccountPermissionVO");
        }
        
        /// <summary>
        /// Test SubscribeAccountUsingPost
        /// </summary>
        [Test]
        public void SubscribeAccountUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //AccountAllocationMapping allocRequest = null;
            //var response = instance.SubscribeAccountUsingPost(accountId, allocRequest);
            //Assert.IsInstanceOf<List<Portfolio>> (response, "response is List<Portfolio>");
        }
        
        /// <summary>
        /// Test UpdateAccountAllocationMappingUsingPut
        /// </summary>
        [Test]
        public void UpdateAccountAllocationMappingUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountAllocationId = null;
            //Object accountAllocationMapping = null;
            //var response = instance.UpdateAccountAllocationMappingUsingPut(accountAllocationId, accountAllocationMapping);
            //Assert.IsInstanceOf<AccountAllocationMapping> (response, "response is AccountAllocationMapping");
        }
        
        /// <summary>
        /// Test UpdateAccountStatusUsingPut
        /// </summary>
        [Test]
        public void UpdateAccountStatusUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object accountStatus = null;
            //Guid? accountStatusId = null;
            //var response = instance.UpdateAccountStatusUsingPut(accountStatus, accountStatusId);
            //Assert.IsInstanceOf<AccountStatus> (response, "response is AccountStatus");
        }
        
        /// <summary>
        /// Test UpdateAccountTypeUsingPut
        /// </summary>
        [Test]
        public void UpdateAccountTypeUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object accountType = null;
            //Guid? accountTypeId = null;
            //var response = instance.UpdateAccountTypeUsingPut(accountType, accountTypeId);
            //Assert.IsInstanceOf<AccountType> (response, "response is AccountType");
        }
        
        /// <summary>
        /// Test UpdateAccountUsingPut
        /// </summary>
        [Test]
        public void UpdateAccountUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object account = null;
            //Guid? accountId = null;
            //var response = instance.UpdateAccountUsingPut(account, accountId);
            //Assert.IsInstanceOf<Account> (response, "response is Account");
        }
        
        /// <summary>
        /// Test UpdateClientAccountPermissionUsingPUT
        /// </summary>
        [Test]
        public void UpdateClientAccountPermissionUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //Object aclClientPermissionVO = null;
            //var response = instance.UpdateClientAccountPermissionUsingPUT(accountId, aclClientPermissionVO);
            //Assert.IsInstanceOf<AccountPermissionVO> (response, "response is AccountPermissionVO");
        }
        
    }

}
