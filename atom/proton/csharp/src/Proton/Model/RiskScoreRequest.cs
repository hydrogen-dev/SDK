/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// RiskScoreRequest
    /// </summary>
    [DataContract]
    public partial class RiskScoreRequest :  IEquatable<RiskScoreRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskScoreRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RiskScoreRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskScoreRequest" /> class.
        /// </summary>
        /// <param name="questionnaireId">questionnaireId.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="postScore">postScore (default to false).</param>
        /// <param name="maxAnswers">maxAnswers (required).</param>
        /// <param name="weights">weights.</param>
        /// <param name="answers">answers.</param>
        public RiskScoreRequest(Guid? questionnaireId = default(Guid?), Guid? clientId = default(Guid?), bool? postScore = false, List<decimal?> maxAnswers = default(List<decimal?>), List<float?> weights = default(List<float?>), List<decimal?> answers = default(List<decimal?>))
        {
            // to ensure "maxAnswers" is required (not null)
            if (maxAnswers == null)
            {
                throw new InvalidDataException("maxAnswers is a required property for RiskScoreRequest and cannot be null");
            }
            else
            {
                this.MaxAnswers = maxAnswers;
            }
            this.QuestionnaireId = questionnaireId;
            this.ClientId = clientId;
            // use default value if no "postScore" provided
            if (postScore == null)
            {
                this.PostScore = false;
            }
            else
            {
                this.PostScore = postScore;
            }
            this.Weights = weights;
            this.Answers = answers;
        }
        
        /// <summary>
        /// Gets or Sets QuestionnaireId
        /// </summary>
        [DataMember(Name="questionnaire_id", EmitDefaultValue=false)]
        public Guid? QuestionnaireId { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets PostScore
        /// </summary>
        [DataMember(Name="post_score", EmitDefaultValue=false)]
        public bool? PostScore { get; set; }

        /// <summary>
        /// Gets or Sets MaxAnswers
        /// </summary>
        [DataMember(Name="max_answers", EmitDefaultValue=false)]
        public List<decimal?> MaxAnswers { get; set; }

        /// <summary>
        /// Gets or Sets Weights
        /// </summary>
        [DataMember(Name="weights", EmitDefaultValue=false)]
        public List<float?> Weights { get; set; }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [DataMember(Name="answers", EmitDefaultValue=false)]
        public List<decimal?> Answers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskScoreRequest {\n");
            sb.Append("  QuestionnaireId: ").Append(QuestionnaireId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  PostScore: ").Append(PostScore).Append("\n");
            sb.Append("  MaxAnswers: ").Append(MaxAnswers).Append("\n");
            sb.Append("  Weights: ").Append(Weights).Append("\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RiskScoreRequest);
        }

        /// <summary>
        /// Returns true if RiskScoreRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RiskScoreRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskScoreRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuestionnaireId == input.QuestionnaireId ||
                    (this.QuestionnaireId != null &&
                    this.QuestionnaireId.Equals(input.QuestionnaireId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.PostScore == input.PostScore ||
                    (this.PostScore != null &&
                    this.PostScore.Equals(input.PostScore))
                ) && 
                (
                    this.MaxAnswers == input.MaxAnswers ||
                    this.MaxAnswers != null &&
                    this.MaxAnswers.SequenceEqual(input.MaxAnswers)
                ) && 
                (
                    this.Weights == input.Weights ||
                    this.Weights != null &&
                    this.Weights.SequenceEqual(input.Weights)
                ) && 
                (
                    this.Answers == input.Answers ||
                    this.Answers != null &&
                    this.Answers.SequenceEqual(input.Answers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuestionnaireId != null)
                    hashCode = hashCode * 59 + this.QuestionnaireId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.PostScore != null)
                    hashCode = hashCode * 59 + this.PostScore.GetHashCode();
                if (this.MaxAnswers != null)
                    hashCode = hashCode * 59 + this.MaxAnswers.GetHashCode();
                if (this.Weights != null)
                    hashCode = hashCode * 59 + this.Weights.GetHashCode();
                if (this.Answers != null)
                    hashCode = hashCode * 59 + this.Answers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
