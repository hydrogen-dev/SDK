/*
 * Hydrogen Admin API
 *
 * The Hydrogen Admin API
 *
 * OpenAPI spec version: 1.9.4
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
*/
using System;
using System.Collections.Generic;
using System.Text;
using Newtonsoft.Json;
using IO.Swagger.Api;
using RestSharp;

namespace IO.Swagger.Client
{
    public class AuthApiClient : Configuration
    {
        private const string BEARER = "Bearer ";
        private const string BASIC = "Basic ";
        private const string ACCEPT = "Accept";
        private const string AUTHORIZATION = "Authorization";
        private const string GRANT_TYPE_KEY = "grant_type";
        private const string CLIENT_CREDENTIAL = "client_credentials";
        private const string PASSWORD = "password";
        private const string USERNAME = "username";
        private const string MESSAGE = "message";
        private const string ACCESS_TOKEN = "access_token";
        private const string CLIENT_TOKEN = "Client-Token";

        public string AuthUri { get; set; }
        public string ClientAccessTokenUri { get; set; }

        public  IO.Swagger.Client.Configuration Configuration { get; set; }
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        public AuthApiClient(Configuration Configuration)
        {
            this.Configuration = Configuration;
            String baseUri = this.Configuration.BasePath.Substring(0, this.Configuration.BasePath.IndexOf(".com") + 4);
            AuthUri = "/authorization/v1/oauth/token";
            ClientAccessTokenUri = "/authorization/v1/client-token";
            this.Configuration = IO.Swagger.Client.Configuration.Default;
            this.Configuration.BasePath = baseUri;
        }

        public String createClientCredential(String clientId, String clientSecret)
        {
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            localVarQueryParams.Add(new KeyValuePair<string, string>(GRANT_TYPE_KEY, CLIENT_CREDENTIAL));

            object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] { };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
               "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add(ACCEPT, localVarHttpHeaderAccept);
            localVarHeaderParams[AUTHORIZATION] = BASIC + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(clientId + ":" + clientSecret)); ;
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(AuthUri,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientCredential", localVarResponse);
                if (exception != null) throw exception;
            }
            AuthResponse authResponse =  JsonConvert.DeserializeObject<AuthResponse>(localVarResponse.Content);
            return authResponse.access_token;
        }

        public String createPasswordCredential(String clientId, String clientSecret, String userName, String password)
        {

            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>();
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            localVarQueryParams.Add(new KeyValuePair<string, string>(GRANT_TYPE_KEY, PASSWORD));
            localVarQueryParams.Add(new KeyValuePair<string, string>(USERNAME, userName));
            localVarQueryParams.Add(new KeyValuePair<string, string>(PASSWORD, password));


            object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] { };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
               "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add(ACCEPT, localVarHttpHeaderAccept);
            String auth = clientId + ":" + clientSecret;
            localVarHeaderParams[AUTHORIZATION] = BASIC + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(clientId + ":" + clientSecret)); ;
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(AuthUri,
            Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
            localVarPathParams, localVarHttpContentType);
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePasswordCredential", localVarResponse);
                if (exception != null) throw exception;
            }
            AuthResponse authResponse =  JsonConvert.DeserializeObject<AuthResponse>(localVarResponse.Content);
            return authResponse.access_token;
        }

        public void createClientTokenCredential(String clientId, String clientSecret, String clientToken)
        {
            var localVarPathParams = new Dictionary<string, string>();
                        var localVarQueryParams = new List<KeyValuePair<string, string>>();
                        var localVarHeaderParams = new Dictionary<string, string>();
                        var localVarFormParams = new Dictionary<string, string>();
                        var localVarFileParams = new Dictionary<string, FileParameter>();
                        object localVarPostBody = null;
                        // to determine the Content-Type header
                        String[] localVarHttpContentTypes = new String[] { };
                        String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

                        // to determine the Accept header
                        String[] localVarHttpHeaderAccepts = new String[] {
                           "*/*"
                        };
                        String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
                        if (localVarHttpHeaderAccept != null)
                            localVarHeaderParams.Add(ACCEPT, localVarHttpHeaderAccept);
                        localVarHeaderParams[AUTHORIZATION] = BASIC + Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(clientId + ":" + clientSecret)); ;
                        localVarHeaderParams[CLIENT_TOKEN] = BEARER + clientToken;
                        IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(ClientAccessTokenUri,
                        Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                        localVarPathParams, localVarHttpContentType);
                        if (ExceptionFactory != null)
                        {
                            Exception exception = ExceptionFactory("CreateClientTokenCredential", localVarResponse);
                            if (exception != null) throw exception;
                        }
                        AuthResponse authResponse =  JsonConvert.DeserializeObject<AuthResponse>(localVarResponse.Content);
                        this.Configuration.AccessToken = authResponse.access_token;
        }

        public class AuthResponse
        {
            public string access_token { get; set; }
        }
    }
}