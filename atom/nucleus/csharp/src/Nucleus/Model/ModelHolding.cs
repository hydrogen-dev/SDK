/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// ModelHolding
    /// </summary>
    [DataContract]
    public partial class ModelHolding :  IEquatable<ModelHolding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelHolding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelHolding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelHolding" /> class.
        /// </summary>
        /// <param name="createDate">createDate.</param>
        /// <param name="currentWeight">Model Holding current weight (required).</param>
        /// <param name="date">Model Holding date (required).</param>
        /// <param name="driftFactor">driftFactor.</param>
        /// <param name="id">id.</param>
        /// <param name="isCash">isCash.</param>
        /// <param name="isInitialHolding">isInitialHolding.</param>
        /// <param name="isSafeSecurity">isSafeSecurity.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="modelDescription">modelDescription.</param>
        /// <param name="modelId">modelId (required).</param>
        /// <param name="modelName">modelName.</param>
        /// <param name="modelWeight">modelWeight.</param>
        /// <param name="secPrice">secPrice.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="securityId">securityId (required).</param>
        /// <param name="strategicWeight">Model Holding strategicWeight (required).</param>
        /// <param name="updateDate">updateDate.</param>
        public ModelHolding(DateTime? createDate = default(DateTime?), double? currentWeight = default(double?), DateTime? date = default(DateTime?), float? driftFactor = default(float?), Guid? id = default(Guid?), bool? isCash = default(bool?), bool? isInitialHolding = default(bool?), bool? isSafeSecurity = default(bool?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string modelDescription = default(string), Guid? modelId = default(Guid?), string modelName = default(string), double? modelWeight = default(double?), double? secPrice = default(double?), string secondaryId = default(string), Guid? securityId = default(Guid?), double? strategicWeight = default(double?), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "currentWeight" is required (not null)
            if (currentWeight == null)
            {
                throw new InvalidDataException("currentWeight is a required property for ModelHolding and cannot be null");
            }
            else
            {
                this.CurrentWeight = currentWeight;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for ModelHolding and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "modelId" is required (not null)
            if (modelId == null)
            {
                throw new InvalidDataException("modelId is a required property for ModelHolding and cannot be null");
            }
            else
            {
                this.ModelId = modelId;
            }
            // to ensure "securityId" is required (not null)
            if (securityId == null)
            {
                throw new InvalidDataException("securityId is a required property for ModelHolding and cannot be null");
            }
            else
            {
                this.SecurityId = securityId;
            }
            // to ensure "strategicWeight" is required (not null)
            if (strategicWeight == null)
            {
                throw new InvalidDataException("strategicWeight is a required property for ModelHolding and cannot be null");
            }
            else
            {
                this.StrategicWeight = strategicWeight;
            }
            this.CreateDate = createDate;
            this.DriftFactor = driftFactor;
            this.Id = id;
            this.IsCash = isCash;
            this.IsInitialHolding = isInitialHolding;
            this.IsSafeSecurity = isSafeSecurity;
            this.Metadata = metadata;
            this.ModelDescription = modelDescription;
            this.ModelName = modelName;
            this.ModelWeight = modelWeight;
            this.SecPrice = secPrice;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Model Holding current weight
        /// </summary>
        /// <value>Model Holding current weight</value>
        [DataMember(Name="current_weight", EmitDefaultValue=false)]
        public double? CurrentWeight { get; set; }

        /// <summary>
        /// Model Holding date
        /// </summary>
        /// <value>Model Holding date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// driftFactor
        /// </summary>
        /// <value>driftFactor</value>
        [DataMember(Name="drift_factor", EmitDefaultValue=false)]
        public float? DriftFactor { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// isCash
        /// </summary>
        /// <value>isCash</value>
        [DataMember(Name="is_cash", EmitDefaultValue=false)]
        public bool? IsCash { get; set; }

        /// <summary>
        /// isInitialHolding
        /// </summary>
        /// <value>isInitialHolding</value>
        [DataMember(Name="is_initial_holding", EmitDefaultValue=false)]
        public bool? IsInitialHolding { get; set; }

        /// <summary>
        /// isSafeSecurity
        /// </summary>
        /// <value>isSafeSecurity</value>
        [DataMember(Name="is_safe_security", EmitDefaultValue=false)]
        public bool? IsSafeSecurity { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets ModelDescription
        /// </summary>
        [DataMember(Name="model_description", EmitDefaultValue=false)]
        public string ModelDescription { get; set; }

        /// <summary>
        /// modelId
        /// </summary>
        /// <value>modelId</value>
        [DataMember(Name="model_id", EmitDefaultValue=false)]
        public Guid? ModelId { get; set; }

        /// <summary>
        /// Gets or Sets ModelName
        /// </summary>
        [DataMember(Name="model_name", EmitDefaultValue=false)]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or Sets ModelWeight
        /// </summary>
        [DataMember(Name="model_weight", EmitDefaultValue=false)]
        public double? ModelWeight { get; set; }

        /// <summary>
        /// Gets or Sets SecPrice
        /// </summary>
        [DataMember(Name="sec_price", EmitDefaultValue=false)]
        public double? SecPrice { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// securityId
        /// </summary>
        /// <value>securityId</value>
        [DataMember(Name="security_id", EmitDefaultValue=false)]
        public Guid? SecurityId { get; set; }

        /// <summary>
        /// Model Holding strategicWeight
        /// </summary>
        /// <value>Model Holding strategicWeight</value>
        [DataMember(Name="strategic_weight", EmitDefaultValue=false)]
        public double? StrategicWeight { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelHolding {\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrentWeight: ").Append(CurrentWeight).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DriftFactor: ").Append(DriftFactor).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCash: ").Append(IsCash).Append("\n");
            sb.Append("  IsInitialHolding: ").Append(IsInitialHolding).Append("\n");
            sb.Append("  IsSafeSecurity: ").Append(IsSafeSecurity).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ModelDescription: ").Append(ModelDescription).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  ModelWeight: ").Append(ModelWeight).Append("\n");
            sb.Append("  SecPrice: ").Append(SecPrice).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  StrategicWeight: ").Append(StrategicWeight).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelHolding);
        }

        /// <summary>
        /// Returns true if ModelHolding instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelHolding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelHolding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrentWeight == input.CurrentWeight ||
                    (this.CurrentWeight != null &&
                    this.CurrentWeight.Equals(input.CurrentWeight))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DriftFactor == input.DriftFactor ||
                    (this.DriftFactor != null &&
                    this.DriftFactor.Equals(input.DriftFactor))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsCash == input.IsCash ||
                    (this.IsCash != null &&
                    this.IsCash.Equals(input.IsCash))
                ) && 
                (
                    this.IsInitialHolding == input.IsInitialHolding ||
                    (this.IsInitialHolding != null &&
                    this.IsInitialHolding.Equals(input.IsInitialHolding))
                ) && 
                (
                    this.IsSafeSecurity == input.IsSafeSecurity ||
                    (this.IsSafeSecurity != null &&
                    this.IsSafeSecurity.Equals(input.IsSafeSecurity))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.ModelDescription == input.ModelDescription ||
                    (this.ModelDescription != null &&
                    this.ModelDescription.Equals(input.ModelDescription))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.ModelWeight == input.ModelWeight ||
                    (this.ModelWeight != null &&
                    this.ModelWeight.Equals(input.ModelWeight))
                ) && 
                (
                    this.SecPrice == input.SecPrice ||
                    (this.SecPrice != null &&
                    this.SecPrice.Equals(input.SecPrice))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.StrategicWeight == input.StrategicWeight ||
                    (this.StrategicWeight != null &&
                    this.StrategicWeight.Equals(input.StrategicWeight))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrentWeight != null)
                    hashCode = hashCode * 59 + this.CurrentWeight.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.DriftFactor != null)
                    hashCode = hashCode * 59 + this.DriftFactor.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsCash != null)
                    hashCode = hashCode * 59 + this.IsCash.GetHashCode();
                if (this.IsInitialHolding != null)
                    hashCode = hashCode * 59 + this.IsInitialHolding.GetHashCode();
                if (this.IsSafeSecurity != null)
                    hashCode = hashCode * 59 + this.IsSafeSecurity.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.ModelDescription != null)
                    hashCode = hashCode * 59 + this.ModelDescription.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.ModelWeight != null)
                    hashCode = hashCode * 59 + this.ModelWeight.GetHashCode();
                if (this.SecPrice != null)
                    hashCode = hashCode * 59 + this.SecPrice.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.SecurityId != null)
                    hashCode = hashCode * 59 + this.SecurityId.GetHashCode();
                if (this.StrategicWeight != null)
                    hashCode = hashCode * 59 + this.StrategicWeight.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
