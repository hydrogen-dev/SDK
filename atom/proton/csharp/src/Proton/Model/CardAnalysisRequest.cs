/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// CardAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class CardAnalysisRequest :  IEquatable<CardAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines HistoryFrequencyInterval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HistoryFrequencyIntervalEnum
        {
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 4,
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 5
        }

        /// <summary>
        /// Gets or Sets HistoryFrequencyInterval
        /// </summary>
        [DataMember(Name="history_frequency_interval", EmitDefaultValue=false)]
        public HistoryFrequencyIntervalEnum? HistoryFrequencyInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardAnalysisRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="showHistory">showHistory (default to false).</param>
        /// <param name="responseLimit">responseLimit (default to 10).</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="historyFrequencyInterval">historyFrequencyInterval (default to HistoryFrequencyIntervalEnum.Month).</param>
        /// <param name="showTopCards">showTopCards (default to false).</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="businessId">businessId.</param>
        /// <param name="transactionStatusScope">transactionStatusScope.</param>
        /// <param name="cardStatusScope">cardStatusScope.</param>
        /// <param name="showTopCardholders">showTopCardholders (default to false).</param>
        /// <param name="cardProgramId">cardProgramId.</param>
        /// <param name="showTopBusinesses">showTopBusinesses (default to false).</param>
        public CardAnalysisRequest(string currencyCode = default(string), Guid? clientId = default(Guid?), bool? showHistory = false, int? responseLimit = 10, string currencyConversion = default(string), DateTime? endDate = default(DateTime?), HistoryFrequencyIntervalEnum? historyFrequencyInterval = HistoryFrequencyIntervalEnum.Month, bool? showTopCards = false, DateTime? startDate = default(DateTime?), Guid? businessId = default(Guid?), List<string> transactionStatusScope = default(List<string>), List<string> cardStatusScope = default(List<string>), bool? showTopCardholders = false, Guid? cardProgramId = default(Guid?), bool? showTopBusinesses = false)
        {
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "showHistory" provided
            if (showHistory == null)
            {
                this.ShowHistory = false;
            }
            else
            {
                this.ShowHistory = showHistory;
            }
            // use default value if no "responseLimit" provided
            if (responseLimit == null)
            {
                this.ResponseLimit = 10;
            }
            else
            {
                this.ResponseLimit = responseLimit;
            }
            this.CurrencyConversion = currencyConversion;
            this.EndDate = endDate;
            // use default value if no "historyFrequencyInterval" provided
            if (historyFrequencyInterval == null)
            {
                this.HistoryFrequencyInterval = HistoryFrequencyIntervalEnum.Month;
            }
            else
            {
                this.HistoryFrequencyInterval = historyFrequencyInterval;
            }
            // use default value if no "showTopCards" provided
            if (showTopCards == null)
            {
                this.ShowTopCards = false;
            }
            else
            {
                this.ShowTopCards = showTopCards;
            }
            this.StartDate = startDate;
            this.BusinessId = businessId;
            this.TransactionStatusScope = transactionStatusScope;
            this.CardStatusScope = cardStatusScope;
            // use default value if no "showTopCardholders" provided
            if (showTopCardholders == null)
            {
                this.ShowTopCardholders = false;
            }
            else
            {
                this.ShowTopCardholders = showTopCardholders;
            }
            this.CardProgramId = cardProgramId;
            // use default value if no "showTopBusinesses" provided
            if (showTopBusinesses == null)
            {
                this.ShowTopBusinesses = false;
            }
            else
            {
                this.ShowTopBusinesses = showTopBusinesses;
            }
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ShowHistory
        /// </summary>
        [DataMember(Name="show_history", EmitDefaultValue=false)]
        public bool? ShowHistory { get; set; }

        /// <summary>
        /// Gets or Sets ResponseLimit
        /// </summary>
        [DataMember(Name="response_limit", EmitDefaultValue=false)]
        public int? ResponseLimit { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }


        /// <summary>
        /// Gets or Sets ShowTopCards
        /// </summary>
        [DataMember(Name="show_top_cards", EmitDefaultValue=false)]
        public bool? ShowTopCards { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets BusinessId
        /// </summary>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusScope
        /// </summary>
        [DataMember(Name="transaction_status_scope", EmitDefaultValue=false)]
        public List<string> TransactionStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets CardStatusScope
        /// </summary>
        [DataMember(Name="card_status_scope", EmitDefaultValue=false)]
        public List<string> CardStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets ShowTopCardholders
        /// </summary>
        [DataMember(Name="show_top_cardholders", EmitDefaultValue=false)]
        public bool? ShowTopCardholders { get; set; }

        /// <summary>
        /// Gets or Sets CardProgramId
        /// </summary>
        [DataMember(Name="card_program_id", EmitDefaultValue=false)]
        public Guid? CardProgramId { get; set; }

        /// <summary>
        /// Gets or Sets ShowTopBusinesses
        /// </summary>
        [DataMember(Name="show_top_businesses", EmitDefaultValue=false)]
        public bool? ShowTopBusinesses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardAnalysisRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ShowHistory: ").Append(ShowHistory).Append("\n");
            sb.Append("  ResponseLimit: ").Append(ResponseLimit).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HistoryFrequencyInterval: ").Append(HistoryFrequencyInterval).Append("\n");
            sb.Append("  ShowTopCards: ").Append(ShowTopCards).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  TransactionStatusScope: ").Append(TransactionStatusScope).Append("\n");
            sb.Append("  CardStatusScope: ").Append(CardStatusScope).Append("\n");
            sb.Append("  ShowTopCardholders: ").Append(ShowTopCardholders).Append("\n");
            sb.Append("  CardProgramId: ").Append(CardProgramId).Append("\n");
            sb.Append("  ShowTopBusinesses: ").Append(ShowTopBusinesses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardAnalysisRequest);
        }

        /// <summary>
        /// Returns true if CardAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CardAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ShowHistory == input.ShowHistory ||
                    (this.ShowHistory != null &&
                    this.ShowHistory.Equals(input.ShowHistory))
                ) && 
                (
                    this.ResponseLimit == input.ResponseLimit ||
                    (this.ResponseLimit != null &&
                    this.ResponseLimit.Equals(input.ResponseLimit))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.HistoryFrequencyInterval == input.HistoryFrequencyInterval ||
                    (this.HistoryFrequencyInterval != null &&
                    this.HistoryFrequencyInterval.Equals(input.HistoryFrequencyInterval))
                ) && 
                (
                    this.ShowTopCards == input.ShowTopCards ||
                    (this.ShowTopCards != null &&
                    this.ShowTopCards.Equals(input.ShowTopCards))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.TransactionStatusScope == input.TransactionStatusScope ||
                    this.TransactionStatusScope != null &&
                    this.TransactionStatusScope.SequenceEqual(input.TransactionStatusScope)
                ) && 
                (
                    this.CardStatusScope == input.CardStatusScope ||
                    this.CardStatusScope != null &&
                    this.CardStatusScope.SequenceEqual(input.CardStatusScope)
                ) && 
                (
                    this.ShowTopCardholders == input.ShowTopCardholders ||
                    (this.ShowTopCardholders != null &&
                    this.ShowTopCardholders.Equals(input.ShowTopCardholders))
                ) && 
                (
                    this.CardProgramId == input.CardProgramId ||
                    (this.CardProgramId != null &&
                    this.CardProgramId.Equals(input.CardProgramId))
                ) && 
                (
                    this.ShowTopBusinesses == input.ShowTopBusinesses ||
                    (this.ShowTopBusinesses != null &&
                    this.ShowTopBusinesses.Equals(input.ShowTopBusinesses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ShowHistory != null)
                    hashCode = hashCode * 59 + this.ShowHistory.GetHashCode();
                if (this.ResponseLimit != null)
                    hashCode = hashCode * 59 + this.ResponseLimit.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.HistoryFrequencyInterval != null)
                    hashCode = hashCode * 59 + this.HistoryFrequencyInterval.GetHashCode();
                if (this.ShowTopCards != null)
                    hashCode = hashCode * 59 + this.ShowTopCards.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.TransactionStatusScope != null)
                    hashCode = hashCode * 59 + this.TransactionStatusScope.GetHashCode();
                if (this.CardStatusScope != null)
                    hashCode = hashCode * 59 + this.CardStatusScope.GetHashCode();
                if (this.ShowTopCardholders != null)
                    hashCode = hashCode * 59 + this.ShowTopCardholders.GetHashCode();
                if (this.CardProgramId != null)
                    hashCode = hashCode * 59 + this.CardProgramId.GetHashCode();
                if (this.ShowTopBusinesses != null)
                    hashCode = hashCode * 59 + this.ShowTopBusinesses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ResponseLimit (int?) minimum
            if(this.ResponseLimit < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseLimit, must be a value greater than or equal to 1.", new [] { "ResponseLimit" });
            }

            yield break;
        }
    }

}
