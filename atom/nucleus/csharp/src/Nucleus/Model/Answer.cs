/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Answer
    /// </summary>
    [DataContract]
    public partial class Answer :  IEquatable<Answer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Answer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Answer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Answer" /> class.
        /// </summary>
        /// <param name="createDate">createDate.</param>
        /// <param name="id">id.</param>
        /// <param name="image">image.</param>
        /// <param name="isDefault">isDefault.</param>
        /// <param name="label">label.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="orderIndex">orderIndex.</param>
        /// <param name="question">question.</param>
        /// <param name="questionId">questionId.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="tooltip">tooltip.</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="value">value (required).</param>
        /// <param name="weight">weight.</param>
        public Answer(DateTime? createDate = default(DateTime?), Guid? id = default(Guid?), string image = default(string), bool? isDefault = default(bool?), string label = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string orderIndex = default(string), Question question = default(Question), Guid? questionId = default(Guid?), string secondaryId = default(string), string tooltip = default(string), DateTime? updateDate = default(DateTime?), string value = default(string), double? weight = default(double?))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for Answer and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            this.CreateDate = createDate;
            this.Id = id;
            this.Image = image;
            this.IsDefault = isDefault;
            this.Label = label;
            this.Metadata = metadata;
            this.OrderIndex = orderIndex;
            this.Question = question;
            this.QuestionId = questionId;
            this.SecondaryId = secondaryId;
            this.Tooltip = tooltip;
            this.UpdateDate = updateDate;
            this.Weight = weight;
        }
        
        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// image
        /// </summary>
        /// <value>image</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// isDefault
        /// </summary>
        /// <value>isDefault</value>
        [DataMember(Name="is_default", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// label
        /// </summary>
        /// <value>label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// metadata
        /// </summary>
        /// <value>metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// orderIndex
        /// </summary>
        /// <value>orderIndex</value>
        [DataMember(Name="order_index", EmitDefaultValue=false)]
        public string OrderIndex { get; set; }

        /// <summary>
        /// Gets or Sets Question
        /// </summary>
        [DataMember(Name="question", EmitDefaultValue=false)]
        public Question Question { get; set; }

        /// <summary>
        /// questionId
        /// </summary>
        /// <value>questionId</value>
        [DataMember(Name="question_id", EmitDefaultValue=false)]
        public Guid? QuestionId { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets Tooltip
        /// </summary>
        [DataMember(Name="tooltip", EmitDefaultValue=false)]
        public string Tooltip { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// value
        /// </summary>
        /// <value>value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// weight
        /// </summary>
        /// <value>weight</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Answer {\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OrderIndex: ").Append(OrderIndex).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  QuestionId: ").Append(QuestionId).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Answer);
        }

        /// <summary>
        /// Returns true if Answer instances are equal
        /// </summary>
        /// <param name="input">Instance of Answer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Answer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault != null &&
                    this.IsDefault.Equals(input.IsDefault))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.OrderIndex == input.OrderIndex ||
                    (this.OrderIndex != null &&
                    this.OrderIndex.Equals(input.OrderIndex))
                ) && 
                (
                    this.Question == input.Question ||
                    (this.Question != null &&
                    this.Question.Equals(input.Question))
                ) && 
                (
                    this.QuestionId == input.QuestionId ||
                    (this.QuestionId != null &&
                    this.QuestionId.Equals(input.QuestionId))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Tooltip == input.Tooltip ||
                    (this.Tooltip != null &&
                    this.Tooltip.Equals(input.Tooltip))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.IsDefault != null)
                    hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.OrderIndex != null)
                    hashCode = hashCode * 59 + this.OrderIndex.GetHashCode();
                if (this.Question != null)
                    hashCode = hashCode * 59 + this.Question.GetHashCode();
                if (this.QuestionId != null)
                    hashCode = hashCode * 59 + this.QuestionId.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Tooltip != null)
                    hashCode = hashCode * 59 + this.Tooltip.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
