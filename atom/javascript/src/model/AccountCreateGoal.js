/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.AccountCreateGoal = factory(root.atom_api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The AccountCreateGoal model module.
   * @module model/AccountCreateGoal
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>AccountCreateGoal</code>.
   * @alias module:model/AccountCreateGoal
   * @class
   * @param goalId {String} The ID of a goal mapped to the account
   */
  var exports = function(goalId) {
    var _this = this;

    _this['goal_id'] = goalId;



  };

  /**
   * Constructs a <code>AccountCreateGoal</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountCreateGoal} obj Optional instance to populate.
   * @return {module:model/AccountCreateGoal} The populated <code>AccountCreateGoal</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('goal_id')) {
        obj['goal_id'] = ApiClient.convertToType(data['goal_id'], 'String');
      }
      if (data.hasOwnProperty('goal_amount')) {
        obj['goal_amount'] = ApiClient.convertToType(data['goal_amount'], 'Number');
      }
      if (data.hasOwnProperty('accumulation_horizon')) {
        obj['accumulation_horizon'] = ApiClient.convertToType(data['accumulation_horizon'], 'Number');
      }
      if (data.hasOwnProperty('decumulation_horizon')) {
        obj['decumulation_horizon'] = ApiClient.convertToType(data['decumulation_horizon'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The ID of a goal mapped to the account
   * @member {String} goal_id
   */
  exports.prototype['goal_id'] = undefined;
  /**
   * Monetary amount provided by the client as the target amount to be reached within the goal horizon. May be used in conjunction with the Proton API. Option to also store under the goal entity
   * @member {Number} goal_amount
   */
  exports.prototype['goal_amount'] = undefined;
  /**
   * Time horizon of the goal during the accumulation phase, in years. May be used in conjunction with the Proton API. Option to also store under the goal entity
   * @member {Number} accumulation_horizon
   */
  exports.prototype['accumulation_horizon'] = undefined;
  /**
   * Time horizon of the goal during the decumulation phase, in years. If the goal is an accumulation goal, then this can be 0 or omitted entirely. May be used in conjunction with the Proton API. Option to also store under the goal entity
   * @member {Number} decumulation_horizon
   */
  exports.prototype['decumulation_horizon'] = undefined;



  return exports;
}));


