/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// ClientResponse Object
    /// </summary>
    [DataContract]
    public partial class ClientResponse :  IEquatable<ClientResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClientResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientResponse" /> class.
        /// </summary>
        /// <param name="accountId">account_id.</param>
        /// <param name="answerId">answerId (required).</param>
        /// <param name="answerValue">answerValue (required).</param>
        /// <param name="applicationId">application_id.</param>
        /// <param name="clientId">client_id.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="id">id.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="updateDate">updateDate.</param>
        public ClientResponse(Guid? accountId = default(Guid?), Guid? answerId = default(Guid?), string answerValue = default(string), string applicationId = default(string), Guid? clientId = default(Guid?), DateTime? createDate = default(DateTime?), Guid? id = default(Guid?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string secondaryId = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "answerId" is required (not null)
            if (answerId == null)
            {
                throw new InvalidDataException("answerId is a required property for ClientResponse and cannot be null");
            }
            else
            {
                this.AnswerId = answerId;
            }
            // to ensure "answerValue" is required (not null)
            if (answerValue == null)
            {
                throw new InvalidDataException("answerValue is a required property for ClientResponse and cannot be null");
            }
            else
            {
                this.AnswerValue = answerValue;
            }
            this.AccountId = accountId;
            this.ApplicationId = applicationId;
            this.ClientId = clientId;
            this.CreateDate = createDate;
            this.Id = id;
            this.Metadata = metadata;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// account_id
        /// </summary>
        /// <value>account_id</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// answerId
        /// </summary>
        /// <value>answerId</value>
        [DataMember(Name="answer_id", EmitDefaultValue=false)]
        public Guid? AnswerId { get; set; }

        /// <summary>
        /// answerValue
        /// </summary>
        /// <value>answerValue</value>
        [DataMember(Name="answer_value", EmitDefaultValue=false)]
        public string AnswerValue { get; set; }

        /// <summary>
        /// application_id
        /// </summary>
        /// <value>application_id</value>
        [DataMember(Name="application_id", EmitDefaultValue=false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// client_id
        /// </summary>
        /// <value>client_id</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientResponse {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AnswerId: ").Append(AnswerId).Append("\n");
            sb.Append("  AnswerValue: ").Append(AnswerValue).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientResponse);
        }

        /// <summary>
        /// Returns true if ClientResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AnswerId == input.AnswerId ||
                    (this.AnswerId != null &&
                    this.AnswerId.Equals(input.AnswerId))
                ) && 
                (
                    this.AnswerValue == input.AnswerValue ||
                    (this.AnswerValue != null &&
                    this.AnswerValue.Equals(input.AnswerValue))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AnswerId != null)
                    hashCode = hashCode * 59 + this.AnswerId.GetHashCode();
                if (this.AnswerValue != null)
                    hashCode = hashCode * 59 + this.AnswerValue.GetHashCode();
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
