/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BankLink', 'model/ExternalAccountTransfer', 'model/Funding', 'model/FundingTransaction', 'model/PageBankLink', 'model/PageExternalAccountTransfer', 'model/PageFunding', 'model/PageFundingTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BankLink'), require('../model/ExternalAccountTransfer'), require('../model/Funding'), require('../model/FundingTransaction'), require('../model/PageBankLink'), require('../model/PageExternalAccountTransfer'), require('../model/PageFunding'), require('../model/PageFundingTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.FundingApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.BankLink, root.HydrogenNucleusApi.ExternalAccountTransfer, root.HydrogenNucleusApi.Funding, root.HydrogenNucleusApi.FundingTransaction, root.HydrogenNucleusApi.PageBankLink, root.HydrogenNucleusApi.PageExternalAccountTransfer, root.HydrogenNucleusApi.PageFunding, root.HydrogenNucleusApi.PageFundingTransaction);
  }
}(this, function(ApiClient, BankLink, ExternalAccountTransfer, Funding, FundingTransaction, PageBankLink, PageExternalAccountTransfer, PageFunding, PageFundingTransaction) {
  'use strict';

  /**
   * Funding service.
   * @module api/FundingApi
   * @version 1.9.5
   */

  /**
   * Constructs a new FundingApi. 
   * @alias module:api/FundingApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBankLinkUsingPost operation.
     * @callback module:api/FundingApi~createBankLinkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank link
     * Create a new bank link for an account.
     * @param {module:model/BankLink} bankLinkInfoRequest bankLinkInfoRequest
     * @param {module:api/FundingApi~createBankLinkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankLink}
     */
    this.createBankLinkUsingPost = function(bankLinkInfoRequest, callback) {
      var postBody = bankLinkInfoRequest;

      // verify the required parameter 'bankLinkInfoRequest' is set
      if (bankLinkInfoRequest === undefined || bankLinkInfoRequest === null) {
        throw new Error("Missing the required parameter 'bankLinkInfoRequest' when calling createBankLinkUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BankLink;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFundingTransactionUsingPost operation.
     * @callback module:api/FundingApi~createFundingTransactionUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FundingTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a funding transaction request
     * Create a new funding transaction request for an account.
     * @param {module:model/FundingTransaction} fundingTransactionRequest fundingTransactionRequest
     * @param {module:api/FundingApi~createFundingTransactionUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FundingTransaction}
     */
    this.createFundingTransactionUsingPost = function(fundingTransactionRequest, callback) {
      var postBody = fundingTransactionRequest;

      // verify the required parameter 'fundingTransactionRequest' is set
      if (fundingTransactionRequest === undefined || fundingTransactionRequest === null) {
        throw new Error("Missing the required parameter 'fundingTransactionRequest' when calling createFundingTransactionUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FundingTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/funding_transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFundingUsingPost operation.
     * @callback module:api/FundingApi~createFundingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Funding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a funding request
     * Create a new funding request for an account. 
     * @param {module:model/Funding} fundingRequest fundingRequest
     * @param {module:api/FundingApi~createFundingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Funding}
     */
    this.createFundingUsingPost = function(fundingRequest, callback) {
      var postBody = fundingRequest;

      // verify the required parameter 'fundingRequest' is set
      if (fundingRequest === undefined || fundingRequest === null) {
        throw new Error("Missing the required parameter 'fundingRequest' when calling createFundingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Funding;

      return this.apiClient.callApi(
        '/nucleus/v1/funding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransferUsingPost operation.
     * @callback module:api/FundingApi~createTransferUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transfer requests
     * Create a new external account transfer for a client account.
     * @param {module:model/ExternalAccountTransfer} externalAccountTransferRequest externalAccountTransferRequest
     * @param {module:api/FundingApi~createTransferUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountTransfer}
     */
    this.createTransferUsingPost = function(externalAccountTransferRequest, callback) {
      var postBody = externalAccountTransferRequest;

      // verify the required parameter 'externalAccountTransferRequest' is set
      if (externalAccountTransferRequest === undefined || externalAccountTransferRequest === null) {
        throw new Error("Missing the required parameter 'externalAccountTransferRequest' when calling createTransferUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ExternalAccountTransfer;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankLinkUsingDelete operation.
     * @callback module:api/FundingApi~deleteBankLinkUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a bank link
     * Permanently delete a bank link defined for an account.
     * @param {String} bankLinkId UUID bank_link_id
     * @param {module:api/FundingApi~deleteBankLinkUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBankLinkUsingDelete = function(bankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling deleteBankLinkUsingDelete");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link/{bank_link_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFundingTransactionUsingDelete operation.
     * @callback module:api/FundingApi~deleteFundingTransactionUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a funding transaction request
     * Permanently delete a funding transaction request for an account.
     * @param {String} fundingTransactionId UUID funding_transaction_id
     * @param {module:api/FundingApi~deleteFundingTransactionUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFundingTransactionUsingDelete = function(fundingTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'fundingTransactionId' is set
      if (fundingTransactionId === undefined || fundingTransactionId === null) {
        throw new Error("Missing the required parameter 'fundingTransactionId' when calling deleteFundingTransactionUsingDelete");
      }


      var pathParams = {
        'funding_transaction_id': fundingTransactionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/funding_transaction/{funding_transaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFundingUsingDelete operation.
     * @callback module:api/FundingApi~deleteFundingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a funding request
     * Permanently delete a funding request defined for an account.
     * @param {String} fundingId UUID funding_id
     * @param {module:api/FundingApi~deleteFundingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFundingUsingDelete = function(fundingId, callback) {
      var postBody = null;

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling deleteFundingUsingDelete");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/funding/{funding_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransferUsingDelete operation.
     * @callback module:api/FundingApi~deleteTransferUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transfer request
     * Permanently delete a external account transfer from a client account.
     * @param {String} transferId UUID external_account_transfer_id
     * @param {module:api/FundingApi~deleteTransferUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransferUsingDelete = function(transferId, callback) {
      var postBody = null;

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling deleteTransferUsingDelete");
      }


      var pathParams = {
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer/{transfer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankLinkAllUsingGet operation.
     * @callback module:api/FundingApi~getBankLinkAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all bank links
     * Get all bank links defined for all clients defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getBankLinkAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBankLink}
     */
    this.getBankLinkAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageBankLink;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankLinkUsingGet operation.
     * @callback module:api/FundingApi~getBankLinkUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a bank link
     * Retrieve the information for a bank link for an account.
     * @param {String} bankLinkId UUID bank_link_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/FundingApi~getBankLinkUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankLink}
     */
    this.getBankLinkUsingGet = function(bankLinkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling getBankLinkUsingGet");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = BankLink;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link/{bank_link_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingAllUsingGet operation.
     * @callback module:api/FundingApi~getFundingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageFunding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all funding requests 
     * Get the information for all funding requests defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getFundingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageFunding}
     */
    this.getFundingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageFunding;

      return this.apiClient.callApi(
        '/nucleus/v1/funding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingTransactionAllUsingGet operation.
     * @callback module:api/FundingApi~getFundingTransactionAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageFundingTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all funding transaction requests
     * Get the information for all funding transaction requests for all clients.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getFundingTransactionAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageFundingTransaction}
     */
    this.getFundingTransactionAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageFundingTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/funding_transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingTransactionUsingGet operation.
     * @callback module:api/FundingApi~getFundingTransactionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FundingTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a funding transaction request
     * Retrieve the information for a funding transaction request for an account.
     * @param {String} fundingTransactionId UUID funding_transaction_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/FundingApi~getFundingTransactionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FundingTransaction}
     */
    this.getFundingTransactionUsingGet = function(fundingTransactionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fundingTransactionId' is set
      if (fundingTransactionId === undefined || fundingTransactionId === null) {
        throw new Error("Missing the required parameter 'fundingTransactionId' when calling getFundingTransactionUsingGet");
      }


      var pathParams = {
        'funding_transaction_id': fundingTransactionId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = FundingTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/funding_transaction/{funding_transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingUsingGet operation.
     * @callback module:api/FundingApi~getFundingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Funding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a funding request
     * Retrieve the information for a funding request for an account.
     * @param {String} fundingId UUID funding_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/FundingApi~getFundingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Funding}
     */
    this.getFundingUsingGet = function(fundingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling getFundingUsingGet");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Funding;

      return this.apiClient.callApi(
        '/nucleus/v1/funding/{funding_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferAllUsingGet operation.
     * @callback module:api/FundingApi~getTransferAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all transfer requests
     * Get the information for all external account transfers defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/FundingApi~getTransferAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageExternalAccountTransfer}
     */
    this.getTransferAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageExternalAccountTransfer;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferUsingGet operation.
     * @callback module:api/FundingApi~getTransferUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transfer request
     * Retrieve the information for a external account transfer for an account.
     * @param {String} transferId UUID external_account_transfer_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/FundingApi~getTransferUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountTransfer}
     */
    this.getTransferUsingGet = function(transferId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling getTransferUsingGet");
      }


      var pathParams = {
        'transfer_id': transferId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ExternalAccountTransfer;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer/{transfer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankLinkBulkUsingPut operation.
     * @callback module:api/FundingApi~updateBankLinkBulkUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BankLink>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update list of bank link
     * Update bank link list for an account.
     * @param {Array.<module:model/BankLink>} bankLinkList bankLinkList
     * @param {module:api/FundingApi~updateBankLinkBulkUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BankLink>}
     */
    this.updateBankLinkBulkUsingPut = function(bankLinkList, callback) {
      var postBody = bankLinkList;

      // verify the required parameter 'bankLinkList' is set
      if (bankLinkList === undefined || bankLinkList === null) {
        throw new Error("Missing the required parameter 'bankLinkList' when calling updateBankLinkBulkUsingPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [BankLink];

      return this.apiClient.callApi(
        '/nucleus/v1/bulk_bank_link', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankLinkUsingPut operation.
     * @callback module:api/FundingApi~updateBankLinkUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bank link
     * Update the information for a bank link for an account.
     * @param {module:model/BankLink} bankLink bank_link
     * @param {String} bankLinkId UUID bank_link_id
     * @param {module:api/FundingApi~updateBankLinkUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankLink}
     */
    this.updateBankLinkUsingPut = function(bankLink, bankLinkId, callback) {
      var postBody = bankLink;

      // verify the required parameter 'bankLink' is set
      if (bankLink === undefined || bankLink === null) {
        throw new Error("Missing the required parameter 'bankLink' when calling updateBankLinkUsingPut");
      }

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling updateBankLinkUsingPut");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = BankLink;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link/{bank_link_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFundingTransactionUsingPut operation.
     * @callback module:api/FundingApi~updateFundingTransactionUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FundingTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a funding transaction request
     * Update the information for a funding transaction request for an account.
     * @param {module:model/FundingTransaction} fundingTransaction fundingTransaction
     * @param {String} fundingTransactionId UUID funding_transaction_id
     * @param {module:api/FundingApi~updateFundingTransactionUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FundingTransaction}
     */
    this.updateFundingTransactionUsingPut = function(fundingTransaction, fundingTransactionId, callback) {
      var postBody = fundingTransaction;

      // verify the required parameter 'fundingTransaction' is set
      if (fundingTransaction === undefined || fundingTransaction === null) {
        throw new Error("Missing the required parameter 'fundingTransaction' when calling updateFundingTransactionUsingPut");
      }

      // verify the required parameter 'fundingTransactionId' is set
      if (fundingTransactionId === undefined || fundingTransactionId === null) {
        throw new Error("Missing the required parameter 'fundingTransactionId' when calling updateFundingTransactionUsingPut");
      }


      var pathParams = {
        'funding_transaction_id': fundingTransactionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = FundingTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/funding_transaction/{funding_transaction_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFundingUsingPut operation.
     * @callback module:api/FundingApi~updateFundingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Funding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a funding request
     * Update the information for a funding request for an account.
     * @param {module:model/Funding} funding funding
     * @param {String} fundingId UUID funding_id
     * @param {module:api/FundingApi~updateFundingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Funding}
     */
    this.updateFundingUsingPut = function(funding, fundingId, callback) {
      var postBody = funding;

      // verify the required parameter 'funding' is set
      if (funding === undefined || funding === null) {
        throw new Error("Missing the required parameter 'funding' when calling updateFundingUsingPut");
      }

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling updateFundingUsingPut");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Funding;

      return this.apiClient.callApi(
        '/nucleus/v1/funding/{funding_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransferUsingPut operation.
     * @callback module:api/FundingApi~updateTransferUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountTransfer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transfer request
     * Update the information for a external account transfer for a client account. 
     * @param {module:model/ExternalAccountTransfer} transfer transfer
     * @param {String} transferId UUID external_account_transfer_id
     * @param {module:api/FundingApi~updateTransferUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountTransfer}
     */
    this.updateTransferUsingPut = function(transfer, transferId, callback) {
      var postBody = transfer;

      // verify the required parameter 'transfer' is set
      if (transfer === undefined || transfer === null) {
        throw new Error("Missing the required parameter 'transfer' when calling updateTransferUsingPut");
      }

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling updateTransferUsingPut");
      }


      var pathParams = {
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ExternalAccountTransfer;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer/{transfer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
