=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'date'

module AtomApi
  class SpecificCampaignResponse
    # ID of the marketing campaign
    attr_accessor :id

    # Datetime the marketing campaign was created
    attr_accessor :create_date

    # Title of the campaign
    attr_accessor :title

    # Description of the campaign such as its purpose
    attr_accessor :description

    # Date that the marketing campaign begins
    attr_accessor :start_date

    # Date that the marketing campaign ends
    attr_accessor :end_date

    # Indicates if the campaign is an acquisition campaign, such as affiliate. Defaults to false meaning it is not an acquisition campaign
    attr_accessor :is_acquisition

    # The category assigned to the campaign
    attr_accessor :campaign_category

    # The ID of a campaign plan associated with a campaign
    attr_accessor :campaign_plan_id

    # Cookie code associated with the campaign used for tracking purposes
    attr_accessor :cookie_code

    # Indicates if the campaign is currently active. Defaults to true which indicates that it is active
    attr_accessor :is_active

    # Name for the landing page of the campaign
    attr_accessor :landing_page

    # Rate of client/user registration for the campaign
    attr_accessor :rate

    # Name of an Urchin Tracking Module (UTM) for a marketing feature used in the campaign
    attr_accessor :utm_campaign

    # Content of an Urchin Tracking Module (UTM) for a marketing campaign feature used in the campaign. For example, content in a site banner
    attr_accessor :utm_content

    # Platform of an Urchin Tracking Module (UTM) for a marketing campaign feature such as Social Media
    attr_accessor :utm_medium

    # Feature Urchin Tracking Module (UTM) for a marketing campaign such as a banner advertisement
    attr_accessor :utm_source

    # Term of an Urchin Tracking Module (UTM) for a marketing campaign
    attr_accessor :utm_term

    attr_accessor :secondary_id

    # Datetime the marketing campaign was last updated
    attr_accessor :update_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'create_date' => :'create_date',
        :'title' => :'title',
        :'description' => :'description',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'is_acquisition' => :'is_acquisition',
        :'campaign_category' => :'campaign_category',
        :'campaign_plan_id' => :'campaign_plan_id',
        :'cookie_code' => :'cookie_code',
        :'is_active' => :'is_active',
        :'landing_page' => :'landing_page',
        :'rate' => :'rate',
        :'utm_campaign' => :'utm_campaign',
        :'utm_content' => :'utm_content',
        :'utm_medium' => :'utm_medium',
        :'utm_source' => :'utm_source',
        :'utm_term' => :'utm_term',
        :'secondary_id' => :'secondary_id',
        :'update_date' => :'update_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'create_date' => :'String',
        :'title' => :'String',
        :'description' => :'String',
        :'start_date' => :'Date',
        :'end_date' => :'Date',
        :'is_acquisition' => :'BOOLEAN',
        :'campaign_category' => :'String',
        :'campaign_plan_id' => :'String',
        :'cookie_code' => :'String',
        :'is_active' => :'BOOLEAN',
        :'landing_page' => :'String',
        :'rate' => :'Float',
        :'utm_campaign' => :'String',
        :'utm_content' => :'String',
        :'utm_medium' => :'String',
        :'utm_source' => :'String',
        :'utm_term' => :'String',
        :'secondary_id' => :'SecondaryId',
        :'update_date' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.has_key?(:'is_acquisition')
        self.is_acquisition = attributes[:'is_acquisition']
      else
        self.is_acquisition = false
      end

      if attributes.has_key?(:'campaign_category')
        self.campaign_category = attributes[:'campaign_category']
      end

      if attributes.has_key?(:'campaign_plan_id')
        self.campaign_plan_id = attributes[:'campaign_plan_id']
      end

      if attributes.has_key?(:'cookie_code')
        self.cookie_code = attributes[:'cookie_code']
      end

      if attributes.has_key?(:'is_active')
        self.is_active = attributes[:'is_active']
      else
        self.is_active = true
      end

      if attributes.has_key?(:'landing_page')
        self.landing_page = attributes[:'landing_page']
      end

      if attributes.has_key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.has_key?(:'utm_campaign')
        self.utm_campaign = attributes[:'utm_campaign']
      end

      if attributes.has_key?(:'utm_content')
        self.utm_content = attributes[:'utm_content']
      end

      if attributes.has_key?(:'utm_medium')
        self.utm_medium = attributes[:'utm_medium']
      end

      if attributes.has_key?(:'utm_source')
        self.utm_source = attributes[:'utm_source']
      end

      if attributes.has_key?(:'utm_term')
        self.utm_term = attributes[:'utm_term']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @title.nil?
      return false if @description.nil?
      return false if @start_date.nil?
      return false if @end_date.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          create_date == o.create_date &&
          title == o.title &&
          description == o.description &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          is_acquisition == o.is_acquisition &&
          campaign_category == o.campaign_category &&
          campaign_plan_id == o.campaign_plan_id &&
          cookie_code == o.cookie_code &&
          is_active == o.is_active &&
          landing_page == o.landing_page &&
          rate == o.rate &&
          utm_campaign == o.utm_campaign &&
          utm_content == o.utm_content &&
          utm_medium == o.utm_medium &&
          utm_source == o.utm_source &&
          utm_term == o.utm_term &&
          secondary_id == o.secondary_id &&
          update_date == o.update_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, create_date, title, description, start_date, end_date, is_acquisition, campaign_category, campaign_plan_id, cookie_code, is_active, landing_page, rate, utm_campaign, utm_content, utm_medium, utm_source, utm_term, secondary_id, update_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
