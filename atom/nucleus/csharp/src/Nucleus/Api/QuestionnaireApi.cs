/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionnaireApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an answer
        /// </summary>
        /// <remarks>
        /// Create a new answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>Answer</returns>
        Answer CreateAnswerUsingPost (Answer answer);

        /// <summary>
        /// Create an answer
        /// </summary>
        /// <remarks>
        /// Create a new answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>ApiResponse of Answer</returns>
        ApiResponse<Answer> CreateAnswerUsingPostWithHttpInfo (Answer answer);
        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// Create a new question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>Question</returns>
        Question CreateQuestionUsingPost (Question question);

        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// Create a new question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>ApiResponse of Question</returns>
        ApiResponse<Question> CreateQuestionUsingPostWithHttpInfo (Question question);
        /// <summary>
        /// Create a questionnaire
        /// </summary>
        /// <remarks>
        /// Create a new questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>Questionnaire</returns>
        Questionnaire CreateQuestionnaireUsingPost (Questionnaire questionnaire);

        /// <summary>
        /// Create a questionnaire
        /// </summary>
        /// <remarks>
        /// Create a new questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>ApiResponse of Questionnaire</returns>
        ApiResponse<Questionnaire> CreateQuestionnaireUsingPostWithHttpInfo (Questionnaire questionnaire);
        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns></returns>
        void DeleteAnswerUsingDelete (Guid? answerId);

        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAnswerUsingDeleteWithHttpInfo (Guid? answerId);
        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns></returns>
        void DeleteQuestionUsingDelete (Guid? questionId);

        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuestionUsingDeleteWithHttpInfo (Guid? questionId);
        /// <summary>
        /// Delete a questionnaire
        /// </summary>
        /// <remarks>
        /// Permanently delete a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns></returns>
        void DeleteQuestionnaireUsingDelete (Guid? questionnaireId);

        /// <summary>
        /// Delete a questionnaire
        /// </summary>
        /// <remarks>
        /// Permanently delete a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuestionnaireUsingDeleteWithHttpInfo (Guid? questionnaireId);
        /// <summary>
        /// List all Answers
        /// </summary>
        /// <remarks>
        /// Get information for all Answers
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAnswer</returns>
        PageAnswer GetAnswerAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Answers
        /// </summary>
        /// <remarks>
        /// Get information for all Answers
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAnswer</returns>
        ApiResponse<PageAnswer> GetAnswerAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an answer
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an answer for question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Answer</returns>
        Answer GetAnswerUsingGet (Guid? answerId);

        /// <summary>
        /// Retrieve an answer
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an answer for question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>ApiResponse of Answer</returns>
        ApiResponse<Answer> GetAnswerUsingGetWithHttpInfo (Guid? answerId);
        /// <summary>
        /// List all Questions
        /// </summary>
        /// <remarks>
        /// Get information for all Questions
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageQuestion</returns>
        PageQuestion GetQuestionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Questions
        /// </summary>
        /// <remarks>
        /// Get information for all Questions
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageQuestion</returns>
        ApiResponse<PageQuestion> GetQuestionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a question
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a question for questionnaire
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Question</returns>
        Question GetQuestionUsingGet (Guid? questionId);

        /// <summary>
        /// Retrieve a question
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a question for questionnaire
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>ApiResponse of Question</returns>
        ApiResponse<Question> GetQuestionUsingGetWithHttpInfo (Guid? questionId);
        /// <summary>
        /// List all questionnaires
        /// </summary>
        /// <remarks>
        /// Get the information for all questionnaires defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageQuestionnaire</returns>
        PageQuestionnaire GetQuestionnaireAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all questionnaires
        /// </summary>
        /// <remarks>
        /// Get the information for all questionnaires defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageQuestionnaire</returns>
        ApiResponse<PageQuestionnaire> GetQuestionnaireAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a questionnaire
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Questionnaire</returns>
        Questionnaire GetQuestionnaireUsingGet (Guid? questionnaireId);

        /// <summary>
        /// Retrieve a questionnaire
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>ApiResponse of Questionnaire</returns>
        ApiResponse<Questionnaire> GetQuestionnaireUsingGetWithHttpInfo (Guid? questionnaireId);
        /// <summary>
        /// Update an answer
        /// </summary>
        /// <remarks>
        /// Update a answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Answer</returns>
        Answer UpdateAnswerUsingPut (Object answer, Guid? answerId);

        /// <summary>
        /// Update an answer
        /// </summary>
        /// <remarks>
        /// Update a answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>ApiResponse of Answer</returns>
        ApiResponse<Answer> UpdateAnswerUsingPutWithHttpInfo (Object answer, Guid? answerId);
        /// <summary>
        /// Update a question.
        /// </summary>
        /// <remarks>
        /// Update a question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Question</returns>
        Question UpdateQuestionUsingPut (Object question, Guid? questionId);

        /// <summary>
        /// Update a question.
        /// </summary>
        /// <remarks>
        /// Update a question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>ApiResponse of Question</returns>
        ApiResponse<Question> UpdateQuestionUsingPutWithHttpInfo (Object question, Guid? questionId);
        /// <summary>
        /// Update a questionnaire
        /// </summary>
        /// <remarks>
        /// Update a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Questionnaire</returns>
        Questionnaire UpdateQuestionnaireUsingPut (Object questionnaire, Guid? questionnaireId);

        /// <summary>
        /// Update a questionnaire
        /// </summary>
        /// <remarks>
        /// Update a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>ApiResponse of Questionnaire</returns>
        ApiResponse<Questionnaire> UpdateQuestionnaireUsingPutWithHttpInfo (Object questionnaire, Guid? questionnaireId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an answer
        /// </summary>
        /// <remarks>
        /// Create a new answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>Task of Answer</returns>
        System.Threading.Tasks.Task<Answer> CreateAnswerUsingPostAsync (Answer answer);

        /// <summary>
        /// Create an answer
        /// </summary>
        /// <remarks>
        /// Create a new answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>Task of ApiResponse (Answer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Answer>> CreateAnswerUsingPostAsyncWithHttpInfo (Answer answer);
        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// Create a new question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>Task of Question</returns>
        System.Threading.Tasks.Task<Question> CreateQuestionUsingPostAsync (Question question);

        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// Create a new question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>Task of ApiResponse (Question)</returns>
        System.Threading.Tasks.Task<ApiResponse<Question>> CreateQuestionUsingPostAsyncWithHttpInfo (Question question);
        /// <summary>
        /// Create a questionnaire
        /// </summary>
        /// <remarks>
        /// Create a new questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>Task of Questionnaire</returns>
        System.Threading.Tasks.Task<Questionnaire> CreateQuestionnaireUsingPostAsync (Questionnaire questionnaire);

        /// <summary>
        /// Create a questionnaire
        /// </summary>
        /// <remarks>
        /// Create a new questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>Task of ApiResponse (Questionnaire)</returns>
        System.Threading.Tasks.Task<ApiResponse<Questionnaire>> CreateQuestionnaireUsingPostAsyncWithHttpInfo (Questionnaire questionnaire);
        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAnswerUsingDeleteAsync (Guid? answerId);

        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnswerUsingDeleteAsyncWithHttpInfo (Guid? answerId);
        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuestionUsingDeleteAsync (Guid? questionId);

        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// Delete an answer for the question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionUsingDeleteAsyncWithHttpInfo (Guid? questionId);
        /// <summary>
        /// Delete a questionnaire
        /// </summary>
        /// <remarks>
        /// Permanently delete a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuestionnaireUsingDeleteAsync (Guid? questionnaireId);

        /// <summary>
        /// Delete a questionnaire
        /// </summary>
        /// <remarks>
        /// Permanently delete a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionnaireUsingDeleteAsyncWithHttpInfo (Guid? questionnaireId);
        /// <summary>
        /// List all Answers
        /// </summary>
        /// <remarks>
        /// Get information for all Answers
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAnswer</returns>
        System.Threading.Tasks.Task<PageAnswer> GetAnswerAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Answers
        /// </summary>
        /// <remarks>
        /// Get information for all Answers
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAnswer)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAnswer>> GetAnswerAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an answer
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an answer for question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of Answer</returns>
        System.Threading.Tasks.Task<Answer> GetAnswerUsingGetAsync (Guid? answerId);

        /// <summary>
        /// Retrieve an answer
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an answer for question
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of ApiResponse (Answer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Answer>> GetAnswerUsingGetAsyncWithHttpInfo (Guid? answerId);
        /// <summary>
        /// List all Questions
        /// </summary>
        /// <remarks>
        /// Get information for all Questions
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageQuestion</returns>
        System.Threading.Tasks.Task<PageQuestion> GetQuestionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all Questions
        /// </summary>
        /// <remarks>
        /// Get information for all Questions
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageQuestion)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageQuestion>> GetQuestionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a question
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a question for questionnaire
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of Question</returns>
        System.Threading.Tasks.Task<Question> GetQuestionUsingGetAsync (Guid? questionId);

        /// <summary>
        /// Retrieve a question
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a question for questionnaire
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of ApiResponse (Question)</returns>
        System.Threading.Tasks.Task<ApiResponse<Question>> GetQuestionUsingGetAsyncWithHttpInfo (Guid? questionId);
        /// <summary>
        /// List all questionnaires
        /// </summary>
        /// <remarks>
        /// Get the information for all questionnaires defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageQuestionnaire</returns>
        System.Threading.Tasks.Task<PageQuestionnaire> GetQuestionnaireAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all questionnaires
        /// </summary>
        /// <remarks>
        /// Get the information for all questionnaires defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageQuestionnaire)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageQuestionnaire>> GetQuestionnaireAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a questionnaire
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of Questionnaire</returns>
        System.Threading.Tasks.Task<Questionnaire> GetQuestionnaireUsingGetAsync (Guid? questionnaireId);

        /// <summary>
        /// Retrieve a questionnaire
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of ApiResponse (Questionnaire)</returns>
        System.Threading.Tasks.Task<ApiResponse<Questionnaire>> GetQuestionnaireUsingGetAsyncWithHttpInfo (Guid? questionnaireId);
        /// <summary>
        /// Update an answer
        /// </summary>
        /// <remarks>
        /// Update a answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of Answer</returns>
        System.Threading.Tasks.Task<Answer> UpdateAnswerUsingPutAsync (Object answer, Guid? answerId);

        /// <summary>
        /// Update an answer
        /// </summary>
        /// <remarks>
        /// Update a answer for question.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of ApiResponse (Answer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Answer>> UpdateAnswerUsingPutAsyncWithHttpInfo (Object answer, Guid? answerId);
        /// <summary>
        /// Update a question.
        /// </summary>
        /// <remarks>
        /// Update a question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of Question</returns>
        System.Threading.Tasks.Task<Question> UpdateQuestionUsingPutAsync (Object question, Guid? questionId);

        /// <summary>
        /// Update a question.
        /// </summary>
        /// <remarks>
        /// Update a question for questionnaire.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of ApiResponse (Question)</returns>
        System.Threading.Tasks.Task<ApiResponse<Question>> UpdateQuestionUsingPutAsyncWithHttpInfo (Object question, Guid? questionId);
        /// <summary>
        /// Update a questionnaire
        /// </summary>
        /// <remarks>
        /// Update a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of Questionnaire</returns>
        System.Threading.Tasks.Task<Questionnaire> UpdateQuestionnaireUsingPutAsync (Object questionnaire, Guid? questionnaireId);

        /// <summary>
        /// Update a questionnaire
        /// </summary>
        /// <remarks>
        /// Update a questionnaire for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of ApiResponse (Questionnaire)</returns>
        System.Threading.Tasks.Task<ApiResponse<Questionnaire>> UpdateQuestionnaireUsingPutAsyncWithHttpInfo (Object questionnaire, Guid? questionnaireId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuestionnaireApi : IQuestionnaireApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnaireApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestionnaireApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionnaireApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuestionnaireApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an answer Create a new answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>Answer</returns>
        public Answer CreateAnswerUsingPost (Answer answer)
        {
             ApiResponse<Answer> localVarResponse = CreateAnswerUsingPostWithHttpInfo(answer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an answer Create a new answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>ApiResponse of Answer</returns>
        public ApiResponse< Answer > CreateAnswerUsingPostWithHttpInfo (Answer answer)
        {
            // verify the required parameter 'answer' is set
            if (answer == null)
                throw new ApiException(400, "Missing required parameter 'answer' when calling QuestionnaireApi->CreateAnswerUsingPost");

            var localVarPath = "/nucleus/v1/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnswerUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Answer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Answer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Answer)));
        }

        /// <summary>
        /// Create an answer Create a new answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>Task of Answer</returns>
        public async System.Threading.Tasks.Task<Answer> CreateAnswerUsingPostAsync (Answer answer)
        {
             ApiResponse<Answer> localVarResponse = await CreateAnswerUsingPostAsyncWithHttpInfo(answer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an answer Create a new answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <returns>Task of ApiResponse (Answer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Answer>> CreateAnswerUsingPostAsyncWithHttpInfo (Answer answer)
        {
            // verify the required parameter 'answer' is set
            if (answer == null)
                throw new ApiException(400, "Missing required parameter 'answer' when calling QuestionnaireApi->CreateAnswerUsingPost");

            var localVarPath = "/nucleus/v1/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnswerUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Answer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Answer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Answer)));
        }

        /// <summary>
        /// Create a question Create a new question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>Question</returns>
        public Question CreateQuestionUsingPost (Question question)
        {
             ApiResponse<Question> localVarResponse = CreateQuestionUsingPostWithHttpInfo(question);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a question Create a new question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>ApiResponse of Question</returns>
        public ApiResponse< Question > CreateQuestionUsingPostWithHttpInfo (Question question)
        {
            // verify the required parameter 'question' is set
            if (question == null)
                throw new ApiException(400, "Missing required parameter 'question' when calling QuestionnaireApi->CreateQuestionUsingPost");

            var localVarPath = "/nucleus/v1/question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Question>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Question) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Question)));
        }

        /// <summary>
        /// Create a question Create a new question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>Task of Question</returns>
        public async System.Threading.Tasks.Task<Question> CreateQuestionUsingPostAsync (Question question)
        {
             ApiResponse<Question> localVarResponse = await CreateQuestionUsingPostAsyncWithHttpInfo(question);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a question Create a new question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <returns>Task of ApiResponse (Question)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Question>> CreateQuestionUsingPostAsyncWithHttpInfo (Question question)
        {
            // verify the required parameter 'question' is set
            if (question == null)
                throw new ApiException(400, "Missing required parameter 'question' when calling QuestionnaireApi->CreateQuestionUsingPost");

            var localVarPath = "/nucleus/v1/question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Question>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Question) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Question)));
        }

        /// <summary>
        /// Create a questionnaire Create a new questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>Questionnaire</returns>
        public Questionnaire CreateQuestionnaireUsingPost (Questionnaire questionnaire)
        {
             ApiResponse<Questionnaire> localVarResponse = CreateQuestionnaireUsingPostWithHttpInfo(questionnaire);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a questionnaire Create a new questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>ApiResponse of Questionnaire</returns>
        public ApiResponse< Questionnaire > CreateQuestionnaireUsingPostWithHttpInfo (Questionnaire questionnaire)
        {
            // verify the required parameter 'questionnaire' is set
            if (questionnaire == null)
                throw new ApiException(400, "Missing required parameter 'questionnaire' when calling QuestionnaireApi->CreateQuestionnaireUsingPost");

            var localVarPath = "/nucleus/v1/questionnaire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaire != null && questionnaire.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(questionnaire); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionnaire; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionnaireUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Questionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Questionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Questionnaire)));
        }

        /// <summary>
        /// Create a questionnaire Create a new questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>Task of Questionnaire</returns>
        public async System.Threading.Tasks.Task<Questionnaire> CreateQuestionnaireUsingPostAsync (Questionnaire questionnaire)
        {
             ApiResponse<Questionnaire> localVarResponse = await CreateQuestionnaireUsingPostAsyncWithHttpInfo(questionnaire);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a questionnaire Create a new questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <returns>Task of ApiResponse (Questionnaire)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Questionnaire>> CreateQuestionnaireUsingPostAsyncWithHttpInfo (Questionnaire questionnaire)
        {
            // verify the required parameter 'questionnaire' is set
            if (questionnaire == null)
                throw new ApiException(400, "Missing required parameter 'questionnaire' when calling QuestionnaireApi->CreateQuestionnaireUsingPost");

            var localVarPath = "/nucleus/v1/questionnaire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaire != null && questionnaire.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(questionnaire); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionnaire; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionnaireUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Questionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Questionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Questionnaire)));
        }

        /// <summary>
        /// Delete an answer Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns></returns>
        public void DeleteAnswerUsingDelete (Guid? answerId)
        {
             DeleteAnswerUsingDeleteWithHttpInfo(answerId);
        }

        /// <summary>
        /// Delete an answer Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAnswerUsingDeleteWithHttpInfo (Guid? answerId)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionnaireApi->DeleteAnswerUsingDelete");

            var localVarPath = "/nucleus/v1/answer/{answer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answer_id", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnswerUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an answer Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAnswerUsingDeleteAsync (Guid? answerId)
        {
             await DeleteAnswerUsingDeleteAsyncWithHttpInfo(answerId);

        }

        /// <summary>
        /// Delete an answer Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAnswerUsingDeleteAsyncWithHttpInfo (Guid? answerId)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionnaireApi->DeleteAnswerUsingDelete");

            var localVarPath = "/nucleus/v1/answer/{answer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answer_id", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnswerUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a question Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns></returns>
        public void DeleteQuestionUsingDelete (Guid? questionId)
        {
             DeleteQuestionUsingDeleteWithHttpInfo(questionId);
        }

        /// <summary>
        /// Delete a question Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuestionUsingDeleteWithHttpInfo (Guid? questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionnaireApi->DeleteQuestionUsingDelete");

            var localVarPath = "/nucleus/v1/question/{question_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("question_id", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a question Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuestionUsingDeleteAsync (Guid? questionId)
        {
             await DeleteQuestionUsingDeleteAsyncWithHttpInfo(questionId);

        }

        /// <summary>
        /// Delete a question Delete an answer for the question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionUsingDeleteAsyncWithHttpInfo (Guid? questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionnaireApi->DeleteQuestionUsingDelete");

            var localVarPath = "/nucleus/v1/question/{question_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("question_id", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a questionnaire Permanently delete a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns></returns>
        public void DeleteQuestionnaireUsingDelete (Guid? questionnaireId)
        {
             DeleteQuestionnaireUsingDeleteWithHttpInfo(questionnaireId);
        }

        /// <summary>
        /// Delete a questionnaire Permanently delete a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuestionnaireUsingDeleteWithHttpInfo (Guid? questionnaireId)
        {
            // verify the required parameter 'questionnaireId' is set
            if (questionnaireId == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireId' when calling QuestionnaireApi->DeleteQuestionnaireUsingDelete");

            var localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaireId != null) localVarPathParams.Add("questionnaire_id", this.Configuration.ApiClient.ParameterToString(questionnaireId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionnaireUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a questionnaire Permanently delete a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuestionnaireUsingDeleteAsync (Guid? questionnaireId)
        {
             await DeleteQuestionnaireUsingDeleteAsyncWithHttpInfo(questionnaireId);

        }

        /// <summary>
        /// Delete a questionnaire Permanently delete a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionnaireUsingDeleteAsyncWithHttpInfo (Guid? questionnaireId)
        {
            // verify the required parameter 'questionnaireId' is set
            if (questionnaireId == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireId' when calling QuestionnaireApi->DeleteQuestionnaireUsingDelete");

            var localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaireId != null) localVarPathParams.Add("questionnaire_id", this.Configuration.ApiClient.ParameterToString(questionnaireId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionnaireUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all Answers Get information for all Answers
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAnswer</returns>
        public PageAnswer GetAnswerAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAnswer> localVarResponse = GetAnswerAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Answers Get information for all Answers
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAnswer</returns>
        public ApiResponse< PageAnswer > GetAnswerAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswerAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAnswer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAnswer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAnswer)));
        }

        /// <summary>
        /// List all Answers Get information for all Answers
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAnswer</returns>
        public async System.Threading.Tasks.Task<PageAnswer> GetAnswerAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAnswer> localVarResponse = await GetAnswerAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Answers Get information for all Answers
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to label)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAnswer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAnswer>> GetAnswerAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswerAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAnswer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAnswer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAnswer)));
        }

        /// <summary>
        /// Retrieve an answer Retrieve the information for an answer for question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Answer</returns>
        public Answer GetAnswerUsingGet (Guid? answerId)
        {
             ApiResponse<Answer> localVarResponse = GetAnswerUsingGetWithHttpInfo(answerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an answer Retrieve the information for an answer for question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>ApiResponse of Answer</returns>
        public ApiResponse< Answer > GetAnswerUsingGetWithHttpInfo (Guid? answerId)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionnaireApi->GetAnswerUsingGet");

            var localVarPath = "/nucleus/v1/answer/{answer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answer_id", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswerUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Answer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Answer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Answer)));
        }

        /// <summary>
        /// Retrieve an answer Retrieve the information for an answer for question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of Answer</returns>
        public async System.Threading.Tasks.Task<Answer> GetAnswerUsingGetAsync (Guid? answerId)
        {
             ApiResponse<Answer> localVarResponse = await GetAnswerUsingGetAsyncWithHttpInfo(answerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an answer Retrieve the information for an answer for question
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of ApiResponse (Answer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Answer>> GetAnswerUsingGetAsyncWithHttpInfo (Guid? answerId)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionnaireApi->GetAnswerUsingGet");

            var localVarPath = "/nucleus/v1/answer/{answer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answer_id", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswerUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Answer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Answer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Answer)));
        }

        /// <summary>
        /// List all Questions Get information for all Questions
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageQuestion</returns>
        public PageQuestion GetQuestionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageQuestion> localVarResponse = GetQuestionAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Questions Get information for all Questions
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageQuestion</returns>
        public ApiResponse< PageQuestion > GetQuestionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageQuestion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageQuestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageQuestion)));
        }

        /// <summary>
        /// List all Questions Get information for all Questions
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageQuestion</returns>
        public async System.Threading.Tasks.Task<PageQuestion> GetQuestionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageQuestion> localVarResponse = await GetQuestionAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Questions Get information for all Questions
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_index)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageQuestion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageQuestion>> GetQuestionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageQuestion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageQuestion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageQuestion)));
        }

        /// <summary>
        /// Retrieve a question Retrieve the information for a question for questionnaire
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Question</returns>
        public Question GetQuestionUsingGet (Guid? questionId)
        {
             ApiResponse<Question> localVarResponse = GetQuestionUsingGetWithHttpInfo(questionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a question Retrieve the information for a question for questionnaire
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>ApiResponse of Question</returns>
        public ApiResponse< Question > GetQuestionUsingGetWithHttpInfo (Guid? questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionnaireApi->GetQuestionUsingGet");

            var localVarPath = "/nucleus/v1/question/{question_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("question_id", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Question>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Question) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Question)));
        }

        /// <summary>
        /// Retrieve a question Retrieve the information for a question for questionnaire
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of Question</returns>
        public async System.Threading.Tasks.Task<Question> GetQuestionUsingGetAsync (Guid? questionId)
        {
             ApiResponse<Question> localVarResponse = await GetQuestionUsingGetAsyncWithHttpInfo(questionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a question Retrieve the information for a question for questionnaire
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of ApiResponse (Question)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Question>> GetQuestionUsingGetAsyncWithHttpInfo (Guid? questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionnaireApi->GetQuestionUsingGet");

            var localVarPath = "/nucleus/v1/question/{question_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("question_id", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Question>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Question) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Question)));
        }

        /// <summary>
        /// List all questionnaires Get the information for all questionnaires defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageQuestionnaire</returns>
        public PageQuestionnaire GetQuestionnaireAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageQuestionnaire> localVarResponse = GetQuestionnaireAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all questionnaires Get the information for all questionnaires defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageQuestionnaire</returns>
        public ApiResponse< PageQuestionnaire > GetQuestionnaireAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/questionnaire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionnaireAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageQuestionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageQuestionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageQuestionnaire)));
        }

        /// <summary>
        /// List all questionnaires Get the information for all questionnaires defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageQuestionnaire</returns>
        public async System.Threading.Tasks.Task<PageQuestionnaire> GetQuestionnaireAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageQuestionnaire> localVarResponse = await GetQuestionnaireAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all questionnaires Get the information for all questionnaires defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageQuestionnaire)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageQuestionnaire>> GetQuestionnaireAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/questionnaire";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionnaireAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageQuestionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageQuestionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageQuestionnaire)));
        }

        /// <summary>
        /// Retrieve a questionnaire Retrieve the information for a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Questionnaire</returns>
        public Questionnaire GetQuestionnaireUsingGet (Guid? questionnaireId)
        {
             ApiResponse<Questionnaire> localVarResponse = GetQuestionnaireUsingGetWithHttpInfo(questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a questionnaire Retrieve the information for a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>ApiResponse of Questionnaire</returns>
        public ApiResponse< Questionnaire > GetQuestionnaireUsingGetWithHttpInfo (Guid? questionnaireId)
        {
            // verify the required parameter 'questionnaireId' is set
            if (questionnaireId == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireId' when calling QuestionnaireApi->GetQuestionnaireUsingGet");

            var localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaireId != null) localVarPathParams.Add("questionnaire_id", this.Configuration.ApiClient.ParameterToString(questionnaireId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionnaireUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Questionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Questionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Questionnaire)));
        }

        /// <summary>
        /// Retrieve a questionnaire Retrieve the information for a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of Questionnaire</returns>
        public async System.Threading.Tasks.Task<Questionnaire> GetQuestionnaireUsingGetAsync (Guid? questionnaireId)
        {
             ApiResponse<Questionnaire> localVarResponse = await GetQuestionnaireUsingGetAsyncWithHttpInfo(questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a questionnaire Retrieve the information for a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of ApiResponse (Questionnaire)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Questionnaire>> GetQuestionnaireUsingGetAsyncWithHttpInfo (Guid? questionnaireId)
        {
            // verify the required parameter 'questionnaireId' is set
            if (questionnaireId == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireId' when calling QuestionnaireApi->GetQuestionnaireUsingGet");

            var localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaireId != null) localVarPathParams.Add("questionnaire_id", this.Configuration.ApiClient.ParameterToString(questionnaireId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionnaireUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Questionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Questionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Questionnaire)));
        }

        /// <summary>
        /// Update an answer Update a answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Answer</returns>
        public Answer UpdateAnswerUsingPut (Object answer, Guid? answerId)
        {
             ApiResponse<Answer> localVarResponse = UpdateAnswerUsingPutWithHttpInfo(answer, answerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an answer Update a answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>ApiResponse of Answer</returns>
        public ApiResponse< Answer > UpdateAnswerUsingPutWithHttpInfo (Object answer, Guid? answerId)
        {
            // verify the required parameter 'answer' is set
            if (answer == null)
                throw new ApiException(400, "Missing required parameter 'answer' when calling QuestionnaireApi->UpdateAnswerUsingPut");
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionnaireApi->UpdateAnswerUsingPut");

            var localVarPath = "/nucleus/v1/answer/{answer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answer_id", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter
            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAnswerUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Answer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Answer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Answer)));
        }

        /// <summary>
        /// Update an answer Update a answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of Answer</returns>
        public async System.Threading.Tasks.Task<Answer> UpdateAnswerUsingPutAsync (Object answer, Guid? answerId)
        {
             ApiResponse<Answer> localVarResponse = await UpdateAnswerUsingPutAsyncWithHttpInfo(answer, answerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an answer Update a answer for question.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answer">answer</param>
        /// <param name="answerId">UUID answer_id</param>
        /// <returns>Task of ApiResponse (Answer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Answer>> UpdateAnswerUsingPutAsyncWithHttpInfo (Object answer, Guid? answerId)
        {
            // verify the required parameter 'answer' is set
            if (answer == null)
                throw new ApiException(400, "Missing required parameter 'answer' when calling QuestionnaireApi->UpdateAnswerUsingPut");
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionnaireApi->UpdateAnswerUsingPut");

            var localVarPath = "/nucleus/v1/answer/{answer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answer_id", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter
            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAnswerUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Answer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Answer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Answer)));
        }

        /// <summary>
        /// Update a question. Update a question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Question</returns>
        public Question UpdateQuestionUsingPut (Object question, Guid? questionId)
        {
             ApiResponse<Question> localVarResponse = UpdateQuestionUsingPutWithHttpInfo(question, questionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a question. Update a question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>ApiResponse of Question</returns>
        public ApiResponse< Question > UpdateQuestionUsingPutWithHttpInfo (Object question, Guid? questionId)
        {
            // verify the required parameter 'question' is set
            if (question == null)
                throw new ApiException(400, "Missing required parameter 'question' when calling QuestionnaireApi->UpdateQuestionUsingPut");
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionnaireApi->UpdateQuestionUsingPut");

            var localVarPath = "/nucleus/v1/question/{question_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("question_id", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Question>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Question) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Question)));
        }

        /// <summary>
        /// Update a question. Update a question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of Question</returns>
        public async System.Threading.Tasks.Task<Question> UpdateQuestionUsingPutAsync (Object question, Guid? questionId)
        {
             ApiResponse<Question> localVarResponse = await UpdateQuestionUsingPutAsyncWithHttpInfo(question, questionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a question. Update a question for questionnaire.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">question</param>
        /// <param name="questionId">UUID question_id</param>
        /// <returns>Task of ApiResponse (Question)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Question>> UpdateQuestionUsingPutAsyncWithHttpInfo (Object question, Guid? questionId)
        {
            // verify the required parameter 'question' is set
            if (question == null)
                throw new ApiException(400, "Missing required parameter 'question' when calling QuestionnaireApi->UpdateQuestionUsingPut");
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionnaireApi->UpdateQuestionUsingPut");

            var localVarPath = "/nucleus/v1/question/{question_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("question_id", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Question>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Question) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Question)));
        }

        /// <summary>
        /// Update a questionnaire Update a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Questionnaire</returns>
        public Questionnaire UpdateQuestionnaireUsingPut (Object questionnaire, Guid? questionnaireId)
        {
             ApiResponse<Questionnaire> localVarResponse = UpdateQuestionnaireUsingPutWithHttpInfo(questionnaire, questionnaireId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a questionnaire Update a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>ApiResponse of Questionnaire</returns>
        public ApiResponse< Questionnaire > UpdateQuestionnaireUsingPutWithHttpInfo (Object questionnaire, Guid? questionnaireId)
        {
            // verify the required parameter 'questionnaire' is set
            if (questionnaire == null)
                throw new ApiException(400, "Missing required parameter 'questionnaire' when calling QuestionnaireApi->UpdateQuestionnaireUsingPut");
            // verify the required parameter 'questionnaireId' is set
            if (questionnaireId == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireId' when calling QuestionnaireApi->UpdateQuestionnaireUsingPut");

            var localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaireId != null) localVarPathParams.Add("questionnaire_id", this.Configuration.ApiClient.ParameterToString(questionnaireId)); // path parameter
            if (questionnaire != null && questionnaire.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(questionnaire); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionnaire; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionnaireUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Questionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Questionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Questionnaire)));
        }

        /// <summary>
        /// Update a questionnaire Update a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of Questionnaire</returns>
        public async System.Threading.Tasks.Task<Questionnaire> UpdateQuestionnaireUsingPutAsync (Object questionnaire, Guid? questionnaireId)
        {
             ApiResponse<Questionnaire> localVarResponse = await UpdateQuestionnaireUsingPutAsyncWithHttpInfo(questionnaire, questionnaireId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a questionnaire Update a questionnaire for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionnaire">questionnaire</param>
        /// <param name="questionnaireId">UUID questionnaire_id</param>
        /// <returns>Task of ApiResponse (Questionnaire)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Questionnaire>> UpdateQuestionnaireUsingPutAsyncWithHttpInfo (Object questionnaire, Guid? questionnaireId)
        {
            // verify the required parameter 'questionnaire' is set
            if (questionnaire == null)
                throw new ApiException(400, "Missing required parameter 'questionnaire' when calling QuestionnaireApi->UpdateQuestionnaireUsingPut");
            // verify the required parameter 'questionnaireId' is set
            if (questionnaireId == null)
                throw new ApiException(400, "Missing required parameter 'questionnaireId' when calling QuestionnaireApi->UpdateQuestionnaireUsingPut");

            var localVarPath = "/nucleus/v1/questionnaire/{questionnaire_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionnaireId != null) localVarPathParams.Add("questionnaire_id", this.Configuration.ApiClient.ParameterToString(questionnaireId)); // path parameter
            if (questionnaire != null && questionnaire.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(questionnaire); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionnaire; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionnaireUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Questionnaire>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Questionnaire) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Questionnaire)));
        }

    }
}
