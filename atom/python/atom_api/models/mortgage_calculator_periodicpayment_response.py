# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.mortgage_schedule_period import MortgageSchedulePeriod  # noqa: F401,E501


class MortgageCalculatorPeriodicpaymentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'periodic_payment': 'float',
        'total_payment': 'float',
        'total_principal': 'float',
        'total_interest': 'float',
        'total_home_cost': 'float',
        'schedule': 'dict(str, MortgageSchedulePeriod)'
    }

    attribute_map = {
        'periodic_payment': 'periodic_payment',
        'total_payment': 'total_payment',
        'total_principal': 'total_principal',
        'total_interest': 'total_interest',
        'total_home_cost': 'total_home_cost',
        'schedule': 'schedule'
    }

    def __init__(self, periodic_payment=None, total_payment=None, total_principal=None, total_interest=None, total_home_cost=None, schedule=None):  # noqa: E501
        """MortgageCalculatorPeriodicpaymentResponse - a model defined in Swagger"""  # noqa: E501

        self._periodic_payment = None
        self._total_payment = None
        self._total_principal = None
        self._total_interest = None
        self._total_home_cost = None
        self._schedule = None
        self.discriminator = None

        self.periodic_payment = periodic_payment
        self.total_payment = total_payment
        self.total_principal = total_principal
        self.total_interest = total_interest
        self.total_home_cost = total_home_cost
        self.schedule = schedule

    @property
    def periodic_payment(self):
        """Gets the periodic_payment of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501

        The periodic monthly payment for the mortgage, given the other inputs provided by the user.  # noqa: E501

        :return: The periodic_payment of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._periodic_payment

    @periodic_payment.setter
    def periodic_payment(self, periodic_payment):
        """Sets the periodic_payment of this MortgageCalculatorPeriodicpaymentResponse.

        The periodic monthly payment for the mortgage, given the other inputs provided by the user.  # noqa: E501

        :param periodic_payment: The periodic_payment of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :type: float
        """
        if periodic_payment is None:
            raise ValueError("Invalid value for `periodic_payment`, must not be `None`")  # noqa: E501
        if periodic_payment is not None and periodic_payment < 0:  # noqa: E501
            raise ValueError("Invalid value for `periodic_payment`, must be a value greater than or equal to `0`")  # noqa: E501

        self._periodic_payment = periodic_payment

    @property
    def total_payment(self):
        """Gets the total_payment of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501

        The total mortgage payments made over mortgage_term.  # noqa: E501

        :return: The total_payment of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_payment

    @total_payment.setter
    def total_payment(self, total_payment):
        """Sets the total_payment of this MortgageCalculatorPeriodicpaymentResponse.

        The total mortgage payments made over mortgage_term.  # noqa: E501

        :param total_payment: The total_payment of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :type: float
        """
        if total_payment is None:
            raise ValueError("Invalid value for `total_payment`, must not be `None`")  # noqa: E501

        self._total_payment = total_payment

    @property
    def total_principal(self):
        """Gets the total_principal of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501

        The total amount that went toward the mortgage principal.  # noqa: E501

        :return: The total_principal of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_principal

    @total_principal.setter
    def total_principal(self, total_principal):
        """Sets the total_principal of this MortgageCalculatorPeriodicpaymentResponse.

        The total amount that went toward the mortgage principal.  # noqa: E501

        :param total_principal: The total_principal of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :type: float
        """
        if total_principal is None:
            raise ValueError("Invalid value for `total_principal`, must not be `None`")  # noqa: E501

        self._total_principal = total_principal

    @property
    def total_interest(self):
        """Gets the total_interest of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501

        The total amount that went toward the mortgage interest.  # noqa: E501

        :return: The total_interest of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_interest

    @total_interest.setter
    def total_interest(self, total_interest):
        """Sets the total_interest of this MortgageCalculatorPeriodicpaymentResponse.

        The total amount that went toward the mortgage interest.  # noqa: E501

        :param total_interest: The total_interest of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :type: float
        """
        if total_interest is None:
            raise ValueError("Invalid value for `total_interest`, must not be `None`")  # noqa: E501

        self._total_interest = total_interest

    @property
    def total_home_cost(self):
        """Gets the total_home_cost of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501

        The total cost of the home, including down payment and all mortgage payments. The value is greater than home_price when interest_rate is greater than 0.  # noqa: E501

        :return: The total_home_cost of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_home_cost

    @total_home_cost.setter
    def total_home_cost(self, total_home_cost):
        """Sets the total_home_cost of this MortgageCalculatorPeriodicpaymentResponse.

        The total cost of the home, including down payment and all mortgage payments. The value is greater than home_price when interest_rate is greater than 0.  # noqa: E501

        :param total_home_cost: The total_home_cost of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :type: float
        """
        if total_home_cost is None:
            raise ValueError("Invalid value for `total_home_cost`, must not be `None`")  # noqa: E501

        self._total_home_cost = total_home_cost

    @property
    def schedule(self):
        """Gets the schedule of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501


        :return: The schedule of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :rtype: dict(str, MortgageSchedulePeriod)
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this MortgageCalculatorPeriodicpaymentResponse.


        :param schedule: The schedule of this MortgageCalculatorPeriodicpaymentResponse.  # noqa: E501
        :type: dict(str, MortgageSchedulePeriod)
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MortgageCalculatorPeriodicpaymentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MortgageCalculatorPeriodicpaymentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
