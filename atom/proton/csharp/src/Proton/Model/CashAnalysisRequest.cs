/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// CashAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class CashAnalysisRequest :  IEquatable<CashAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            
            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 2,
            
            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 3
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Defines HistoryFrequencyInterval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HistoryFrequencyIntervalEnum
        {
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 4,
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 5
        }

        /// <summary>
        /// Gets or Sets HistoryFrequencyInterval
        /// </summary>
        [DataMember(Name="history_frequency_interval", EmitDefaultValue=false)]
        public HistoryFrequencyIntervalEnum? HistoryFrequencyInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashAnalysisRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="showHistory">showHistory (default to false).</param>
        /// <param name="scope">scope (default to ScopeEnum.All).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="historyFrequencyInterval">historyFrequencyInterval (default to HistoryFrequencyIntervalEnum.Month).</param>
        /// <param name="showInflowDetails">showInflowDetails (default to false).</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="transactionStatusScope">transactionStatusScope.</param>
        /// <param name="showOutflowDetails">showOutflowDetails (default to false).</param>
        /// <param name="onlyCleansed">onlyCleansed (default to false).</param>
        public CashAnalysisRequest(string currencyCode = default(string), Guid? clientId = default(Guid?), bool? showHistory = false, ScopeEnum? scope = ScopeEnum.All, DateTime? endDate = default(DateTime?), HistoryFrequencyIntervalEnum? historyFrequencyInterval = HistoryFrequencyIntervalEnum.Month, bool? showInflowDetails = false, string currencyConversion = default(string), DateTime? startDate = default(DateTime?), List<string> transactionStatusScope = default(List<string>), bool? showOutflowDetails = false, bool? onlyCleansed = false)
        {
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "showHistory" provided
            if (showHistory == null)
            {
                this.ShowHistory = false;
            }
            else
            {
                this.ShowHistory = showHistory;
            }
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = ScopeEnum.All;
            }
            else
            {
                this.Scope = scope;
            }
            this.EndDate = endDate;
            // use default value if no "historyFrequencyInterval" provided
            if (historyFrequencyInterval == null)
            {
                this.HistoryFrequencyInterval = HistoryFrequencyIntervalEnum.Month;
            }
            else
            {
                this.HistoryFrequencyInterval = historyFrequencyInterval;
            }
            // use default value if no "showInflowDetails" provided
            if (showInflowDetails == null)
            {
                this.ShowInflowDetails = false;
            }
            else
            {
                this.ShowInflowDetails = showInflowDetails;
            }
            this.CurrencyConversion = currencyConversion;
            this.StartDate = startDate;
            this.TransactionStatusScope = transactionStatusScope;
            // use default value if no "showOutflowDetails" provided
            if (showOutflowDetails == null)
            {
                this.ShowOutflowDetails = false;
            }
            else
            {
                this.ShowOutflowDetails = showOutflowDetails;
            }
            // use default value if no "onlyCleansed" provided
            if (onlyCleansed == null)
            {
                this.OnlyCleansed = false;
            }
            else
            {
                this.OnlyCleansed = onlyCleansed;
            }
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ShowHistory
        /// </summary>
        [DataMember(Name="show_history", EmitDefaultValue=false)]
        public bool? ShowHistory { get; set; }


        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }


        /// <summary>
        /// Gets or Sets ShowInflowDetails
        /// </summary>
        [DataMember(Name="show_inflow_details", EmitDefaultValue=false)]
        public bool? ShowInflowDetails { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusScope
        /// </summary>
        [DataMember(Name="transaction_status_scope", EmitDefaultValue=false)]
        public List<string> TransactionStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets ShowOutflowDetails
        /// </summary>
        [DataMember(Name="show_outflow_details", EmitDefaultValue=false)]
        public bool? ShowOutflowDetails { get; set; }

        /// <summary>
        /// Gets or Sets OnlyCleansed
        /// </summary>
        [DataMember(Name="only_cleansed", EmitDefaultValue=false)]
        public bool? OnlyCleansed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashAnalysisRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ShowHistory: ").Append(ShowHistory).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HistoryFrequencyInterval: ").Append(HistoryFrequencyInterval).Append("\n");
            sb.Append("  ShowInflowDetails: ").Append(ShowInflowDetails).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TransactionStatusScope: ").Append(TransactionStatusScope).Append("\n");
            sb.Append("  ShowOutflowDetails: ").Append(ShowOutflowDetails).Append("\n");
            sb.Append("  OnlyCleansed: ").Append(OnlyCleansed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashAnalysisRequest);
        }

        /// <summary>
        /// Returns true if CashAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CashAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ShowHistory == input.ShowHistory ||
                    (this.ShowHistory != null &&
                    this.ShowHistory.Equals(input.ShowHistory))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.HistoryFrequencyInterval == input.HistoryFrequencyInterval ||
                    (this.HistoryFrequencyInterval != null &&
                    this.HistoryFrequencyInterval.Equals(input.HistoryFrequencyInterval))
                ) && 
                (
                    this.ShowInflowDetails == input.ShowInflowDetails ||
                    (this.ShowInflowDetails != null &&
                    this.ShowInflowDetails.Equals(input.ShowInflowDetails))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.TransactionStatusScope == input.TransactionStatusScope ||
                    this.TransactionStatusScope != null &&
                    this.TransactionStatusScope.SequenceEqual(input.TransactionStatusScope)
                ) && 
                (
                    this.ShowOutflowDetails == input.ShowOutflowDetails ||
                    (this.ShowOutflowDetails != null &&
                    this.ShowOutflowDetails.Equals(input.ShowOutflowDetails))
                ) && 
                (
                    this.OnlyCleansed == input.OnlyCleansed ||
                    (this.OnlyCleansed != null &&
                    this.OnlyCleansed.Equals(input.OnlyCleansed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ShowHistory != null)
                    hashCode = hashCode * 59 + this.ShowHistory.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.HistoryFrequencyInterval != null)
                    hashCode = hashCode * 59 + this.HistoryFrequencyInterval.GetHashCode();
                if (this.ShowInflowDetails != null)
                    hashCode = hashCode * 59 + this.ShowInflowDetails.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.TransactionStatusScope != null)
                    hashCode = hashCode * 59 + this.TransactionStatusScope.GetHashCode();
                if (this.ShowOutflowDetails != null)
                    hashCode = hashCode * 59 + this.ShowOutflowDetails.GetHashCode();
                if (this.OnlyCleansed != null)
                    hashCode = hashCode * 59 + this.OnlyCleansed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
