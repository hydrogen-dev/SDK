/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EducationCalculatorAnnualCostRequest', 'model/EducationCalculatorDepositAmountRequest', 'model/EducationCalculatorPercentCoveredRequest', 'model/MortgageCalculatorDownPaymentRequest', 'model/MortgageCalculatorHomePriceRequest', 'model/MortgageCalculatorPeriodicPaymentRequest', 'model/PurchaseCalculatorAmountRequest', 'model/PurchaseCalculatorDepositAmountRequest', 'model/PurchaseCalculatorHorizonRequest', 'model/RetirementCalculatorDepositAmountRequest', 'model/RetirementCalculatorExpensesRequest', 'model/RetirementCalculatorPercentCoveredRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EducationCalculatorAnnualCostRequest'), require('../model/EducationCalculatorDepositAmountRequest'), require('../model/EducationCalculatorPercentCoveredRequest'), require('../model/MortgageCalculatorDownPaymentRequest'), require('../model/MortgageCalculatorHomePriceRequest'), require('../model/MortgageCalculatorPeriodicPaymentRequest'), require('../model/PurchaseCalculatorAmountRequest'), require('../model/PurchaseCalculatorDepositAmountRequest'), require('../model/PurchaseCalculatorHorizonRequest'), require('../model/RetirementCalculatorDepositAmountRequest'), require('../model/RetirementCalculatorExpensesRequest'), require('../model/RetirementCalculatorPercentCoveredRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenProtonApi) {
      root.HydrogenProtonApi = {};
    }
    root.HydrogenProtonApi.FinancialPlanningApi = factory(root.HydrogenProtonApi.ApiClient, root.HydrogenProtonApi.EducationCalculatorAnnualCostRequest, root.HydrogenProtonApi.EducationCalculatorDepositAmountRequest, root.HydrogenProtonApi.EducationCalculatorPercentCoveredRequest, root.HydrogenProtonApi.MortgageCalculatorDownPaymentRequest, root.HydrogenProtonApi.MortgageCalculatorHomePriceRequest, root.HydrogenProtonApi.MortgageCalculatorPeriodicPaymentRequest, root.HydrogenProtonApi.PurchaseCalculatorAmountRequest, root.HydrogenProtonApi.PurchaseCalculatorDepositAmountRequest, root.HydrogenProtonApi.PurchaseCalculatorHorizonRequest, root.HydrogenProtonApi.RetirementCalculatorDepositAmountRequest, root.HydrogenProtonApi.RetirementCalculatorExpensesRequest, root.HydrogenProtonApi.RetirementCalculatorPercentCoveredRequest);
  }
}(this, function(ApiClient, EducationCalculatorAnnualCostRequest, EducationCalculatorDepositAmountRequest, EducationCalculatorPercentCoveredRequest, MortgageCalculatorDownPaymentRequest, MortgageCalculatorHomePriceRequest, MortgageCalculatorPeriodicPaymentRequest, PurchaseCalculatorAmountRequest, PurchaseCalculatorDepositAmountRequest, PurchaseCalculatorHorizonRequest, RetirementCalculatorDepositAmountRequest, RetirementCalculatorExpensesRequest, RetirementCalculatorPercentCoveredRequest) {
  'use strict';

  /**
   * FinancialPlanning service.
   * @module api/FinancialPlanningApi
   * @version 1.9.2
   */

  /**
   * Constructs a new FinancialPlanningApi. 
   * @alias module:api/FinancialPlanningApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the educationCalculatorAnnualCost operation.
     * @callback module:api/FinancialPlanningApi~educationCalculatorAnnualCostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Education Calculator - Annual Cost
     * Calculate the achievable education costs
     * @param {module:model/EducationCalculatorAnnualCostRequest} educationCalculatorAnnualCostRequest Request payload for Education Calculator - Annual Cost
     * @param {module:api/FinancialPlanningApi~educationCalculatorAnnualCostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.educationCalculatorAnnualCost = function(educationCalculatorAnnualCostRequest, callback) {
      var postBody = educationCalculatorAnnualCostRequest;

      // verify the required parameter 'educationCalculatorAnnualCostRequest' is set
      if (educationCalculatorAnnualCostRequest === undefined || educationCalculatorAnnualCostRequest === null) {
        throw new Error("Missing the required parameter 'educationCalculatorAnnualCostRequest' when calling educationCalculatorAnnualCost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/education_calculator/annual_cost', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the educationCalculatorDepositAmount operation.
     * @callback module:api/FinancialPlanningApi~educationCalculatorDepositAmountCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Education Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount to achieve education costs
     * @param {module:model/EducationCalculatorDepositAmountRequest} educationCalculatorDepositAmountRequest Request payload for Education Calculator - Deposit Amount
     * @param {module:api/FinancialPlanningApi~educationCalculatorDepositAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.educationCalculatorDepositAmount = function(educationCalculatorDepositAmountRequest, callback) {
      var postBody = educationCalculatorDepositAmountRequest;

      // verify the required parameter 'educationCalculatorDepositAmountRequest' is set
      if (educationCalculatorDepositAmountRequest === undefined || educationCalculatorDepositAmountRequest === null) {
        throw new Error("Missing the required parameter 'educationCalculatorDepositAmountRequest' when calling educationCalculatorDepositAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/education_calculator/deposit_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the educationCalculatorPercentCovered operation.
     * @callback module:api/FinancialPlanningApi~educationCalculatorPercentCoveredCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Education Calculator - Percent Covered
     * Calculate the achievable percentage of education costs that can be covered
     * @param {module:model/EducationCalculatorPercentCoveredRequest} educationCalculatorPercentCoveredRequest Request payload for Education Calculator - Percent Covered
     * @param {module:api/FinancialPlanningApi~educationCalculatorPercentCoveredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.educationCalculatorPercentCovered = function(educationCalculatorPercentCoveredRequest, callback) {
      var postBody = educationCalculatorPercentCoveredRequest;

      // verify the required parameter 'educationCalculatorPercentCoveredRequest' is set
      if (educationCalculatorPercentCoveredRequest === undefined || educationCalculatorPercentCoveredRequest === null) {
        throw new Error("Missing the required parameter 'educationCalculatorPercentCoveredRequest' when calling educationCalculatorPercentCovered");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/education_calculator/percent_covered', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mortgageCalculatorDownPayment operation.
     * @callback module:api/FinancialPlanningApi~mortgageCalculatorDownPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mortgage Calculator - Down Payment
     * Calculate the necessary down payment for the mortgage
     * @param {module:model/MortgageCalculatorDownPaymentRequest} mortgageCalculatorDownPaymentRequest Request payload for Mortgage Calculator - Down Payment
     * @param {module:api/FinancialPlanningApi~mortgageCalculatorDownPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.mortgageCalculatorDownPayment = function(mortgageCalculatorDownPaymentRequest, callback) {
      var postBody = mortgageCalculatorDownPaymentRequest;

      // verify the required parameter 'mortgageCalculatorDownPaymentRequest' is set
      if (mortgageCalculatorDownPaymentRequest === undefined || mortgageCalculatorDownPaymentRequest === null) {
        throw new Error("Missing the required parameter 'mortgageCalculatorDownPaymentRequest' when calling mortgageCalculatorDownPayment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/mortgage_calculator/down_payment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mortgageCalculatorHomePrice operation.
     * @callback module:api/FinancialPlanningApi~mortgageCalculatorHomePriceCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mortgage Calculator - Home Price
     * Calculate the achievable home price for the mortgage
     * @param {module:model/MortgageCalculatorHomePriceRequest} mortgageCalculatorHomePriceRequest Request payload for Mortgage Calculator - Home Price
     * @param {module:api/FinancialPlanningApi~mortgageCalculatorHomePriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.mortgageCalculatorHomePrice = function(mortgageCalculatorHomePriceRequest, callback) {
      var postBody = mortgageCalculatorHomePriceRequest;

      // verify the required parameter 'mortgageCalculatorHomePriceRequest' is set
      if (mortgageCalculatorHomePriceRequest === undefined || mortgageCalculatorHomePriceRequest === null) {
        throw new Error("Missing the required parameter 'mortgageCalculatorHomePriceRequest' when calling mortgageCalculatorHomePrice");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/mortgage_calculator/home_price', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mortgageCalculatorPeriodicPayment operation.
     * @callback module:api/FinancialPlanningApi~mortgageCalculatorPeriodicPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mortgage Calculator - Periodic Payment
     * Calculate the periodic payment for the mortgage
     * @param {module:model/MortgageCalculatorPeriodicPaymentRequest} mortgageCalculatorPeriodicPaymentRequest Request payload for Mortgage Calculator - Periodic Payment
     * @param {module:api/FinancialPlanningApi~mortgageCalculatorPeriodicPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.mortgageCalculatorPeriodicPayment = function(mortgageCalculatorPeriodicPaymentRequest, callback) {
      var postBody = mortgageCalculatorPeriodicPaymentRequest;

      // verify the required parameter 'mortgageCalculatorPeriodicPaymentRequest' is set
      if (mortgageCalculatorPeriodicPaymentRequest === undefined || mortgageCalculatorPeriodicPaymentRequest === null) {
        throw new Error("Missing the required parameter 'mortgageCalculatorPeriodicPaymentRequest' when calling mortgageCalculatorPeriodicPayment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/mortgage_calculator/periodic_payment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseCalculatorAmount operation.
     * @callback module:api/FinancialPlanningApi~purchaseCalculatorAmountCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Calculator - Amount
     * Calculate the achievable purchase amount
     * @param {module:model/PurchaseCalculatorAmountRequest} purchaseCalculatorAmountRequest Request payload for Purchase Calculator - Amount
     * @param {module:api/FinancialPlanningApi~purchaseCalculatorAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.purchaseCalculatorAmount = function(purchaseCalculatorAmountRequest, callback) {
      var postBody = purchaseCalculatorAmountRequest;

      // verify the required parameter 'purchaseCalculatorAmountRequest' is set
      if (purchaseCalculatorAmountRequest === undefined || purchaseCalculatorAmountRequest === null) {
        throw new Error("Missing the required parameter 'purchaseCalculatorAmountRequest' when calling purchaseCalculatorAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/purchase_calculator/amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseCalculatorDepositAmount operation.
     * @callback module:api/FinancialPlanningApi~purchaseCalculatorDepositAmountCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount to achieve the purchase amount
     * @param {module:model/PurchaseCalculatorDepositAmountRequest} purchaseCalculatorDepositAmountRequest Request payload for Purchase Calculator - Deposit Amount
     * @param {module:api/FinancialPlanningApi~purchaseCalculatorDepositAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.purchaseCalculatorDepositAmount = function(purchaseCalculatorDepositAmountRequest, callback) {
      var postBody = purchaseCalculatorDepositAmountRequest;

      // verify the required parameter 'purchaseCalculatorDepositAmountRequest' is set
      if (purchaseCalculatorDepositAmountRequest === undefined || purchaseCalculatorDepositAmountRequest === null) {
        throw new Error("Missing the required parameter 'purchaseCalculatorDepositAmountRequest' when calling purchaseCalculatorDepositAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/purchase_calculator/deposit_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseCalculatorHorizon operation.
     * @callback module:api/FinancialPlanningApi~purchaseCalculatorHorizonCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase Calculator - Horizon
     * Calculate the necessary time horizon to achieve the purchase amount
     * @param {module:model/PurchaseCalculatorHorizonRequest} purchaseCalculatorHorizonRequest Request payload for Purchase Calculator - Horizon
     * @param {module:api/FinancialPlanningApi~purchaseCalculatorHorizonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.purchaseCalculatorHorizon = function(purchaseCalculatorHorizonRequest, callback) {
      var postBody = purchaseCalculatorHorizonRequest;

      // verify the required parameter 'purchaseCalculatorHorizonRequest' is set
      if (purchaseCalculatorHorizonRequest === undefined || purchaseCalculatorHorizonRequest === null) {
        throw new Error("Missing the required parameter 'purchaseCalculatorHorizonRequest' when calling purchaseCalculatorHorizon");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/purchase_calculator/horizon', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementCalculatorDepositAmount operation.
     * @callback module:api/FinancialPlanningApi~retirementCalculatorDepositAmountCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retirement Calculator - Deposit Amount
     * Calculate the necessary period deposit amount to achieve the retirement expenses
     * @param {module:model/RetirementCalculatorDepositAmountRequest} retirementCalculatorDepositAmountRequest Request payload for Retirement Calculator - Deposit AMount
     * @param {module:api/FinancialPlanningApi~retirementCalculatorDepositAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.retirementCalculatorDepositAmount = function(retirementCalculatorDepositAmountRequest, callback) {
      var postBody = retirementCalculatorDepositAmountRequest;

      // verify the required parameter 'retirementCalculatorDepositAmountRequest' is set
      if (retirementCalculatorDepositAmountRequest === undefined || retirementCalculatorDepositAmountRequest === null) {
        throw new Error("Missing the required parameter 'retirementCalculatorDepositAmountRequest' when calling retirementCalculatorDepositAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/retirement_calculator/deposit_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementCalculatorExpenses operation.
     * @callback module:api/FinancialPlanningApi~retirementCalculatorExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retirement Calculator - Expenses
     * Calculate the achievable retirement expenses
     * @param {module:model/RetirementCalculatorExpensesRequest} retirementCalculatorExpensesRequest Request payload for Retirement Calculator - Expenses
     * @param {module:api/FinancialPlanningApi~retirementCalculatorExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.retirementCalculatorExpenses = function(retirementCalculatorExpensesRequest, callback) {
      var postBody = retirementCalculatorExpensesRequest;

      // verify the required parameter 'retirementCalculatorExpensesRequest' is set
      if (retirementCalculatorExpensesRequest === undefined || retirementCalculatorExpensesRequest === null) {
        throw new Error("Missing the required parameter 'retirementCalculatorExpensesRequest' when calling retirementCalculatorExpenses");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/retirement_calculator/expenses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementCalculatorPercentCovered operation.
     * @callback module:api/FinancialPlanningApi~retirementCalculatorPercentCoveredCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retirement Calculator - Percent Covered
     * Calculate the achievable percentage of retirement expenses that can be covered
     * @param {module:model/RetirementCalculatorPercentCoveredRequest} retirementCalculatorPercentCoveredRequest Request payload for Retirement Calculator - Percent Covered
     * @param {module:api/FinancialPlanningApi~retirementCalculatorPercentCoveredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.retirementCalculatorPercentCovered = function(retirementCalculatorPercentCoveredRequest, callback) {
      var postBody = retirementCalculatorPercentCoveredRequest;

      // verify the required parameter 'retirementCalculatorPercentCoveredRequest' is set
      if (retirementCalculatorPercentCoveredRequest === undefined || retirementCalculatorPercentCoveredRequest === null) {
        throw new Error("Missing the required parameter 'retirementCalculatorPercentCoveredRequest' when calling retirementCalculatorPercentCovered");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/retirement_calculator/percent_covered', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
