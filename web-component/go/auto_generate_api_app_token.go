/*
 * Hydrogen Admin API
 *
 * The Hydrogen Admin API
 *
 * API version: 1.0.0
 * Contact: info@hydrogenplatform.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	b64 "encoding/base64"
	"github.com/antihax/optional"
	"github.com/lunux2008/xulu"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type AutoGenerateAppTokenApiService service

/*
 AutoGenerateAppTokenApiService getAppToken
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param appName app_name
  * @param optional nil or *AppTokenApiGetAppTokenUsingGETOpts - Optional Parameters:
	  * @param "TenantName" (optional.String) -  tenant-name

 @return []AppToken
*/

type AutoGenerateAppTokenApiGetAppTokenUsingGETOpts struct {
	TenantName optional.String
}

func (a *AutoGenerateAppTokenApiService) GetAttribMapList(appTokenConfig AppTokenConfig) []string {
	var attributes = appTokenConfig.Attributes
	var finalAttributes []string
	for _, tagAttributes := range attributes {
		finalAttributes = append(finalAttributes, tagAttributes.Name+"='"+tagAttributes.Value+"'")
	}
	return finalAttributes
}

func (a *AutoGenerateAppTokenApiService) GetToken(ctx context.Context, appName []string, localVarOptionals *AppTokenApiGetAppTokenUsingGETOpts, token string) ([]AppToken, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []AppToken
	)
	a.client = NewAPIClient(NewConfiguration())
	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/component/v1/app_token"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("app_name", parameterToString(appName, "multi"))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.TenantName.IsSet() {
		localVarHeaderParams["tenant-name"] = parameterToString(localVarOptionals.TenantName.Value(), "")
	}

	localVarHeaderParams["Authorization"] = "Bearer " + token

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []AppToken
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

func (a *AutoGenerateAppTokenApiService) CreateClientCredential(ctx context.Context, clientId string, clientSecret string) (Auth, *http.Response, error) {

	a.client = NewAPIClient(NewConfiguration())
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Auth
	)

	// create path and map variables
	inputFmt := a.client.cfg.BasePath[0 : strings.Index(a.client.cfg.BasePath, ".com")+4]

	localVarPath := inputFmt + "/authorization/v1/oauth/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("grant_type", "client_credentials")
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	localVarHeaderParams["Authorization"] = "Basic " + b64.StdEncoding.EncodeToString([]byte(clientId+":"+clientSecret))
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []AppToken
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

func (a *AutoGenerateAppTokenApiService) CreatePasswordCredential(ctx context.Context, clientId string, clientSecret string, username string, password string) (Auth, *http.Response, error) {

	a.client = NewAPIClient(NewConfiguration())
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Auth
	)

	// create path and map variables
	inputFmt := a.client.cfg.BasePath[0 : strings.Index(a.client.cfg.BasePath, ".com")+4]

	localVarPath := inputFmt + "/authorization/v1/oauth/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("grant_type", "password")
	localVarQueryParams.Add("username", username)
	localVarQueryParams.Add("password", password)
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	localVarHeaderParams["Authorization"] = "Basic " + b64.StdEncoding.EncodeToString([]byte(clientId+":"+clientSecret))
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []AppToken
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

//type M map[string]string interface{}

func (a *AutoGenerateAppTokenApiService) GetAppTokenUsingGET(ctx context.Context, appTokenConfig AppTokenConfig) ([]map[string]string, *http.Response, error) {

	a.client = NewAPIClient(NewConfiguration())
	var template = "<tag app-token='##app_token##' ##attrib_map##></tag>"
	var (
		localVarReturnValue []map[string]string
	)
	r, res, err := a.CreateClientCredential(ctx, appTokenConfig.ClientId, appTokenConfig.ClientSecret)
	var clientCredentialToken = r.AccessToken

	var token = ""
	for _, app := range appTokenConfig.AppNames {
		if strings.ToLower(appTokenConfig.AuthType) == "client_credentials" {
			token = clientCredentialToken
		} else if strings.ToLower(appTokenConfig.AuthType) == "password_credentials" {
			token = appTokenConfig.UserAccessToken
			if appTokenConfig.AccessToken == nil{
				r1, res1, err1 := a.CreatePasswordCredential(ctx, appTokenConfig.ClientId, appTokenConfig.ClientSecret, appTokenConfig.Username, appTokenConfig.Password)
				token = r1.AccessToken
				xulu.Use(res1, err1)
			}
		} else if strings.ToLower(appTokenConfig.AuthType) == "client_token_credentials" {
		    a.CreateClientTokenCredential(ctx, appTokenConfig.ClientId, appTokenConfig.ClientSecret, appTokenConfig.ClientToken)
		}

		r2, res2, err2 := a.GetToken(ctx, []string{app.AppName}, nil, token)
		xulu.Use(res2, err2)

		if r2 != nil {
			var appTokenValue = ""
			if len(r2) > 0 {
				appTokenValue = r2[0].AppToken
			}
			var appName = strings.ToLower(app.AppName)
			var tagValue = strings.Replace(appName, "_", "-", 0)
			var fillTemplateValue = strings.Replace(template, "tag", tagValue, -1)
			fillTemplateValue = strings.Replace(fillTemplateValue, "##app_token##", appTokenValue, -1)
			fillTemplateValue = strings.Replace(fillTemplateValue, "##attrib_map##", strings.Join(a.GetAttribMapList(appTokenConfig), " "), -1)

			var appMap = make(map[string]string)

			if appTokenConfig.IsEmbed {
				appMap[app.AppName] = fillTemplateValue
			} else {
				appMap[app.AppName] = appTokenValue
			}
			localVarReturnValue = append(localVarReturnValue, appMap)
		}
	}
	return localVarReturnValue, res, err
}

func (a *ClientApiService) CreateClientTokenCredential(ctx context.Context, clientId string, clientSecret string, client_token string) (Auth, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Auth
	)
	a.client = NewAPIClient(NewConfiguration())
	inputFmt := a.client.cfg.BasePath[0 : strings.Index(a.client.cfg.BasePath, ".com")+4]

	localVarPath := inputFmt + "/authorization/v1/client-token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("grant_type", "client_credentials")
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	localVarHeaderParams["Authorization"] = "Basic " + b64.StdEncoding.EncodeToString([]byte(clientId+":"+clientSecret))
	localVarHeaderParams["CLIENT_TOKEN"] = "Bearer " + client_token
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

