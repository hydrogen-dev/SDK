/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing BenchmarkApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BenchmarkApiTests
    {
        private BenchmarkApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BenchmarkApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BenchmarkApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BenchmarkApi
            //Assert.IsInstanceOfType(typeof(BenchmarkApi), instance, "instance is a BenchmarkApi");
        }

        
        /// <summary>
        /// Test CreateBenchmarkUsingPost
        /// </summary>
        [Test]
        public void CreateBenchmarkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Benchmark benchmark = null;
            //var response = instance.CreateBenchmarkUsingPost(benchmark);
            //Assert.IsInstanceOf<Benchmark> (response, "response is Benchmark");
        }
        
        /// <summary>
        /// Test DeleteBenchmarkUsingDelete
        /// </summary>
        [Test]
        public void DeleteBenchmarkUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? benchmarkId = null;
            //instance.DeleteBenchmarkUsingDelete(benchmarkId);
            
        }
        
        /// <summary>
        /// Test GetBenchmarkAllUsingGet
        /// </summary>
        [Test]
        public void GetBenchmarkAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetBenchmarkAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageBenchmark> (response, "response is PageBenchmark");
        }
        
        /// <summary>
        /// Test GetBenchmarkAssetSizeAllUsingGet
        /// </summary>
        [Test]
        public void GetBenchmarkAssetSizeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? benchmarkId = null;
            //DateTime? endDate = null;
            //string sortType = null;
            //DateTime? startDate = null;
            //var response = instance.GetBenchmarkAssetSizeAllUsingGet(benchmarkId, endDate, sortType, startDate);
            //Assert.IsInstanceOf<List<DateDoubleVO>> (response, "response is List<DateDoubleVO>");
        }
        
        /// <summary>
        /// Test GetBenchmarkUsingGet
        /// </summary>
        [Test]
        public void GetBenchmarkUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? benchmarkId = null;
            //var response = instance.GetBenchmarkUsingGet(benchmarkId);
            //Assert.IsInstanceOf<Benchmark> (response, "response is Benchmark");
        }
        
        /// <summary>
        /// Test UpdateBenchmarkUsingPut
        /// </summary>
        [Test]
        public void UpdateBenchmarkUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object benchmark = null;
            //Guid? benchmarkId = null;
            //var response = instance.UpdateBenchmarkUsingPut(benchmark, benchmarkId);
            //Assert.IsInstanceOf<Benchmark> (response, "response is Benchmark");
        }
        
    }

}
