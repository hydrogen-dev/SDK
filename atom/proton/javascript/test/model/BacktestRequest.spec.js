/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BacktestRequest', function() {
      beforeEach(function() {
        instance = new HydrogenProtonApi.BacktestRequest();
      });

      it('should create an instance of BacktestRequest', function() {
        // TODO: update the code to test BacktestRequest
        expect(instance).to.be.a(HydrogenProtonApi.BacktestRequest);
      });

      it('should have the property endDate (base name: "end_date")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property trades (base name: "trades")', function() {
        // TODO: update the code to test the property trades
        expect(instance).to.have.property('trades');
        // expect(instance.trades).to.be(expectedValueLiteral);
      });

      it('should have the property modelId (base name: "model_id")', function() {
        // TODO: update the code to test the property modelId
        expect(instance).to.have.property('modelId');
        // expect(instance.modelId).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "start_date")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property stats (base name: "stats")', function() {
        // TODO: update the code to test the property stats
        expect(instance).to.have.property('stats');
        // expect(instance.stats).to.be(expectedValueLiteral);
      });

      it('should have the property initialWeights (base name: "initial_weights")', function() {
        // TODO: update the code to test the property initialWeights
        expect(instance).to.have.property('initialWeights');
        // expect(instance.initialWeights).to.be(expectedValueLiteral);
      });

      it('should have the property settings (base name: "settings")', function() {
        // TODO: update the code to test the property settings
        expect(instance).to.have.property('settings');
        // expect(instance.settings).to.be(expectedValueLiteral);
      });

      it('should have the property assetSize (base name: "asset_size")', function() {
        // TODO: update the code to test the property assetSize
        expect(instance).to.have.property('assetSize');
        // expect(instance.assetSize).to.be(expectedValueLiteral);
      });

      it('should have the property assetSizes (base name: "asset_sizes")', function() {
        // TODO: update the code to test the property assetSizes
        expect(instance).to.have.property('assetSizes');
        // expect(instance.assetSizes).to.be(expectedValueLiteral);
      });

      it('should have the property holdings (base name: "holdings")', function() {
        // TODO: update the code to test the property holdings
        expect(instance).to.have.property('holdings');
        // expect(instance.holdings).to.be(expectedValueLiteral);
      });

    });
  });

}));
