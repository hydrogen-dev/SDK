=begin
#Hydrogen Proton API

#Financial engineering module of Hydrogen Atom

OpenAPI spec version: 1.9.2
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module ProtonApi
  class BudgetCalculatorRequest
    attr_accessor :scope

    attr_accessor :currency_conversion

    attr_accessor :relative_lookback

    attr_accessor :budget_id

    attr_accessor :as_of_date

    attr_accessor :show_average_spend

    attr_accessor :lookback_periods

    attr_accessor :budget_details

    attr_accessor :transaction_status_scope

    attr_accessor :only_cleansed

    attr_accessor :show_budget_track

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'scope' => :'scope',
        :'currency_conversion' => :'currency_conversion',
        :'relative_lookback' => :'relative_lookback',
        :'budget_id' => :'budget_id',
        :'as_of_date' => :'as_of_date',
        :'show_average_spend' => :'show_average_spend',
        :'lookback_periods' => :'lookback_periods',
        :'budget_details' => :'budget_details',
        :'transaction_status_scope' => :'transaction_status_scope',
        :'only_cleansed' => :'only_cleansed',
        :'show_budget_track' => :'show_budget_track'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'scope' => :'String',
        :'currency_conversion' => :'String',
        :'relative_lookback' => :'BOOLEAN',
        :'budget_id' => :'String',
        :'as_of_date' => :'Date',
        :'show_average_spend' => :'BOOLEAN',
        :'lookback_periods' => :'Integer',
        :'budget_details' => :'BudgetDetails',
        :'transaction_status_scope' => :'Array<String>',
        :'only_cleansed' => :'BOOLEAN',
        :'show_budget_track' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      else
        self.scope = 'all'
      end

      if attributes.has_key?(:'currency_conversion')
        self.currency_conversion = attributes[:'currency_conversion']
      end

      if attributes.has_key?(:'relative_lookback')
        self.relative_lookback = attributes[:'relative_lookback']
      else
        self.relative_lookback = true
      end

      if attributes.has_key?(:'budget_id')
        self.budget_id = attributes[:'budget_id']
      end

      if attributes.has_key?(:'as_of_date')
        self.as_of_date = attributes[:'as_of_date']
      end

      if attributes.has_key?(:'show_average_spend')
        self.show_average_spend = attributes[:'show_average_spend']
      else
        self.show_average_spend = false
      end

      if attributes.has_key?(:'lookback_periods')
        self.lookback_periods = attributes[:'lookback_periods']
      else
        self.lookback_periods = 1
      end

      if attributes.has_key?(:'budget_details')
        self.budget_details = attributes[:'budget_details']
      end

      if attributes.has_key?(:'transaction_status_scope')
        if (value = attributes[:'transaction_status_scope']).is_a?(Array)
          self.transaction_status_scope = value
        end
      end

      if attributes.has_key?(:'only_cleansed')
        self.only_cleansed = attributes[:'only_cleansed']
      else
        self.only_cleansed = false
      end

      if attributes.has_key?(:'show_budget_track')
        self.show_budget_track = attributes[:'show_budget_track']
      else
        self.show_budget_track = true
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@lookback_periods.nil? && @lookback_periods < 1
        invalid_properties.push('invalid value for "lookback_periods", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      scope_validator = EnumAttributeValidator.new('String', ['all', 'external', 'internal'])
      return false unless scope_validator.valid?(@scope)
      return false if !@lookback_periods.nil? && @lookback_periods < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scope Object to be assigned
    def scope=(scope)
      validator = EnumAttributeValidator.new('String', ['all', 'external', 'internal'])
      unless validator.valid?(scope)
        fail ArgumentError, 'invalid value for "scope", must be one of #{validator.allowable_values}.'
      end
      @scope = scope
    end

    # Custom attribute writer method with validation
    # @param [Object] lookback_periods Value to be assigned
    def lookback_periods=(lookback_periods)
      if !lookback_periods.nil? && lookback_periods < 1
        fail ArgumentError, 'invalid value for "lookback_periods", must be greater than or equal to 1.'
      end

      @lookback_periods = lookback_periods
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          scope == o.scope &&
          currency_conversion == o.currency_conversion &&
          relative_lookback == o.relative_lookback &&
          budget_id == o.budget_id &&
          as_of_date == o.as_of_date &&
          show_average_spend == o.show_average_spend &&
          lookback_periods == o.lookback_periods &&
          budget_details == o.budget_details &&
          transaction_status_scope == o.transaction_status_scope &&
          only_cleansed == o.only_cleansed &&
          show_budget_track == o.show_budget_track
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [scope, currency_conversion, relative_lookback, budget_id, as_of_date, show_average_spend, lookback_periods, budget_details, transaction_status_scope, only_cleansed, show_budget_track].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        value
      when :Date
        value
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ProtonApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end
# Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end
# Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
