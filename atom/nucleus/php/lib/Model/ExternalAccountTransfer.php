<?php
/**
 * ExternalAccountTransfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * ExternalAccountTransfer Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ExternalAccountTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ExternalAccountTransfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_holder' => 'string',
        'account_id' => 'string',
        'account_number' => 'string',
        'account_type_id' => 'string',
        'amount' => 'double',
        'comment' => 'string',
        'create_date' => '\DateTime',
        'currency_code' => 'string',
        'dtc_number' => 'string',
        'firm_name' => 'string',
        'id' => 'string',
        'metadata' => 'map[string,string]',
        'received_date' => '\DateTime',
        'roth_five_year' => 'int',
        'secondary_id' => 'string',
        'status' => 'string',
        'status_time_stamp' => '\DateTime',
        'transfer_all_cash' => 'bool',
        'transfer_date' => '\DateTime',
        'transfer_type' => 'string',
        'update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_holder' => null,
        'account_id' => 'uuid',
        'account_number' => null,
        'account_type_id' => 'uuid',
        'amount' => 'double',
        'comment' => null,
        'create_date' => 'date-time',
        'currency_code' => null,
        'dtc_number' => null,
        'firm_name' => null,
        'id' => 'uuid',
        'metadata' => null,
        'received_date' => 'date-time',
        'roth_five_year' => 'int32',
        'secondary_id' => null,
        'status' => null,
        'status_time_stamp' => 'date-time',
        'transfer_all_cash' => null,
        'transfer_date' => 'date',
        'transfer_type' => null,
        'update_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_holder' => 'account_holder',
        'account_id' => 'account_id',
        'account_number' => 'account_number',
        'account_type_id' => 'account_type_id',
        'amount' => 'amount',
        'comment' => 'comment',
        'create_date' => 'create_date',
        'currency_code' => 'currency_code',
        'dtc_number' => 'dtc_number',
        'firm_name' => 'firm_name',
        'id' => 'id',
        'metadata' => 'metadata',
        'received_date' => 'received_date',
        'roth_five_year' => 'roth_five_year',
        'secondary_id' => 'secondary_id',
        'status' => 'status',
        'status_time_stamp' => 'status_time_stamp',
        'transfer_all_cash' => 'transfer_all_cash',
        'transfer_date' => 'transfer_date',
        'transfer_type' => 'transfer_type',
        'update_date' => 'update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_holder' => 'setAccountHolder',
        'account_id' => 'setAccountId',
        'account_number' => 'setAccountNumber',
        'account_type_id' => 'setAccountTypeId',
        'amount' => 'setAmount',
        'comment' => 'setComment',
        'create_date' => 'setCreateDate',
        'currency_code' => 'setCurrencyCode',
        'dtc_number' => 'setDtcNumber',
        'firm_name' => 'setFirmName',
        'id' => 'setId',
        'metadata' => 'setMetadata',
        'received_date' => 'setReceivedDate',
        'roth_five_year' => 'setRothFiveYear',
        'secondary_id' => 'setSecondaryId',
        'status' => 'setStatus',
        'status_time_stamp' => 'setStatusTimeStamp',
        'transfer_all_cash' => 'setTransferAllCash',
        'transfer_date' => 'setTransferDate',
        'transfer_type' => 'setTransferType',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_holder' => 'getAccountHolder',
        'account_id' => 'getAccountId',
        'account_number' => 'getAccountNumber',
        'account_type_id' => 'getAccountTypeId',
        'amount' => 'getAmount',
        'comment' => 'getComment',
        'create_date' => 'getCreateDate',
        'currency_code' => 'getCurrencyCode',
        'dtc_number' => 'getDtcNumber',
        'firm_name' => 'getFirmName',
        'id' => 'getId',
        'metadata' => 'getMetadata',
        'received_date' => 'getReceivedDate',
        'roth_five_year' => 'getRothFiveYear',
        'secondary_id' => 'getSecondaryId',
        'status' => 'getStatus',
        'status_time_stamp' => 'getStatusTimeStamp',
        'transfer_all_cash' => 'getTransferAllCash',
        'transfer_date' => 'getTransferDate',
        'transfer_type' => 'getTransferType',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_holder'] = isset($data['account_holder']) ? $data['account_holder'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['account_type_id'] = isset($data['account_type_id']) ? $data['account_type_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['dtc_number'] = isset($data['dtc_number']) ? $data['dtc_number'] : null;
        $this->container['firm_name'] = isset($data['firm_name']) ? $data['firm_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['received_date'] = isset($data['received_date']) ? $data['received_date'] : null;
        $this->container['roth_five_year'] = isset($data['roth_five_year']) ? $data['roth_five_year'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_time_stamp'] = isset($data['status_time_stamp']) ? $data['status_time_stamp'] : null;
        $this->container['transfer_all_cash'] = isset($data['transfer_all_cash']) ? $data['transfer_all_cash'] : null;
        $this->container['transfer_date'] = isset($data['transfer_date']) ? $data['transfer_date'] : null;
        $this->container['transfer_type'] = isset($data['transfer_type']) ? $data['transfer_type'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_holder'] === null) {
            $invalidProperties[] = "'account_holder' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['account_type_id'] === null) {
            $invalidProperties[] = "'account_type_id' can't be null";
        }
        if ($this->container['firm_name'] === null) {
            $invalidProperties[] = "'firm_name' can't be null";
        }
        if ($this->container['transfer_all_cash'] === null) {
            $invalidProperties[] = "'transfer_all_cash' can't be null";
        }
        if ($this->container['transfer_date'] === null) {
            $invalidProperties[] = "'transfer_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_holder
     *
     * @return string
     */
    public function getAccountHolder()
    {
        return $this->container['account_holder'];
    }

    /**
     * Sets account_holder
     *
     * @param string $account_holder External Account Transfer accountHolder
     *
     * @return $this
     */
    public function setAccountHolder($account_holder)
    {
        $this->container['account_holder'] = $account_holder;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id External Account Transfer account id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number External Account Transfer account number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_type_id
     *
     * @return string
     */
    public function getAccountTypeId()
    {
        return $this->container['account_type_id'];
    }

    /**
     * Sets account_type_id
     *
     * @param string $account_type_id External Account Transfer account type id
     *
     * @return $this
     */
    public function setAccountTypeId($account_type_id)
    {
        $this->container['account_type_id'] = $account_type_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount External Account Transfer amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment External Account Transfer comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets dtc_number
     *
     * @return string
     */
    public function getDtcNumber()
    {
        return $this->container['dtc_number'];
    }

    /**
     * Sets dtc_number
     *
     * @param string $dtc_number External Account Transfer dtcNumber
     *
     * @return $this
     */
    public function setDtcNumber($dtc_number)
    {
        $this->container['dtc_number'] = $dtc_number;

        return $this;
    }

    /**
     * Gets firm_name
     *
     * @return string
     */
    public function getFirmName()
    {
        return $this->container['firm_name'];
    }

    /**
     * Sets firm_name
     *
     * @param string $firm_name External Account Transfer firm name
     *
     * @return $this
     */
    public function setFirmName($firm_name)
    {
        $this->container['firm_name'] = $firm_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets received_date
     *
     * @return \DateTime
     */
    public function getReceivedDate()
    {
        return $this->container['received_date'];
    }

    /**
     * Sets received_date
     *
     * @param \DateTime $received_date received_date
     *
     * @return $this
     */
    public function setReceivedDate($received_date)
    {
        $this->container['received_date'] = $received_date;

        return $this;
    }

    /**
     * Gets roth_five_year
     *
     * @return int
     */
    public function getRothFiveYear()
    {
        return $this->container['roth_five_year'];
    }

    /**
     * Sets roth_five_year
     *
     * @param int $roth_five_year External Account Transfer roth five year
     *
     * @return $this
     */
    public function setRothFiveYear($roth_five_year)
    {
        $this->container['roth_five_year'] = $roth_five_year;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status External Account Transfer status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_time_stamp
     *
     * @return \DateTime
     */
    public function getStatusTimeStamp()
    {
        return $this->container['status_time_stamp'];
    }

    /**
     * Sets status_time_stamp
     *
     * @param \DateTime $status_time_stamp status_time_stamp
     *
     * @return $this
     */
    public function setStatusTimeStamp($status_time_stamp)
    {
        $this->container['status_time_stamp'] = $status_time_stamp;

        return $this;
    }

    /**
     * Gets transfer_all_cash
     *
     * @return bool
     */
    public function getTransferAllCash()
    {
        return $this->container['transfer_all_cash'];
    }

    /**
     * Sets transfer_all_cash
     *
     * @param bool $transfer_all_cash External Account Transfer transfer all cash
     *
     * @return $this
     */
    public function setTransferAllCash($transfer_all_cash)
    {
        $this->container['transfer_all_cash'] = $transfer_all_cash;

        return $this;
    }

    /**
     * Gets transfer_date
     *
     * @return \DateTime
     */
    public function getTransferDate()
    {
        return $this->container['transfer_date'];
    }

    /**
     * Sets transfer_date
     *
     * @param \DateTime $transfer_date External Account Transfer account transfer date
     *
     * @return $this
     */
    public function setTransferDate($transfer_date)
    {
        $this->container['transfer_date'] = $transfer_date;

        return $this;
    }

    /**
     * Gets transfer_type
     *
     * @return string
     */
    public function getTransferType()
    {
        return $this->container['transfer_type'];
    }

    /**
     * Sets transfer_type
     *
     * @param string $transfer_type External Account Transfer transfer type
     *
     * @return $this
     */
    public function setTransferType($transfer_type)
    {
        $this->container['transfer_type'] = $transfer_type;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


