/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// Answer
    /// </summary>
    [DataContract]
    public partial class Answer :  IEquatable<Answer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Answer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Answer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Answer" /> class.
        /// </summary>
        /// <param name="answerId">answerId (required).</param>
        public Answer(Guid? answerId = default(Guid?))
        {
            // to ensure "answerId" is required (not null)
            if (answerId == null)
            {
                throw new InvalidDataException("answerId is a required property for Answer and cannot be null");
            }
            else
            {
                this.AnswerId = answerId;
            }
        }
        
        /// <summary>
        /// Gets or Sets AnswerId
        /// </summary>
        [DataMember(Name="answer_id", EmitDefaultValue=false)]
        public Guid? AnswerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Answer {\n");
            sb.Append("  AnswerId: ").Append(AnswerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Answer);
        }

        /// <summary>
        /// Returns true if Answer instances are equal
        /// </summary>
        /// <param name="input">Instance of Answer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Answer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnswerId == input.AnswerId ||
                    (this.AnswerId != null &&
                    this.AnswerId.Equals(input.AnswerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnswerId != null)
                    hashCode = hashCode * 59 + this.AnswerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
