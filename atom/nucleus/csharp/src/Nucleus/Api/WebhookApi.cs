/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhookApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// One active webhook service is allowed at all times.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>Webhook</returns>
        Webhook CreateWebhookUsingPost (Webhook webhookRequest);

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// One active webhook service is allowed at all times.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> CreateWebhookUsingPostWithHttpInfo (Webhook webhookRequest);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns></returns>
        void DeleteWebhookUsingDelete (Guid? webhookId);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookUsingDeleteWithHttpInfo (Guid? webhookId);
        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Get information for all webhooks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageWebhook</returns>
        PageWebhook GetWebhookAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Get information for all webhooks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageWebhook</returns>
        ApiResponse<PageWebhook> GetWebhookAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Webhook</returns>
        Webhook GetWebhookUsingGet (Guid? webhookId);

        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookUsingGetWithHttpInfo (Guid? webhookId);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook for your firm. The webhook_id must be provided
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Webhook</returns>
        Webhook UpdateWebhookUsingPut (Object webhook, Guid? webhookId);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook for your firm. The webhook_id must be provided
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> UpdateWebhookUsingPutWithHttpInfo (Object webhook, Guid? webhookId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// One active webhook service is allowed at all times.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> CreateWebhookUsingPostAsync (Webhook webhookRequest);

        /// <summary>
        /// Create a webhook
        /// </summary>
        /// <remarks>
        /// One active webhook service is allowed at all times.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> CreateWebhookUsingPostAsyncWithHttpInfo (Webhook webhookRequest);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookUsingDeleteAsync (Guid? webhookId);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookUsingDeleteAsyncWithHttpInfo (Guid? webhookId);
        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Get information for all webhooks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageWebhook</returns>
        System.Threading.Tasks.Task<PageWebhook> GetWebhookAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all webhooks
        /// </summary>
        /// <remarks>
        /// Get information for all webhooks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageWebhook>> GetWebhookAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookUsingGetAsync (Guid? webhookId);

        /// <summary>
        /// Retrieve a webhook
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookUsingGetAsyncWithHttpInfo (Guid? webhookId);
        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook for your firm. The webhook_id must be provided
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> UpdateWebhookUsingPutAsync (Object webhook, Guid? webhookId);

        /// <summary>
        /// Update a webhook
        /// </summary>
        /// <remarks>
        /// Update a webhook for your firm. The webhook_id must be provided
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> UpdateWebhookUsingPutAsyncWithHttpInfo (Object webhook, Guid? webhookId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhookApi : IWebhookApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhookApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhookApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a webhook One active webhook service is allowed at all times.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>Webhook</returns>
        public Webhook CreateWebhookUsingPost (Webhook webhookRequest)
        {
             ApiResponse<Webhook> localVarResponse = CreateWebhookUsingPostWithHttpInfo(webhookRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a webhook One active webhook service is allowed at all times.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse< Webhook > CreateWebhookUsingPostWithHttpInfo (Webhook webhookRequest)
        {
            // verify the required parameter 'webhookRequest' is set
            if (webhookRequest == null)
                throw new ApiException(400, "Missing required parameter 'webhookRequest' when calling WebhookApi->CreateWebhookUsingPost");

            var localVarPath = "/nucleus/v1/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookRequest != null && webhookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhookUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Create a webhook One active webhook service is allowed at all times.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> CreateWebhookUsingPostAsync (Webhook webhookRequest)
        {
             ApiResponse<Webhook> localVarResponse = await CreateWebhookUsingPostAsyncWithHttpInfo(webhookRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a webhook One active webhook service is allowed at all times.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookRequest">webhookRequest</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> CreateWebhookUsingPostAsyncWithHttpInfo (Webhook webhookRequest)
        {
            // verify the required parameter 'webhookRequest' is set
            if (webhookRequest == null)
                throw new ApiException(400, "Missing required parameter 'webhookRequest' when calling WebhookApi->CreateWebhookUsingPost");

            var localVarPath = "/nucleus/v1/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookRequest != null && webhookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhookRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWebhookUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Delete a webhook Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns></returns>
        public void DeleteWebhookUsingDelete (Guid? webhookId)
        {
             DeleteWebhookUsingDeleteWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Delete a webhook Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWebhookUsingDeleteWithHttpInfo (Guid? webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhookApi->DeleteWebhookUsingDelete");

            var localVarPath = "/nucleus/v1/webhook/{webhook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhook_id", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a webhook Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookUsingDeleteAsync (Guid? webhookId)
        {
             await DeleteWebhookUsingDeleteAsyncWithHttpInfo(webhookId);

        }

        /// <summary>
        /// Delete a webhook Permanently delete a webhook for your firm. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookUsingDeleteAsyncWithHttpInfo (Guid? webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhookApi->DeleteWebhookUsingDelete");

            var localVarPath = "/nucleus/v1/webhook/{webhook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhook_id", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWebhookUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all webhooks Get information for all webhooks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageWebhook</returns>
        public PageWebhook GetWebhookAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageWebhook> localVarResponse = GetWebhookAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all webhooks Get information for all webhooks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageWebhook</returns>
        public ApiResponse< PageWebhook > GetWebhookAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageWebhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageWebhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageWebhook)));
        }

        /// <summary>
        /// List all webhooks Get information for all webhooks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageWebhook</returns>
        public async System.Threading.Tasks.Task<PageWebhook> GetWebhookAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageWebhook> localVarResponse = await GetWebhookAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all webhooks Get information for all webhooks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageWebhook>> GetWebhookAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/webhook";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageWebhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageWebhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageWebhook)));
        }

        /// <summary>
        /// Retrieve a webhook Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhookUsingGet (Guid? webhookId)
        {
             ApiResponse<Webhook> localVarResponse = GetWebhookUsingGetWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a webhook Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse< Webhook > GetWebhookUsingGetWithHttpInfo (Guid? webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhookApi->GetWebhookUsingGet");

            var localVarPath = "/nucleus/v1/webhook/{webhook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhook_id", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Retrieve a webhook Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookUsingGetAsync (Guid? webhookId)
        {
             ApiResponse<Webhook> localVarResponse = await GetWebhookUsingGetAsyncWithHttpInfo(webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a webhook Retrieve the information for a specific webhook. The webhook_id must be provided.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookUsingGetAsyncWithHttpInfo (Guid? webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhookApi->GetWebhookUsingGet");

            var localVarPath = "/nucleus/v1/webhook/{webhook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhook_id", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Update a webhook Update a webhook for your firm. The webhook_id must be provided
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Webhook</returns>
        public Webhook UpdateWebhookUsingPut (Object webhook, Guid? webhookId)
        {
             ApiResponse<Webhook> localVarResponse = UpdateWebhookUsingPutWithHttpInfo(webhook, webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook Update a webhook for your firm. The webhook_id must be provided
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse< Webhook > UpdateWebhookUsingPutWithHttpInfo (Object webhook, Guid? webhookId)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
                throw new ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->UpdateWebhookUsingPut");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhookApi->UpdateWebhookUsingPut");

            var localVarPath = "/nucleus/v1/webhook/{webhook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhook_id", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (webhook != null && webhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhook; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Update a webhook Update a webhook for your firm. The webhook_id must be provided
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> UpdateWebhookUsingPutAsync (Object webhook, Guid? webhookId)
        {
             ApiResponse<Webhook> localVarResponse = await UpdateWebhookUsingPutAsyncWithHttpInfo(webhook, webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a webhook Update a webhook for your firm. The webhook_id must be provided
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhook">webhook</param>
        /// <param name="webhookId">UUID webhook_id</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> UpdateWebhookUsingPutAsyncWithHttpInfo (Object webhook, Guid? webhookId)
        {
            // verify the required parameter 'webhook' is set
            if (webhook == null)
                throw new ApiException(400, "Missing required parameter 'webhook' when calling WebhookApi->UpdateWebhookUsingPut");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling WebhookApi->UpdateWebhookUsingPut");

            var localVarPath = "/nucleus/v1/webhook/{webhook_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhook_id", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (webhook != null && webhook.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(webhook); // http body (model) parameter
            }
            else
            {
                localVarPostBody = webhook; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

    }
}
