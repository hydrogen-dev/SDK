/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// PurchaseCalculatorDepositAmountRequest
    /// </summary>
    [DataContract]
    public partial class PurchaseCalculatorDepositAmountRequest :  IEquatable<PurchaseCalculatorDepositAmountRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines HorizonFrequencyInterval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HorizonFrequencyIntervalEnum
        {
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 1,
            
            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 4
        }

        /// <summary>
        /// Gets or Sets HorizonFrequencyInterval
        /// </summary>
        [DataMember(Name="horizon_frequency_interval", EmitDefaultValue=false)]
        public HorizonFrequencyIntervalEnum? HorizonFrequencyInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseCalculatorDepositAmountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PurchaseCalculatorDepositAmountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseCalculatorDepositAmountRequest" /> class.
        /// </summary>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="horizonFrequencyInterval">horizonFrequencyInterval (default to HorizonFrequencyIntervalEnum.Year).</param>
        /// <param name="purchaseHorizon">purchaseHorizon (required).</param>
        /// <param name="investmentTax">investmentTax (default to 0.0F).</param>
        /// <param name="portfolioReturn">portfolioReturn (required).</param>
        /// <param name="depositSchedule">depositSchedule.</param>
        /// <param name="currentSavings">currentSavings (default to 0.0F).</param>
        /// <param name="purchaseAmount">purchaseAmount (required).</param>
        /// <param name="inflationRate">inflationRate (default to 0.0F).</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        public PurchaseCalculatorDepositAmountRequest(List<Guid?> accountIds = default(List<Guid?>), HorizonFrequencyIntervalEnum? horizonFrequencyInterval = HorizonFrequencyIntervalEnum.Year, int? purchaseHorizon = default(int?), float? investmentTax = 0.0F, float? portfolioReturn = default(float?), CalculatorDepositSchedule depositSchedule = default(CalculatorDepositSchedule), float? currentSavings = 0.0F, float? purchaseAmount = default(float?), float? inflationRate = 0.0F, List<Guid?> aggregationAccountIds = default(List<Guid?>))
        {
            // to ensure "purchaseHorizon" is required (not null)
            if (purchaseHorizon == null)
            {
                throw new InvalidDataException("purchaseHorizon is a required property for PurchaseCalculatorDepositAmountRequest and cannot be null");
            }
            else
            {
                this.PurchaseHorizon = purchaseHorizon;
            }
            // to ensure "portfolioReturn" is required (not null)
            if (portfolioReturn == null)
            {
                throw new InvalidDataException("portfolioReturn is a required property for PurchaseCalculatorDepositAmountRequest and cannot be null");
            }
            else
            {
                this.PortfolioReturn = portfolioReturn;
            }
            // to ensure "purchaseAmount" is required (not null)
            if (purchaseAmount == null)
            {
                throw new InvalidDataException("purchaseAmount is a required property for PurchaseCalculatorDepositAmountRequest and cannot be null");
            }
            else
            {
                this.PurchaseAmount = purchaseAmount;
            }
            this.AccountIds = accountIds;
            // use default value if no "horizonFrequencyInterval" provided
            if (horizonFrequencyInterval == null)
            {
                this.HorizonFrequencyInterval = HorizonFrequencyIntervalEnum.Year;
            }
            else
            {
                this.HorizonFrequencyInterval = horizonFrequencyInterval;
            }
            // use default value if no "investmentTax" provided
            if (investmentTax == null)
            {
                this.InvestmentTax = 0.0F;
            }
            else
            {
                this.InvestmentTax = investmentTax;
            }
            this.DepositSchedule = depositSchedule;
            // use default value if no "currentSavings" provided
            if (currentSavings == null)
            {
                this.CurrentSavings = 0.0F;
            }
            else
            {
                this.CurrentSavings = currentSavings;
            }
            // use default value if no "inflationRate" provided
            if (inflationRate == null)
            {
                this.InflationRate = 0.0F;
            }
            else
            {
                this.InflationRate = inflationRate;
            }
            this.AggregationAccountIds = aggregationAccountIds;
        }
        
        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }


        /// <summary>
        /// Gets or Sets PurchaseHorizon
        /// </summary>
        [DataMember(Name="purchase_horizon", EmitDefaultValue=false)]
        public int? PurchaseHorizon { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentTax
        /// </summary>
        [DataMember(Name="investment_tax", EmitDefaultValue=false)]
        public float? InvestmentTax { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioReturn
        /// </summary>
        [DataMember(Name="portfolio_return", EmitDefaultValue=false)]
        public float? PortfolioReturn { get; set; }

        /// <summary>
        /// Gets or Sets DepositSchedule
        /// </summary>
        [DataMember(Name="deposit_schedule", EmitDefaultValue=false)]
        public CalculatorDepositSchedule DepositSchedule { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSavings
        /// </summary>
        [DataMember(Name="current_savings", EmitDefaultValue=false)]
        public float? CurrentSavings { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseAmount
        /// </summary>
        [DataMember(Name="purchase_amount", EmitDefaultValue=false)]
        public float? PurchaseAmount { get; set; }

        /// <summary>
        /// Gets or Sets InflationRate
        /// </summary>
        [DataMember(Name="inflation_rate", EmitDefaultValue=false)]
        public float? InflationRate { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseCalculatorDepositAmountRequest {\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  HorizonFrequencyInterval: ").Append(HorizonFrequencyInterval).Append("\n");
            sb.Append("  PurchaseHorizon: ").Append(PurchaseHorizon).Append("\n");
            sb.Append("  InvestmentTax: ").Append(InvestmentTax).Append("\n");
            sb.Append("  PortfolioReturn: ").Append(PortfolioReturn).Append("\n");
            sb.Append("  DepositSchedule: ").Append(DepositSchedule).Append("\n");
            sb.Append("  CurrentSavings: ").Append(CurrentSavings).Append("\n");
            sb.Append("  PurchaseAmount: ").Append(PurchaseAmount).Append("\n");
            sb.Append("  InflationRate: ").Append(InflationRate).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseCalculatorDepositAmountRequest);
        }

        /// <summary>
        /// Returns true if PurchaseCalculatorDepositAmountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseCalculatorDepositAmountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseCalculatorDepositAmountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.HorizonFrequencyInterval == input.HorizonFrequencyInterval ||
                    (this.HorizonFrequencyInterval != null &&
                    this.HorizonFrequencyInterval.Equals(input.HorizonFrequencyInterval))
                ) && 
                (
                    this.PurchaseHorizon == input.PurchaseHorizon ||
                    (this.PurchaseHorizon != null &&
                    this.PurchaseHorizon.Equals(input.PurchaseHorizon))
                ) && 
                (
                    this.InvestmentTax == input.InvestmentTax ||
                    (this.InvestmentTax != null &&
                    this.InvestmentTax.Equals(input.InvestmentTax))
                ) && 
                (
                    this.PortfolioReturn == input.PortfolioReturn ||
                    (this.PortfolioReturn != null &&
                    this.PortfolioReturn.Equals(input.PortfolioReturn))
                ) && 
                (
                    this.DepositSchedule == input.DepositSchedule ||
                    (this.DepositSchedule != null &&
                    this.DepositSchedule.Equals(input.DepositSchedule))
                ) && 
                (
                    this.CurrentSavings == input.CurrentSavings ||
                    (this.CurrentSavings != null &&
                    this.CurrentSavings.Equals(input.CurrentSavings))
                ) && 
                (
                    this.PurchaseAmount == input.PurchaseAmount ||
                    (this.PurchaseAmount != null &&
                    this.PurchaseAmount.Equals(input.PurchaseAmount))
                ) && 
                (
                    this.InflationRate == input.InflationRate ||
                    (this.InflationRate != null &&
                    this.InflationRate.Equals(input.InflationRate))
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.HorizonFrequencyInterval != null)
                    hashCode = hashCode * 59 + this.HorizonFrequencyInterval.GetHashCode();
                if (this.PurchaseHorizon != null)
                    hashCode = hashCode * 59 + this.PurchaseHorizon.GetHashCode();
                if (this.InvestmentTax != null)
                    hashCode = hashCode * 59 + this.InvestmentTax.GetHashCode();
                if (this.PortfolioReturn != null)
                    hashCode = hashCode * 59 + this.PortfolioReturn.GetHashCode();
                if (this.DepositSchedule != null)
                    hashCode = hashCode * 59 + this.DepositSchedule.GetHashCode();
                if (this.CurrentSavings != null)
                    hashCode = hashCode * 59 + this.CurrentSavings.GetHashCode();
                if (this.PurchaseAmount != null)
                    hashCode = hashCode * 59 + this.PurchaseAmount.GetHashCode();
                if (this.InflationRate != null)
                    hashCode = hashCode * 59 + this.InflationRate.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PurchaseHorizon (int?) minimum
            if(this.PurchaseHorizon < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseHorizon, must be a value greater than or equal to 0.", new [] { "PurchaseHorizon" });
            }

            // InvestmentTax (float?) maximum
            if(this.InvestmentTax > (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvestmentTax, must be a value less than or equal to 1.", new [] { "InvestmentTax" });
            }

            // InvestmentTax (float?) minimum
            if(this.InvestmentTax < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvestmentTax, must be a value greater than or equal to 0.", new [] { "InvestmentTax" });
            }

            // PortfolioReturn (float?) minimum
            if(this.PortfolioReturn < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioReturn, must be a value greater than or equal to -1.", new [] { "PortfolioReturn" });
            }

            // CurrentSavings (float?) minimum
            if(this.CurrentSavings < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentSavings, must be a value greater than or equal to 0.", new [] { "CurrentSavings" });
            }

            // PurchaseAmount (float?) minimum
            if(this.PurchaseAmount < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PurchaseAmount, must be a value greater than or equal to 0.", new [] { "PurchaseAmount" });
            }

            // InflationRate (float?) minimum
            if(this.InflationRate < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InflationRate, must be a value greater than or equal to -1.", new [] { "InflationRate" });
            }

            yield break;
        }
    }

}
