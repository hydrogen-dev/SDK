/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.RiskScoreOptConfigModel;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * RiskAllocation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-12T10:03:00.746-04:00")
public class RiskAllocation {
  @SerializedName("risk_score")
  private BigDecimal riskScore = null;

  /**
   * The portfolio standard deviation
   */
  @JsonAdapter(AllocationMethodEnum.Adapter.class)
  public enum AllocationMethodEnum {
    SELECT("select"),
    
    CREATE("create");

    private String value;

    AllocationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllocationMethodEnum fromValue(String text) {
      for (AllocationMethodEnum b : AllocationMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AllocationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllocationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllocationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AllocationMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("allocation_method")
  private AllocationMethodEnum allocationMethod = null;

  @SerializedName("opt_config")
  private RiskScoreOptConfigModel optConfig = null;

  @SerializedName("allocations")
  private List<UUID> allocations = null;

  @SerializedName("use_proxy_data")
  private Boolean useProxyData = false;

  public RiskAllocation riskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
    return this;
  }

   /**
   * A risk score from 0 to 100
   * minimum: 0
   * maximum: 100
   * @return riskScore
  **/
  @ApiModelProperty(required = true, value = "A risk score from 0 to 100")
  public BigDecimal getRiskScore() {
    return riskScore;
  }

  public void setRiskScore(BigDecimal riskScore) {
    this.riskScore = riskScore;
  }

  public RiskAllocation allocationMethod(AllocationMethodEnum allocationMethod) {
    this.allocationMethod = allocationMethod;
    return this;
  }

   /**
   * The portfolio standard deviation
   * @return allocationMethod
  **/
  @ApiModelProperty(required = true, value = "The portfolio standard deviation")
  public AllocationMethodEnum getAllocationMethod() {
    return allocationMethod;
  }

  public void setAllocationMethod(AllocationMethodEnum allocationMethod) {
    this.allocationMethod = allocationMethod;
  }

  public RiskAllocation optConfig(RiskScoreOptConfigModel optConfig) {
    this.optConfig = optConfig;
    return this;
  }

   /**
   * Get optConfig
   * @return optConfig
  **/
  @ApiModelProperty(value = "")
  public RiskScoreOptConfigModel getOptConfig() {
    return optConfig;
  }

  public void setOptConfig(RiskScoreOptConfigModel optConfig) {
    this.optConfig = optConfig;
  }

  public RiskAllocation allocations(List<UUID> allocations) {
    this.allocations = allocations;
    return this;
  }

  public RiskAllocation addAllocationsItem(UUID allocationsItem) {
    if (this.allocations == null) {
      this.allocations = new ArrayList<UUID>();
    }
    this.allocations.add(allocationsItem);
    return this;
  }

   /**
   * The portfolio standard deviation
   * @return allocations
  **/
  @ApiModelProperty(value = "The portfolio standard deviation")
  public List<UUID> getAllocations() {
    return allocations;
  }

  public void setAllocations(List<UUID> allocations) {
    this.allocations = allocations;
  }

  public RiskAllocation useProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
    return this;
  }

   /**
   * If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.
   * @return useProxyData
  **/
  @ApiModelProperty(value = "If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.")
  public Boolean isUseProxyData() {
    return useProxyData;
  }

  public void setUseProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskAllocation riskAllocation = (RiskAllocation) o;
    return Objects.equals(this.riskScore, riskAllocation.riskScore) &&
        Objects.equals(this.allocationMethod, riskAllocation.allocationMethod) &&
        Objects.equals(this.optConfig, riskAllocation.optConfig) &&
        Objects.equals(this.allocations, riskAllocation.allocations) &&
        Objects.equals(this.useProxyData, riskAllocation.useProxyData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(riskScore, allocationMethod, optConfig, allocations, useProxyData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskAllocation {\n");
    
    sb.append("    riskScore: ").append(toIndentedString(riskScore)).append("\n");
    sb.append("    allocationMethod: ").append(toIndentedString(allocationMethod)).append("\n");
    sb.append("    optConfig: ").append(toIndentedString(optConfig)).append("\n");
    sb.append("    allocations: ").append(toIndentedString(allocations)).append("\n");
    sb.append("    useProxyData: ").append(toIndentedString(useProxyData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

