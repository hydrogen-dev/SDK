=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8-SNAPSHOT

=end

require 'date'

module AtomApi
  class Backtest
    # Identifier of the model to rebalance
    attr_accessor :model_id

    # tart date for analysis
    attr_accessor :start_date

    # End date for analysis
    attr_accessor :end_date

    # Initial weights for model holdings
    attr_accessor :initial_weights

    # The initial asset size
    attr_accessor :asset_size

    # Get asset sizes
    attr_accessor :asset_sizes

    # Get trades
    attr_accessor :trades

    # Get holdings
    attr_accessor :holdings

    # Get portfolio statistics
    attr_accessor :stats

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'model_id' => :'model_id',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'initial_weights' => :'initial_weights',
        :'asset_size' => :'asset_size',
        :'asset_sizes' => :'asset_sizes',
        :'trades' => :'trades',
        :'holdings' => :'holdings',
        :'stats' => :'stats'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'model_id' => :'String',
        :'start_date' => :'Date',
        :'end_date' => :'Date',
        :'initial_weights' => :'Hash<String, Float>',
        :'asset_size' => :'Float',
        :'asset_sizes' => :'BOOLEAN',
        :'trades' => :'BOOLEAN',
        :'holdings' => :'BOOLEAN',
        :'stats' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'model_id')
        self.model_id = attributes[:'model_id']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.has_key?(:'initial_weights')
        if (value = attributes[:'initial_weights']).is_a?(Hash)
          self.initial_weights = value
        end
      end

      if attributes.has_key?(:'asset_size')
        self.asset_size = attributes[:'asset_size']
      end

      if attributes.has_key?(:'asset_sizes')
        self.asset_sizes = attributes[:'asset_sizes']
      else
        self.asset_sizes = true
      end

      if attributes.has_key?(:'trades')
        self.trades = attributes[:'trades']
      else
        self.trades = true
      end

      if attributes.has_key?(:'holdings')
        self.holdings = attributes[:'holdings']
      else
        self.holdings = true
      end

      if attributes.has_key?(:'stats')
        self.stats = attributes[:'stats']
      else
        self.stats = true
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @model_id.nil?
        invalid_properties.push('invalid value for "model_id", model_id cannot be nil.')
      end

      if @start_date.nil?
        invalid_properties.push('invalid value for "start_date", start_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      if !@asset_size.nil? && @asset_size <= 0
        invalid_properties.push('invalid value for "asset_size", must be greater than 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @model_id.nil?
      return false if @start_date.nil?
      return false if @end_date.nil?
      return false if !@asset_size.nil? && @asset_size <= 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] asset_size Value to be assigned
    def asset_size=(asset_size)
      if !asset_size.nil? && asset_size <= 0
        fail ArgumentError, 'invalid value for "asset_size", must be greater than 0.'
      end

      @asset_size = asset_size
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          model_id == o.model_id &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          initial_weights == o.initial_weights &&
          asset_size == o.asset_size &&
          asset_sizes == o.asset_sizes &&
          trades == o.trades &&
          holdings == o.holdings &&
          stats == o.stats
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [model_id, start_date, end_date, initial_weights, asset_size, asset_sizes, trades, holdings, stats].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
