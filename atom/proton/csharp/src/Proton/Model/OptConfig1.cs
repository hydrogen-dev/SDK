/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// OptConfig1
    /// </summary>
    [DataContract]
    public partial class OptConfig1 :  IEquatable<OptConfig1>, IValidatableObject
    {
        /// <summary>
        /// Defines SecTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecTypesEnum
        {
            
            /// <summary>
            /// Enum Major for value: major
            /// </summary>
            [EnumMember(Value = "major")]
            Major = 1,
            
            /// <summary>
            /// Enum Minor for value: minor
            /// </summary>
            [EnumMember(Value = "minor")]
            Minor = 2,
            
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 3
        }


        /// <summary>
        /// Gets or Sets SecTypes
        /// </summary>
        [DataMember(Name="sec_types", EmitDefaultValue=false)]
        public List<SecTypesEnum> SecTypes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptConfig1" /> class.
        /// </summary>
        /// <param name="tickers">tickers.</param>
        /// <param name="wConfig">wConfig.</param>
        /// <param name="minAssets">minAssets (default to 1).</param>
        /// <param name="wAssetConfig">wAssetConfig.</param>
        /// <param name="secTypes">secTypes.</param>
        public OptConfig1(List<string> tickers = default(List<string>), WConfig1 wConfig = default(WConfig1), int? minAssets = 1, Object wAssetConfig = default(Object), List<SecTypesEnum> secTypes = default(List<SecTypesEnum>))
        {
            this.Tickers = tickers;
            this.WConfig = wConfig;
            // use default value if no "minAssets" provided
            if (minAssets == null)
            {
                this.MinAssets = 1;
            }
            else
            {
                this.MinAssets = minAssets;
            }
            this.WAssetConfig = wAssetConfig;
            this.SecTypes = secTypes;
        }
        
        /// <summary>
        /// Gets or Sets Tickers
        /// </summary>
        [DataMember(Name="tickers", EmitDefaultValue=false)]
        public List<string> Tickers { get; set; }

        /// <summary>
        /// Gets or Sets WConfig
        /// </summary>
        [DataMember(Name="w_config", EmitDefaultValue=false)]
        public WConfig1 WConfig { get; set; }

        /// <summary>
        /// Gets or Sets MinAssets
        /// </summary>
        [DataMember(Name="min_assets", EmitDefaultValue=false)]
        public int? MinAssets { get; set; }

        /// <summary>
        /// Gets or Sets WAssetConfig
        /// </summary>
        [DataMember(Name="w_asset_config", EmitDefaultValue=false)]
        public Object WAssetConfig { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptConfig1 {\n");
            sb.Append("  Tickers: ").Append(Tickers).Append("\n");
            sb.Append("  WConfig: ").Append(WConfig).Append("\n");
            sb.Append("  MinAssets: ").Append(MinAssets).Append("\n");
            sb.Append("  WAssetConfig: ").Append(WAssetConfig).Append("\n");
            sb.Append("  SecTypes: ").Append(SecTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptConfig1);
        }

        /// <summary>
        /// Returns true if OptConfig1 instances are equal
        /// </summary>
        /// <param name="input">Instance of OptConfig1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptConfig1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Tickers == input.Tickers ||
                    this.Tickers != null &&
                    this.Tickers.SequenceEqual(input.Tickers)
                ) && 
                (
                    this.WConfig == input.WConfig ||
                    (this.WConfig != null &&
                    this.WConfig.Equals(input.WConfig))
                ) && 
                (
                    this.MinAssets == input.MinAssets ||
                    (this.MinAssets != null &&
                    this.MinAssets.Equals(input.MinAssets))
                ) && 
                (
                    this.WAssetConfig == input.WAssetConfig ||
                    (this.WAssetConfig != null &&
                    this.WAssetConfig.Equals(input.WAssetConfig))
                ) && 
                (
                    this.SecTypes == input.SecTypes ||
                    this.SecTypes != null &&
                    this.SecTypes.SequenceEqual(input.SecTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tickers != null)
                    hashCode = hashCode * 59 + this.Tickers.GetHashCode();
                if (this.WConfig != null)
                    hashCode = hashCode * 59 + this.WConfig.GetHashCode();
                if (this.MinAssets != null)
                    hashCode = hashCode * 59 + this.MinAssets.GetHashCode();
                if (this.WAssetConfig != null)
                    hashCode = hashCode * 59 + this.WAssetConfig.GetHashCode();
                if (this.SecTypes != null)
                    hashCode = hashCode * 59 + this.SecTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MinAssets (int?) minimum
            if(this.MinAssets < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinAssets, must be a value greater than or equal to 1.", new [] { "MinAssets" });
            }

            yield break;
        }
    }

}
