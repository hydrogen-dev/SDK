# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.risk_score_opt_config_model import RiskScoreOptConfigModel  # noqa: F401,E501


class RiskAllocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'risk_score': 'float',
        'allocation_method': 'str',
        'opt_config': 'RiskScoreOptConfigModel',
        'allocations': 'list[str]',
        'use_proxy_data': 'bool'
    }

    attribute_map = {
        'risk_score': 'risk_score',
        'allocation_method': 'allocation_method',
        'opt_config': 'opt_config',
        'allocations': 'allocations',
        'use_proxy_data': 'use_proxy_data'
    }

    def __init__(self, risk_score=None, allocation_method=None, opt_config=None, allocations=None, use_proxy_data=False):  # noqa: E501
        """RiskAllocation - a model defined in Swagger"""  # noqa: E501

        self._risk_score = None
        self._allocation_method = None
        self._opt_config = None
        self._allocations = None
        self._use_proxy_data = None
        self.discriminator = None

        self.risk_score = risk_score
        self.allocation_method = allocation_method
        if opt_config is not None:
            self.opt_config = opt_config
        if allocations is not None:
            self.allocations = allocations
        if use_proxy_data is not None:
            self.use_proxy_data = use_proxy_data

    @property
    def risk_score(self):
        """Gets the risk_score of this RiskAllocation.  # noqa: E501

        A risk score from 0 to 100  # noqa: E501

        :return: The risk_score of this RiskAllocation.  # noqa: E501
        :rtype: float
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this RiskAllocation.

        A risk score from 0 to 100  # noqa: E501

        :param risk_score: The risk_score of this RiskAllocation.  # noqa: E501
        :type: float
        """
        if risk_score is None:
            raise ValueError("Invalid value for `risk_score`, must not be `None`")  # noqa: E501
        if risk_score is not None and risk_score > 100:  # noqa: E501
            raise ValueError("Invalid value for `risk_score`, must be a value less than or equal to `100`")  # noqa: E501
        if risk_score is not None and risk_score < 0:  # noqa: E501
            raise ValueError("Invalid value for `risk_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._risk_score = risk_score

    @property
    def allocation_method(self):
        """Gets the allocation_method of this RiskAllocation.  # noqa: E501

        The portfolio standard deviation  # noqa: E501

        :return: The allocation_method of this RiskAllocation.  # noqa: E501
        :rtype: str
        """
        return self._allocation_method

    @allocation_method.setter
    def allocation_method(self, allocation_method):
        """Sets the allocation_method of this RiskAllocation.

        The portfolio standard deviation  # noqa: E501

        :param allocation_method: The allocation_method of this RiskAllocation.  # noqa: E501
        :type: str
        """
        if allocation_method is None:
            raise ValueError("Invalid value for `allocation_method`, must not be `None`")  # noqa: E501
        allowed_values = ["select", "create"]  # noqa: E501
        if allocation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation_method` ({0}), must be one of {1}"  # noqa: E501
                .format(allocation_method, allowed_values)
            )

        self._allocation_method = allocation_method

    @property
    def opt_config(self):
        """Gets the opt_config of this RiskAllocation.  # noqa: E501


        :return: The opt_config of this RiskAllocation.  # noqa: E501
        :rtype: RiskScoreOptConfigModel
        """
        return self._opt_config

    @opt_config.setter
    def opt_config(self, opt_config):
        """Sets the opt_config of this RiskAllocation.


        :param opt_config: The opt_config of this RiskAllocation.  # noqa: E501
        :type: RiskScoreOptConfigModel
        """

        self._opt_config = opt_config

    @property
    def allocations(self):
        """Gets the allocations of this RiskAllocation.  # noqa: E501

        The portfolio standard deviation  # noqa: E501

        :return: The allocations of this RiskAllocation.  # noqa: E501
        :rtype: list[str]
        """
        return self._allocations

    @allocations.setter
    def allocations(self, allocations):
        """Sets the allocations of this RiskAllocation.

        The portfolio standard deviation  # noqa: E501

        :param allocations: The allocations of this RiskAllocation.  # noqa: E501
        :type: list[str]
        """

        self._allocations = allocations

    @property
    def use_proxy_data(self):
        """Gets the use_proxy_data of this RiskAllocation.  # noqa: E501

        If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.  # noqa: E501

        :return: The use_proxy_data of this RiskAllocation.  # noqa: E501
        :rtype: bool
        """
        return self._use_proxy_data

    @use_proxy_data.setter
    def use_proxy_data(self, use_proxy_data):
        """Sets the use_proxy_data of this RiskAllocation.

        If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.  # noqa: E501

        :param use_proxy_data: The use_proxy_data of this RiskAllocation.  # noqa: E501
        :type: bool
        """

        self._use_proxy_data = use_proxy_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskAllocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskAllocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
