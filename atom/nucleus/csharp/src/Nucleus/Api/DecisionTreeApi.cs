/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDecisionTreeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Decision tree result
        /// </summary>
        /// <remarks>
        /// Decision tree result. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>DecisionTreeResultVO</returns>
        DecisionTreeResultVO CreateDecisionTreeResultUsingPost (DecisionTreeCO decisionTreeCO);

        /// <summary>
        /// Decision tree result
        /// </summary>
        /// <remarks>
        /// Decision tree result. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>ApiResponse of DecisionTreeResultVO</returns>
        ApiResponse<DecisionTreeResultVO> CreateDecisionTreeResultUsingPostWithHttpInfo (DecisionTreeCO decisionTreeCO);
        /// <summary>
        /// Create a decision tree
        /// </summary>
        /// <remarks>
        /// Create a new decision tree for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>DecisionTree</returns>
        DecisionTree CreateDecisionTreeUsingPost (DecisionTree decisionTree);

        /// <summary>
        /// Create a decision tree
        /// </summary>
        /// <remarks>
        /// Create a new decision tree for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>ApiResponse of DecisionTree</returns>
        ApiResponse<DecisionTree> CreateDecisionTreeUsingPostWithHttpInfo (DecisionTree decisionTree);
        /// <summary>
        /// Create a node relationship
        /// </summary>
        /// <remarks>
        /// Create a new node relationship for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>NodeRelationship</returns>
        NodeRelationship CreateNodeRelationshipUsingPost (NodeRelationship node);

        /// <summary>
        /// Create a node relationship
        /// </summary>
        /// <remarks>
        /// Create a new node relationship for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>ApiResponse of NodeRelationship</returns>
        ApiResponse<NodeRelationship> CreateNodeRelationshipUsingPostWithHttpInfo (NodeRelationship node);
        /// <summary>
        /// Create a node
        /// </summary>
        /// <remarks>
        /// Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Node</returns>
        Node CreateNodeUsingPost (Node node);

        /// <summary>
        /// Create a node
        /// </summary>
        /// <remarks>
        /// Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>ApiResponse of Node</returns>
        ApiResponse<Node> CreateNodeUsingPostWithHttpInfo (Node node);
        /// <summary>
        /// Delete a decision tree
        /// </summary>
        /// <remarks>
        /// Permanently delete a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns></returns>
        void DeleteDecisionTreeUsingDelete (Guid? decisionTreeId);

        /// <summary>
        /// Delete a decision tree
        /// </summary>
        /// <remarks>
        /// Permanently delete a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDecisionTreeUsingDeleteWithHttpInfo (Guid? decisionTreeId);
        /// <summary>
        /// Delete a node relationship
        /// </summary>
        /// <remarks>
        /// Permanently delete a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns></returns>
        void DeleteNodeRelationshipUsingDelete (Guid? nodeRelationshipId);

        /// <summary>
        /// Delete a node relationship
        /// </summary>
        /// <remarks>
        /// Permanently delete a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNodeRelationshipUsingDeleteWithHttpInfo (Guid? nodeRelationshipId);
        /// <summary>
        /// Delete a node
        /// </summary>
        /// <remarks>
        /// Permanently delete a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns></returns>
        void DeleteNodeUsingDelete (Guid? nodeId);

        /// <summary>
        /// Delete a node
        /// </summary>
        /// <remarks>
        /// Permanently delete a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNodeUsingDeleteWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// List all decision tree
        /// </summary>
        /// <remarks>
        /// Get the information for all decision trees defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageDecisionTree</returns>
        PageDecisionTree GetDecisionTreeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all decision tree
        /// </summary>
        /// <remarks>
        /// Get the information for all decision trees defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageDecisionTree</returns>
        ApiResponse<PageDecisionTree> GetDecisionTreeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a decision tree
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>DecisionTree</returns>
        DecisionTree GetDecisionTreeUsingGet (Guid? decisionTreeId);

        /// <summary>
        /// Retrieve a decision tree
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>ApiResponse of DecisionTree</returns>
        ApiResponse<DecisionTree> GetDecisionTreeUsingGetWithHttpInfo (Guid? decisionTreeId);
        /// <summary>
        /// List all nodes
        /// </summary>
        /// <remarks>
        /// List all nodes that are defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNode</returns>
        PageNode GetNodeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all nodes
        /// </summary>
        /// <remarks>
        /// List all nodes that are defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNode</returns>
        ApiResponse<PageNode> GetNodeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all node relationships
        /// </summary>
        /// <remarks>
        /// Get the information for all the node relationships defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNodeRelationship</returns>
        PageNodeRelationship GetNodeRelationshipAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all node relationships
        /// </summary>
        /// <remarks>
        /// Get the information for all the node relationships defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNodeRelationship</returns>
        ApiResponse<PageNodeRelationship> GetNodeRelationshipAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a node relationship
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>NodeRelationship</returns>
        NodeRelationship GetNodeRelationshipUsingGet (Guid? nodeRelationshipId);

        /// <summary>
        /// Retrieve a node relationship
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>ApiResponse of NodeRelationship</returns>
        ApiResponse<NodeRelationship> GetNodeRelationshipUsingGetWithHttpInfo (Guid? nodeRelationshipId);
        /// <summary>
        /// Retrieve a node
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Node</returns>
        Node GetNodeUsingGet (Guid? nodeId);

        /// <summary>
        /// Retrieve a node
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>ApiResponse of Node</returns>
        ApiResponse<Node> GetNodeUsingGetWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// Update a decision tree
        /// </summary>
        /// <remarks>
        /// Updated the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>DecisionTree</returns>
        DecisionTree UpdateDecisionTreeUsingPut (Object decisionTree, Guid? decisionTreeId);

        /// <summary>
        /// Update a decision tree
        /// </summary>
        /// <remarks>
        /// Updated the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>ApiResponse of DecisionTree</returns>
        ApiResponse<DecisionTree> UpdateDecisionTreeUsingPutWithHttpInfo (Object decisionTree, Guid? decisionTreeId);
        /// <summary>
        /// Update a node relationship
        /// </summary>
        /// <remarks>
        /// Update the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>NodeRelationship</returns>
        NodeRelationship UpdateNodeRelationshipUsingPut (Object jsonNode, Guid? nodeRelationshipId);

        /// <summary>
        /// Update a node relationship
        /// </summary>
        /// <remarks>
        /// Update the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>ApiResponse of NodeRelationship</returns>
        ApiResponse<NodeRelationship> UpdateNodeRelationshipUsingPutWithHttpInfo (Object jsonNode, Guid? nodeRelationshipId);
        /// <summary>
        /// Update a node
        /// </summary>
        /// <remarks>
        /// Updated the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Node</returns>
        Node UpdateNodeUsingPut (Object jsonNode, Guid? nodeId);

        /// <summary>
        /// Update a node
        /// </summary>
        /// <remarks>
        /// Updated the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>ApiResponse of Node</returns>
        ApiResponse<Node> UpdateNodeUsingPutWithHttpInfo (Object jsonNode, Guid? nodeId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Decision tree result
        /// </summary>
        /// <remarks>
        /// Decision tree result. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>Task of DecisionTreeResultVO</returns>
        System.Threading.Tasks.Task<DecisionTreeResultVO> CreateDecisionTreeResultUsingPostAsync (DecisionTreeCO decisionTreeCO);

        /// <summary>
        /// Decision tree result
        /// </summary>
        /// <remarks>
        /// Decision tree result. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>Task of ApiResponse (DecisionTreeResultVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionTreeResultVO>> CreateDecisionTreeResultUsingPostAsyncWithHttpInfo (DecisionTreeCO decisionTreeCO);
        /// <summary>
        /// Create a decision tree
        /// </summary>
        /// <remarks>
        /// Create a new decision tree for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>Task of DecisionTree</returns>
        System.Threading.Tasks.Task<DecisionTree> CreateDecisionTreeUsingPostAsync (DecisionTree decisionTree);

        /// <summary>
        /// Create a decision tree
        /// </summary>
        /// <remarks>
        /// Create a new decision tree for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>Task of ApiResponse (DecisionTree)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionTree>> CreateDecisionTreeUsingPostAsyncWithHttpInfo (DecisionTree decisionTree);
        /// <summary>
        /// Create a node relationship
        /// </summary>
        /// <remarks>
        /// Create a new node relationship for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of NodeRelationship</returns>
        System.Threading.Tasks.Task<NodeRelationship> CreateNodeRelationshipUsingPostAsync (NodeRelationship node);

        /// <summary>
        /// Create a node relationship
        /// </summary>
        /// <remarks>
        /// Create a new node relationship for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of ApiResponse (NodeRelationship)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeRelationship>> CreateNodeRelationshipUsingPostAsyncWithHttpInfo (NodeRelationship node);
        /// <summary>
        /// Create a node
        /// </summary>
        /// <remarks>
        /// Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of Node</returns>
        System.Threading.Tasks.Task<Node> CreateNodeUsingPostAsync (Node node);

        /// <summary>
        /// Create a node
        /// </summary>
        /// <remarks>
        /// Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        System.Threading.Tasks.Task<ApiResponse<Node>> CreateNodeUsingPostAsyncWithHttpInfo (Node node);
        /// <summary>
        /// Delete a decision tree
        /// </summary>
        /// <remarks>
        /// Permanently delete a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDecisionTreeUsingDeleteAsync (Guid? decisionTreeId);

        /// <summary>
        /// Delete a decision tree
        /// </summary>
        /// <remarks>
        /// Permanently delete a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDecisionTreeUsingDeleteAsyncWithHttpInfo (Guid? decisionTreeId);
        /// <summary>
        /// Delete a node relationship
        /// </summary>
        /// <remarks>
        /// Permanently delete a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNodeRelationshipUsingDeleteAsync (Guid? nodeRelationshipId);

        /// <summary>
        /// Delete a node relationship
        /// </summary>
        /// <remarks>
        /// Permanently delete a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeRelationshipUsingDeleteAsyncWithHttpInfo (Guid? nodeRelationshipId);
        /// <summary>
        /// Delete a node
        /// </summary>
        /// <remarks>
        /// Permanently delete a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNodeUsingDeleteAsync (Guid? nodeId);

        /// <summary>
        /// Delete a node
        /// </summary>
        /// <remarks>
        /// Permanently delete a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeUsingDeleteAsyncWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// List all decision tree
        /// </summary>
        /// <remarks>
        /// Get the information for all decision trees defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageDecisionTree</returns>
        System.Threading.Tasks.Task<PageDecisionTree> GetDecisionTreeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all decision tree
        /// </summary>
        /// <remarks>
        /// Get the information for all decision trees defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageDecisionTree)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageDecisionTree>> GetDecisionTreeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a decision tree
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of DecisionTree</returns>
        System.Threading.Tasks.Task<DecisionTree> GetDecisionTreeUsingGetAsync (Guid? decisionTreeId);

        /// <summary>
        /// Retrieve a decision tree
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of ApiResponse (DecisionTree)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionTree>> GetDecisionTreeUsingGetAsyncWithHttpInfo (Guid? decisionTreeId);
        /// <summary>
        /// List all nodes
        /// </summary>
        /// <remarks>
        /// List all nodes that are defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNode</returns>
        System.Threading.Tasks.Task<PageNode> GetNodeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all nodes
        /// </summary>
        /// <remarks>
        /// List all nodes that are defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageNode>> GetNodeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all node relationships
        /// </summary>
        /// <remarks>
        /// Get the information for all the node relationships defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNodeRelationship</returns>
        System.Threading.Tasks.Task<PageNodeRelationship> GetNodeRelationshipAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all node relationships
        /// </summary>
        /// <remarks>
        /// Get the information for all the node relationships defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNodeRelationship)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageNodeRelationship>> GetNodeRelationshipAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a node relationship
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of NodeRelationship</returns>
        System.Threading.Tasks.Task<NodeRelationship> GetNodeRelationshipUsingGetAsync (Guid? nodeRelationshipId);

        /// <summary>
        /// Retrieve a node relationship
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of ApiResponse (NodeRelationship)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeRelationship>> GetNodeRelationshipUsingGetAsyncWithHttpInfo (Guid? nodeRelationshipId);
        /// <summary>
        /// Retrieve a node
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of Node</returns>
        System.Threading.Tasks.Task<Node> GetNodeUsingGetAsync (Guid? nodeId);

        /// <summary>
        /// Retrieve a node
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        System.Threading.Tasks.Task<ApiResponse<Node>> GetNodeUsingGetAsyncWithHttpInfo (Guid? nodeId);
        /// <summary>
        /// Update a decision tree
        /// </summary>
        /// <remarks>
        /// Updated the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of DecisionTree</returns>
        System.Threading.Tasks.Task<DecisionTree> UpdateDecisionTreeUsingPutAsync (Object decisionTree, Guid? decisionTreeId);

        /// <summary>
        /// Update a decision tree
        /// </summary>
        /// <remarks>
        /// Updated the information for a decision tree.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of ApiResponse (DecisionTree)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionTree>> UpdateDecisionTreeUsingPutAsyncWithHttpInfo (Object decisionTree, Guid? decisionTreeId);
        /// <summary>
        /// Update a node relationship
        /// </summary>
        /// <remarks>
        /// Update the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of NodeRelationship</returns>
        System.Threading.Tasks.Task<NodeRelationship> UpdateNodeRelationshipUsingPutAsync (Object jsonNode, Guid? nodeRelationshipId);

        /// <summary>
        /// Update a node relationship
        /// </summary>
        /// <remarks>
        /// Update the information for a node relationship.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of ApiResponse (NodeRelationship)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeRelationship>> UpdateNodeRelationshipUsingPutAsyncWithHttpInfo (Object jsonNode, Guid? nodeRelationshipId);
        /// <summary>
        /// Update a node
        /// </summary>
        /// <remarks>
        /// Updated the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of Node</returns>
        System.Threading.Tasks.Task<Node> UpdateNodeUsingPutAsync (Object jsonNode, Guid? nodeId);

        /// <summary>
        /// Update a node
        /// </summary>
        /// <remarks>
        /// Updated the information for a node.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        System.Threading.Tasks.Task<ApiResponse<Node>> UpdateNodeUsingPutAsyncWithHttpInfo (Object jsonNode, Guid? nodeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DecisionTreeApi : IDecisionTreeApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionTreeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DecisionTreeApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionTreeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DecisionTreeApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Decision tree result Decision tree result. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>DecisionTreeResultVO</returns>
        public DecisionTreeResultVO CreateDecisionTreeResultUsingPost (DecisionTreeCO decisionTreeCO)
        {
             ApiResponse<DecisionTreeResultVO> localVarResponse = CreateDecisionTreeResultUsingPostWithHttpInfo(decisionTreeCO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Decision tree result Decision tree result. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>ApiResponse of DecisionTreeResultVO</returns>
        public ApiResponse< DecisionTreeResultVO > CreateDecisionTreeResultUsingPostWithHttpInfo (DecisionTreeCO decisionTreeCO)
        {
            // verify the required parameter 'decisionTreeCO' is set
            if (decisionTreeCO == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeCO' when calling DecisionTreeApi->CreateDecisionTreeResultUsingPost");

            var localVarPath = "/nucleus/v1/decision_tree_result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeCO != null && decisionTreeCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(decisionTreeCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = decisionTreeCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDecisionTreeResultUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTreeResultVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTreeResultVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTreeResultVO)));
        }

        /// <summary>
        /// Decision tree result Decision tree result. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>Task of DecisionTreeResultVO</returns>
        public async System.Threading.Tasks.Task<DecisionTreeResultVO> CreateDecisionTreeResultUsingPostAsync (DecisionTreeCO decisionTreeCO)
        {
             ApiResponse<DecisionTreeResultVO> localVarResponse = await CreateDecisionTreeResultUsingPostAsyncWithHttpInfo(decisionTreeCO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Decision tree result Decision tree result. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeCO">decisionTreeCO</param>
        /// <returns>Task of ApiResponse (DecisionTreeResultVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DecisionTreeResultVO>> CreateDecisionTreeResultUsingPostAsyncWithHttpInfo (DecisionTreeCO decisionTreeCO)
        {
            // verify the required parameter 'decisionTreeCO' is set
            if (decisionTreeCO == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeCO' when calling DecisionTreeApi->CreateDecisionTreeResultUsingPost");

            var localVarPath = "/nucleus/v1/decision_tree_result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeCO != null && decisionTreeCO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(decisionTreeCO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = decisionTreeCO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDecisionTreeResultUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTreeResultVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTreeResultVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTreeResultVO)));
        }

        /// <summary>
        /// Create a decision tree Create a new decision tree for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>DecisionTree</returns>
        public DecisionTree CreateDecisionTreeUsingPost (DecisionTree decisionTree)
        {
             ApiResponse<DecisionTree> localVarResponse = CreateDecisionTreeUsingPostWithHttpInfo(decisionTree);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a decision tree Create a new decision tree for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>ApiResponse of DecisionTree</returns>
        public ApiResponse< DecisionTree > CreateDecisionTreeUsingPostWithHttpInfo (DecisionTree decisionTree)
        {
            // verify the required parameter 'decisionTree' is set
            if (decisionTree == null)
                throw new ApiException(400, "Missing required parameter 'decisionTree' when calling DecisionTreeApi->CreateDecisionTreeUsingPost");

            var localVarPath = "/nucleus/v1/decision_tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTree != null && decisionTree.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(decisionTree); // http body (model) parameter
            }
            else
            {
                localVarPostBody = decisionTree; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDecisionTreeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTree)));
        }

        /// <summary>
        /// Create a decision tree Create a new decision tree for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>Task of DecisionTree</returns>
        public async System.Threading.Tasks.Task<DecisionTree> CreateDecisionTreeUsingPostAsync (DecisionTree decisionTree)
        {
             ApiResponse<DecisionTree> localVarResponse = await CreateDecisionTreeUsingPostAsyncWithHttpInfo(decisionTree);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a decision tree Create a new decision tree for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decisionTree</param>
        /// <returns>Task of ApiResponse (DecisionTree)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DecisionTree>> CreateDecisionTreeUsingPostAsyncWithHttpInfo (DecisionTree decisionTree)
        {
            // verify the required parameter 'decisionTree' is set
            if (decisionTree == null)
                throw new ApiException(400, "Missing required parameter 'decisionTree' when calling DecisionTreeApi->CreateDecisionTreeUsingPost");

            var localVarPath = "/nucleus/v1/decision_tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTree != null && decisionTree.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(decisionTree); // http body (model) parameter
            }
            else
            {
                localVarPostBody = decisionTree; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDecisionTreeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTree)));
        }

        /// <summary>
        /// Create a node relationship Create a new node relationship for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>NodeRelationship</returns>
        public NodeRelationship CreateNodeRelationshipUsingPost (NodeRelationship node)
        {
             ApiResponse<NodeRelationship> localVarResponse = CreateNodeRelationshipUsingPostWithHttpInfo(node);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a node relationship Create a new node relationship for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>ApiResponse of NodeRelationship</returns>
        public ApiResponse< NodeRelationship > CreateNodeRelationshipUsingPostWithHttpInfo (NodeRelationship node)
        {
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling DecisionTreeApi->CreateNodeRelationshipUsingPost");

            var localVarPath = "/nucleus/v1/node_relationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (node != null && node.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(node); // http body (model) parameter
            }
            else
            {
                localVarPostBody = node; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNodeRelationshipUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeRelationship)));
        }

        /// <summary>
        /// Create a node relationship Create a new node relationship for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of NodeRelationship</returns>
        public async System.Threading.Tasks.Task<NodeRelationship> CreateNodeRelationshipUsingPostAsync (NodeRelationship node)
        {
             ApiResponse<NodeRelationship> localVarResponse = await CreateNodeRelationshipUsingPostAsyncWithHttpInfo(node);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a node relationship Create a new node relationship for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of ApiResponse (NodeRelationship)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeRelationship>> CreateNodeRelationshipUsingPostAsyncWithHttpInfo (NodeRelationship node)
        {
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling DecisionTreeApi->CreateNodeRelationshipUsingPost");

            var localVarPath = "/nucleus/v1/node_relationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (node != null && node.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(node); // http body (model) parameter
            }
            else
            {
                localVarPostBody = node; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNodeRelationshipUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeRelationship)));
        }

        /// <summary>
        /// Create a node Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Node</returns>
        public Node CreateNodeUsingPost (Node node)
        {
             ApiResponse<Node> localVarResponse = CreateNodeUsingPostWithHttpInfo(node);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a node Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>ApiResponse of Node</returns>
        public ApiResponse< Node > CreateNodeUsingPostWithHttpInfo (Node node)
        {
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling DecisionTreeApi->CreateNodeUsingPost");

            var localVarPath = "/nucleus/v1/node";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (node != null && node.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(node); // http body (model) parameter
            }
            else
            {
                localVarPostBody = node; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNodeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Create a node Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of Node</returns>
        public async System.Threading.Tasks.Task<Node> CreateNodeUsingPostAsync (Node node)
        {
             ApiResponse<Node> localVarResponse = await CreateNodeUsingPostAsyncWithHttpInfo(node);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a node Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="node">node</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Node>> CreateNodeUsingPostAsyncWithHttpInfo (Node node)
        {
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling DecisionTreeApi->CreateNodeUsingPost");

            var localVarPath = "/nucleus/v1/node";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (node != null && node.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(node); // http body (model) parameter
            }
            else
            {
                localVarPostBody = node; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNodeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Delete a decision tree Permanently delete a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns></returns>
        public void DeleteDecisionTreeUsingDelete (Guid? decisionTreeId)
        {
             DeleteDecisionTreeUsingDeleteWithHttpInfo(decisionTreeId);
        }

        /// <summary>
        /// Delete a decision tree Permanently delete a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDecisionTreeUsingDeleteWithHttpInfo (Guid? decisionTreeId)
        {
            // verify the required parameter 'decisionTreeId' is set
            if (decisionTreeId == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeId' when calling DecisionTreeApi->DeleteDecisionTreeUsingDelete");

            var localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeId != null) localVarPathParams.Add("decision_tree_id", this.Configuration.ApiClient.ParameterToString(decisionTreeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDecisionTreeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a decision tree Permanently delete a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDecisionTreeUsingDeleteAsync (Guid? decisionTreeId)
        {
             await DeleteDecisionTreeUsingDeleteAsyncWithHttpInfo(decisionTreeId);

        }

        /// <summary>
        /// Delete a decision tree Permanently delete a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDecisionTreeUsingDeleteAsyncWithHttpInfo (Guid? decisionTreeId)
        {
            // verify the required parameter 'decisionTreeId' is set
            if (decisionTreeId == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeId' when calling DecisionTreeApi->DeleteDecisionTreeUsingDelete");

            var localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeId != null) localVarPathParams.Add("decision_tree_id", this.Configuration.ApiClient.ParameterToString(decisionTreeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDecisionTreeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node relationship Permanently delete a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns></returns>
        public void DeleteNodeRelationshipUsingDelete (Guid? nodeRelationshipId)
        {
             DeleteNodeRelationshipUsingDeleteWithHttpInfo(nodeRelationshipId);
        }

        /// <summary>
        /// Delete a node relationship Permanently delete a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNodeRelationshipUsingDeleteWithHttpInfo (Guid? nodeRelationshipId)
        {
            // verify the required parameter 'nodeRelationshipId' is set
            if (nodeRelationshipId == null)
                throw new ApiException(400, "Missing required parameter 'nodeRelationshipId' when calling DecisionTreeApi->DeleteNodeRelationshipUsingDelete");

            var localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeRelationshipId != null) localVarPathParams.Add("node_relationship_id", this.Configuration.ApiClient.ParameterToString(nodeRelationshipId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodeRelationshipUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node relationship Permanently delete a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNodeRelationshipUsingDeleteAsync (Guid? nodeRelationshipId)
        {
             await DeleteNodeRelationshipUsingDeleteAsyncWithHttpInfo(nodeRelationshipId);

        }

        /// <summary>
        /// Delete a node relationship Permanently delete a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeRelationshipUsingDeleteAsyncWithHttpInfo (Guid? nodeRelationshipId)
        {
            // verify the required parameter 'nodeRelationshipId' is set
            if (nodeRelationshipId == null)
                throw new ApiException(400, "Missing required parameter 'nodeRelationshipId' when calling DecisionTreeApi->DeleteNodeRelationshipUsingDelete");

            var localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeRelationshipId != null) localVarPathParams.Add("node_relationship_id", this.Configuration.ApiClient.ParameterToString(nodeRelationshipId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodeRelationshipUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node Permanently delete a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns></returns>
        public void DeleteNodeUsingDelete (Guid? nodeId)
        {
             DeleteNodeUsingDeleteWithHttpInfo(nodeId);
        }

        /// <summary>
        /// Delete a node Permanently delete a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNodeUsingDeleteWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling DecisionTreeApi->DeleteNodeUsingDelete");

            var localVarPath = "/nucleus/v1/node/{node_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("node_id", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node Permanently delete a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNodeUsingDeleteAsync (Guid? nodeId)
        {
             await DeleteNodeUsingDeleteAsyncWithHttpInfo(nodeId);

        }

        /// <summary>
        /// Delete a node Permanently delete a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNodeUsingDeleteAsyncWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling DecisionTreeApi->DeleteNodeUsingDelete");

            var localVarPath = "/nucleus/v1/node/{node_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("node_id", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNodeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all decision tree Get the information for all decision trees defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageDecisionTree</returns>
        public PageDecisionTree GetDecisionTreeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageDecisionTree> localVarResponse = GetDecisionTreeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all decision tree Get the information for all decision trees defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageDecisionTree</returns>
        public ApiResponse< PageDecisionTree > GetDecisionTreeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/decision_tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDecisionTreeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageDecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageDecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageDecisionTree)));
        }

        /// <summary>
        /// List all decision tree Get the information for all decision trees defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageDecisionTree</returns>
        public async System.Threading.Tasks.Task<PageDecisionTree> GetDecisionTreeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageDecisionTree> localVarResponse = await GetDecisionTreeAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all decision tree Get the information for all decision trees defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageDecisionTree)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageDecisionTree>> GetDecisionTreeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/decision_tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDecisionTreeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageDecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageDecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageDecisionTree)));
        }

        /// <summary>
        /// Retrieve a decision tree Retrieve the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>DecisionTree</returns>
        public DecisionTree GetDecisionTreeUsingGet (Guid? decisionTreeId)
        {
             ApiResponse<DecisionTree> localVarResponse = GetDecisionTreeUsingGetWithHttpInfo(decisionTreeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a decision tree Retrieve the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>ApiResponse of DecisionTree</returns>
        public ApiResponse< DecisionTree > GetDecisionTreeUsingGetWithHttpInfo (Guid? decisionTreeId)
        {
            // verify the required parameter 'decisionTreeId' is set
            if (decisionTreeId == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeId' when calling DecisionTreeApi->GetDecisionTreeUsingGet");

            var localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeId != null) localVarPathParams.Add("decision_tree_id", this.Configuration.ApiClient.ParameterToString(decisionTreeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDecisionTreeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTree)));
        }

        /// <summary>
        /// Retrieve a decision tree Retrieve the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of DecisionTree</returns>
        public async System.Threading.Tasks.Task<DecisionTree> GetDecisionTreeUsingGetAsync (Guid? decisionTreeId)
        {
             ApiResponse<DecisionTree> localVarResponse = await GetDecisionTreeUsingGetAsyncWithHttpInfo(decisionTreeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a decision tree Retrieve the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of ApiResponse (DecisionTree)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DecisionTree>> GetDecisionTreeUsingGetAsyncWithHttpInfo (Guid? decisionTreeId)
        {
            // verify the required parameter 'decisionTreeId' is set
            if (decisionTreeId == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeId' when calling DecisionTreeApi->GetDecisionTreeUsingGet");

            var localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeId != null) localVarPathParams.Add("decision_tree_id", this.Configuration.ApiClient.ParameterToString(decisionTreeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDecisionTreeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTree)));
        }

        /// <summary>
        /// List all nodes List all nodes that are defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNode</returns>
        public PageNode GetNodeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNode> localVarResponse = GetNodeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all nodes List all nodes that are defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNode</returns>
        public ApiResponse< PageNode > GetNodeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/node";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNode)));
        }

        /// <summary>
        /// List all nodes List all nodes that are defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNode</returns>
        public async System.Threading.Tasks.Task<PageNode> GetNodeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNode> localVarResponse = await GetNodeAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all nodes List all nodes that are defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageNode>> GetNodeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/node";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNode)));
        }

        /// <summary>
        /// List all node relationships Get the information for all the node relationships defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageNodeRelationship</returns>
        public PageNodeRelationship GetNodeRelationshipAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNodeRelationship> localVarResponse = GetNodeRelationshipAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all node relationships Get the information for all the node relationships defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageNodeRelationship</returns>
        public ApiResponse< PageNodeRelationship > GetNodeRelationshipAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/node_relationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeRelationshipAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNodeRelationship)));
        }

        /// <summary>
        /// List all node relationships Get the information for all the node relationships defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageNodeRelationship</returns>
        public async System.Threading.Tasks.Task<PageNodeRelationship> GetNodeRelationshipAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageNodeRelationship> localVarResponse = await GetNodeRelationshipAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all node relationships Get the information for all the node relationships defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageNodeRelationship)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageNodeRelationship>> GetNodeRelationshipAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/node_relationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeRelationshipAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageNodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageNodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageNodeRelationship)));
        }

        /// <summary>
        /// Retrieve a node relationship Retrieve the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>NodeRelationship</returns>
        public NodeRelationship GetNodeRelationshipUsingGet (Guid? nodeRelationshipId)
        {
             ApiResponse<NodeRelationship> localVarResponse = GetNodeRelationshipUsingGetWithHttpInfo(nodeRelationshipId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a node relationship Retrieve the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>ApiResponse of NodeRelationship</returns>
        public ApiResponse< NodeRelationship > GetNodeRelationshipUsingGetWithHttpInfo (Guid? nodeRelationshipId)
        {
            // verify the required parameter 'nodeRelationshipId' is set
            if (nodeRelationshipId == null)
                throw new ApiException(400, "Missing required parameter 'nodeRelationshipId' when calling DecisionTreeApi->GetNodeRelationshipUsingGet");

            var localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeRelationshipId != null) localVarPathParams.Add("node_relationship_id", this.Configuration.ApiClient.ParameterToString(nodeRelationshipId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeRelationshipUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeRelationship)));
        }

        /// <summary>
        /// Retrieve a node relationship Retrieve the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of NodeRelationship</returns>
        public async System.Threading.Tasks.Task<NodeRelationship> GetNodeRelationshipUsingGetAsync (Guid? nodeRelationshipId)
        {
             ApiResponse<NodeRelationship> localVarResponse = await GetNodeRelationshipUsingGetAsyncWithHttpInfo(nodeRelationshipId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a node relationship Retrieve the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of ApiResponse (NodeRelationship)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeRelationship>> GetNodeRelationshipUsingGetAsyncWithHttpInfo (Guid? nodeRelationshipId)
        {
            // verify the required parameter 'nodeRelationshipId' is set
            if (nodeRelationshipId == null)
                throw new ApiException(400, "Missing required parameter 'nodeRelationshipId' when calling DecisionTreeApi->GetNodeRelationshipUsingGet");

            var localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeRelationshipId != null) localVarPathParams.Add("node_relationship_id", this.Configuration.ApiClient.ParameterToString(nodeRelationshipId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeRelationshipUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeRelationship)));
        }

        /// <summary>
        /// Retrieve a node Retrieve the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Node</returns>
        public Node GetNodeUsingGet (Guid? nodeId)
        {
             ApiResponse<Node> localVarResponse = GetNodeUsingGetWithHttpInfo(nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a node Retrieve the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>ApiResponse of Node</returns>
        public ApiResponse< Node > GetNodeUsingGetWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling DecisionTreeApi->GetNodeUsingGet");

            var localVarPath = "/nucleus/v1/node/{node_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("node_id", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Retrieve a node Retrieve the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of Node</returns>
        public async System.Threading.Tasks.Task<Node> GetNodeUsingGetAsync (Guid? nodeId)
        {
             ApiResponse<Node> localVarResponse = await GetNodeUsingGetAsyncWithHttpInfo(nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a node Retrieve the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Node>> GetNodeUsingGetAsyncWithHttpInfo (Guid? nodeId)
        {
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling DecisionTreeApi->GetNodeUsingGet");

            var localVarPath = "/nucleus/v1/node/{node_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("node_id", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Update a decision tree Updated the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>DecisionTree</returns>
        public DecisionTree UpdateDecisionTreeUsingPut (Object decisionTree, Guid? decisionTreeId)
        {
             ApiResponse<DecisionTree> localVarResponse = UpdateDecisionTreeUsingPutWithHttpInfo(decisionTree, decisionTreeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a decision tree Updated the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>ApiResponse of DecisionTree</returns>
        public ApiResponse< DecisionTree > UpdateDecisionTreeUsingPutWithHttpInfo (Object decisionTree, Guid? decisionTreeId)
        {
            // verify the required parameter 'decisionTree' is set
            if (decisionTree == null)
                throw new ApiException(400, "Missing required parameter 'decisionTree' when calling DecisionTreeApi->UpdateDecisionTreeUsingPut");
            // verify the required parameter 'decisionTreeId' is set
            if (decisionTreeId == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeId' when calling DecisionTreeApi->UpdateDecisionTreeUsingPut");

            var localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeId != null) localVarPathParams.Add("decision_tree_id", this.Configuration.ApiClient.ParameterToString(decisionTreeId)); // path parameter
            if (decisionTree != null && decisionTree.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(decisionTree); // http body (model) parameter
            }
            else
            {
                localVarPostBody = decisionTree; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDecisionTreeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTree)));
        }

        /// <summary>
        /// Update a decision tree Updated the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of DecisionTree</returns>
        public async System.Threading.Tasks.Task<DecisionTree> UpdateDecisionTreeUsingPutAsync (Object decisionTree, Guid? decisionTreeId)
        {
             ApiResponse<DecisionTree> localVarResponse = await UpdateDecisionTreeUsingPutAsyncWithHttpInfo(decisionTree, decisionTreeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a decision tree Updated the information for a decision tree.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionTree">decision_tree</param>
        /// <param name="decisionTreeId">UUID decision_tree_id</param>
        /// <returns>Task of ApiResponse (DecisionTree)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DecisionTree>> UpdateDecisionTreeUsingPutAsyncWithHttpInfo (Object decisionTree, Guid? decisionTreeId)
        {
            // verify the required parameter 'decisionTree' is set
            if (decisionTree == null)
                throw new ApiException(400, "Missing required parameter 'decisionTree' when calling DecisionTreeApi->UpdateDecisionTreeUsingPut");
            // verify the required parameter 'decisionTreeId' is set
            if (decisionTreeId == null)
                throw new ApiException(400, "Missing required parameter 'decisionTreeId' when calling DecisionTreeApi->UpdateDecisionTreeUsingPut");

            var localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (decisionTreeId != null) localVarPathParams.Add("decision_tree_id", this.Configuration.ApiClient.ParameterToString(decisionTreeId)); // path parameter
            if (decisionTree != null && decisionTree.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(decisionTree); // http body (model) parameter
            }
            else
            {
                localVarPostBody = decisionTree; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDecisionTreeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DecisionTree>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DecisionTree) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DecisionTree)));
        }

        /// <summary>
        /// Update a node relationship Update the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>NodeRelationship</returns>
        public NodeRelationship UpdateNodeRelationshipUsingPut (Object jsonNode, Guid? nodeRelationshipId)
        {
             ApiResponse<NodeRelationship> localVarResponse = UpdateNodeRelationshipUsingPutWithHttpInfo(jsonNode, nodeRelationshipId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a node relationship Update the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>ApiResponse of NodeRelationship</returns>
        public ApiResponse< NodeRelationship > UpdateNodeRelationshipUsingPutWithHttpInfo (Object jsonNode, Guid? nodeRelationshipId)
        {
            // verify the required parameter 'jsonNode' is set
            if (jsonNode == null)
                throw new ApiException(400, "Missing required parameter 'jsonNode' when calling DecisionTreeApi->UpdateNodeRelationshipUsingPut");
            // verify the required parameter 'nodeRelationshipId' is set
            if (nodeRelationshipId == null)
                throw new ApiException(400, "Missing required parameter 'nodeRelationshipId' when calling DecisionTreeApi->UpdateNodeRelationshipUsingPut");

            var localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeRelationshipId != null) localVarPathParams.Add("node_relationship_id", this.Configuration.ApiClient.ParameterToString(nodeRelationshipId)); // path parameter
            if (jsonNode != null && jsonNode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonNode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonNode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeRelationshipUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeRelationship)));
        }

        /// <summary>
        /// Update a node relationship Update the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of NodeRelationship</returns>
        public async System.Threading.Tasks.Task<NodeRelationship> UpdateNodeRelationshipUsingPutAsync (Object jsonNode, Guid? nodeRelationshipId)
        {
             ApiResponse<NodeRelationship> localVarResponse = await UpdateNodeRelationshipUsingPutAsyncWithHttpInfo(jsonNode, nodeRelationshipId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a node relationship Update the information for a node relationship.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeRelationshipId">UUID node_relationship_id</param>
        /// <returns>Task of ApiResponse (NodeRelationship)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeRelationship>> UpdateNodeRelationshipUsingPutAsyncWithHttpInfo (Object jsonNode, Guid? nodeRelationshipId)
        {
            // verify the required parameter 'jsonNode' is set
            if (jsonNode == null)
                throw new ApiException(400, "Missing required parameter 'jsonNode' when calling DecisionTreeApi->UpdateNodeRelationshipUsingPut");
            // verify the required parameter 'nodeRelationshipId' is set
            if (nodeRelationshipId == null)
                throw new ApiException(400, "Missing required parameter 'nodeRelationshipId' when calling DecisionTreeApi->UpdateNodeRelationshipUsingPut");

            var localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeRelationshipId != null) localVarPathParams.Add("node_relationship_id", this.Configuration.ApiClient.ParameterToString(nodeRelationshipId)); // path parameter
            if (jsonNode != null && jsonNode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonNode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonNode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeRelationshipUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeRelationship>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeRelationship) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeRelationship)));
        }

        /// <summary>
        /// Update a node Updated the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Node</returns>
        public Node UpdateNodeUsingPut (Object jsonNode, Guid? nodeId)
        {
             ApiResponse<Node> localVarResponse = UpdateNodeUsingPutWithHttpInfo(jsonNode, nodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a node Updated the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>ApiResponse of Node</returns>
        public ApiResponse< Node > UpdateNodeUsingPutWithHttpInfo (Object jsonNode, Guid? nodeId)
        {
            // verify the required parameter 'jsonNode' is set
            if (jsonNode == null)
                throw new ApiException(400, "Missing required parameter 'jsonNode' when calling DecisionTreeApi->UpdateNodeUsingPut");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling DecisionTreeApi->UpdateNodeUsingPut");

            var localVarPath = "/nucleus/v1/node/{node_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("node_id", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (jsonNode != null && jsonNode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonNode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonNode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

        /// <summary>
        /// Update a node Updated the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of Node</returns>
        public async System.Threading.Tasks.Task<Node> UpdateNodeUsingPutAsync (Object jsonNode, Guid? nodeId)
        {
             ApiResponse<Node> localVarResponse = await UpdateNodeUsingPutAsyncWithHttpInfo(jsonNode, nodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a node Updated the information for a node.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonNode">jsonNode</param>
        /// <param name="nodeId">UUID node_id</param>
        /// <returns>Task of ApiResponse (Node)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Node>> UpdateNodeUsingPutAsyncWithHttpInfo (Object jsonNode, Guid? nodeId)
        {
            // verify the required parameter 'jsonNode' is set
            if (jsonNode == null)
                throw new ApiException(400, "Missing required parameter 'jsonNode' when calling DecisionTreeApi->UpdateNodeUsingPut");
            // verify the required parameter 'nodeId' is set
            if (nodeId == null)
                throw new ApiException(400, "Missing required parameter 'nodeId' when calling DecisionTreeApi->UpdateNodeUsingPut");

            var localVarPath = "/nucleus/v1/node/{node_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nodeId != null) localVarPathParams.Add("node_id", this.Configuration.ApiClient.ParameterToString(nodeId)); // path parameter
            if (jsonNode != null && jsonNode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonNode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonNode; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateNodeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Node>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Node) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Node)));
        }

    }
}
