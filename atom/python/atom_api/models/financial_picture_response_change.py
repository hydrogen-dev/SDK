# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.financial_picture_response_change_total_assets import FinancialPictureResponseChangeTotalAssets  # noqa: F401,E501


class FinancialPictureResponseChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysis_start': 'date',
        'analysis_end': 'date',
        'total_assets': 'FinancialPictureResponseChangeTotalAssets',
        'total_liabilities': 'FinancialPictureResponseChangeTotalAssets',
        'net_worth': 'FinancialPictureResponseChangeTotalAssets'
    }

    attribute_map = {
        'analysis_start': 'analysis_start',
        'analysis_end': 'analysis_end',
        'total_assets': 'total_assets',
        'total_liabilities': 'total_liabilities',
        'net_worth': 'net_worth'
    }

    def __init__(self, analysis_start=None, analysis_end=None, total_assets=None, total_liabilities=None, net_worth=None):  # noqa: E501
        """FinancialPictureResponseChange - a model defined in Swagger"""  # noqa: E501

        self._analysis_start = None
        self._analysis_end = None
        self._total_assets = None
        self._total_liabilities = None
        self._net_worth = None
        self.discriminator = None

        if analysis_start is not None:
            self.analysis_start = analysis_start
        if analysis_end is not None:
            self.analysis_end = analysis_end
        if total_assets is not None:
            self.total_assets = total_assets
        if total_liabilities is not None:
            self.total_liabilities = total_liabilities
        if net_worth is not None:
            self.net_worth = net_worth

    @property
    def analysis_start(self):
        """Gets the analysis_start of this FinancialPictureResponseChange.  # noqa: E501

        Start date of the available data used in the change analysis  # noqa: E501

        :return: The analysis_start of this FinancialPictureResponseChange.  # noqa: E501
        :rtype: date
        """
        return self._analysis_start

    @analysis_start.setter
    def analysis_start(self, analysis_start):
        """Sets the analysis_start of this FinancialPictureResponseChange.

        Start date of the available data used in the change analysis  # noqa: E501

        :param analysis_start: The analysis_start of this FinancialPictureResponseChange.  # noqa: E501
        :type: date
        """

        self._analysis_start = analysis_start

    @property
    def analysis_end(self):
        """Gets the analysis_end of this FinancialPictureResponseChange.  # noqa: E501

        End date of the available data used in the change analysis  # noqa: E501

        :return: The analysis_end of this FinancialPictureResponseChange.  # noqa: E501
        :rtype: date
        """
        return self._analysis_end

    @analysis_end.setter
    def analysis_end(self, analysis_end):
        """Sets the analysis_end of this FinancialPictureResponseChange.

        End date of the available data used in the change analysis  # noqa: E501

        :param analysis_end: The analysis_end of this FinancialPictureResponseChange.  # noqa: E501
        :type: date
        """

        self._analysis_end = analysis_end

    @property
    def total_assets(self):
        """Gets the total_assets of this FinancialPictureResponseChange.  # noqa: E501


        :return: The total_assets of this FinancialPictureResponseChange.  # noqa: E501
        :rtype: FinancialPictureResponseChangeTotalAssets
        """
        return self._total_assets

    @total_assets.setter
    def total_assets(self, total_assets):
        """Sets the total_assets of this FinancialPictureResponseChange.


        :param total_assets: The total_assets of this FinancialPictureResponseChange.  # noqa: E501
        :type: FinancialPictureResponseChangeTotalAssets
        """

        self._total_assets = total_assets

    @property
    def total_liabilities(self):
        """Gets the total_liabilities of this FinancialPictureResponseChange.  # noqa: E501


        :return: The total_liabilities of this FinancialPictureResponseChange.  # noqa: E501
        :rtype: FinancialPictureResponseChangeTotalAssets
        """
        return self._total_liabilities

    @total_liabilities.setter
    def total_liabilities(self, total_liabilities):
        """Sets the total_liabilities of this FinancialPictureResponseChange.


        :param total_liabilities: The total_liabilities of this FinancialPictureResponseChange.  # noqa: E501
        :type: FinancialPictureResponseChangeTotalAssets
        """

        self._total_liabilities = total_liabilities

    @property
    def net_worth(self):
        """Gets the net_worth of this FinancialPictureResponseChange.  # noqa: E501


        :return: The net_worth of this FinancialPictureResponseChange.  # noqa: E501
        :rtype: FinancialPictureResponseChangeTotalAssets
        """
        return self._net_worth

    @net_worth.setter
    def net_worth(self, net_worth):
        """Sets the net_worth of this FinancialPictureResponseChange.


        :param net_worth: The net_worth of this FinancialPictureResponseChange.  # noqa: E501
        :type: FinancialPictureResponseChangeTotalAssets
        """

        self._net_worth = net_worth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialPictureResponseChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialPictureResponseChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
