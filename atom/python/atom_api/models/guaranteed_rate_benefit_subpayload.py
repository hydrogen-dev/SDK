# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GuaranteedRateBenefitSubpayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'int',
        'end': 'int',
        'min_rate': 'float',
        'max_rate': 'float'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'min_rate': 'min_rate',
        'max_rate': 'max_rate'
    }

    def __init__(self, start=None, end=None, min_rate=None, max_rate=None):  # noqa: E501
        """GuaranteedRateBenefitSubpayload - a model defined in Swagger"""  # noqa: E501

        self._start = None
        self._end = None
        self._min_rate = None
        self._max_rate = None
        self.discriminator = None

        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if min_rate is not None:
            self.min_rate = min_rate
        if max_rate is not None:
            self.max_rate = max_rate

    @property
    def start(self):
        """Gets the start of this GuaranteedRateBenefitSubpayload.  # noqa: E501

        The starting period for the guarantee, where 1 indicates the first period in accumulation_horizon. Must be greater than or equal to 1. Defaults to 1.  # noqa: E501

        :return: The start of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this GuaranteedRateBenefitSubpayload.

        The starting period for the guarantee, where 1 indicates the first period in accumulation_horizon. Must be greater than or equal to 1. Defaults to 1.  # noqa: E501

        :param start: The start of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :type: int
        """
        if start is not None and start < 1:  # noqa: E501
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `1`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this GuaranteedRateBenefitSubpayload.  # noqa: E501

        The ending period for the guarantee. Must be less than or equal to the sum of accumulation_horizon and decumulation_horizon. Defaults to the sum of accumulation_horizon and decumulation_horizon.  # noqa: E501

        :return: The end of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this GuaranteedRateBenefitSubpayload.

        The ending period for the guarantee. Must be less than or equal to the sum of accumulation_horizon and decumulation_horizon. Defaults to the sum of accumulation_horizon and decumulation_horizon.  # noqa: E501

        :param end: The end of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :type: int
        """

        self._end = end

    @property
    def min_rate(self):
        """Gets the min_rate of this GuaranteedRateBenefitSubpayload.  # noqa: E501

        The minimum allowable rate. Must be less than or equal to max_rate.  # noqa: E501

        :return: The min_rate of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :rtype: float
        """
        return self._min_rate

    @min_rate.setter
    def min_rate(self, min_rate):
        """Sets the min_rate of this GuaranteedRateBenefitSubpayload.

        The minimum allowable rate. Must be less than or equal to max_rate.  # noqa: E501

        :param min_rate: The min_rate of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :type: float
        """

        self._min_rate = min_rate

    @property
    def max_rate(self):
        """Gets the max_rate of this GuaranteedRateBenefitSubpayload.  # noqa: E501

        The minimum allowable rate. Must be greater than or equal to min_rate.  # noqa: E501

        :return: The max_rate of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :rtype: float
        """
        return self._max_rate

    @max_rate.setter
    def max_rate(self, max_rate):
        """Sets the max_rate of this GuaranteedRateBenefitSubpayload.

        The minimum allowable rate. Must be greater than or equal to min_rate.  # noqa: E501

        :param max_rate: The max_rate of this GuaranteedRateBenefitSubpayload.  # noqa: E501
        :type: float
        """

        self._max_rate = max_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuaranteedRateBenefitSubpayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedRateBenefitSubpayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
