/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenProtonApi.SimulationsApi();
  });

  describe('(package)', function() {
    describe('SimulationsApi', function() {
      describe('backtest', function() {
        it('should call backtest successfully', function(done) {
          // TODO: uncomment, update parameter values for backtest call and complete the assertions
          /*
          var backtestRequest = new HydrogenProtonApi.BacktestRequest();
          backtestRequest.endDate = new Date();
          backtestRequest.trades = false;
          backtestRequest.modelId = """00000000-0000-0000-0000-000000000000";
          backtestRequest.startDate = new Date();
          backtestRequest.stats = false;
          backtestRequest.initialWeights = ;
          backtestRequest.settings = new HydrogenProtonApi.Settings();
          backtestRequest.settings.defaultDriftFactor = 0.0;
          backtestRequest.settings.driftRebal = false;
          backtestRequest.settings.downside = false;
          backtestRequest.settings.taxEfficiencyId = 0;
          backtestRequest.settings.periodRebal = false;
          backtestRequest.settings.rebalancePeriod = 0;
          backtestRequest.assetSize = ;
          backtestRequest.assetSizes = false;
          backtestRequest.holdings = false;

          instance.backtest(backtestRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('eventStudy', function() {
        it('should call eventStudy successfully', function(done) {
          // TODO: uncomment, update parameter values for eventStudy call and complete the assertions
          /*
          var eventStudyRequest = new HydrogenProtonApi.EventStudyRequest();
          eventStudyRequest.allocationId = """00000000-0000-0000-0000-000000000000";
          eventStudyRequest.events = ["dot_com_bubble"]"dot_com_bubble";
          eventStudyRequest.marketDataSource = "nucleus";
          eventStudyRequest.modelId = """00000000-0000-0000-0000-000000000000";
          eventStudyRequest.accountId = """00000000-0000-0000-0000-000000000000";
          eventStudyRequest.useProxyData = false;
          eventStudyRequest.portfolioWeights = [0.0];
          eventStudyRequest.portfolioTickers = [""];
          eventStudyRequest.createLog = false;
          eventStudyRequest.aggregationAccountId = """00000000-0000-0000-0000-000000000000";
          eventStudyRequest.portfolioId = """00000000-0000-0000-0000-000000000000";

          instance.eventStudy(eventStudyRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('monteCarlo', function() {
        it('should call monteCarlo successfully', function(done) {
          // TODO: uncomment, update parameter values for monteCarlo call and complete the assertions
          /*
          var monteCarloRequest = new HydrogenProtonApi.MonteCarloRequest();
          monteCarloRequest.minBal = [];
          monteCarloRequest.maxBal = [];
          monteCarloRequest.p = [];
          monteCarloRequest.allocationId = """00000000-0000-0000-0000-000000000000";
          monteCarloRequest.initBal = ;
          monteCarloRequest.maxSample = [0.0];
          monteCarloRequest.modelId = """00000000-0000-0000-0000-000000000000";
          monteCarloRequest.cf = [[]];
          monteCarloRequest.createLog = false;
          monteCarloRequest.aggregationAccountId = """00000000-0000-0000-0000-000000000000";
          monteCarloRequest.n = 0;
          monteCarloRequest.removeOutliers = false;
          monteCarloRequest.sigma = [0.0];
          monteCarloRequest.mu = [0.0];
          monteCarloRequest.portfolioId = """00000000-0000-0000-0000-000000000000";
          monteCarloRequest.resultType = "raw";
          monteCarloRequest.accountId = """00000000-0000-0000-0000-000000000000";
          monteCarloRequest.useProxyData = false;
          monteCarloRequest.marketDataSource = "nucleus";
          monteCarloRequest.retMod = [0.0];
          monteCarloRequest.frequencyInterval = "year";
          monteCarloRequest.minSample = [0.0];

          instance.monteCarlo(monteCarloRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('portfolioWhatIf', function() {
        it('should call portfolioWhatIf successfully', function(done) {
          // TODO: uncomment, update parameter values for portfolioWhatIf call and complete the assertions
          /*
          var portfolioWhatIfRequest = new HydrogenProtonApi.PortfolioWhatIfRequest();
          portfolioWhatIfRequest.allocationId = """00000000-0000-0000-0000-000000000000";
          portfolioWhatIfRequest.endDate = "";
          portfolioWhatIfRequest.marketDataSource = "nucleus";
          portfolioWhatIfRequest.modelId = """00000000-0000-0000-0000-000000000000";
          portfolioWhatIfRequest.accountId = """00000000-0000-0000-0000-000000000000";
          portfolioWhatIfRequest.startDate = "";
          portfolioWhatIfRequest.currentPortfolioWeights = [0.0];
          portfolioWhatIfRequest.useProxyData = false;
          portfolioWhatIfRequest.alteredPortfolioWeights = [0.0];
          portfolioWhatIfRequest.createLog = false;
          portfolioWhatIfRequest.currentPortfolioTickers = [""];
          portfolioWhatIfRequest.aggregationAccountId = """00000000-0000-0000-0000-000000000000";
          portfolioWhatIfRequest.alteredPortfolioTickers = [""];
          portfolioWhatIfRequest.portfolioId = """00000000-0000-0000-0000-000000000000";

          instance.portfolioWhatIf(portfolioWhatIfRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('savingsCalculator', function() {
        it('should call savingsCalculator successfully', function(done) {
          // TODO: uncomment, update parameter values for savingsCalculator call and complete the assertions
          /*
          var savingsCalculatorRequest = new HydrogenProtonApi.SavingsCalculatorRequest();
          savingsCalculatorRequest.inflationRate = 0.0;
          savingsCalculatorRequest.accountIds = ["""00000000-0000-0000-0000-000000000000"];
          savingsCalculatorRequest.taxRate = 0.0;
          savingsCalculatorRequest.horizonFrequencyInterval = "year";
          savingsCalculatorRequest.depositSchedule = [new HydrogenProtonApi.SavingsDepositSchedule()];
          savingsCalculatorRequest.depositSchedule[0].depositFrequencyInterval = "year";
          savingsCalculatorRequest.depositSchedule[0].depositAmount = ;
          savingsCalculatorRequest.depositSchedule[0].depositDuration = 0;
          savingsCalculatorRequest.depositSchedule[0].adjustDepositForInflation = false;
          savingsCalculatorRequest.horizon = 0;
          savingsCalculatorRequest.returnSchedule = [0.0];
          savingsCalculatorRequest.createLog = false;
          savingsCalculatorRequest.initialBalance = ;
          savingsCalculatorRequest.aggregationAccountIds = ["""00000000-0000-0000-0000-000000000000"];

          instance.savingsCalculator(savingsCalculatorRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('scenarioAnalysis', function() {
        it('should call scenarioAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for scenarioAnalysis call and complete the assertions
          /*
          var scnearioAnalysisRequest = new HydrogenProtonApi.ScenarioAnalysisRequest();
          scnearioAnalysisRequest.scenario = [new HydrogenProtonApi.SensitivityFactor()];
          scnearioAnalysisRequest.scenario[0].changeAmount = 0.0;
          scnearioAnalysisRequest.scenario[0].ticker = "";
          scnearioAnalysisRequest.scenario[0].changeDuration = 0;
          scnearioAnalysisRequest.scenario[0].lag = 0;
          scnearioAnalysisRequest.allocationId = """00000000-0000-0000-0000-000000000000";
          scnearioAnalysisRequest.endDate = new Date();
          scnearioAnalysisRequest.marketDataSource = "nucleus";
          scnearioAnalysisRequest.modelId = """00000000-0000-0000-0000-000000000000";
          scnearioAnalysisRequest.accountId = """00000000-0000-0000-0000-000000000000";
          scnearioAnalysisRequest.startDate = new Date();
          scnearioAnalysisRequest.frequencyInterval = "year";
          scnearioAnalysisRequest.tradingDaysPerYear = 0;
          scnearioAnalysisRequest.useProxyData = false;
          scnearioAnalysisRequest.portfolioWeights = [0.0];
          scnearioAnalysisRequest.portfolioTickers = [""];
          scnearioAnalysisRequest.createLog = false;
          scnearioAnalysisRequest.aggregationAccountId = """00000000-0000-0000-0000-000000000000";
          scnearioAnalysisRequest.portfolioId = """00000000-0000-0000-0000-000000000000";

          instance.scenarioAnalysis(scnearioAnalysisRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sensitivityAnalysis', function() {
        it('should call sensitivityAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for sensitivityAnalysis call and complete the assertions
          /*
          var sensitivityAnalysisRequest = new HydrogenProtonApi.SensitivityAnalysisRequest();
          sensitivityAnalysisRequest.allocationId = """00000000-0000-0000-0000-000000000000";
          sensitivityAnalysisRequest.endDate = new Date();
          sensitivityAnalysisRequest.marketDataSource = "nucleus";
          sensitivityAnalysisRequest.modelId = """00000000-0000-0000-0000-000000000000";
          sensitivityAnalysisRequest.accountId = """00000000-0000-0000-0000-000000000000";
          sensitivityAnalysisRequest.startDate = new Date();
          sensitivityAnalysisRequest.frequencyInterval = "year";
          sensitivityAnalysisRequest.tradingDaysPerYear = 0;
          sensitivityAnalysisRequest.sensitivityFactor = new HydrogenProtonApi.SensitivityFactor();
          sensitivityAnalysisRequest.sensitivityFactor.changeAmount = 0.0;
          sensitivityAnalysisRequest.sensitivityFactor.ticker = "";
          sensitivityAnalysisRequest.sensitivityFactor.changeDuration = 0;
          sensitivityAnalysisRequest.sensitivityFactor.lag = 0;
          sensitivityAnalysisRequest.useProxyData = false;
          sensitivityAnalysisRequest.portfolioWeights = [0.0];
          sensitivityAnalysisRequest.portfolioTickers = [""];
          sensitivityAnalysisRequest.createLog = false;
          sensitivityAnalysisRequest.aggregationAccountId = """00000000-0000-0000-0000-000000000000";
          sensitivityAnalysisRequest.portfolioId = """00000000-0000-0000-0000-000000000000";

          instance.sensitivityAnalysis(sensitivityAnalysisRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
