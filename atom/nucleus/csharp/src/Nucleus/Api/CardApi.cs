/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a cardProgram request
        /// </summary>
        /// <remarks>
        /// Create a new cardProgram request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>CardProgram</returns>
        CardProgram CreateCardProgramUsingPost (CardProgram cardProgramRequest);

        /// <summary>
        /// Create a cardProgram request
        /// </summary>
        /// <remarks>
        /// Create a new cardProgram request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>ApiResponse of CardProgram</returns>
        ApiResponse<CardProgram> CreateCardProgramUsingPostWithHttpInfo (CardProgram cardProgramRequest);
        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Card</returns>
        Card CreateCardUsingPost (Card cardRequest);

        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> CreateCardUsingPostWithHttpInfo (Card cardRequest);
        /// <summary>
        /// Delete an cardProgram
        /// </summary>
        /// <remarks>
        /// Permanently delete an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns></returns>
        void DeleteCardProgramUsingDelete (Guid? cardProgramId);

        /// <summary>
        /// Delete an cardProgram
        /// </summary>
        /// <remarks>
        /// Permanently delete an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCardProgramUsingDeleteWithHttpInfo (Guid? cardProgramId);
        /// <summary>
        /// Delete a card request
        /// </summary>
        /// <remarks>
        /// Permanently delete a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns></returns>
        void DeleteCardUsingDelete (Guid? cardId);

        /// <summary>
        /// Delete a card request
        /// </summary>
        /// <remarks>
        /// Permanently delete a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCardUsingDeleteWithHttpInfo (Guid? cardId);
        /// <summary>
        /// List all client cards
        /// </summary>
        /// <remarks>
        /// Get the information for all cards for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClientBusinessCardVO</returns>
        PageClientBusinessCardVO GetAllClientCardsUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all client cards
        /// </summary>
        /// <remarks>
        /// Get the information for all cards for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClientBusinessCardVO</returns>
        ApiResponse<PageClientBusinessCardVO> GetAllClientCardsUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageCard</returns>
        PageCard GetCardAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageCard</returns>
        ApiResponse<PageCard> GetCardAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all card asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetCardAssetSizeAggAllUsingGet (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all card asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetCardAssetSizeAggAllUsingGetWithHttpInfo (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all cardProgram
        /// </summary>
        /// <remarks>
        /// Get information for all cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageCardProgram</returns>
        PageCardProgram GetCardProgramAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all cardProgram
        /// </summary>
        /// <remarks>
        /// Get information for all cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageCardProgram</returns>
        ApiResponse<PageCardProgram> GetCardProgramAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an cardProgram
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>CardProgram</returns>
        CardProgram GetCardProgramUsingGet (Guid? cardProgramId);

        /// <summary>
        /// Retrieve an cardProgram
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>ApiResponse of CardProgram</returns>
        ApiResponse<CardProgram> GetCardProgramUsingGetWithHttpInfo (Guid? cardProgramId);
        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetCardTransactionAggAllUsingGet (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetCardTransactionAggAllUsingGetWithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetCardTransactionAggAllUsingGet1 (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetCardTransactionAggAllUsingGet1WithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        Card GetCardUsingGet (Guid? cardId);

        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> GetCardUsingGetWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Update an cardProgram
        /// </summary>
        /// <remarks>
        /// Update the information for an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>CardProgram</returns>
        CardProgram UpdateCardProgramUsingPut (Object cardProgram, Guid? cardProgramId);

        /// <summary>
        /// Update an cardProgram
        /// </summary>
        /// <remarks>
        /// Update the information for an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>ApiResponse of CardProgram</returns>
        ApiResponse<CardProgram> UpdateCardProgramUsingPutWithHttpInfo (Object cardProgram, Guid? cardProgramId);
        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        Card UpdateCardUsingPut (Object card, Guid? cardId);

        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> UpdateCardUsingPutWithHttpInfo (Object card, Guid? cardId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a cardProgram request
        /// </summary>
        /// <remarks>
        /// Create a new cardProgram request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>Task of CardProgram</returns>
        System.Threading.Tasks.Task<CardProgram> CreateCardProgramUsingPostAsync (CardProgram cardProgramRequest);

        /// <summary>
        /// Create a cardProgram request
        /// </summary>
        /// <remarks>
        /// Create a new cardProgram request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>Task of ApiResponse (CardProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardProgram>> CreateCardProgramUsingPostAsyncWithHttpInfo (CardProgram cardProgramRequest);
        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> CreateCardUsingPostAsync (Card cardRequest);

        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> CreateCardUsingPostAsyncWithHttpInfo (Card cardRequest);
        /// <summary>
        /// Delete an cardProgram
        /// </summary>
        /// <remarks>
        /// Permanently delete an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCardProgramUsingDeleteAsync (Guid? cardProgramId);

        /// <summary>
        /// Delete an cardProgram
        /// </summary>
        /// <remarks>
        /// Permanently delete an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCardProgramUsingDeleteAsyncWithHttpInfo (Guid? cardProgramId);
        /// <summary>
        /// Delete a card request
        /// </summary>
        /// <remarks>
        /// Permanently delete a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCardUsingDeleteAsync (Guid? cardId);

        /// <summary>
        /// Delete a card request
        /// </summary>
        /// <remarks>
        /// Permanently delete a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCardUsingDeleteAsyncWithHttpInfo (Guid? cardId);
        /// <summary>
        /// List all client cards
        /// </summary>
        /// <remarks>
        /// Get the information for all cards for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClientBusinessCardVO</returns>
        System.Threading.Tasks.Task<PageClientBusinessCardVO> GetAllClientCardsUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all client cards
        /// </summary>
        /// <remarks>
        /// Get the information for all cards for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClientBusinessCardVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageClientBusinessCardVO>> GetAllClientCardsUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageCard</returns>
        System.Threading.Tasks.Task<PageCard> GetCardAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageCard>> GetCardAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all card asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetCardAssetSizeAggAllUsingGetAsync (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all card asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCardAssetSizeAggAllUsingGetAsyncWithHttpInfo (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all cardProgram
        /// </summary>
        /// <remarks>
        /// Get information for all cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageCardProgram</returns>
        System.Threading.Tasks.Task<PageCardProgram> GetCardProgramAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all cardProgram
        /// </summary>
        /// <remarks>
        /// Get information for all cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageCardProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageCardProgram>> GetCardProgramAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an cardProgram
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of CardProgram</returns>
        System.Threading.Tasks.Task<CardProgram> GetCardProgramUsingGetAsync (Guid? cardProgramId);

        /// <summary>
        /// Retrieve an cardProgram
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of ApiResponse (CardProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardProgram>> GetCardProgramUsingGetAsyncWithHttpInfo (Guid? cardProgramId);
        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetCardTransactionAggAllUsingGetAsync (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetCardTransactionAggAllUsingGetAsyncWithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetCardTransactionAggAllUsingGet1Async (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all card transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an card.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetCardTransactionAggAllUsingGet1AsyncWithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> GetCardUsingGetAsync (Guid? cardId);

        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> GetCardUsingGetAsyncWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Update an cardProgram
        /// </summary>
        /// <remarks>
        /// Update the information for an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of CardProgram</returns>
        System.Threading.Tasks.Task<CardProgram> UpdateCardProgramUsingPutAsync (Object cardProgram, Guid? cardProgramId);

        /// <summary>
        /// Update an cardProgram
        /// </summary>
        /// <remarks>
        /// Update the information for an cardProgram.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of ApiResponse (CardProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardProgram>> UpdateCardProgramUsingPutAsyncWithHttpInfo (Object cardProgram, Guid? cardProgramId);
        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> UpdateCardUsingPutAsync (Object card, Guid? cardId);

        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> UpdateCardUsingPutAsyncWithHttpInfo (Object card, Guid? cardId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardApi : ICardApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a cardProgram request Create a new cardProgram request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>CardProgram</returns>
        public CardProgram CreateCardProgramUsingPost (CardProgram cardProgramRequest)
        {
             ApiResponse<CardProgram> localVarResponse = CreateCardProgramUsingPostWithHttpInfo(cardProgramRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a cardProgram request Create a new cardProgram request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>ApiResponse of CardProgram</returns>
        public ApiResponse< CardProgram > CreateCardProgramUsingPostWithHttpInfo (CardProgram cardProgramRequest)
        {
            // verify the required parameter 'cardProgramRequest' is set
            if (cardProgramRequest == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramRequest' when calling CardApi->CreateCardProgramUsingPost");

            var localVarPath = "/nucleus/v1/card_program";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramRequest != null && cardProgramRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardProgramRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardProgramRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardProgramUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardProgram)));
        }

        /// <summary>
        /// Create a cardProgram request Create a new cardProgram request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>Task of CardProgram</returns>
        public async System.Threading.Tasks.Task<CardProgram> CreateCardProgramUsingPostAsync (CardProgram cardProgramRequest)
        {
             ApiResponse<CardProgram> localVarResponse = await CreateCardProgramUsingPostAsyncWithHttpInfo(cardProgramRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a cardProgram request Create a new cardProgram request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramRequest">cardProgramRequest</param>
        /// <returns>Task of ApiResponse (CardProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardProgram>> CreateCardProgramUsingPostAsyncWithHttpInfo (CardProgram cardProgramRequest)
        {
            // verify the required parameter 'cardProgramRequest' is set
            if (cardProgramRequest == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramRequest' when calling CardApi->CreateCardProgramUsingPost");

            var localVarPath = "/nucleus/v1/card_program";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramRequest != null && cardProgramRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardProgramRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardProgramRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardProgramUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardProgram)));
        }

        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Card</returns>
        public Card CreateCardUsingPost (Card cardRequest)
        {
             ApiResponse<Card> localVarResponse = CreateCardUsingPostWithHttpInfo(cardRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > CreateCardUsingPostWithHttpInfo (Card cardRequest)
        {
            // verify the required parameter 'cardRequest' is set
            if (cardRequest == null)
                throw new ApiException(400, "Missing required parameter 'cardRequest' when calling CardApi->CreateCardUsingPost");

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardRequest != null && cardRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> CreateCardUsingPostAsync (Card cardRequest)
        {
             ApiResponse<Card> localVarResponse = await CreateCardUsingPostAsyncWithHttpInfo(cardRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> CreateCardUsingPostAsyncWithHttpInfo (Card cardRequest)
        {
            // verify the required parameter 'cardRequest' is set
            if (cardRequest == null)
                throw new ApiException(400, "Missing required parameter 'cardRequest' when calling CardApi->CreateCardUsingPost");

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardRequest != null && cardRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Delete an cardProgram Permanently delete an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns></returns>
        public void DeleteCardProgramUsingDelete (Guid? cardProgramId)
        {
             DeleteCardProgramUsingDeleteWithHttpInfo(cardProgramId);
        }

        /// <summary>
        /// Delete an cardProgram Permanently delete an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCardProgramUsingDeleteWithHttpInfo (Guid? cardProgramId)
        {
            // verify the required parameter 'cardProgramId' is set
            if (cardProgramId == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramId' when calling CardApi->DeleteCardProgramUsingDelete");

            var localVarPath = "/nucleus/v1/card_program/{card_program_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramId != null) localVarPathParams.Add("card_program_id", this.Configuration.ApiClient.ParameterToString(cardProgramId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCardProgramUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an cardProgram Permanently delete an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCardProgramUsingDeleteAsync (Guid? cardProgramId)
        {
             await DeleteCardProgramUsingDeleteAsyncWithHttpInfo(cardProgramId);

        }

        /// <summary>
        /// Delete an cardProgram Permanently delete an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCardProgramUsingDeleteAsyncWithHttpInfo (Guid? cardProgramId)
        {
            // verify the required parameter 'cardProgramId' is set
            if (cardProgramId == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramId' when calling CardApi->DeleteCardProgramUsingDelete");

            var localVarPath = "/nucleus/v1/card_program/{card_program_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramId != null) localVarPathParams.Add("card_program_id", this.Configuration.ApiClient.ParameterToString(cardProgramId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCardProgramUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a card request Permanently delete a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns></returns>
        public void DeleteCardUsingDelete (Guid? cardId)
        {
             DeleteCardUsingDeleteWithHttpInfo(cardId);
        }

        /// <summary>
        /// Delete a card request Permanently delete a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCardUsingDeleteWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->DeleteCardUsingDelete");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCardUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a card request Permanently delete a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCardUsingDeleteAsync (Guid? cardId)
        {
             await DeleteCardUsingDeleteAsyncWithHttpInfo(cardId);

        }

        /// <summary>
        /// Delete a card request Permanently delete a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCardUsingDeleteAsyncWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->DeleteCardUsingDelete");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCardUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all client cards Get the information for all cards for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClientBusinessCardVO</returns>
        public PageClientBusinessCardVO GetAllClientCardsUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClientBusinessCardVO> localVarResponse = GetAllClientCardsUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all client cards Get the information for all cards for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClientBusinessCardVO</returns>
        public ApiResponse< PageClientBusinessCardVO > GetAllClientCardsUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card/cardholder_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllClientCardsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClientBusinessCardVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClientBusinessCardVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClientBusinessCardVO)));
        }

        /// <summary>
        /// List all client cards Get the information for all cards for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClientBusinessCardVO</returns>
        public async System.Threading.Tasks.Task<PageClientBusinessCardVO> GetAllClientCardsUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClientBusinessCardVO> localVarResponse = await GetAllClientCardsUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all client cards Get the information for all cards for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClientBusinessCardVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageClientBusinessCardVO>> GetAllClientCardsUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card/cardholder_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllClientCardsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClientBusinessCardVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClientBusinessCardVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClientBusinessCardVO)));
        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageCard</returns>
        public PageCard GetCardAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageCard> localVarResponse = GetCardAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageCard</returns>
        public ApiResponse< PageCard > GetCardAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageCard)));
        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageCard</returns>
        public async System.Threading.Tasks.Task<PageCard> GetCardAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageCard> localVarResponse = await GetCardAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageCard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageCard>> GetCardAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageCard)));
        }

        /// <summary>
        /// List all card asset sizes Get a list of asset sizes by date for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetCardAssetSizeAggAllUsingGet (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetCardAssetSizeAggAllUsingGetWithHttpInfo(cardId, currencyConversion, endDate, getLatest, sortType, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all card asset sizes Get a list of asset sizes by date for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetCardAssetSizeAggAllUsingGetWithHttpInfo (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardAssetSizeAggAllUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardAssetSizeAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List all card asset sizes Get a list of asset sizes by date for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCardAssetSizeAggAllUsingGetAsync (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetCardAssetSizeAggAllUsingGetAsyncWithHttpInfo(cardId, currencyConversion, endDate, getLatest, sortType, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all card asset sizes Get a list of asset sizes by date for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">Card Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCardAssetSizeAggAllUsingGetAsyncWithHttpInfo (Guid? cardId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardAssetSizeAggAllUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardAssetSizeAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// List all cardProgram Get information for all cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageCardProgram</returns>
        public PageCardProgram GetCardProgramAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageCardProgram> localVarResponse = GetCardProgramAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all cardProgram Get information for all cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageCardProgram</returns>
        public ApiResponse< PageCardProgram > GetCardProgramAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card_program";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardProgramAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageCardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageCardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageCardProgram)));
        }

        /// <summary>
        /// List all cardProgram Get information for all cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageCardProgram</returns>
        public async System.Threading.Tasks.Task<PageCardProgram> GetCardProgramAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageCardProgram> localVarResponse = await GetCardProgramAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all cardProgram Get information for all cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageCardProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageCardProgram>> GetCardProgramAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card_program";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardProgramAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageCardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageCardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageCardProgram)));
        }

        /// <summary>
        /// Retrieve an cardProgram Retrieve the information for a specific cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>CardProgram</returns>
        public CardProgram GetCardProgramUsingGet (Guid? cardProgramId)
        {
             ApiResponse<CardProgram> localVarResponse = GetCardProgramUsingGetWithHttpInfo(cardProgramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an cardProgram Retrieve the information for a specific cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>ApiResponse of CardProgram</returns>
        public ApiResponse< CardProgram > GetCardProgramUsingGetWithHttpInfo (Guid? cardProgramId)
        {
            // verify the required parameter 'cardProgramId' is set
            if (cardProgramId == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramId' when calling CardApi->GetCardProgramUsingGet");

            var localVarPath = "/nucleus/v1/card_program/{card_program_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramId != null) localVarPathParams.Add("card_program_id", this.Configuration.ApiClient.ParameterToString(cardProgramId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardProgramUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardProgram)));
        }

        /// <summary>
        /// Retrieve an cardProgram Retrieve the information for a specific cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of CardProgram</returns>
        public async System.Threading.Tasks.Task<CardProgram> GetCardProgramUsingGetAsync (Guid? cardProgramId)
        {
             ApiResponse<CardProgram> localVarResponse = await GetCardProgramUsingGetAsyncWithHttpInfo(cardProgramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an cardProgram Retrieve the information for a specific cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of ApiResponse (CardProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardProgram>> GetCardProgramUsingGetAsyncWithHttpInfo (Guid? cardProgramId)
        {
            // verify the required parameter 'cardProgramId' is set
            if (cardProgramId == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramId' when calling CardApi->GetCardProgramUsingGet");

            var localVarPath = "/nucleus/v1/card_program/{card_program_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramId != null) localVarPathParams.Add("card_program_id", this.Configuration.ApiClient.ParameterToString(cardProgramId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardProgramUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardProgram)));
        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetCardTransactionAggAllUsingGet (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetCardTransactionAggAllUsingGetWithHttpInfo(cardId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetCardTransactionAggAllUsingGetWithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardTransactionAggAllUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTransactionAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetCardTransactionAggAllUsingGetAsync (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetCardTransactionAggAllUsingGetAsyncWithHttpInfo(cardId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetCardTransactionAggAllUsingGetAsyncWithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardTransactionAggAllUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTransactionAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetCardTransactionAggAllUsingGet1 (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetCardTransactionAggAllUsingGet1WithHttpInfo(cardId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetCardTransactionAggAllUsingGet1WithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardTransactionAggAllUsingGet1");

            var localVarPath = "/nucleus/v1/card/{card_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTransactionAggAllUsingGet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetCardTransactionAggAllUsingGet1Async (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetCardTransactionAggAllUsingGet1AsyncWithHttpInfo(cardId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all card transactions Get the information for all transactions for an card.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">card_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end_date (optional, default to null)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start_date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetCardTransactionAggAllUsingGet1AsyncWithHttpInfo (Guid? cardId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardTransactionAggAllUsingGet1");

            var localVarPath = "/nucleus/v1/card/{card_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardTransactionAggAllUsingGet1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        public Card GetCardUsingGet (Guid? cardId)
        {
             ApiResponse<Card> localVarResponse = GetCardUsingGetWithHttpInfo(cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > GetCardUsingGetWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> GetCardUsingGetAsync (Guid? cardId)
        {
             ApiResponse<Card> localVarResponse = await GetCardUsingGetAsyncWithHttpInfo(cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> GetCardUsingGetAsyncWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Update an cardProgram Update the information for an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>CardProgram</returns>
        public CardProgram UpdateCardProgramUsingPut (Object cardProgram, Guid? cardProgramId)
        {
             ApiResponse<CardProgram> localVarResponse = UpdateCardProgramUsingPutWithHttpInfo(cardProgram, cardProgramId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an cardProgram Update the information for an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>ApiResponse of CardProgram</returns>
        public ApiResponse< CardProgram > UpdateCardProgramUsingPutWithHttpInfo (Object cardProgram, Guid? cardProgramId)
        {
            // verify the required parameter 'cardProgram' is set
            if (cardProgram == null)
                throw new ApiException(400, "Missing required parameter 'cardProgram' when calling CardApi->UpdateCardProgramUsingPut");
            // verify the required parameter 'cardProgramId' is set
            if (cardProgramId == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramId' when calling CardApi->UpdateCardProgramUsingPut");

            var localVarPath = "/nucleus/v1/card_program/{card_program_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramId != null) localVarPathParams.Add("card_program_id", this.Configuration.ApiClient.ParameterToString(cardProgramId)); // path parameter
            if (cardProgram != null && cardProgram.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardProgram); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardProgram; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardProgramUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardProgram)));
        }

        /// <summary>
        /// Update an cardProgram Update the information for an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of CardProgram</returns>
        public async System.Threading.Tasks.Task<CardProgram> UpdateCardProgramUsingPutAsync (Object cardProgram, Guid? cardProgramId)
        {
             ApiResponse<CardProgram> localVarResponse = await UpdateCardProgramUsingPutAsyncWithHttpInfo(cardProgram, cardProgramId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an cardProgram Update the information for an cardProgram.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardProgram">card_program</param>
        /// <param name="cardProgramId">UUID card_program_id</param>
        /// <returns>Task of ApiResponse (CardProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardProgram>> UpdateCardProgramUsingPutAsyncWithHttpInfo (Object cardProgram, Guid? cardProgramId)
        {
            // verify the required parameter 'cardProgram' is set
            if (cardProgram == null)
                throw new ApiException(400, "Missing required parameter 'cardProgram' when calling CardApi->UpdateCardProgramUsingPut");
            // verify the required parameter 'cardProgramId' is set
            if (cardProgramId == null)
                throw new ApiException(400, "Missing required parameter 'cardProgramId' when calling CardApi->UpdateCardProgramUsingPut");

            var localVarPath = "/nucleus/v1/card_program/{card_program_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardProgramId != null) localVarPathParams.Add("card_program_id", this.Configuration.ApiClient.ParameterToString(cardProgramId)); // path parameter
            if (cardProgram != null && cardProgram.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardProgram); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardProgram; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardProgramUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardProgram)));
        }

        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        public Card UpdateCardUsingPut (Object card, Guid? cardId)
        {
             ApiResponse<Card> localVarResponse = UpdateCardUsingPutWithHttpInfo(card, cardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > UpdateCardUsingPutWithHttpInfo (Object card, Guid? cardId)
        {
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling CardApi->UpdateCardUsingPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->UpdateCardUsingPut");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> UpdateCardUsingPutAsync (Object card, Guid? cardId)
        {
             ApiResponse<Card> localVarResponse = await UpdateCardUsingPutAsyncWithHttpInfo(card, cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> UpdateCardUsingPutAsyncWithHttpInfo (Object card, Guid? cardId)
        {
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling CardApi->UpdateCardUsingPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->UpdateCardUsingPut");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

    }
}
