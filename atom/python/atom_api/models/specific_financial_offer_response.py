# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.create_financial_offer_response import CreateFinancialOfferResponse  # noqa: F401,E501
from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class SpecificFinancialOfferResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_date': 'str',
        'name': 'str',
        'institution_name': 'str',
        'offer_link': 'str',
        'category': 'str',
        'subcategory': 'str',
        'description': 'str',
        'image': 'str',
        'currency_code': 'str',
        'financial_rate': 'float',
        'financial_rate_type': 'str',
        'financial_rate_term': 'float',
        'financial_rate_term_unit': 'str',
        'fee_amount': 'float',
        'fee_type': 'str',
        'offer_term': 'float',
        'offer_term_unit': 'str',
        'minimum_contribution': 'float',
        'minimum_contribution_term': 'float',
        'minimum_contribution_term_unit': 'str',
        'prerequisite': 'str',
        'prerequisite_type': 'str',
        'affiliate_rate': 'float',
        'client_review': 'str',
        'rating': 'str',
        'document_id': 'str',
        'campaign_id': 'str',
        'metadata': 'object',
        'secondary_id': 'SecondaryId',
        'update_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'create_date',
        'name': 'name',
        'institution_name': 'institution_name',
        'offer_link': 'offer_link',
        'category': 'category',
        'subcategory': 'subcategory',
        'description': 'description',
        'image': 'image',
        'currency_code': 'currency_code',
        'financial_rate': 'financial_rate',
        'financial_rate_type': 'financial_rate_type',
        'financial_rate_term': 'financial_rate_term',
        'financial_rate_term_unit': 'financial_rate_term_unit',
        'fee_amount': 'fee_amount',
        'fee_type': 'fee_type',
        'offer_term': 'offer_term',
        'offer_term_unit': 'offer_term_unit',
        'minimum_contribution': 'minimum_contribution',
        'minimum_contribution_term': 'minimum_contribution_term',
        'minimum_contribution_term_unit': 'minimum_contribution_term_unit',
        'prerequisite': 'prerequisite',
        'prerequisite_type': 'prerequisite_type',
        'affiliate_rate': 'affiliate_rate',
        'client_review': 'client_review',
        'rating': 'rating',
        'document_id': 'document_id',
        'campaign_id': 'campaign_id',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, create_date=None, name=None, institution_name=None, offer_link=None, category=None, subcategory=None, description=None, image=None, currency_code=None, financial_rate=None, financial_rate_type=None, financial_rate_term=None, financial_rate_term_unit=None, fee_amount=None, fee_type=None, offer_term=None, offer_term_unit=None, minimum_contribution=None, minimum_contribution_term=None, minimum_contribution_term_unit=None, prerequisite=None, prerequisite_type=None, affiliate_rate=None, client_review=None, rating=None, document_id=None, campaign_id=None, metadata=None, secondary_id=None, update_date=None):  # noqa: E501
        """SpecificFinancialOfferResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._name = None
        self._institution_name = None
        self._offer_link = None
        self._category = None
        self._subcategory = None
        self._description = None
        self._image = None
        self._currency_code = None
        self._financial_rate = None
        self._financial_rate_type = None
        self._financial_rate_term = None
        self._financial_rate_term_unit = None
        self._fee_amount = None
        self._fee_type = None
        self._offer_term = None
        self._offer_term_unit = None
        self._minimum_contribution = None
        self._minimum_contribution_term = None
        self._minimum_contribution_term_unit = None
        self._prerequisite = None
        self._prerequisite_type = None
        self._affiliate_rate = None
        self._client_review = None
        self._rating = None
        self._document_id = None
        self._campaign_id = None
        self._metadata = None
        self._secondary_id = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        self.name = name
        self.institution_name = institution_name
        self.offer_link = offer_link
        if category is not None:
            self.category = category
        if subcategory is not None:
            self.subcategory = subcategory
        if description is not None:
            self.description = description
        if image is not None:
            self.image = image
        if currency_code is not None:
            self.currency_code = currency_code
        if financial_rate is not None:
            self.financial_rate = financial_rate
        if financial_rate_type is not None:
            self.financial_rate_type = financial_rate_type
        if financial_rate_term is not None:
            self.financial_rate_term = financial_rate_term
        if financial_rate_term_unit is not None:
            self.financial_rate_term_unit = financial_rate_term_unit
        if fee_amount is not None:
            self.fee_amount = fee_amount
        if fee_type is not None:
            self.fee_type = fee_type
        if offer_term is not None:
            self.offer_term = offer_term
        if offer_term_unit is not None:
            self.offer_term_unit = offer_term_unit
        if minimum_contribution is not None:
            self.minimum_contribution = minimum_contribution
        if minimum_contribution_term is not None:
            self.minimum_contribution_term = minimum_contribution_term
        if minimum_contribution_term_unit is not None:
            self.minimum_contribution_term_unit = minimum_contribution_term_unit
        if prerequisite is not None:
            self.prerequisite = prerequisite
        if prerequisite_type is not None:
            self.prerequisite_type = prerequisite_type
        if affiliate_rate is not None:
            self.affiliate_rate = affiliate_rate
        if client_review is not None:
            self.client_review = client_review
        if rating is not None:
            self.rating = rating
        if document_id is not None:
            self.document_id = document_id
        if campaign_id is not None:
            self.campaign_id = campaign_id
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this SpecificFinancialOfferResponse.  # noqa: E501

        ID of the financial offer  # noqa: E501

        :return: The id of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpecificFinancialOfferResponse.

        ID of the financial offer  # noqa: E501

        :param id: The id of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this SpecificFinancialOfferResponse.  # noqa: E501

        Datetime the financial offer was created  # noqa: E501

        :return: The create_date of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this SpecificFinancialOfferResponse.

        Datetime the financial offer was created  # noqa: E501

        :param create_date: The create_date of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def name(self):
        """Gets the name of this SpecificFinancialOfferResponse.  # noqa: E501

        Name of the financial offer  # noqa: E501

        :return: The name of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpecificFinancialOfferResponse.

        Name of the financial offer  # noqa: E501

        :param name: The name of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def institution_name(self):
        """Gets the institution_name of this SpecificFinancialOfferResponse.  # noqa: E501

        Name of the financial institution  # noqa: E501

        :return: The institution_name of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._institution_name

    @institution_name.setter
    def institution_name(self, institution_name):
        """Sets the institution_name of this SpecificFinancialOfferResponse.

        Name of the financial institution  # noqa: E501

        :param institution_name: The institution_name of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """
        if institution_name is None:
            raise ValueError("Invalid value for `institution_name`, must not be `None`")  # noqa: E501

        self._institution_name = institution_name

    @property
    def offer_link(self):
        """Gets the offer_link of this SpecificFinancialOfferResponse.  # noqa: E501

        Link to the associated financial offer  # noqa: E501

        :return: The offer_link of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._offer_link

    @offer_link.setter
    def offer_link(self, offer_link):
        """Sets the offer_link of this SpecificFinancialOfferResponse.

        Link to the associated financial offer  # noqa: E501

        :param offer_link: The offer_link of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """
        if offer_link is None:
            raise ValueError("Invalid value for `offer_link`, must not be `None`")  # noqa: E501

        self._offer_link = offer_link

    @property
    def category(self):
        """Gets the category of this SpecificFinancialOfferResponse.  # noqa: E501

        Category of the financial offer. Value may be credit_card, savings, mortgage, loan, investment, tax, real_estate, brokerage, and other.  # noqa: E501

        :return: The category of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SpecificFinancialOfferResponse.

        Category of the financial offer. Value may be credit_card, savings, mortgage, loan, investment, tax, real_estate, brokerage, and other.  # noqa: E501

        :param category: The category of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["credit_card", "savings", "mortgage", "loan", "investment", "tax", "real_estate", "brokerage", "other"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def subcategory(self):
        """Gets the subcategory of this SpecificFinancialOfferResponse.  # noqa: E501

        Subcategory of the financial offer  # noqa: E501

        :return: The subcategory of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this SpecificFinancialOfferResponse.

        Subcategory of the financial offer  # noqa: E501

        :param subcategory: The subcategory of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def description(self):
        """Gets the description of this SpecificFinancialOfferResponse.  # noqa: E501

        Description of the financial offer  # noqa: E501

        :return: The description of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SpecificFinancialOfferResponse.

        Description of the financial offer  # noqa: E501

        :param description: The description of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this SpecificFinancialOfferResponse.  # noqa: E501

        An image associated with the financial offer  # noqa: E501

        :return: The image of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SpecificFinancialOfferResponse.

        An image associated with the financial offer  # noqa: E501

        :param image: The image of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def currency_code(self):
        """Gets the currency_code of this SpecificFinancialOfferResponse.  # noqa: E501

        Alphabetic currency code for the base currency of the entity, limited to 3 characters.  # noqa: E501

        :return: The currency_code of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this SpecificFinancialOfferResponse.

        Alphabetic currency code for the base currency of the entity, limited to 3 characters.  # noqa: E501

        :param currency_code: The currency_code of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def financial_rate(self):
        """Gets the financial_rate of this SpecificFinancialOfferResponse.  # noqa: E501

        The financial rate associated with the financial offer  # noqa: E501

        :return: The financial_rate of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._financial_rate

    @financial_rate.setter
    def financial_rate(self, financial_rate):
        """Sets the financial_rate of this SpecificFinancialOfferResponse.

        The financial rate associated with the financial offer  # noqa: E501

        :param financial_rate: The financial_rate of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: float
        """

        self._financial_rate = financial_rate

    @property
    def financial_rate_type(self):
        """Gets the financial_rate_type of this SpecificFinancialOfferResponse.  # noqa: E501

        The financial rate type associated with the financial offer (i.e. percentage/ dollar amount)  # noqa: E501

        :return: The financial_rate_type of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._financial_rate_type

    @financial_rate_type.setter
    def financial_rate_type(self, financial_rate_type):
        """Sets the financial_rate_type of this SpecificFinancialOfferResponse.

        The financial rate type associated with the financial offer (i.e. percentage/ dollar amount)  # noqa: E501

        :param financial_rate_type: The financial_rate_type of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._financial_rate_type = financial_rate_type

    @property
    def financial_rate_term(self):
        """Gets the financial_rate_term of this SpecificFinancialOfferResponse.  # noqa: E501

        The fixed time period of the financial rate associated with the financial offer (i.e. 90)  # noqa: E501

        :return: The financial_rate_term of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._financial_rate_term

    @financial_rate_term.setter
    def financial_rate_term(self, financial_rate_term):
        """Sets the financial_rate_term of this SpecificFinancialOfferResponse.

        The fixed time period of the financial rate associated with the financial offer (i.e. 90)  # noqa: E501

        :param financial_rate_term: The financial_rate_term of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: float
        """

        self._financial_rate_term = financial_rate_term

    @property
    def financial_rate_term_unit(self):
        """Gets the financial_rate_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501

        The term unit of the financial rate. Value may be year, quarter, month, week, day  # noqa: E501

        :return: The financial_rate_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._financial_rate_term_unit

    @financial_rate_term_unit.setter
    def financial_rate_term_unit(self, financial_rate_term_unit):
        """Sets the financial_rate_term_unit of this SpecificFinancialOfferResponse.

        The term unit of the financial rate. Value may be year, quarter, month, week, day  # noqa: E501

        :param financial_rate_term_unit: The financial_rate_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["year", "quarter", "month", "week", "day"]  # noqa: E501
        if financial_rate_term_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `financial_rate_term_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(financial_rate_term_unit, allowed_values)
            )

        self._financial_rate_term_unit = financial_rate_term_unit

    @property
    def fee_amount(self):
        """Gets the fee_amount of this SpecificFinancialOfferResponse.  # noqa: E501

        Amount of the financial offer fee  # noqa: E501

        :return: The fee_amount of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this SpecificFinancialOfferResponse.

        Amount of the financial offer fee  # noqa: E501

        :param fee_amount: The fee_amount of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: float
        """

        self._fee_amount = fee_amount

    @property
    def fee_type(self):
        """Gets the fee_type of this SpecificFinancialOfferResponse.  # noqa: E501

        Type of financial offer fee  # noqa: E501

        :return: The fee_type of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this SpecificFinancialOfferResponse.

        Type of financial offer fee  # noqa: E501

        :param fee_type: The fee_type of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._fee_type = fee_type

    @property
    def offer_term(self):
        """Gets the offer_term of this SpecificFinancialOfferResponse.  # noqa: E501

        The fixed time period for which the offer is intended to last, once it is accepted  # noqa: E501

        :return: The offer_term of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._offer_term

    @offer_term.setter
    def offer_term(self, offer_term):
        """Sets the offer_term of this SpecificFinancialOfferResponse.

        The fixed time period for which the offer is intended to last, once it is accepted  # noqa: E501

        :param offer_term: The offer_term of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: float
        """

        self._offer_term = offer_term

    @property
    def offer_term_unit(self):
        """Gets the offer_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501

        The term unit of the offer term. Value may be year, quarter, month, week, day  # noqa: E501

        :return: The offer_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._offer_term_unit

    @offer_term_unit.setter
    def offer_term_unit(self, offer_term_unit):
        """Sets the offer_term_unit of this SpecificFinancialOfferResponse.

        The term unit of the offer term. Value may be year, quarter, month, week, day  # noqa: E501

        :param offer_term_unit: The offer_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["year", "quarter", "month", "week", "day"]  # noqa: E501
        if offer_term_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `offer_term_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(offer_term_unit, allowed_values)
            )

        self._offer_term_unit = offer_term_unit

    @property
    def minimum_contribution(self):
        """Gets the minimum_contribution of this SpecificFinancialOfferResponse.  # noqa: E501

        The minimum contribution amount in order to receive the financial_incentive associated with the financial offer  # noqa: E501

        :return: The minimum_contribution of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._minimum_contribution

    @minimum_contribution.setter
    def minimum_contribution(self, minimum_contribution):
        """Sets the minimum_contribution of this SpecificFinancialOfferResponse.

        The minimum contribution amount in order to receive the financial_incentive associated with the financial offer  # noqa: E501

        :param minimum_contribution: The minimum_contribution of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: float
        """

        self._minimum_contribution = minimum_contribution

    @property
    def minimum_contribution_term(self):
        """Gets the minimum_contribution_term of this SpecificFinancialOfferResponse.  # noqa: E501

        The fixed time period in which the customer must contribute the minimum contribution, in order to receive the financial incentive associated with the financial offer (i.e. 90)  # noqa: E501

        :return: The minimum_contribution_term of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._minimum_contribution_term

    @minimum_contribution_term.setter
    def minimum_contribution_term(self, minimum_contribution_term):
        """Sets the minimum_contribution_term of this SpecificFinancialOfferResponse.

        The fixed time period in which the customer must contribute the minimum contribution, in order to receive the financial incentive associated with the financial offer (i.e. 90)  # noqa: E501

        :param minimum_contribution_term: The minimum_contribution_term of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: float
        """

        self._minimum_contribution_term = minimum_contribution_term

    @property
    def minimum_contribution_term_unit(self):
        """Gets the minimum_contribution_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501

        The term unit of the minimum contribution. Value may be year, quarter, month, week, day  # noqa: E501

        :return: The minimum_contribution_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._minimum_contribution_term_unit

    @minimum_contribution_term_unit.setter
    def minimum_contribution_term_unit(self, minimum_contribution_term_unit):
        """Sets the minimum_contribution_term_unit of this SpecificFinancialOfferResponse.

        The term unit of the minimum contribution. Value may be year, quarter, month, week, day  # noqa: E501

        :param minimum_contribution_term_unit: The minimum_contribution_term_unit of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["year", "quarter", "month", "week", "day"]  # noqa: E501
        if minimum_contribution_term_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_contribution_term_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(minimum_contribution_term_unit, allowed_values)
            )

        self._minimum_contribution_term_unit = minimum_contribution_term_unit

    @property
    def prerequisite(self):
        """Gets the prerequisite of this SpecificFinancialOfferResponse.  # noqa: E501

        Prerequisite associated with the financial offer  # noqa: E501

        :return: The prerequisite of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._prerequisite

    @prerequisite.setter
    def prerequisite(self, prerequisite):
        """Sets the prerequisite of this SpecificFinancialOfferResponse.

        Prerequisite associated with the financial offer  # noqa: E501

        :param prerequisite: The prerequisite of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._prerequisite = prerequisite

    @property
    def prerequisite_type(self):
        """Gets the prerequisite_type of this SpecificFinancialOfferResponse.  # noqa: E501

        Prerequisite associated with the financial offer (i.e. credit score threshold, income threshold)  # noqa: E501

        :return: The prerequisite_type of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._prerequisite_type

    @prerequisite_type.setter
    def prerequisite_type(self, prerequisite_type):
        """Sets the prerequisite_type of this SpecificFinancialOfferResponse.

        Prerequisite associated with the financial offer (i.e. credit score threshold, income threshold)  # noqa: E501

        :param prerequisite_type: The prerequisite_type of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._prerequisite_type = prerequisite_type

    @property
    def affiliate_rate(self):
        """Gets the affiliate_rate of this SpecificFinancialOfferResponse.  # noqa: E501

        The payment value which will be received from the affiliate when the user purchases the offer  # noqa: E501

        :return: The affiliate_rate of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: float
        """
        return self._affiliate_rate

    @affiliate_rate.setter
    def affiliate_rate(self, affiliate_rate):
        """Sets the affiliate_rate of this SpecificFinancialOfferResponse.

        The payment value which will be received from the affiliate when the user purchases the offer  # noqa: E501

        :param affiliate_rate: The affiliate_rate of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: float
        """

        self._affiliate_rate = affiliate_rate

    @property
    def client_review(self):
        """Gets the client_review of this SpecificFinancialOfferResponse.  # noqa: E501

        Average of client reviews of the product  # noqa: E501

        :return: The client_review of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_review

    @client_review.setter
    def client_review(self, client_review):
        """Sets the client_review of this SpecificFinancialOfferResponse.

        Average of client reviews of the product  # noqa: E501

        :param client_review: The client_review of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._client_review = client_review

    @property
    def rating(self):
        """Gets the rating of this SpecificFinancialOfferResponse.  # noqa: E501

        The rating of the product by the site displaying the offer  # noqa: E501

        :return: The rating of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this SpecificFinancialOfferResponse.

        The rating of the product by the site displaying the offer  # noqa: E501

        :param rating: The rating of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._rating = rating

    @property
    def document_id(self):
        """Gets the document_id of this SpecificFinancialOfferResponse.  # noqa: E501

        Unique ID of the document associated with the financial offer  # noqa: E501

        :return: The document_id of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this SpecificFinancialOfferResponse.

        Unique ID of the document associated with the financial offer  # noqa: E501

        :param document_id: The document_id of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this SpecificFinancialOfferResponse.  # noqa: E501

        Unique ID of the marketing campaign associated with the financial offer  # noqa: E501

        :return: The campaign_id of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this SpecificFinancialOfferResponse.

        Unique ID of the marketing campaign associated with the financial offer  # noqa: E501

        :param campaign_id: The campaign_id of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def metadata(self):
        """Gets the metadata of this SpecificFinancialOfferResponse.  # noqa: E501

        Custom information associated with the budget in the format key:value  # noqa: E501

        :return: The metadata of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SpecificFinancialOfferResponse.

        Custom information associated with the budget in the format key:value  # noqa: E501

        :param metadata: The metadata of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this SpecificFinancialOfferResponse.  # noqa: E501


        :return: The secondary_id of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this SpecificFinancialOfferResponse.


        :param secondary_id: The secondary_id of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    @property
    def update_date(self):
        """Gets the update_date of this SpecificFinancialOfferResponse.  # noqa: E501

        Datetime the financial offer was last updated  # noqa: E501

        :return: The update_date of this SpecificFinancialOfferResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this SpecificFinancialOfferResponse.

        Datetime the financial offer was last updated  # noqa: E501

        :param update_date: The update_date of this SpecificFinancialOfferResponse.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpecificFinancialOfferResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpecificFinancialOfferResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
