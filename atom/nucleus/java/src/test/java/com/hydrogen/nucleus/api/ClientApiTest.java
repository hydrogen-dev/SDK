/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.model.AvailableDateDoubleVO;
import com.hydrogen.nucleus.model.Client;
import com.hydrogen.nucleus.model.ClientResponse;
import com.hydrogen.nucleus.model.ClientStatus;
import org.threeten.bp.LocalDate;
import com.hydrogen.nucleus.model.PageClient;
import com.hydrogen.nucleus.model.PageClientResponse;
import com.hydrogen.nucleus.model.PageClientStatus;
import com.hydrogen.nucleus.model.PagePortfolioHoldingAgg;
import com.hydrogen.nucleus.model.PagePortfolioTransaction;
import java.util.UUID;
import com.hydrogen.nucleus.model.VClientGoalViewData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientApi
 */
@Ignore
public class ClientApiTest {

    private final ClientApi api = new ClientApi();

    
    /**
     * Create a client response
     *
     * Create a new client response for a question as part of a questionnaires.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientResponseUsingPostTest() throws ApiException {
        ClientResponse clientResponse = null;
        ClientResponse response = api.createClientResponseUsingPost(clientResponse);

        // TODO: test validations
    }
    
    /**
     * Create an client status
     *
     * Create an client status record for an client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientStatusUsingPostTest() throws ApiException {
        ClientStatus clientStatusRequest = null;
        ClientStatus response = api.createClientStatusUsingPost(clientStatusRequest);

        // TODO: test validations
    }
    
    /**
     * Create a client
     *
     * Create a new client, or register a new user, with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClientUsingPostTest() throws ApiException {
        Client clientRequest = null;
        Client response = api.createClientUsingPost(clientRequest);

        // TODO: test validations
    }
    
    /**
     * Delete a client response
     *
     * Permanently delete a client response for a client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientResponseUsingDeleteTest() throws ApiException {
        UUID clientResponseId = null;
        api.deleteClientResponseUsingDelete(clientResponseId);

        // TODO: test validations
    }
    
    /**
     * Delete an client status
     *
     * Permanently delete an client status record from an clientâ€™s history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientStatusUsingDeleteTest() throws ApiException {
        UUID clientStatusId = null;
        api.deleteClientStatusUsingDelete(clientStatusId);

        // TODO: test validations
    }
    
    /**
     * Delete a client
     *
     * Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientUsingDeleteTest() throws ApiException {
        UUID clientId = null;
        api.deleteClientUsingDelete(clientId);

        // TODO: test validations
    }
    
    /**
     * List all client Account overview
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientAccountOverviewUsingGetTest() throws ApiException {
        UUID clientId = null;
        Boolean ascending = null;
        String orderBy = null;
        Object response = api.getClientAccountOverviewUsingGet(clientId, ascending, orderBy);

        // TODO: test validations
    }
    
    /**
     * Advisor overview
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientAdvisorOverviewUsingGetTest() throws ApiException {
        UUID clientId = null;
        Boolean showClients = null;
        Object response = api.getClientAdvisorOverviewUsingGet(clientId, showClients);

        // TODO: test validations
    }
    
    /**
     * List all clients
     *
     * Get details for all clients registered with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageClient response = api.getClientAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * List all client asset sizes
     *
     * Get a list of asset sizes per date for a client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientAssetSizeUsingGetTest() throws ApiException {
        UUID clientId = null;
        String currencyConversion = null;
        LocalDate endDate = null;
        Boolean excludeSubledger = null;
        Boolean getLatest = null;
        String sortType = null;
        LocalDate startDate = null;
        List<AvailableDateDoubleVO> response = api.getClientAssetSizeUsingGet(clientId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);

        // TODO: test validations
    }
    
    /**
     * Retrieve client&#39;s goal details 
     *
     * Retrieve client&#39;s goal details
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientGoalOverviewUsingGetTest() throws ApiException {
        UUID clientId = null;
        Boolean portfolioGoal = null;
        VClientGoalViewData response = api.getClientGoalOverviewUsingGet(clientId, portfolioGoal);

        // TODO: test validations
    }
    
    /**
     * List all client holdings
     *
     * Get the information for all the securities that are currently being held by a client registered with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientHoldingUsingGetTest() throws ApiException {
        UUID clientId = null;
        Boolean ascending = null;
        String currencyConversion = null;
        String endDate = null;
        String filter = null;
        Boolean getLatest = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        String startDate = null;
        PagePortfolioHoldingAgg response = api.getClientHoldingUsingGet(clientId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);

        // TODO: test validations
    }
    
    /**
     * List all client responses
     *
     * Get all the client responses for questions as part of a questionnaire defined by your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientResponseAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageClientResponse response = api.getClientResponseAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a client response
     *
     * Retrieve the information for a client response for a client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientResponseUsingGetTest() throws ApiException {
        UUID clientResponseId = null;
        ClientResponse response = api.getClientResponseUsingGet(clientResponseId);

        // TODO: test validations
    }
    
    /**
     * List all client statuses
     *
     * Get the client status history information for all clients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientStatusAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageClientStatus response = api.getClientStatusAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve an client status
     *
     * Retrieve the information for a specific client status record for an client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientStatusUsingGetTest() throws ApiException {
        UUID clientStatusId = null;
        ClientStatus response = api.getClientStatusUsingGet(clientStatusId);

        // TODO: test validations
    }
    
    /**
     * List all client transactions
     *
     * Get the information for all transactions under a client registered with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientTransactionAllUsingGetTest() throws ApiException {
        UUID clientId = null;
        Boolean ascending = null;
        String currencyConversion = null;
        String endDate = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        String startDate = null;
        PagePortfolioTransaction response = api.getClientTransactionAllUsingGet(clientId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);

        // TODO: test validations
    }
    
    /**
     * Retrieve a client
     *
     * Retrieve the information for a client registered with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientUsingGetTest() throws ApiException {
        UUID clientId = null;
        Client response = api.getClientUsingGet(clientId);

        // TODO: test validations
    }
    
    /**
     * Update a client response
     *
     * Update a client response for a client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientResponseUsingPutTest() throws ApiException {
        Object clientResponse = null;
        UUID clientResponseId = null;
        ClientResponse response = api.updateClientResponseUsingPut(clientResponse, clientResponseId);

        // TODO: test validations
    }
    
    /**
     * Update an client status
     *
     * Update an client status record for an client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientStatusUsingPutTest() throws ApiException {
        Object clientStatus = null;
        UUID clientStatusId = null;
        ClientStatus response = api.updateClientStatusUsingPut(clientStatus, clientStatusId);

        // TODO: test validations
    }
    
    /**
     * Update a client
     *
     * Update the information for a client registered with your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientUsingPutTest() throws ApiException {
        Object client = null;
        UUID clientId = null;
        Client response = api.updateClientUsingPut(client, clientId);

        // TODO: test validations
    }
    
}
