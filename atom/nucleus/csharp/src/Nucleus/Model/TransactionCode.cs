/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// TransactionCode
    /// </summary>
    [DataContract]
    public partial class TransactionCode :  IEquatable<TransactionCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionCode" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="id">id.</param>
        /// <param name="isBuy">isBuy.</param>
        /// <param name="isDeposit">isDeposit.</param>
        /// <param name="isFee">isFee.</param>
        /// <param name="isTransfer">isTransfer.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="subcategory">subcategory.</param>
        /// <param name="transactionCode">transactionCode (required).</param>
        /// <param name="transactionCodeDescription">transactionCodeDescription.</param>
        /// <param name="transactionType">transactionType.</param>
        /// <param name="updateDate">updateDate.</param>
        public TransactionCode(string category = default(string), DateTime? createDate = default(DateTime?), Guid? id = default(Guid?), bool? isBuy = default(bool?), bool? isDeposit = default(bool?), bool? isFee = default(bool?), bool? isTransfer = default(bool?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string secondaryId = default(string), string subcategory = default(string), string transactionCode = default(string), string transactionCodeDescription = default(string), string transactionType = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "transactionCode" is required (not null)
            if (transactionCode == null)
            {
                throw new InvalidDataException("transactionCode is a required property for TransactionCode and cannot be null");
            }
            else
            {
                this._TransactionCode = transactionCode;
            }
            this.Category = category;
            this.CreateDate = createDate;
            this.Id = id;
            this.IsBuy = isBuy;
            this.IsDeposit = isDeposit;
            this.IsFee = isFee;
            this.IsTransfer = isTransfer;
            this.Metadata = metadata;
            this.SecondaryId = secondaryId;
            this.Subcategory = subcategory;
            this.TransactionCodeDescription = transactionCodeDescription;
            this.TransactionType = transactionType;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsBuy
        /// </summary>
        [DataMember(Name="is_buy", EmitDefaultValue=false)]
        public bool? IsBuy { get; set; }

        /// <summary>
        /// Gets or Sets IsDeposit
        /// </summary>
        [DataMember(Name="is_deposit", EmitDefaultValue=false)]
        public bool? IsDeposit { get; set; }

        /// <summary>
        /// Gets or Sets IsFee
        /// </summary>
        [DataMember(Name="is_fee", EmitDefaultValue=false)]
        public bool? IsFee { get; set; }

        /// <summary>
        /// Gets or Sets IsTransfer
        /// </summary>
        [DataMember(Name="is_transfer", EmitDefaultValue=false)]
        public bool? IsTransfer { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// subcategory
        /// </summary>
        /// <value>subcategory</value>
        [DataMember(Name="subcategory", EmitDefaultValue=false)]
        public string Subcategory { get; set; }

        /// <summary>
        /// transactionCode
        /// </summary>
        /// <value>transactionCode</value>
        [DataMember(Name="transaction_code", EmitDefaultValue=false)]
        public string _TransactionCode { get; set; }

        /// <summary>
        /// transactionCodeDescription
        /// </summary>
        /// <value>transactionCodeDescription</value>
        [DataMember(Name="transaction_code_description", EmitDefaultValue=false)]
        public string TransactionCodeDescription { get; set; }

        /// <summary>
        /// transactionType
        /// </summary>
        /// <value>transactionType</value>
        [DataMember(Name="transaction_type", EmitDefaultValue=false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionCode {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsBuy: ").Append(IsBuy).Append("\n");
            sb.Append("  IsDeposit: ").Append(IsDeposit).Append("\n");
            sb.Append("  IsFee: ").Append(IsFee).Append("\n");
            sb.Append("  IsTransfer: ").Append(IsTransfer).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  _TransactionCode: ").Append(_TransactionCode).Append("\n");
            sb.Append("  TransactionCodeDescription: ").Append(TransactionCodeDescription).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionCode);
        }

        /// <summary>
        /// Returns true if TransactionCode instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionCode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsBuy == input.IsBuy ||
                    (this.IsBuy != null &&
                    this.IsBuy.Equals(input.IsBuy))
                ) && 
                (
                    this.IsDeposit == input.IsDeposit ||
                    (this.IsDeposit != null &&
                    this.IsDeposit.Equals(input.IsDeposit))
                ) && 
                (
                    this.IsFee == input.IsFee ||
                    (this.IsFee != null &&
                    this.IsFee.Equals(input.IsFee))
                ) && 
                (
                    this.IsTransfer == input.IsTransfer ||
                    (this.IsTransfer != null &&
                    this.IsTransfer.Equals(input.IsTransfer))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Subcategory == input.Subcategory ||
                    (this.Subcategory != null &&
                    this.Subcategory.Equals(input.Subcategory))
                ) && 
                (
                    this._TransactionCode == input._TransactionCode ||
                    (this._TransactionCode != null &&
                    this._TransactionCode.Equals(input._TransactionCode))
                ) && 
                (
                    this.TransactionCodeDescription == input.TransactionCodeDescription ||
                    (this.TransactionCodeDescription != null &&
                    this.TransactionCodeDescription.Equals(input.TransactionCodeDescription))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsBuy != null)
                    hashCode = hashCode * 59 + this.IsBuy.GetHashCode();
                if (this.IsDeposit != null)
                    hashCode = hashCode * 59 + this.IsDeposit.GetHashCode();
                if (this.IsFee != null)
                    hashCode = hashCode * 59 + this.IsFee.GetHashCode();
                if (this.IsTransfer != null)
                    hashCode = hashCode * 59 + this.IsTransfer.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Subcategory != null)
                    hashCode = hashCode * 59 + this.Subcategory.GetHashCode();
                if (this._TransactionCode != null)
                    hashCode = hashCode * 59 + this._TransactionCode.GetHashCode();
                if (this.TransactionCodeDescription != null)
                    hashCode = hashCode * 59 + this.TransactionCodeDescription.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
