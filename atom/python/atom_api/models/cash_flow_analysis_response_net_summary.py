# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.cash_flow_analysis_response_net_summary_change import CashFlowAnalysisResponseNetSummaryChange  # noqa: F401,E501


class CashFlowAnalysisResponseNetSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'float',
        'benchmark_total': 'float',
        'change': 'CashFlowAnalysisResponseNetSummaryChange'
    }

    attribute_map = {
        'total': 'total',
        'benchmark_total': 'benchmark_total',
        'change': 'change'
    }

    def __init__(self, total=None, benchmark_total=None, change=None):  # noqa: E501
        """CashFlowAnalysisResponseNetSummary - a model defined in Swagger"""  # noqa: E501

        self._total = None
        self._benchmark_total = None
        self._change = None
        self.discriminator = None

        if total is not None:
            self.total = total
        if benchmark_total is not None:
            self.benchmark_total = benchmark_total
        if change is not None:
            self.change = change

    @property
    def total(self):
        """Gets the total of this CashFlowAnalysisResponseNetSummary.  # noqa: E501

        Total net cash flow over the base time period  # noqa: E501

        :return: The total of this CashFlowAnalysisResponseNetSummary.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CashFlowAnalysisResponseNetSummary.

        Total net cash flow over the base time period  # noqa: E501

        :param total: The total of this CashFlowAnalysisResponseNetSummary.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def benchmark_total(self):
        """Gets the benchmark_total of this CashFlowAnalysisResponseNetSummary.  # noqa: E501

        Total net cash flow over the benchmark time period  # noqa: E501

        :return: The benchmark_total of this CashFlowAnalysisResponseNetSummary.  # noqa: E501
        :rtype: float
        """
        return self._benchmark_total

    @benchmark_total.setter
    def benchmark_total(self, benchmark_total):
        """Sets the benchmark_total of this CashFlowAnalysisResponseNetSummary.

        Total net cash flow over the benchmark time period  # noqa: E501

        :param benchmark_total: The benchmark_total of this CashFlowAnalysisResponseNetSummary.  # noqa: E501
        :type: float
        """

        self._benchmark_total = benchmark_total

    @property
    def change(self):
        """Gets the change of this CashFlowAnalysisResponseNetSummary.  # noqa: E501


        :return: The change of this CashFlowAnalysisResponseNetSummary.  # noqa: E501
        :rtype: CashFlowAnalysisResponseNetSummaryChange
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this CashFlowAnalysisResponseNetSummary.


        :param change: The change of this CashFlowAnalysisResponseNetSummary.  # noqa: E501
        :type: CashFlowAnalysisResponseNetSummaryChange
        """

        self._change = change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CashFlowAnalysisResponseNetSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashFlowAnalysisResponseNetSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
