<?php
/**
 * RatioTargets1
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * RatioTargets1 Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RatioTargets1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RatioTargets1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'return_on_equity' => 'float',
        'return_on_assets' => 'float',
        'debt_to_equity' => 'float',
        'profit_margin' => 'float',
        'debt_ratio' => 'float',
        'asset_turnover' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'return_on_equity' => 'float',
        'return_on_assets' => 'float',
        'debt_to_equity' => 'float',
        'profit_margin' => 'float',
        'debt_ratio' => 'float',
        'asset_turnover' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'return_on_equity' => 'return_on_equity',
        'return_on_assets' => 'return_on_assets',
        'debt_to_equity' => 'debt_to_equity',
        'profit_margin' => 'profit_margin',
        'debt_ratio' => 'debt_ratio',
        'asset_turnover' => 'asset_turnover'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'return_on_equity' => 'setReturnOnEquity',
        'return_on_assets' => 'setReturnOnAssets',
        'debt_to_equity' => 'setDebtToEquity',
        'profit_margin' => 'setProfitMargin',
        'debt_ratio' => 'setDebtRatio',
        'asset_turnover' => 'setAssetTurnover'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'return_on_equity' => 'getReturnOnEquity',
        'return_on_assets' => 'getReturnOnAssets',
        'debt_to_equity' => 'getDebtToEquity',
        'profit_margin' => 'getProfitMargin',
        'debt_ratio' => 'getDebtRatio',
        'asset_turnover' => 'getAssetTurnover'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['return_on_equity'] = isset($data['return_on_equity']) ? $data['return_on_equity'] : 0.15;
        $this->container['return_on_assets'] = isset($data['return_on_assets']) ? $data['return_on_assets'] : 0.05;
        $this->container['debt_to_equity'] = isset($data['debt_to_equity']) ? $data['debt_to_equity'] : 1.5;
        $this->container['profit_margin'] = isset($data['profit_margin']) ? $data['profit_margin'] : 0.1;
        $this->container['debt_ratio'] = isset($data['debt_ratio']) ? $data['debt_ratio'] : 0.5;
        $this->container['asset_turnover'] = isset($data['asset_turnover']) ? $data['asset_turnover'] : 1.0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['return_on_equity']) && ($this->container['return_on_equity'] < 0)) {
            $invalidProperties[] = "invalid value for 'return_on_equity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['return_on_assets']) && ($this->container['return_on_assets'] < 0)) {
            $invalidProperties[] = "invalid value for 'return_on_assets', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['debt_to_equity']) && ($this->container['debt_to_equity'] < 0)) {
            $invalidProperties[] = "invalid value for 'debt_to_equity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['profit_margin']) && ($this->container['profit_margin'] < 0)) {
            $invalidProperties[] = "invalid value for 'profit_margin', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['debt_ratio']) && ($this->container['debt_ratio'] < 0)) {
            $invalidProperties[] = "invalid value for 'debt_ratio', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['asset_turnover']) && ($this->container['asset_turnover'] < 0)) {
            $invalidProperties[] = "invalid value for 'asset_turnover', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets return_on_equity
     *
     * @return float
     */
    public function getReturnOnEquity()
    {
        return $this->container['return_on_equity'];
    }

    /**
     * Sets return_on_equity
     *
     * @param float $return_on_equity return_on_equity
     *
     * @return $this
     */
    public function setReturnOnEquity($return_on_equity)
    {

        if (!is_null($return_on_equity) && ($return_on_equity < 0)) {
            throw new \InvalidArgumentException('invalid value for $return_on_equity when calling RatioTargets1., must be bigger than or equal to 0.');
        }

        $this->container['return_on_equity'] = $return_on_equity;

        return $this;
    }

    /**
     * Gets return_on_assets
     *
     * @return float
     */
    public function getReturnOnAssets()
    {
        return $this->container['return_on_assets'];
    }

    /**
     * Sets return_on_assets
     *
     * @param float $return_on_assets return_on_assets
     *
     * @return $this
     */
    public function setReturnOnAssets($return_on_assets)
    {

        if (!is_null($return_on_assets) && ($return_on_assets < 0)) {
            throw new \InvalidArgumentException('invalid value for $return_on_assets when calling RatioTargets1., must be bigger than or equal to 0.');
        }

        $this->container['return_on_assets'] = $return_on_assets;

        return $this;
    }

    /**
     * Gets debt_to_equity
     *
     * @return float
     */
    public function getDebtToEquity()
    {
        return $this->container['debt_to_equity'];
    }

    /**
     * Sets debt_to_equity
     *
     * @param float $debt_to_equity debt_to_equity
     *
     * @return $this
     */
    public function setDebtToEquity($debt_to_equity)
    {

        if (!is_null($debt_to_equity) && ($debt_to_equity < 0)) {
            throw new \InvalidArgumentException('invalid value for $debt_to_equity when calling RatioTargets1., must be bigger than or equal to 0.');
        }

        $this->container['debt_to_equity'] = $debt_to_equity;

        return $this;
    }

    /**
     * Gets profit_margin
     *
     * @return float
     */
    public function getProfitMargin()
    {
        return $this->container['profit_margin'];
    }

    /**
     * Sets profit_margin
     *
     * @param float $profit_margin profit_margin
     *
     * @return $this
     */
    public function setProfitMargin($profit_margin)
    {

        if (!is_null($profit_margin) && ($profit_margin < 0)) {
            throw new \InvalidArgumentException('invalid value for $profit_margin when calling RatioTargets1., must be bigger than or equal to 0.');
        }

        $this->container['profit_margin'] = $profit_margin;

        return $this;
    }

    /**
     * Gets debt_ratio
     *
     * @return float
     */
    public function getDebtRatio()
    {
        return $this->container['debt_ratio'];
    }

    /**
     * Sets debt_ratio
     *
     * @param float $debt_ratio debt_ratio
     *
     * @return $this
     */
    public function setDebtRatio($debt_ratio)
    {

        if (!is_null($debt_ratio) && ($debt_ratio < 0)) {
            throw new \InvalidArgumentException('invalid value for $debt_ratio when calling RatioTargets1., must be bigger than or equal to 0.');
        }

        $this->container['debt_ratio'] = $debt_ratio;

        return $this;
    }

    /**
     * Gets asset_turnover
     *
     * @return float
     */
    public function getAssetTurnover()
    {
        return $this->container['asset_turnover'];
    }

    /**
     * Sets asset_turnover
     *
     * @param float $asset_turnover asset_turnover
     *
     * @return $this
     */
    public function setAssetTurnover($asset_turnover)
    {

        if (!is_null($asset_turnover) && ($asset_turnover < 0)) {
            throw new \InvalidArgumentException('invalid value for $asset_turnover when calling RatioTargets1., must be bigger than or equal to 0.');
        }

        $this->container['asset_turnover'] = $asset_turnover;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


