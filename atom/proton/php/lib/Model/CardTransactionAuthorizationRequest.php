<?php
/**
 * CardTransactionAuthorizationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * CardTransactionAuthorizationRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardTransactionAuthorizationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'cardTransactionAuthorizationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'memo' => 'string',
        'partial_auth' => 'bool',
        'transaction_type' => 'string',
        'description' => 'string',
        'transaction_category_id' => 'string',
        'use_audit_log' => 'bool',
        'merchant_category_code' => 'string',
        'card_id' => 'string',
        'transaction_category' => 'string',
        'cleanse_data' => 'bool',
        'auth_type' => 'string[]',
        'mid' => 'string',
        'transaction_status_scope' => 'string[]',
        'location' => '\com\hydrogen\proton\Model\Location',
        'merchant' => 'string',
        'amount' => 'float',
        'date' => '\DateTime',
        'merchant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_code' => null,
        'memo' => null,
        'partial_auth' => null,
        'transaction_type' => null,
        'description' => null,
        'transaction_category_id' => 'uuid',
        'use_audit_log' => null,
        'merchant_category_code' => null,
        'card_id' => 'uuid',
        'transaction_category' => null,
        'cleanse_data' => null,
        'auth_type' => null,
        'mid' => null,
        'transaction_status_scope' => null,
        'location' => null,
        'merchant' => null,
        'amount' => 'float',
        'date' => 'date-time',
        'merchant_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'currency_code',
        'memo' => 'memo',
        'partial_auth' => 'partial_auth',
        'transaction_type' => 'transaction_type',
        'description' => 'description',
        'transaction_category_id' => 'transaction_category_id',
        'use_audit_log' => 'use_audit_log',
        'merchant_category_code' => 'merchant_category_code',
        'card_id' => 'card_id',
        'transaction_category' => 'transaction_category',
        'cleanse_data' => 'cleanse_data',
        'auth_type' => 'auth_type',
        'mid' => 'mid',
        'transaction_status_scope' => 'transaction_status_scope',
        'location' => 'location',
        'merchant' => 'merchant',
        'amount' => 'amount',
        'date' => 'date',
        'merchant_id' => 'merchant_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'memo' => 'setMemo',
        'partial_auth' => 'setPartialAuth',
        'transaction_type' => 'setTransactionType',
        'description' => 'setDescription',
        'transaction_category_id' => 'setTransactionCategoryId',
        'use_audit_log' => 'setUseAuditLog',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'card_id' => 'setCardId',
        'transaction_category' => 'setTransactionCategory',
        'cleanse_data' => 'setCleanseData',
        'auth_type' => 'setAuthType',
        'mid' => 'setMid',
        'transaction_status_scope' => 'setTransactionStatusScope',
        'location' => 'setLocation',
        'merchant' => 'setMerchant',
        'amount' => 'setAmount',
        'date' => 'setDate',
        'merchant_id' => 'setMerchantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'memo' => 'getMemo',
        'partial_auth' => 'getPartialAuth',
        'transaction_type' => 'getTransactionType',
        'description' => 'getDescription',
        'transaction_category_id' => 'getTransactionCategoryId',
        'use_audit_log' => 'getUseAuditLog',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'card_id' => 'getCardId',
        'transaction_category' => 'getTransactionCategory',
        'cleanse_data' => 'getCleanseData',
        'auth_type' => 'getAuthType',
        'mid' => 'getMid',
        'transaction_status_scope' => 'getTransactionStatusScope',
        'location' => 'getLocation',
        'merchant' => 'getMerchant',
        'amount' => 'getAmount',
        'date' => 'getDate',
        'merchant_id' => 'getMerchantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_TYPE_ATM_WITHDRAWAL = 'atm_withdrawal';
    const TRANSACTION_TYPE_PURCHASE = 'purchase';
    const TRANSACTION_TYPE_OTHER = 'other';
    const AUTH_TYPE_SPENDING_CONTROL = 'spending_control';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_ATM_WITHDRAWAL,
            self::TRANSACTION_TYPE_PURCHASE,
            self::TRANSACTION_TYPE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthTypeAllowableValues()
    {
        return [
            self::AUTH_TYPE_SPENDING_CONTROL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : 'null';
        $this->container['partial_auth'] = isset($data['partial_auth']) ? $data['partial_auth'] : false;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : 'null';
        $this->container['transaction_category_id'] = isset($data['transaction_category_id']) ? $data['transaction_category_id'] : null;
        $this->container['use_audit_log'] = isset($data['use_audit_log']) ? $data['use_audit_log'] : false;
        $this->container['merchant_category_code'] = isset($data['merchant_category_code']) ? $data['merchant_category_code'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['transaction_category'] = isset($data['transaction_category']) ? $data['transaction_category'] : 'null';
        $this->container['cleanse_data'] = isset($data['cleanse_data']) ? $data['cleanse_data'] : false;
        $this->container['auth_type'] = isset($data['auth_type']) ? $data['auth_type'] : null;
        $this->container['mid'] = isset($data['mid']) ? $data['mid'] : 'null';
        $this->container['transaction_status_scope'] = isset($data['transaction_status_scope']) ? $data['transaction_status_scope'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['merchant'] = isset($data['merchant']) ? $data['merchant'] : 'null';
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transaction_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['card_id'] === null) {
            $invalidProperties[] = "'card_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo memo
     *
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets partial_auth
     *
     * @return bool
     */
    public function getPartialAuth()
    {
        return $this->container['partial_auth'];
    }

    /**
     * Sets partial_auth
     *
     * @param bool $partial_auth partial_auth
     *
     * @return $this
     */
    public function setPartialAuth($partial_auth)
    {
        $this->container['partial_auth'] = $partial_auth;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type transaction_type
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transaction_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets transaction_category_id
     *
     * @return string
     */
    public function getTransactionCategoryId()
    {
        return $this->container['transaction_category_id'];
    }

    /**
     * Sets transaction_category_id
     *
     * @param string $transaction_category_id transaction_category_id
     *
     * @return $this
     */
    public function setTransactionCategoryId($transaction_category_id)
    {
        $this->container['transaction_category_id'] = $transaction_category_id;

        return $this;
    }

    /**
     * Gets use_audit_log
     *
     * @return bool
     */
    public function getUseAuditLog()
    {
        return $this->container['use_audit_log'];
    }

    /**
     * Sets use_audit_log
     *
     * @param bool $use_audit_log use_audit_log
     *
     * @return $this
     */
    public function setUseAuditLog($use_audit_log)
    {
        $this->container['use_audit_log'] = $use_audit_log;

        return $this;
    }

    /**
     * Gets merchant_category_code
     *
     * @return string
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     *
     * @param string $merchant_category_code merchant_category_code
     *
     * @return $this
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id card_id
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets transaction_category
     *
     * @return string
     */
    public function getTransactionCategory()
    {
        return $this->container['transaction_category'];
    }

    /**
     * Sets transaction_category
     *
     * @param string $transaction_category transaction_category
     *
     * @return $this
     */
    public function setTransactionCategory($transaction_category)
    {
        $this->container['transaction_category'] = $transaction_category;

        return $this;
    }

    /**
     * Gets cleanse_data
     *
     * @return bool
     */
    public function getCleanseData()
    {
        return $this->container['cleanse_data'];
    }

    /**
     * Sets cleanse_data
     *
     * @param bool $cleanse_data cleanse_data
     *
     * @return $this
     */
    public function setCleanseData($cleanse_data)
    {
        $this->container['cleanse_data'] = $cleanse_data;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return string[]
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param string[] $auth_type auth_type
     *
     * @return $this
     */
    public function setAuthType($auth_type)
    {
        $allowedValues = $this->getAuthTypeAllowableValues();
        if (!is_null($auth_type) && array_diff($auth_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'auth_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets mid
     *
     * @return string
     */
    public function getMid()
    {
        return $this->container['mid'];
    }

    /**
     * Sets mid
     *
     * @param string $mid mid
     *
     * @return $this
     */
    public function setMid($mid)
    {
        $this->container['mid'] = $mid;

        return $this;
    }

    /**
     * Gets transaction_status_scope
     *
     * @return string[]
     */
    public function getTransactionStatusScope()
    {
        return $this->container['transaction_status_scope'];
    }

    /**
     * Sets transaction_status_scope
     *
     * @param string[] $transaction_status_scope transaction_status_scope
     *
     * @return $this
     */
    public function setTransactionStatusScope($transaction_status_scope)
    {
        $this->container['transaction_status_scope'] = $transaction_status_scope;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \com\hydrogen\proton\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \com\hydrogen\proton\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return string
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param string $merchant merchant
     *
     * @return $this
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


