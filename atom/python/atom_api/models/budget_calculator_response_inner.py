# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.budget_calculator_response_inner_budget_components import BudgetCalculatorResponseInnerBudgetComponents  # noqa: F401,E501


class BudgetCalculatorResponseInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'budget_id': 'str',
        'budget_name': 'str',
        'total_funds_available': 'float',
        'total_funds_spent': 'float',
        'total_funds_remaining': 'float',
        'budget_components': 'list[BudgetCalculatorResponseInnerBudgetComponents]',
        'average_amount_budgeted': 'float',
        'average_amount_spent': 'float'
    }

    attribute_map = {
        'budget_id': 'budget_id',
        'budget_name': 'budget_name',
        'total_funds_available': 'total_funds_available',
        'total_funds_spent': 'total_funds_spent',
        'total_funds_remaining': 'total_funds_remaining',
        'budget_components': 'budget_components',
        'average_amount_budgeted': 'average_amount_budgeted',
        'average_amount_spent': 'average_amount_spent'
    }

    def __init__(self, budget_id=None, budget_name=None, total_funds_available=None, total_funds_spent=None, total_funds_remaining=None, budget_components=None, average_amount_budgeted=None, average_amount_spent=None):  # noqa: E501
        """BudgetCalculatorResponseInner - a model defined in Swagger"""  # noqa: E501

        self._budget_id = None
        self._budget_name = None
        self._total_funds_available = None
        self._total_funds_spent = None
        self._total_funds_remaining = None
        self._budget_components = None
        self._average_amount_budgeted = None
        self._average_amount_spent = None
        self.discriminator = None

        if budget_id is not None:
            self.budget_id = budget_id
        if budget_name is not None:
            self.budget_name = budget_name
        if total_funds_available is not None:
            self.total_funds_available = total_funds_available
        if total_funds_spent is not None:
            self.total_funds_spent = total_funds_spent
        if total_funds_remaining is not None:
            self.total_funds_remaining = total_funds_remaining
        if budget_components is not None:
            self.budget_components = budget_components
        if average_amount_budgeted is not None:
            self.average_amount_budgeted = average_amount_budgeted
        if average_amount_spent is not None:
            self.average_amount_spent = average_amount_spent

    @property
    def budget_id(self):
        """Gets the budget_id of this BudgetCalculatorResponseInner.  # noqa: E501

        The ID of the budget  # noqa: E501

        :return: The budget_id of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this BudgetCalculatorResponseInner.

        The ID of the budget  # noqa: E501

        :param budget_id: The budget_id of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: str
        """

        self._budget_id = budget_id

    @property
    def budget_name(self):
        """Gets the budget_name of this BudgetCalculatorResponseInner.  # noqa: E501

        The name of the budget  # noqa: E501

        :return: The budget_name of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this BudgetCalculatorResponseInner.

        The name of the budget  # noqa: E501

        :param budget_name: The budget_name of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: str
        """

        self._budget_name = budget_name

    @property
    def total_funds_available(self):
        """Gets the total_funds_available of this BudgetCalculatorResponseInner.  # noqa: E501

        Total amount of funds originally available in the budget  # noqa: E501

        :return: The total_funds_available of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._total_funds_available

    @total_funds_available.setter
    def total_funds_available(self, total_funds_available):
        """Sets the total_funds_available of this BudgetCalculatorResponseInner.

        Total amount of funds originally available in the budget  # noqa: E501

        :param total_funds_available: The total_funds_available of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: float
        """

        self._total_funds_available = total_funds_available

    @property
    def total_funds_spent(self):
        """Gets the total_funds_spent of this BudgetCalculatorResponseInner.  # noqa: E501

        Total amount of funds spent  # noqa: E501

        :return: The total_funds_spent of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._total_funds_spent

    @total_funds_spent.setter
    def total_funds_spent(self, total_funds_spent):
        """Sets the total_funds_spent of this BudgetCalculatorResponseInner.

        Total amount of funds spent  # noqa: E501

        :param total_funds_spent: The total_funds_spent of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: float
        """

        self._total_funds_spent = total_funds_spent

    @property
    def total_funds_remaining(self):
        """Gets the total_funds_remaining of this BudgetCalculatorResponseInner.  # noqa: E501

        Total amount of funds remaining; delta of total_funds_available - total_funds_spent  # noqa: E501

        :return: The total_funds_remaining of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._total_funds_remaining

    @total_funds_remaining.setter
    def total_funds_remaining(self, total_funds_remaining):
        """Sets the total_funds_remaining of this BudgetCalculatorResponseInner.

        Total amount of funds remaining; delta of total_funds_available - total_funds_spent  # noqa: E501

        :param total_funds_remaining: The total_funds_remaining of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: float
        """

        self._total_funds_remaining = total_funds_remaining

    @property
    def budget_components(self):
        """Gets the budget_components of this BudgetCalculatorResponseInner.  # noqa: E501

        Total funds spent per category  # noqa: E501

        :return: The budget_components of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: list[BudgetCalculatorResponseInnerBudgetComponents]
        """
        return self._budget_components

    @budget_components.setter
    def budget_components(self, budget_components):
        """Sets the budget_components of this BudgetCalculatorResponseInner.

        Total funds spent per category  # noqa: E501

        :param budget_components: The budget_components of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: list[BudgetCalculatorResponseInnerBudgetComponents]
        """

        self._budget_components = budget_components

    @property
    def average_amount_budgeted(self):
        """Gets the average_amount_budgeted of this BudgetCalculatorResponseInner.  # noqa: E501

        Average amount budgeted for each budget component  # noqa: E501

        :return: The average_amount_budgeted of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._average_amount_budgeted

    @average_amount_budgeted.setter
    def average_amount_budgeted(self, average_amount_budgeted):
        """Sets the average_amount_budgeted of this BudgetCalculatorResponseInner.

        Average amount budgeted for each budget component  # noqa: E501

        :param average_amount_budgeted: The average_amount_budgeted of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: float
        """

        self._average_amount_budgeted = average_amount_budgeted

    @property
    def average_amount_spent(self):
        """Gets the average_amount_spent of this BudgetCalculatorResponseInner.  # noqa: E501

        Average amount spent for each budget component  # noqa: E501

        :return: The average_amount_spent of this BudgetCalculatorResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._average_amount_spent

    @average_amount_spent.setter
    def average_amount_spent(self, average_amount_spent):
        """Sets the average_amount_spent of this BudgetCalculatorResponseInner.

        Average amount spent for each budget component  # noqa: E501

        :param average_amount_spent: The average_amount_spent of this BudgetCalculatorResponseInner.  # noqa: E501
        :type: float
        """

        self._average_amount_spent = average_amount_spent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetCalculatorResponseInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetCalculatorResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
