/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.AggregationAccountTransactionPayloadInvestment = factory(root.atom_api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The AggregationAccountTransactionPayloadInvestment model module.
   * @module model/AggregationAccountTransactionPayloadInvestment
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>AggregationAccountTransactionPayloadInvestment</code>.
   * Transaction information if from an investment account
   * @alias module:model/AggregationAccountTransactionPayloadInvestment
   * @class
   * @param tradeSignal {String} Trade signal for an investment transaction
   * @param ticker {String} Ticker of the security for an investment transaction
   * @param price {Number} Price of the security for an investment transaction
   * @param quantity {Number} The number of units involved in this transaction, as reported by the financial institution
   */
  var exports = function(tradeSignal, ticker, price, quantity) {
    var _this = this;

    _this['trade_signal'] = tradeSignal;
    _this['ticker'] = ticker;

    _this['price'] = price;
    _this['quantity'] = quantity;



  };

  /**
   * Constructs a <code>AggregationAccountTransactionPayloadInvestment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AggregationAccountTransactionPayloadInvestment} obj Optional instance to populate.
   * @return {module:model/AggregationAccountTransactionPayloadInvestment} The populated <code>AggregationAccountTransactionPayloadInvestment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('trade_signal')) {
        obj['trade_signal'] = ApiClient.convertToType(data['trade_signal'], 'String');
      }
      if (data.hasOwnProperty('ticker')) {
        obj['ticker'] = ApiClient.convertToType(data['ticker'], 'String');
      }
      if (data.hasOwnProperty('ticker_name')) {
        obj['ticker_name'] = ApiClient.convertToType(data['ticker_name'], 'String');
      }
      if (data.hasOwnProperty('price')) {
        obj['price'] = ApiClient.convertToType(data['price'], 'Number');
      }
      if (data.hasOwnProperty('quantity')) {
        obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
      }
      if (data.hasOwnProperty('fee')) {
        obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('settle_date')) {
        obj['settle_date'] = ApiClient.convertToType(data['settle_date'], 'String');
      }
    }
    return obj;
  }

  /**
   * Trade signal for an investment transaction
   * @member {String} trade_signal
   */
  exports.prototype['trade_signal'] = undefined;
  /**
   * Ticker of the security for an investment transaction
   * @member {String} ticker
   */
  exports.prototype['ticker'] = undefined;
  /**
   * Ticker name of the security for an investment transaction
   * @member {String} ticker_name
   */
  exports.prototype['ticker_name'] = undefined;
  /**
   * Price of the security for an investment transaction
   * @member {Number} price
   */
  exports.prototype['price'] = undefined;
  /**
   * The number of units involved in this transaction, as reported by the financial institution
   * @member {Number} quantity
   */
  exports.prototype['quantity'] = undefined;
  /**
   * Fee that is part of the transaction
   * @member {Number} fee
   */
  exports.prototype['fee'] = undefined;
  /**
   * The position of an investment transaction within its lifecycle such as “Pending” or “Posted”
   * @member {String} status
   */
  exports.prototype['status'] = undefined;
  /**
   * Date on which this transaction was finalized
   * @member {String} settle_date
   */
  exports.prototype['settle_date'] = undefined;



  return exports;
}));


