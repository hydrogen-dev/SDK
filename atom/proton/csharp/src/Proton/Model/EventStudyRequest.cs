/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// EventStudyRequest
    /// </summary>
    [DataContract]
    public partial class EventStudyRequest :  IEquatable<EventStudyRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Events
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventsEnum
        {
            
            /// <summary>
            /// Enum Dotcombubble for value: dot_com_bubble
            /// </summary>
            [EnumMember(Value = "dot_com_bubble")]
            Dotcombubble = 1,
            
            /// <summary>
            /// Enum _2008financialcrisis for value: 2008_financial_crisis
            /// </summary>
            [EnumMember(Value = "2008_financial_crisis")]
            _2008financialcrisis = 2,
            
            /// <summary>
            /// Enum Brexit for value: brexit
            /// </summary>
            [EnumMember(Value = "brexit")]
            Brexit = 3,
            
            /// <summary>
            /// Enum _2011blackmonday for value: 2011_black_monday
            /// </summary>
            [EnumMember(Value = "2011_black_monday")]
            _2011blackmonday = 4,
            
            /// <summary>
            /// Enum Septembereleventh for value: september_eleventh
            /// </summary>
            [EnumMember(Value = "september_eleventh")]
            Septembereleventh = 5,
            
            /// <summary>
            /// Enum _1987blackmonday for value: 1987_black_monday
            /// </summary>
            [EnumMember(Value = "1987_black_monday")]
            _1987blackmonday = 6,
            
            /// <summary>
            /// Enum _1992blackwednesday for value: 1992_black_wednesday
            /// </summary>
            [EnumMember(Value = "1992_black_wednesday")]
            _1992blackwednesday = 7,
            
            /// <summary>
            /// Enum _1997asianfinancialcrisis for value: 1997_asian_financial_crisis
            /// </summary>
            [EnumMember(Value = "1997_asian_financial_crisis")]
            _1997asianfinancialcrisis = 8
        }


        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<EventsEnum> Events { get; set; }
        /// <summary>
        /// Defines MarketDataSource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MarketDataSourceEnum
        {
            
            /// <summary>
            /// Enum Nucleus for value: nucleus
            /// </summary>
            [EnumMember(Value = "nucleus")]
            Nucleus = 1,
            
            /// <summary>
            /// Enum Integration for value: integration
            /// </summary>
            [EnumMember(Value = "integration")]
            Integration = 2
        }

        /// <summary>
        /// Gets or Sets MarketDataSource
        /// </summary>
        [DataMember(Name="market_data_source", EmitDefaultValue=false)]
        public MarketDataSourceEnum? MarketDataSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventStudyRequest" /> class.
        /// </summary>
        /// <param name="allocationId">allocationId.</param>
        /// <param name="events">events.</param>
        /// <param name="marketDataSource">marketDataSource (default to MarketDataSourceEnum.Nucleus).</param>
        /// <param name="modelId">modelId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="useProxyData">useProxyData (default to false).</param>
        /// <param name="portfolioWeights">portfolioWeights.</param>
        /// <param name="portfolioTickers">portfolioTickers.</param>
        /// <param name="createLog">createLog (default to false).</param>
        /// <param name="aggregationAccountId">aggregationAccountId.</param>
        /// <param name="portfolioId">portfolioId.</param>
        public EventStudyRequest(Guid? allocationId = default(Guid?), List<EventsEnum> events = default(List<EventsEnum>), MarketDataSourceEnum? marketDataSource = MarketDataSourceEnum.Nucleus, Guid? modelId = default(Guid?), Guid? accountId = default(Guid?), bool? useProxyData = false, List<float?> portfolioWeights = default(List<float?>), List<string> portfolioTickers = default(List<string>), bool? createLog = false, Guid? aggregationAccountId = default(Guid?), Guid? portfolioId = default(Guid?))
        {
            this.AllocationId = allocationId;
            this.Events = events;
            // use default value if no "marketDataSource" provided
            if (marketDataSource == null)
            {
                this.MarketDataSource = MarketDataSourceEnum.Nucleus;
            }
            else
            {
                this.MarketDataSource = marketDataSource;
            }
            this.ModelId = modelId;
            this.AccountId = accountId;
            // use default value if no "useProxyData" provided
            if (useProxyData == null)
            {
                this.UseProxyData = false;
            }
            else
            {
                this.UseProxyData = useProxyData;
            }
            this.PortfolioWeights = portfolioWeights;
            this.PortfolioTickers = portfolioTickers;
            // use default value if no "createLog" provided
            if (createLog == null)
            {
                this.CreateLog = false;
            }
            else
            {
                this.CreateLog = createLog;
            }
            this.AggregationAccountId = aggregationAccountId;
            this.PortfolioId = portfolioId;
        }
        
        /// <summary>
        /// Gets or Sets AllocationId
        /// </summary>
        [DataMember(Name="allocation_id", EmitDefaultValue=false)]
        public Guid? AllocationId { get; set; }



        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name="model_id", EmitDefaultValue=false)]
        public Guid? ModelId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets UseProxyData
        /// </summary>
        [DataMember(Name="use_proxy_data", EmitDefaultValue=false)]
        public bool? UseProxyData { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioWeights
        /// </summary>
        [DataMember(Name="portfolio_weights", EmitDefaultValue=false)]
        public List<float?> PortfolioWeights { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioTickers
        /// </summary>
        [DataMember(Name="portfolio_tickers", EmitDefaultValue=false)]
        public List<string> PortfolioTickers { get; set; }

        /// <summary>
        /// Gets or Sets CreateLog
        /// </summary>
        [DataMember(Name="create_log", EmitDefaultValue=false)]
        public bool? CreateLog { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountId
        /// </summary>
        [DataMember(Name="aggregation_account_id", EmitDefaultValue=false)]
        public Guid? AggregationAccountId { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name="portfolio_id", EmitDefaultValue=false)]
        public Guid? PortfolioId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventStudyRequest {\n");
            sb.Append("  AllocationId: ").Append(AllocationId).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  MarketDataSource: ").Append(MarketDataSource).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UseProxyData: ").Append(UseProxyData).Append("\n");
            sb.Append("  PortfolioWeights: ").Append(PortfolioWeights).Append("\n");
            sb.Append("  PortfolioTickers: ").Append(PortfolioTickers).Append("\n");
            sb.Append("  CreateLog: ").Append(CreateLog).Append("\n");
            sb.Append("  AggregationAccountId: ").Append(AggregationAccountId).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventStudyRequest);
        }

        /// <summary>
        /// Returns true if EventStudyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EventStudyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventStudyRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllocationId == input.AllocationId ||
                    (this.AllocationId != null &&
                    this.AllocationId.Equals(input.AllocationId))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.MarketDataSource == input.MarketDataSource ||
                    (this.MarketDataSource != null &&
                    this.MarketDataSource.Equals(input.MarketDataSource))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.UseProxyData == input.UseProxyData ||
                    (this.UseProxyData != null &&
                    this.UseProxyData.Equals(input.UseProxyData))
                ) && 
                (
                    this.PortfolioWeights == input.PortfolioWeights ||
                    this.PortfolioWeights != null &&
                    this.PortfolioWeights.SequenceEqual(input.PortfolioWeights)
                ) && 
                (
                    this.PortfolioTickers == input.PortfolioTickers ||
                    this.PortfolioTickers != null &&
                    this.PortfolioTickers.SequenceEqual(input.PortfolioTickers)
                ) && 
                (
                    this.CreateLog == input.CreateLog ||
                    (this.CreateLog != null &&
                    this.CreateLog.Equals(input.CreateLog))
                ) && 
                (
                    this.AggregationAccountId == input.AggregationAccountId ||
                    (this.AggregationAccountId != null &&
                    this.AggregationAccountId.Equals(input.AggregationAccountId))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllocationId != null)
                    hashCode = hashCode * 59 + this.AllocationId.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.MarketDataSource != null)
                    hashCode = hashCode * 59 + this.MarketDataSource.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.UseProxyData != null)
                    hashCode = hashCode * 59 + this.UseProxyData.GetHashCode();
                if (this.PortfolioWeights != null)
                    hashCode = hashCode * 59 + this.PortfolioWeights.GetHashCode();
                if (this.PortfolioTickers != null)
                    hashCode = hashCode * 59 + this.PortfolioTickers.GetHashCode();
                if (this.CreateLog != null)
                    hashCode = hashCode * 59 + this.CreateLog.GetHashCode();
                if (this.AggregationAccountId != null)
                    hashCode = hashCode * 59 + this.AggregationAccountId.GetHashCode();
                if (this.PortfolioId != null)
                    hashCode = hashCode * 59 + this.PortfolioId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
