/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// FinancialHealthCheckRequest
    /// </summary>
    [DataContract]
    public partial class FinancialHealthCheckRequest :  IEquatable<FinancialHealthCheckRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialHealthCheckRequest" /> class.
        /// </summary>
        /// <param name="clientId">clientId.</param>
        /// <param name="ratioTargets">ratioTargets.</param>
        /// <param name="liquidAssets">liquidAssets.</param>
        /// <param name="totalLiabilities">totalLiabilities.</param>
        /// <param name="grossAnnualIncome">grossAnnualIncome.</param>
        /// <param name="shortTermLiabilities">shortTermLiabilities.</param>
        /// <param name="lookbackPeriods">lookbackPeriods (default to 3).</param>
        /// <param name="nonLiquidAssets">nonLiquidAssets.</param>
        /// <param name="monthlyExpenses">monthlyExpenses.</param>
        /// <param name="netMonthlyIncome">netMonthlyIncome.</param>
        public FinancialHealthCheckRequest(Guid? clientId = default(Guid?), RatioTargets ratioTargets = default(RatioTargets), float? liquidAssets = default(float?), float? totalLiabilities = default(float?), float? grossAnnualIncome = default(float?), float? shortTermLiabilities = default(float?), int? lookbackPeriods = 3, float? nonLiquidAssets = default(float?), float? monthlyExpenses = default(float?), float? netMonthlyIncome = default(float?))
        {
            this.ClientId = clientId;
            this.RatioTargets = ratioTargets;
            this.LiquidAssets = liquidAssets;
            this.TotalLiabilities = totalLiabilities;
            this.GrossAnnualIncome = grossAnnualIncome;
            this.ShortTermLiabilities = shortTermLiabilities;
            // use default value if no "lookbackPeriods" provided
            if (lookbackPeriods == null)
            {
                this.LookbackPeriods = 3;
            }
            else
            {
                this.LookbackPeriods = lookbackPeriods;
            }
            this.NonLiquidAssets = nonLiquidAssets;
            this.MonthlyExpenses = monthlyExpenses;
            this.NetMonthlyIncome = netMonthlyIncome;
        }
        
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets RatioTargets
        /// </summary>
        [DataMember(Name="ratio_targets", EmitDefaultValue=false)]
        public RatioTargets RatioTargets { get; set; }

        /// <summary>
        /// Gets or Sets LiquidAssets
        /// </summary>
        [DataMember(Name="liquid_assets", EmitDefaultValue=false)]
        public float? LiquidAssets { get; set; }

        /// <summary>
        /// Gets or Sets TotalLiabilities
        /// </summary>
        [DataMember(Name="total_liabilities", EmitDefaultValue=false)]
        public float? TotalLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets GrossAnnualIncome
        /// </summary>
        [DataMember(Name="gross_annual_income", EmitDefaultValue=false)]
        public float? GrossAnnualIncome { get; set; }

        /// <summary>
        /// Gets or Sets ShortTermLiabilities
        /// </summary>
        [DataMember(Name="short_term_liabilities", EmitDefaultValue=false)]
        public float? ShortTermLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets LookbackPeriods
        /// </summary>
        [DataMember(Name="lookback_periods", EmitDefaultValue=false)]
        public int? LookbackPeriods { get; set; }

        /// <summary>
        /// Gets or Sets NonLiquidAssets
        /// </summary>
        [DataMember(Name="non_liquid_assets", EmitDefaultValue=false)]
        public float? NonLiquidAssets { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyExpenses
        /// </summary>
        [DataMember(Name="monthly_expenses", EmitDefaultValue=false)]
        public float? MonthlyExpenses { get; set; }

        /// <summary>
        /// Gets or Sets NetMonthlyIncome
        /// </summary>
        [DataMember(Name="net_monthly_income", EmitDefaultValue=false)]
        public float? NetMonthlyIncome { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialHealthCheckRequest {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  RatioTargets: ").Append(RatioTargets).Append("\n");
            sb.Append("  LiquidAssets: ").Append(LiquidAssets).Append("\n");
            sb.Append("  TotalLiabilities: ").Append(TotalLiabilities).Append("\n");
            sb.Append("  GrossAnnualIncome: ").Append(GrossAnnualIncome).Append("\n");
            sb.Append("  ShortTermLiabilities: ").Append(ShortTermLiabilities).Append("\n");
            sb.Append("  LookbackPeriods: ").Append(LookbackPeriods).Append("\n");
            sb.Append("  NonLiquidAssets: ").Append(NonLiquidAssets).Append("\n");
            sb.Append("  MonthlyExpenses: ").Append(MonthlyExpenses).Append("\n");
            sb.Append("  NetMonthlyIncome: ").Append(NetMonthlyIncome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialHealthCheckRequest);
        }

        /// <summary>
        /// Returns true if FinancialHealthCheckRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialHealthCheckRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialHealthCheckRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.RatioTargets == input.RatioTargets ||
                    (this.RatioTargets != null &&
                    this.RatioTargets.Equals(input.RatioTargets))
                ) && 
                (
                    this.LiquidAssets == input.LiquidAssets ||
                    (this.LiquidAssets != null &&
                    this.LiquidAssets.Equals(input.LiquidAssets))
                ) && 
                (
                    this.TotalLiabilities == input.TotalLiabilities ||
                    (this.TotalLiabilities != null &&
                    this.TotalLiabilities.Equals(input.TotalLiabilities))
                ) && 
                (
                    this.GrossAnnualIncome == input.GrossAnnualIncome ||
                    (this.GrossAnnualIncome != null &&
                    this.GrossAnnualIncome.Equals(input.GrossAnnualIncome))
                ) && 
                (
                    this.ShortTermLiabilities == input.ShortTermLiabilities ||
                    (this.ShortTermLiabilities != null &&
                    this.ShortTermLiabilities.Equals(input.ShortTermLiabilities))
                ) && 
                (
                    this.LookbackPeriods == input.LookbackPeriods ||
                    (this.LookbackPeriods != null &&
                    this.LookbackPeriods.Equals(input.LookbackPeriods))
                ) && 
                (
                    this.NonLiquidAssets == input.NonLiquidAssets ||
                    (this.NonLiquidAssets != null &&
                    this.NonLiquidAssets.Equals(input.NonLiquidAssets))
                ) && 
                (
                    this.MonthlyExpenses == input.MonthlyExpenses ||
                    (this.MonthlyExpenses != null &&
                    this.MonthlyExpenses.Equals(input.MonthlyExpenses))
                ) && 
                (
                    this.NetMonthlyIncome == input.NetMonthlyIncome ||
                    (this.NetMonthlyIncome != null &&
                    this.NetMonthlyIncome.Equals(input.NetMonthlyIncome))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.RatioTargets != null)
                    hashCode = hashCode * 59 + this.RatioTargets.GetHashCode();
                if (this.LiquidAssets != null)
                    hashCode = hashCode * 59 + this.LiquidAssets.GetHashCode();
                if (this.TotalLiabilities != null)
                    hashCode = hashCode * 59 + this.TotalLiabilities.GetHashCode();
                if (this.GrossAnnualIncome != null)
                    hashCode = hashCode * 59 + this.GrossAnnualIncome.GetHashCode();
                if (this.ShortTermLiabilities != null)
                    hashCode = hashCode * 59 + this.ShortTermLiabilities.GetHashCode();
                if (this.LookbackPeriods != null)
                    hashCode = hashCode * 59 + this.LookbackPeriods.GetHashCode();
                if (this.NonLiquidAssets != null)
                    hashCode = hashCode * 59 + this.NonLiquidAssets.GetHashCode();
                if (this.MonthlyExpenses != null)
                    hashCode = hashCode * 59 + this.MonthlyExpenses.GetHashCode();
                if (this.NetMonthlyIncome != null)
                    hashCode = hashCode * 59 + this.NetMonthlyIncome.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LiquidAssets (float?) minimum
            if(this.LiquidAssets < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidAssets, must be a value greater than or equal to 0.", new [] { "LiquidAssets" });
            }

            // TotalLiabilities (float?) minimum
            if(this.TotalLiabilities < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalLiabilities, must be a value greater than or equal to 0.", new [] { "TotalLiabilities" });
            }

            // GrossAnnualIncome (float?) minimum
            if(this.GrossAnnualIncome < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GrossAnnualIncome, must be a value greater than or equal to 0.", new [] { "GrossAnnualIncome" });
            }

            // ShortTermLiabilities (float?) minimum
            if(this.ShortTermLiabilities < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShortTermLiabilities, must be a value greater than or equal to 0.", new [] { "ShortTermLiabilities" });
            }

            // LookbackPeriods (int?) minimum
            if(this.LookbackPeriods < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LookbackPeriods, must be a value greater than or equal to 1.", new [] { "LookbackPeriods" });
            }

            // NonLiquidAssets (float?) minimum
            if(this.NonLiquidAssets < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NonLiquidAssets, must be a value greater than or equal to 0.", new [] { "NonLiquidAssets" });
            }

            // MonthlyExpenses (float?) minimum
            if(this.MonthlyExpenses < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MonthlyExpenses, must be a value greater than or equal to 0.", new [] { "MonthlyExpenses" });
            }

            // NetMonthlyIncome (float?) minimum
            if(this.NetMonthlyIncome < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NetMonthlyIncome, must be a value greater than or equal to 0.", new [] { "NetMonthlyIncome" });
            }

            yield break;
        }
    }

}
