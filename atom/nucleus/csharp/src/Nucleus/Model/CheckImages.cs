/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// CheckImages Object
    /// </summary>
    [DataContract]
    public partial class CheckImages :  IEquatable<CheckImages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckImages" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckImages() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckImages" /> class.
        /// </summary>
        /// <param name="imageType">imageType.</param>
        /// <param name="imageUrl">imageUrl (required).</param>
        public CheckImages(string imageType = default(string), string imageUrl = default(string))
        {
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new InvalidDataException("imageUrl is a required property for CheckImages and cannot be null");
            }
            else
            {
                this.ImageUrl = imageUrl;
            }
            this.ImageType = imageType;
        }
        
        /// <summary>
        /// imageType
        /// </summary>
        /// <value>imageType</value>
        [DataMember(Name="image_type", EmitDefaultValue=false)]
        public string ImageType { get; set; }

        /// <summary>
        /// imageUrl
        /// </summary>
        /// <value>imageUrl</value>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckImages {\n");
            sb.Append("  ImageType: ").Append(ImageType).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckImages);
        }

        /// <summary>
        /// Returns true if CheckImages instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckImages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImageType == input.ImageType ||
                    (this.ImageType != null &&
                    this.ImageType.Equals(input.ImageType))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageType != null)
                    hashCode = hashCode * 59 + this.ImageType.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
