# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountCreateGoal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'goal_id': 'str',
        'goal_amount': 'float',
        'accumulation_horizon': 'float',
        'decumulation_horizon': 'float'
    }

    attribute_map = {
        'goal_id': 'goal_id',
        'goal_amount': 'goal_amount',
        'accumulation_horizon': 'accumulation_horizon',
        'decumulation_horizon': 'decumulation_horizon'
    }

    def __init__(self, goal_id=None, goal_amount=None, accumulation_horizon=None, decumulation_horizon=None):  # noqa: E501
        """AccountCreateGoal - a model defined in Swagger"""  # noqa: E501

        self._goal_id = None
        self._goal_amount = None
        self._accumulation_horizon = None
        self._decumulation_horizon = None
        self.discriminator = None

        self.goal_id = goal_id
        if goal_amount is not None:
            self.goal_amount = goal_amount
        if accumulation_horizon is not None:
            self.accumulation_horizon = accumulation_horizon
        if decumulation_horizon is not None:
            self.decumulation_horizon = decumulation_horizon

    @property
    def goal_id(self):
        """Gets the goal_id of this AccountCreateGoal.  # noqa: E501

        The ID of a goal mapped to the account  # noqa: E501

        :return: The goal_id of this AccountCreateGoal.  # noqa: E501
        :rtype: str
        """
        return self._goal_id

    @goal_id.setter
    def goal_id(self, goal_id):
        """Sets the goal_id of this AccountCreateGoal.

        The ID of a goal mapped to the account  # noqa: E501

        :param goal_id: The goal_id of this AccountCreateGoal.  # noqa: E501
        :type: str
        """
        if goal_id is None:
            raise ValueError("Invalid value for `goal_id`, must not be `None`")  # noqa: E501

        self._goal_id = goal_id

    @property
    def goal_amount(self):
        """Gets the goal_amount of this AccountCreateGoal.  # noqa: E501

        Monetary amount provided by the client as the target amount to be reached within the goal horizon. May be used in conjunction with the Proton API. Option to also store under the goal entity  # noqa: E501

        :return: The goal_amount of this AccountCreateGoal.  # noqa: E501
        :rtype: float
        """
        return self._goal_amount

    @goal_amount.setter
    def goal_amount(self, goal_amount):
        """Sets the goal_amount of this AccountCreateGoal.

        Monetary amount provided by the client as the target amount to be reached within the goal horizon. May be used in conjunction with the Proton API. Option to also store under the goal entity  # noqa: E501

        :param goal_amount: The goal_amount of this AccountCreateGoal.  # noqa: E501
        :type: float
        """

        self._goal_amount = goal_amount

    @property
    def accumulation_horizon(self):
        """Gets the accumulation_horizon of this AccountCreateGoal.  # noqa: E501

        Time horizon of the goal during the accumulation phase, in years. May be used in conjunction with the Proton API. Option to also store under the goal entity  # noqa: E501

        :return: The accumulation_horizon of this AccountCreateGoal.  # noqa: E501
        :rtype: float
        """
        return self._accumulation_horizon

    @accumulation_horizon.setter
    def accumulation_horizon(self, accumulation_horizon):
        """Sets the accumulation_horizon of this AccountCreateGoal.

        Time horizon of the goal during the accumulation phase, in years. May be used in conjunction with the Proton API. Option to also store under the goal entity  # noqa: E501

        :param accumulation_horizon: The accumulation_horizon of this AccountCreateGoal.  # noqa: E501
        :type: float
        """

        self._accumulation_horizon = accumulation_horizon

    @property
    def decumulation_horizon(self):
        """Gets the decumulation_horizon of this AccountCreateGoal.  # noqa: E501

        Time horizon of the goal during the decumulation phase, in years. If the goal is an accumulation goal, then this can be 0 or omitted entirely. May be used in conjunction with the Proton API. Option to also store under the goal entity  # noqa: E501

        :return: The decumulation_horizon of this AccountCreateGoal.  # noqa: E501
        :rtype: float
        """
        return self._decumulation_horizon

    @decumulation_horizon.setter
    def decumulation_horizon(self, decumulation_horizon):
        """Sets the decumulation_horizon of this AccountCreateGoal.

        Time horizon of the goal during the decumulation phase, in years. If the goal is an accumulation goal, then this can be 0 or omitted entirely. May be used in conjunction with the Proton API. Option to also store under the goal entity  # noqa: E501

        :param decumulation_horizon: The decumulation_horizon of this AccountCreateGoal.  # noqa: E501
        :type: float
        """

        self._decumulation_horizon = decumulation_horizon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCreateGoal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCreateGoal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
