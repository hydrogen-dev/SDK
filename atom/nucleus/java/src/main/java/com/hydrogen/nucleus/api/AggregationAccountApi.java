/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.AggregationAccount;
import com.hydrogen.nucleus.model.AggregationAccountBalance;
import com.hydrogen.nucleus.model.AggregationAccountHolding;
import com.hydrogen.nucleus.model.AggregationAccountTransaction;
import com.hydrogen.nucleus.model.PageAggregationAccount;
import com.hydrogen.nucleus.model.PageAggregationAccountBalance;
import com.hydrogen.nucleus.model.PageAggregationAccountHolding;
import com.hydrogen.nucleus.model.PageAggregationAccountTransaction;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AggregationAccountApi {
    private ApiClient apiClient;

    public AggregationAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AggregationAccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAggregationAccountBalanceBulkUsingPost
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountBalanceBulkUsingPostCall(List<AggregationAccountBalance> aggregationAccountBalance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountBalance;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk_aggregation_account_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountBalanceBulkUsingPostValidateBeforeCall(List<AggregationAccountBalance> aggregationAccountBalance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalance' is set
        if (aggregationAccountBalance == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalance' when calling createAggregationAccountBalanceBulkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountBalanceBulkUsingPostCall(aggregationAccountBalance, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a bulk aggregation account balance
     * Create a balance records under an aggregation accounts.
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @return List&lt;AggregationAccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountBalance> createAggregationAccountBalanceBulkUsingPost(List<AggregationAccountBalance> aggregationAccountBalance) throws ApiException {
        ApiResponse<List<AggregationAccountBalance>> resp = createAggregationAccountBalanceBulkUsingPostWithHttpInfo(aggregationAccountBalance);
        return resp.getData();
    }

    /**
     * Create a bulk aggregation account balance
     * Create a balance records under an aggregation accounts.
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountBalance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountBalance>> createAggregationAccountBalanceBulkUsingPostWithHttpInfo(List<AggregationAccountBalance> aggregationAccountBalance) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountBalanceBulkUsingPostValidateBeforeCall(aggregationAccountBalance, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountBalance>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a bulk aggregation account balance (asynchronously)
     * Create a balance records under an aggregation accounts.
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountBalanceBulkUsingPostAsync(List<AggregationAccountBalance> aggregationAccountBalance, final ApiCallback<List<AggregationAccountBalance>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountBalanceBulkUsingPostValidateBeforeCall(aggregationAccountBalance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountBalance>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAggregationAccountBalanceUsingPost
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountBalanceUsingPostCall(AggregationAccountBalance aggregationAccountBalance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountBalance;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountBalanceUsingPostValidateBeforeCall(AggregationAccountBalance aggregationAccountBalance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalance' is set
        if (aggregationAccountBalance == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalance' when calling createAggregationAccountBalanceUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountBalanceUsingPostCall(aggregationAccountBalance, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an aggregation account balance
     * Create a balance record under an aggregation account.
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @return AggregationAccountBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountBalance createAggregationAccountBalanceUsingPost(AggregationAccountBalance aggregationAccountBalance) throws ApiException {
        ApiResponse<AggregationAccountBalance> resp = createAggregationAccountBalanceUsingPostWithHttpInfo(aggregationAccountBalance);
        return resp.getData();
    }

    /**
     * Create an aggregation account balance
     * Create a balance record under an aggregation account.
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @return ApiResponse&lt;AggregationAccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountBalance> createAggregationAccountBalanceUsingPostWithHttpInfo(AggregationAccountBalance aggregationAccountBalance) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountBalanceUsingPostValidateBeforeCall(aggregationAccountBalance, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountBalance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an aggregation account balance (asynchronously)
     * Create a balance record under an aggregation account.
     * @param aggregationAccountBalance aggregationAccountBalance (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountBalanceUsingPostAsync(AggregationAccountBalance aggregationAccountBalance, final ApiCallback<AggregationAccountBalance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountBalanceUsingPostValidateBeforeCall(aggregationAccountBalance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountBalance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAggregationAccountBulkUsingPost
     * @param aggregationAccountList aggregationAccountList (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountBulkUsingPostCall(List<AggregationAccount> aggregationAccountList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountList;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk_aggregation_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountBulkUsingPostValidateBeforeCall(List<AggregationAccount> aggregationAccountList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountList' is set
        if (aggregationAccountList == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountList' when calling createAggregationAccountBulkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountBulkUsingPostCall(aggregationAccountList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a bulk aggregation account
     * Create a bulk aggregation account under a client.
     * @param aggregationAccountList aggregationAccountList (required)
     * @return List&lt;AggregationAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccount> createAggregationAccountBulkUsingPost(List<AggregationAccount> aggregationAccountList) throws ApiException {
        ApiResponse<List<AggregationAccount>> resp = createAggregationAccountBulkUsingPostWithHttpInfo(aggregationAccountList);
        return resp.getData();
    }

    /**
     * Create a bulk aggregation account
     * Create a bulk aggregation account under a client.
     * @param aggregationAccountList aggregationAccountList (required)
     * @return ApiResponse&lt;List&lt;AggregationAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccount>> createAggregationAccountBulkUsingPostWithHttpInfo(List<AggregationAccount> aggregationAccountList) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountBulkUsingPostValidateBeforeCall(aggregationAccountList, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a bulk aggregation account (asynchronously)
     * Create a bulk aggregation account under a client.
     * @param aggregationAccountList aggregationAccountList (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountBulkUsingPostAsync(List<AggregationAccount> aggregationAccountList, final ApiCallback<List<AggregationAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountBulkUsingPostValidateBeforeCall(aggregationAccountList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAggregationAccountHoldingBulkUsingPost
     * @param aggregationTransaction aggregationTransaction (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountHoldingBulkUsingPostCall(List<AggregationAccountHolding> aggregationTransaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationTransaction;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk_aggregation_account_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountHoldingBulkUsingPostValidateBeforeCall(List<AggregationAccountHolding> aggregationTransaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationTransaction' is set
        if (aggregationTransaction == null) {
            throw new ApiException("Missing the required parameter 'aggregationTransaction' when calling createAggregationAccountHoldingBulkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountHoldingBulkUsingPostCall(aggregationTransaction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a bulk aggregation account holding
     * Create a bulk aggregation account holding.
     * @param aggregationTransaction aggregationTransaction (required)
     * @return List&lt;AggregationAccountHolding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountHolding> createAggregationAccountHoldingBulkUsingPost(List<AggregationAccountHolding> aggregationTransaction) throws ApiException {
        ApiResponse<List<AggregationAccountHolding>> resp = createAggregationAccountHoldingBulkUsingPostWithHttpInfo(aggregationTransaction);
        return resp.getData();
    }

    /**
     * Create a bulk aggregation account holding
     * Create a bulk aggregation account holding.
     * @param aggregationTransaction aggregationTransaction (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountHolding&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountHolding>> createAggregationAccountHoldingBulkUsingPostWithHttpInfo(List<AggregationAccountHolding> aggregationTransaction) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountHoldingBulkUsingPostValidateBeforeCall(aggregationTransaction, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountHolding>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a bulk aggregation account holding (asynchronously)
     * Create a bulk aggregation account holding.
     * @param aggregationTransaction aggregationTransaction (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountHoldingBulkUsingPostAsync(List<AggregationAccountHolding> aggregationTransaction, final ApiCallback<List<AggregationAccountHolding>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountHoldingBulkUsingPostValidateBeforeCall(aggregationTransaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountHolding>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAggregationAccountHoldingUsingPost
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountHoldingUsingPostCall(AggregationAccountHolding aggregationAccountHolding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountHolding;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountHoldingUsingPostValidateBeforeCall(AggregationAccountHolding aggregationAccountHolding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountHolding' is set
        if (aggregationAccountHolding == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountHolding' when calling createAggregationAccountHoldingUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountHoldingUsingPostCall(aggregationAccountHolding, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an aggregation account holding
     * Create a holding record under an aggregation account.
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @return AggregationAccountHolding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountHolding createAggregationAccountHoldingUsingPost(AggregationAccountHolding aggregationAccountHolding) throws ApiException {
        ApiResponse<AggregationAccountHolding> resp = createAggregationAccountHoldingUsingPostWithHttpInfo(aggregationAccountHolding);
        return resp.getData();
    }

    /**
     * Create an aggregation account holding
     * Create a holding record under an aggregation account.
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @return ApiResponse&lt;AggregationAccountHolding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountHolding> createAggregationAccountHoldingUsingPostWithHttpInfo(AggregationAccountHolding aggregationAccountHolding) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountHoldingUsingPostValidateBeforeCall(aggregationAccountHolding, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountHolding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an aggregation account holding (asynchronously)
     * Create a holding record under an aggregation account.
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountHoldingUsingPostAsync(AggregationAccountHolding aggregationAccountHolding, final ApiCallback<AggregationAccountHolding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountHoldingUsingPostValidateBeforeCall(aggregationAccountHolding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountHolding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAggregationAccountTransactionBulkUsingPost
     * @param aggregationAccountTransactions aggregationAccountTransactions (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountTransactionBulkUsingPostCall(List<AggregationAccountTransaction> aggregationAccountTransactions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountTransactions;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk_aggregation_account_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountTransactionBulkUsingPostValidateBeforeCall(List<AggregationAccountTransaction> aggregationAccountTransactions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountTransactions' is set
        if (aggregationAccountTransactions == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountTransactions' when calling createAggregationAccountTransactionBulkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountTransactionBulkUsingPostCall(aggregationAccountTransactions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a bulk aggregation account transaction
     * Create a bulk transaction record under an aggregation account.
     * @param aggregationAccountTransactions aggregationAccountTransactions (required)
     * @return List&lt;AggregationAccountTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountTransaction> createAggregationAccountTransactionBulkUsingPost(List<AggregationAccountTransaction> aggregationAccountTransactions) throws ApiException {
        ApiResponse<List<AggregationAccountTransaction>> resp = createAggregationAccountTransactionBulkUsingPostWithHttpInfo(aggregationAccountTransactions);
        return resp.getData();
    }

    /**
     * Create a bulk aggregation account transaction
     * Create a bulk transaction record under an aggregation account.
     * @param aggregationAccountTransactions aggregationAccountTransactions (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountTransaction>> createAggregationAccountTransactionBulkUsingPostWithHttpInfo(List<AggregationAccountTransaction> aggregationAccountTransactions) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountTransactionBulkUsingPostValidateBeforeCall(aggregationAccountTransactions, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a bulk aggregation account transaction (asynchronously)
     * Create a bulk transaction record under an aggregation account.
     * @param aggregationAccountTransactions aggregationAccountTransactions (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountTransactionBulkUsingPostAsync(List<AggregationAccountTransaction> aggregationAccountTransactions, final ApiCallback<List<AggregationAccountTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountTransactionBulkUsingPostValidateBeforeCall(aggregationAccountTransactions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAggregationAccountTransactionUsingPost
     * @param aggregationAccountTransaction aggregationAccountTransaction (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountTransactionUsingPostCall(AggregationAccountTransaction aggregationAccountTransaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountTransaction;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountTransactionUsingPostValidateBeforeCall(AggregationAccountTransaction aggregationAccountTransaction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountTransaction' is set
        if (aggregationAccountTransaction == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountTransaction' when calling createAggregationAccountTransactionUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountTransactionUsingPostCall(aggregationAccountTransaction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an aggregation account transaction
     * Create a transaction record under an aggregation account.
     * @param aggregationAccountTransaction aggregationAccountTransaction (required)
     * @return AggregationAccountTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountTransaction createAggregationAccountTransactionUsingPost(AggregationAccountTransaction aggregationAccountTransaction) throws ApiException {
        ApiResponse<AggregationAccountTransaction> resp = createAggregationAccountTransactionUsingPostWithHttpInfo(aggregationAccountTransaction);
        return resp.getData();
    }

    /**
     * Create an aggregation account transaction
     * Create a transaction record under an aggregation account.
     * @param aggregationAccountTransaction aggregationAccountTransaction (required)
     * @return ApiResponse&lt;AggregationAccountTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountTransaction> createAggregationAccountTransactionUsingPostWithHttpInfo(AggregationAccountTransaction aggregationAccountTransaction) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountTransactionUsingPostValidateBeforeCall(aggregationAccountTransaction, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an aggregation account transaction (asynchronously)
     * Create a transaction record under an aggregation account.
     * @param aggregationAccountTransaction aggregationAccountTransaction (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountTransactionUsingPostAsync(AggregationAccountTransaction aggregationAccountTransaction, final ApiCallback<AggregationAccountTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountTransactionUsingPostValidateBeforeCall(aggregationAccountTransaction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAggregationAccountUsingPost
     * @param aggregationAccount aggregationAccount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountUsingPostCall(AggregationAccount aggregationAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccount;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAggregationAccountUsingPostValidateBeforeCall(AggregationAccount aggregationAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccount' is set
        if (aggregationAccount == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccount' when calling createAggregationAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAggregationAccountUsingPostCall(aggregationAccount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an aggregation account
     * Create an aggregation account under a client.
     * @param aggregationAccount aggregationAccount (required)
     * @return AggregationAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccount createAggregationAccountUsingPost(AggregationAccount aggregationAccount) throws ApiException {
        ApiResponse<AggregationAccount> resp = createAggregationAccountUsingPostWithHttpInfo(aggregationAccount);
        return resp.getData();
    }

    /**
     * Create an aggregation account
     * Create an aggregation account under a client.
     * @param aggregationAccount aggregationAccount (required)
     * @return ApiResponse&lt;AggregationAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccount> createAggregationAccountUsingPostWithHttpInfo(AggregationAccount aggregationAccount) throws ApiException {
        com.squareup.okhttp.Call call = createAggregationAccountUsingPostValidateBeforeCall(aggregationAccount, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an aggregation account (asynchronously)
     * Create an aggregation account under a client.
     * @param aggregationAccount aggregationAccount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAggregationAccountUsingPostAsync(AggregationAccount aggregationAccount, final ApiCallback<AggregationAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAggregationAccountUsingPostValidateBeforeCall(aggregationAccount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAggregationAccountBalanceUsingDelete
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountBalanceUsingDeleteCall(UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}"
            .replaceAll("\\{" + "aggregation_account_balance_id" + "\\}", apiClient.escapeString(aggregationAccountBalanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAggregationAccountBalanceUsingDeleteValidateBeforeCall(UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalanceId' is set
        if (aggregationAccountBalanceId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalanceId' when calling deleteAggregationAccountBalanceUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAggregationAccountBalanceUsingDeleteCall(aggregationAccountBalanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an aggregation account balance
     * Permanently delete a balance record for an aggregation account.
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAggregationAccountBalanceUsingDelete(UUID aggregationAccountBalanceId) throws ApiException {
        deleteAggregationAccountBalanceUsingDeleteWithHttpInfo(aggregationAccountBalanceId);
    }

    /**
     * Delete an aggregation account balance
     * Permanently delete a balance record for an aggregation account.
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAggregationAccountBalanceUsingDeleteWithHttpInfo(UUID aggregationAccountBalanceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAggregationAccountBalanceUsingDeleteValidateBeforeCall(aggregationAccountBalanceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an aggregation account balance (asynchronously)
     * Permanently delete a balance record for an aggregation account.
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountBalanceUsingDeleteAsync(UUID aggregationAccountBalanceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAggregationAccountBalanceUsingDeleteValidateBeforeCall(aggregationAccountBalanceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAggregationAccountHoldingUsingDelete
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountHoldingUsingDeleteCall(UUID aggregationAccountHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}"
            .replaceAll("\\{" + "aggregation_account_holding_id" + "\\}", apiClient.escapeString(aggregationAccountHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAggregationAccountHoldingUsingDeleteValidateBeforeCall(UUID aggregationAccountHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountHoldingId' is set
        if (aggregationAccountHoldingId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountHoldingId' when calling deleteAggregationAccountHoldingUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAggregationAccountHoldingUsingDeleteCall(aggregationAccountHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an aggregation account holding
     * Permanently delete a holding record for an aggregation account.
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAggregationAccountHoldingUsingDelete(UUID aggregationAccountHoldingId) throws ApiException {
        deleteAggregationAccountHoldingUsingDeleteWithHttpInfo(aggregationAccountHoldingId);
    }

    /**
     * Delete an aggregation account holding
     * Permanently delete a holding record for an aggregation account.
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAggregationAccountHoldingUsingDeleteWithHttpInfo(UUID aggregationAccountHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAggregationAccountHoldingUsingDeleteValidateBeforeCall(aggregationAccountHoldingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an aggregation account holding (asynchronously)
     * Permanently delete a holding record for an aggregation account.
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountHoldingUsingDeleteAsync(UUID aggregationAccountHoldingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAggregationAccountHoldingUsingDeleteValidateBeforeCall(aggregationAccountHoldingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAggregationAccountTransactionUsingDelete
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountTransactionUsingDeleteCall(UUID aggregationAccountTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}"
            .replaceAll("\\{" + "aggregation_account_transaction_id" + "\\}", apiClient.escapeString(aggregationAccountTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAggregationAccountTransactionUsingDeleteValidateBeforeCall(UUID aggregationAccountTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountTransactionId' is set
        if (aggregationAccountTransactionId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountTransactionId' when calling deleteAggregationAccountTransactionUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAggregationAccountTransactionUsingDeleteCall(aggregationAccountTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an aggregation account transaction
     * Permanently delete a transaction record for an aggregation account.
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAggregationAccountTransactionUsingDelete(UUID aggregationAccountTransactionId) throws ApiException {
        deleteAggregationAccountTransactionUsingDeleteWithHttpInfo(aggregationAccountTransactionId);
    }

    /**
     * Delete an aggregation account transaction
     * Permanently delete a transaction record for an aggregation account.
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAggregationAccountTransactionUsingDeleteWithHttpInfo(UUID aggregationAccountTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAggregationAccountTransactionUsingDeleteValidateBeforeCall(aggregationAccountTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an aggregation account transaction (asynchronously)
     * Permanently delete a transaction record for an aggregation account.
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountTransactionUsingDeleteAsync(UUID aggregationAccountTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAggregationAccountTransactionUsingDeleteValidateBeforeCall(aggregationAccountTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAggregationAccountUsingDelete
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountUsingDeleteCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}"
            .replaceAll("\\{" + "aggregation_account_id" + "\\}", apiClient.escapeString(aggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAggregationAccountUsingDeleteValidateBeforeCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountId' is set
        if (aggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountId' when calling deleteAggregationAccountUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAggregationAccountUsingDeleteCall(aggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an aggregation account
     * Permanently delete an aggregation account under a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAggregationAccountUsingDelete(UUID aggregationAccountId) throws ApiException {
        deleteAggregationAccountUsingDeleteWithHttpInfo(aggregationAccountId);
    }

    /**
     * Delete an aggregation account
     * Permanently delete an aggregation account under a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAggregationAccountUsingDeleteWithHttpInfo(UUID aggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAggregationAccountUsingDeleteValidateBeforeCall(aggregationAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an aggregation account (asynchronously)
     * Permanently delete an aggregation account under a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAggregationAccountUsingDeleteAsync(UUID aggregationAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAggregationAccountUsingDeleteValidateBeforeCall(aggregationAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountAggregateDataUsingGet
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountAggregateDataUsingGetCall(UUID aggregationAccountId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}/aggregate_data"
            .replaceAll("\\{" + "aggregation_account_id" + "\\}", apiClient.escapeString(aggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountAggregateDataUsingGetValidateBeforeCall(UUID aggregationAccountId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountId' is set
        if (aggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountId' when calling getAggregationAccountAggregateDataUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountAggregateDataUsingGetCall(aggregationAccountId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param currencyConversion USD (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAggregationAccountAggregateDataUsingGet(UUID aggregationAccountId, String currencyConversion) throws ApiException {
        ApiResponse<Object> resp = getAggregationAccountAggregateDataUsingGetWithHttpInfo(aggregationAccountId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAggregationAccountAggregateDataUsingGetWithHttpInfo(UUID aggregationAccountId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountAggregateDataUsingGetValidateBeforeCall(aggregationAccountId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account aggregate data (asynchronously)
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountAggregateDataUsingGetAsync(UUID aggregationAccountId, String currencyConversion, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountAggregateDataUsingGetValidateBeforeCall(aggregationAccountId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAggregationAccountAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all aggregation accounts
     * Get information for all aggregation accounts for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAggregationAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAggregationAccount getAggregationAccountAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAggregationAccount> resp = getAggregationAccountAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all aggregation accounts
     * Get information for all aggregation accounts for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAggregationAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAggregationAccount> getAggregationAccountAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAggregationAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all aggregation accounts (asynchronously)
     * Get information for all aggregation accounts for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAggregationAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAggregationAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountBalanceAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountBalanceAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAggregationAccountBalanceAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all aggregation account balances
     * Get all of the balance records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAggregationAccountBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAggregationAccountBalance getAggregationAccountBalanceAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAggregationAccountBalance> resp = getAggregationAccountBalanceAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all aggregation account balances
     * Get all of the balance records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAggregationAccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAggregationAccountBalance> getAggregationAccountBalanceAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountBalanceAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAggregationAccountBalance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all aggregation account balances (asynchronously)
     * Get all of the balance records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAggregationAccountBalance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountBalanceAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAggregationAccountBalance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountBalanceUsingGet
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceUsingGetCall(UUID aggregationAccountBalanceId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}"
            .replaceAll("\\{" + "aggregation_account_balance_id" + "\\}", apiClient.escapeString(aggregationAccountBalanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountBalanceUsingGetValidateBeforeCall(UUID aggregationAccountBalanceId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalanceId' is set
        if (aggregationAccountBalanceId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalanceId' when calling getAggregationAccountBalanceUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountBalanceUsingGetCall(aggregationAccountBalanceId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account balance
     * Retrieve the information for a specific balance record for an aggregation account.
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param currencyConversion USD (optional)
     * @return AggregationAccountBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountBalance getAggregationAccountBalanceUsingGet(UUID aggregationAccountBalanceId, String currencyConversion) throws ApiException {
        ApiResponse<AggregationAccountBalance> resp = getAggregationAccountBalanceUsingGetWithHttpInfo(aggregationAccountBalanceId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account balance
     * Retrieve the information for a specific balance record for an aggregation account.
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;AggregationAccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountBalance> getAggregationAccountBalanceUsingGetWithHttpInfo(UUID aggregationAccountBalanceId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountBalanceUsingGetValidateBeforeCall(aggregationAccountBalanceId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountBalance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account balance (asynchronously)
     * Retrieve the information for a specific balance record for an aggregation account.
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountBalanceUsingGetAsync(UUID aggregationAccountBalanceId, String currencyConversion, final ApiCallback<AggregationAccountBalance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountBalanceUsingGetValidateBeforeCall(aggregationAccountBalanceId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountBalance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountHoldingAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountHoldingAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAggregationAccountHoldingAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all aggregation account holdings
     * Get all of the holding records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAggregationAccountHolding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAggregationAccountHolding getAggregationAccountHoldingAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAggregationAccountHolding> resp = getAggregationAccountHoldingAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all aggregation account holdings
     * Get all of the holding records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAggregationAccountHolding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAggregationAccountHolding> getAggregationAccountHoldingAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountHoldingAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAggregationAccountHolding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all aggregation account holdings (asynchronously)
     * Get all of the holding records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAggregationAccountHolding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountHoldingAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAggregationAccountHolding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountHoldingUsingGet
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingUsingGetCall(UUID aggregationAccountHoldingId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}"
            .replaceAll("\\{" + "aggregation_account_holding_id" + "\\}", apiClient.escapeString(aggregationAccountHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountHoldingUsingGetValidateBeforeCall(UUID aggregationAccountHoldingId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountHoldingId' is set
        if (aggregationAccountHoldingId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountHoldingId' when calling getAggregationAccountHoldingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountHoldingUsingGetCall(aggregationAccountHoldingId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account holding
     * Retrieve the information for a specific holding record for an aggregation account.
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param currencyConversion USD (optional)
     * @return AggregationAccountHolding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountHolding getAggregationAccountHoldingUsingGet(UUID aggregationAccountHoldingId, String currencyConversion) throws ApiException {
        ApiResponse<AggregationAccountHolding> resp = getAggregationAccountHoldingUsingGetWithHttpInfo(aggregationAccountHoldingId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account holding
     * Retrieve the information for a specific holding record for an aggregation account.
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;AggregationAccountHolding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountHolding> getAggregationAccountHoldingUsingGetWithHttpInfo(UUID aggregationAccountHoldingId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountHoldingUsingGetValidateBeforeCall(aggregationAccountHoldingId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountHolding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account holding (asynchronously)
     * Retrieve the information for a specific holding record for an aggregation account.
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountHoldingUsingGetAsync(UUID aggregationAccountHoldingId, String currencyConversion, final ApiCallback<AggregationAccountHolding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountHoldingUsingGetValidateBeforeCall(aggregationAccountHoldingId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountHolding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountOverviewByBusinessIdUsingGet
     * @param businessId UUID business_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountOverviewByBusinessIdUsingGetCall(UUID businessId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/business/{business_id}/aggregation_account_overview"
            .replaceAll("\\{" + "business_id" + "\\}", apiClient.escapeString(businessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountOverviewByBusinessIdUsingGetValidateBeforeCall(UUID businessId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessId' is set
        if (businessId == null) {
            throw new ApiException("Missing the required parameter 'businessId' when calling getAggregationAccountOverviewByBusinessIdUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountOverviewByBusinessIdUsingGetCall(businessId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account with aggregate data for a business.
     * @param businessId UUID business_id (required)
     * @param currencyConversion USD (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAggregationAccountOverviewByBusinessIdUsingGet(UUID businessId, String currencyConversion) throws ApiException {
        ApiResponse<Object> resp = getAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo(businessId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account with aggregate data for a business.
     * @param businessId UUID business_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo(UUID businessId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountOverviewByBusinessIdUsingGetValidateBeforeCall(businessId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account aggregate data (asynchronously)
     * Retrieve the information for a specific aggregation account with aggregate data for a business.
     * @param businessId UUID business_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountOverviewByBusinessIdUsingGetAsync(UUID businessId, String currencyConversion, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountOverviewByBusinessIdUsingGetValidateBeforeCall(businessId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountOverviewUsingGet
     * @param clientId UUID client_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountOverviewUsingGetCall(UUID clientId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/client/{client_id}/aggregation_account_overview"
            .replaceAll("\\{" + "client_id" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountOverviewUsingGetValidateBeforeCall(UUID clientId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getAggregationAccountOverviewUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountOverviewUsingGetCall(clientId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account with aggregate data for a client.
     * @param clientId UUID client_id (required)
     * @param currencyConversion USD (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAggregationAccountOverviewUsingGet(UUID clientId, String currencyConversion) throws ApiException {
        ApiResponse<Object> resp = getAggregationAccountOverviewUsingGetWithHttpInfo(clientId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account with aggregate data for a client.
     * @param clientId UUID client_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAggregationAccountOverviewUsingGetWithHttpInfo(UUID clientId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountOverviewUsingGetValidateBeforeCall(clientId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account aggregate data (asynchronously)
     * Retrieve the information for a specific aggregation account with aggregate data for a client.
     * @param clientId UUID client_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountOverviewUsingGetAsync(UUID clientId, String currencyConversion, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountOverviewUsingGetValidateBeforeCall(clientId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountTransactionAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountTransactionAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAggregationAccountTransactionAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all aggregation account transactions
     * Get all of the transaction records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAggregationAccountTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAggregationAccountTransaction getAggregationAccountTransactionAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAggregationAccountTransaction> resp = getAggregationAccountTransactionAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all aggregation account transactions
     * Get all of the transaction records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAggregationAccountTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAggregationAccountTransaction> getAggregationAccountTransactionAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountTransactionAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAggregationAccountTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all aggregation account transactions (asynchronously)
     * Get all of the transaction records for all aggregation accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAggregationAccountTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountTransactionAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAggregationAccountTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountTransactionUsingGet
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionUsingGetCall(UUID aggregationAccountTransactionId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}"
            .replaceAll("\\{" + "aggregation_account_transaction_id" + "\\}", apiClient.escapeString(aggregationAccountTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountTransactionUsingGetValidateBeforeCall(UUID aggregationAccountTransactionId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountTransactionId' is set
        if (aggregationAccountTransactionId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountTransactionId' when calling getAggregationAccountTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountTransactionUsingGetCall(aggregationAccountTransactionId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account transaction
     * Retrieve the information for a specific transaction record for an aggregation account.
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @return AggregationAccountTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountTransaction getAggregationAccountTransactionUsingGet(UUID aggregationAccountTransactionId, String currencyConversion) throws ApiException {
        ApiResponse<AggregationAccountTransaction> resp = getAggregationAccountTransactionUsingGetWithHttpInfo(aggregationAccountTransactionId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account transaction
     * Retrieve the information for a specific transaction record for an aggregation account.
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;AggregationAccountTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountTransaction> getAggregationAccountTransactionUsingGetWithHttpInfo(UUID aggregationAccountTransactionId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountTransactionUsingGetValidateBeforeCall(aggregationAccountTransactionId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account transaction (asynchronously)
     * Retrieve the information for a specific transaction record for an aggregation account.
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountTransactionUsingGetAsync(UUID aggregationAccountTransactionId, String currencyConversion, final ApiCallback<AggregationAccountTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountTransactionUsingGetValidateBeforeCall(aggregationAccountTransactionId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAggregationAccountUsingGet
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountUsingGetCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}"
            .replaceAll("\\{" + "aggregation_account_id" + "\\}", apiClient.escapeString(aggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAggregationAccountUsingGetValidateBeforeCall(UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountId' is set
        if (aggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountId' when calling getAggregationAccountUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAggregationAccountUsingGetCall(aggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an aggregation account
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @return AggregationAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccount getAggregationAccountUsingGet(UUID aggregationAccountId) throws ApiException {
        ApiResponse<AggregationAccount> resp = getAggregationAccountUsingGetWithHttpInfo(aggregationAccountId);
        return resp.getData();
    }

    /**
     * Retrieve an aggregation account
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @return ApiResponse&lt;AggregationAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccount> getAggregationAccountUsingGetWithHttpInfo(UUID aggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getAggregationAccountUsingGetValidateBeforeCall(aggregationAccountId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an aggregation account (asynchronously)
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAggregationAccountUsingGetAsync(UUID aggregationAccountId, final ApiCallback<AggregationAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAggregationAccountUsingGetValidateBeforeCall(aggregationAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccountBalanceUsingPut
     * @param aggregationAccountBalance aggregation_account_balance (required)
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountBalanceUsingPutCall(Object aggregationAccountBalance, UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountBalance;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}"
            .replaceAll("\\{" + "aggregation_account_balance_id" + "\\}", apiClient.escapeString(aggregationAccountBalanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountBalanceUsingPutValidateBeforeCall(Object aggregationAccountBalance, UUID aggregationAccountBalanceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountBalance' is set
        if (aggregationAccountBalance == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalance' when calling updateAggregationAccountBalanceUsingPut(Async)");
        }
        
        // verify the required parameter 'aggregationAccountBalanceId' is set
        if (aggregationAccountBalanceId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountBalanceId' when calling updateAggregationAccountBalanceUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountBalanceUsingPutCall(aggregationAccountBalance, aggregationAccountBalanceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an aggregation account balance
     * Update a balance record for an aggregation account.
     * @param aggregationAccountBalance aggregation_account_balance (required)
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @return AggregationAccountBalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountBalance updateAggregationAccountBalanceUsingPut(Object aggregationAccountBalance, UUID aggregationAccountBalanceId) throws ApiException {
        ApiResponse<AggregationAccountBalance> resp = updateAggregationAccountBalanceUsingPutWithHttpInfo(aggregationAccountBalance, aggregationAccountBalanceId);
        return resp.getData();
    }

    /**
     * Update an aggregation account balance
     * Update a balance record for an aggregation account.
     * @param aggregationAccountBalance aggregation_account_balance (required)
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @return ApiResponse&lt;AggregationAccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountBalance> updateAggregationAccountBalanceUsingPutWithHttpInfo(Object aggregationAccountBalance, UUID aggregationAccountBalanceId) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountBalanceUsingPutValidateBeforeCall(aggregationAccountBalance, aggregationAccountBalanceId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountBalance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an aggregation account balance (asynchronously)
     * Update a balance record for an aggregation account.
     * @param aggregationAccountBalance aggregation_account_balance (required)
     * @param aggregationAccountBalanceId UUID aggregation_account_balance_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountBalanceUsingPutAsync(Object aggregationAccountBalance, UUID aggregationAccountBalanceId, final ApiCallback<AggregationAccountBalance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountBalanceUsingPutValidateBeforeCall(aggregationAccountBalance, aggregationAccountBalanceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountBalance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccountBulkUsingPut
     * @param aggregationAccountList aggregationAccountList (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountBulkUsingPutCall(List<Object> aggregationAccountList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountList;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk_aggregation_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountBulkUsingPutValidateBeforeCall(List<Object> aggregationAccountList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountList' is set
        if (aggregationAccountList == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountList' when calling updateAggregationAccountBulkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountBulkUsingPutCall(aggregationAccountList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a bulk aggregation account
     * Update a bulk aggregation account under a client.
     * @param aggregationAccountList aggregationAccountList (required)
     * @return List&lt;AggregationAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccount> updateAggregationAccountBulkUsingPut(List<Object> aggregationAccountList) throws ApiException {
        ApiResponse<List<AggregationAccount>> resp = updateAggregationAccountBulkUsingPutWithHttpInfo(aggregationAccountList);
        return resp.getData();
    }

    /**
     * Update a bulk aggregation account
     * Update a bulk aggregation account under a client.
     * @param aggregationAccountList aggregationAccountList (required)
     * @return ApiResponse&lt;List&lt;AggregationAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccount>> updateAggregationAccountBulkUsingPutWithHttpInfo(List<Object> aggregationAccountList) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountBulkUsingPutValidateBeforeCall(aggregationAccountList, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a bulk aggregation account (asynchronously)
     * Update a bulk aggregation account under a client.
     * @param aggregationAccountList aggregationAccountList (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountBulkUsingPutAsync(List<Object> aggregationAccountList, final ApiCallback<List<AggregationAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountBulkUsingPutValidateBeforeCall(aggregationAccountList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccountHoldingBulkUsingPut
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountHoldingBulkUsingPutCall(List<Object> aggregationAccountHolding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountHolding;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk_aggregation_account_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountHoldingBulkUsingPutValidateBeforeCall(List<Object> aggregationAccountHolding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountHolding' is set
        if (aggregationAccountHolding == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountHolding' when calling updateAggregationAccountHoldingBulkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountHoldingBulkUsingPutCall(aggregationAccountHolding, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an bulk aggregation account holding
     * Update a bulk holding record for an aggregation account.
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @return List&lt;AggregationAccountHolding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AggregationAccountHolding> updateAggregationAccountHoldingBulkUsingPut(List<Object> aggregationAccountHolding) throws ApiException {
        ApiResponse<List<AggregationAccountHolding>> resp = updateAggregationAccountHoldingBulkUsingPutWithHttpInfo(aggregationAccountHolding);
        return resp.getData();
    }

    /**
     * Update an bulk aggregation account holding
     * Update a bulk holding record for an aggregation account.
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @return ApiResponse&lt;List&lt;AggregationAccountHolding&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AggregationAccountHolding>> updateAggregationAccountHoldingBulkUsingPutWithHttpInfo(List<Object> aggregationAccountHolding) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountHoldingBulkUsingPutValidateBeforeCall(aggregationAccountHolding, null, null);
        Type localVarReturnType = new TypeToken<List<AggregationAccountHolding>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an bulk aggregation account holding (asynchronously)
     * Update a bulk holding record for an aggregation account.
     * @param aggregationAccountHolding aggregationAccountHolding (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountHoldingBulkUsingPutAsync(List<Object> aggregationAccountHolding, final ApiCallback<List<AggregationAccountHolding>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountHoldingBulkUsingPutValidateBeforeCall(aggregationAccountHolding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AggregationAccountHolding>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccountHoldingUsingPut
     * @param aggregationAccountHolding aggregation_account_holding (required)
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountHoldingUsingPutCall(Object aggregationAccountHolding, UUID aggregationAccountHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountHolding;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}"
            .replaceAll("\\{" + "aggregation_account_holding_id" + "\\}", apiClient.escapeString(aggregationAccountHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountHoldingUsingPutValidateBeforeCall(Object aggregationAccountHolding, UUID aggregationAccountHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountHolding' is set
        if (aggregationAccountHolding == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountHolding' when calling updateAggregationAccountHoldingUsingPut(Async)");
        }
        
        // verify the required parameter 'aggregationAccountHoldingId' is set
        if (aggregationAccountHoldingId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountHoldingId' when calling updateAggregationAccountHoldingUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountHoldingUsingPutCall(aggregationAccountHolding, aggregationAccountHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an aggregation account holding
     * Update a holding record for an aggregation account.
     * @param aggregationAccountHolding aggregation_account_holding (required)
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @return AggregationAccountHolding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountHolding updateAggregationAccountHoldingUsingPut(Object aggregationAccountHolding, UUID aggregationAccountHoldingId) throws ApiException {
        ApiResponse<AggregationAccountHolding> resp = updateAggregationAccountHoldingUsingPutWithHttpInfo(aggregationAccountHolding, aggregationAccountHoldingId);
        return resp.getData();
    }

    /**
     * Update an aggregation account holding
     * Update a holding record for an aggregation account.
     * @param aggregationAccountHolding aggregation_account_holding (required)
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @return ApiResponse&lt;AggregationAccountHolding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountHolding> updateAggregationAccountHoldingUsingPutWithHttpInfo(Object aggregationAccountHolding, UUID aggregationAccountHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountHoldingUsingPutValidateBeforeCall(aggregationAccountHolding, aggregationAccountHoldingId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountHolding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an aggregation account holding (asynchronously)
     * Update a holding record for an aggregation account.
     * @param aggregationAccountHolding aggregation_account_holding (required)
     * @param aggregationAccountHoldingId UUID aggregation_account_holding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountHoldingUsingPutAsync(Object aggregationAccountHolding, UUID aggregationAccountHoldingId, final ApiCallback<AggregationAccountHolding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountHoldingUsingPutValidateBeforeCall(aggregationAccountHolding, aggregationAccountHoldingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountHolding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccountTransactionUsingPut
     * @param aggregationAccountTransaction aggregation_account_transaction (required)
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountTransactionUsingPutCall(Object aggregationAccountTransaction, UUID aggregationAccountTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccountTransaction;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}"
            .replaceAll("\\{" + "aggregation_account_transaction_id" + "\\}", apiClient.escapeString(aggregationAccountTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountTransactionUsingPutValidateBeforeCall(Object aggregationAccountTransaction, UUID aggregationAccountTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccountTransaction' is set
        if (aggregationAccountTransaction == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountTransaction' when calling updateAggregationAccountTransactionUsingPut(Async)");
        }
        
        // verify the required parameter 'aggregationAccountTransactionId' is set
        if (aggregationAccountTransactionId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountTransactionId' when calling updateAggregationAccountTransactionUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountTransactionUsingPutCall(aggregationAccountTransaction, aggregationAccountTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an aggregation account transaction
     * Update a transaction record for an aggregation account.
     * @param aggregationAccountTransaction aggregation_account_transaction (required)
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @return AggregationAccountTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccountTransaction updateAggregationAccountTransactionUsingPut(Object aggregationAccountTransaction, UUID aggregationAccountTransactionId) throws ApiException {
        ApiResponse<AggregationAccountTransaction> resp = updateAggregationAccountTransactionUsingPutWithHttpInfo(aggregationAccountTransaction, aggregationAccountTransactionId);
        return resp.getData();
    }

    /**
     * Update an aggregation account transaction
     * Update a transaction record for an aggregation account.
     * @param aggregationAccountTransaction aggregation_account_transaction (required)
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @return ApiResponse&lt;AggregationAccountTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccountTransaction> updateAggregationAccountTransactionUsingPutWithHttpInfo(Object aggregationAccountTransaction, UUID aggregationAccountTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountTransactionUsingPutValidateBeforeCall(aggregationAccountTransaction, aggregationAccountTransactionId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccountTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an aggregation account transaction (asynchronously)
     * Update a transaction record for an aggregation account.
     * @param aggregationAccountTransaction aggregation_account_transaction (required)
     * @param aggregationAccountTransactionId UUID aggregation_account_transaction_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountTransactionUsingPutAsync(Object aggregationAccountTransaction, UUID aggregationAccountTransactionId, final ApiCallback<AggregationAccountTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountTransactionUsingPutValidateBeforeCall(aggregationAccountTransaction, aggregationAccountTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccountTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAggregationAccountUsingPut
     * @param aggregationAccount aggregation_account (required)
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountUsingPutCall(Object aggregationAccount, UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aggregationAccount;

        // create path and map variables
        String localVarPath = "/nucleus/v1/aggregation_account/{aggregation_account_id}"
            .replaceAll("\\{" + "aggregation_account_id" + "\\}", apiClient.escapeString(aggregationAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAggregationAccountUsingPutValidateBeforeCall(Object aggregationAccount, UUID aggregationAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aggregationAccount' is set
        if (aggregationAccount == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccount' when calling updateAggregationAccountUsingPut(Async)");
        }
        
        // verify the required parameter 'aggregationAccountId' is set
        if (aggregationAccountId == null) {
            throw new ApiException("Missing the required parameter 'aggregationAccountId' when calling updateAggregationAccountUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAggregationAccountUsingPutCall(aggregationAccount, aggregationAccountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an aggregation account
     * Update the information for an aggregation account.
     * @param aggregationAccount aggregation_account (required)
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @return AggregationAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AggregationAccount updateAggregationAccountUsingPut(Object aggregationAccount, UUID aggregationAccountId) throws ApiException {
        ApiResponse<AggregationAccount> resp = updateAggregationAccountUsingPutWithHttpInfo(aggregationAccount, aggregationAccountId);
        return resp.getData();
    }

    /**
     * Update an aggregation account
     * Update the information for an aggregation account.
     * @param aggregationAccount aggregation_account (required)
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @return ApiResponse&lt;AggregationAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AggregationAccount> updateAggregationAccountUsingPutWithHttpInfo(Object aggregationAccount, UUID aggregationAccountId) throws ApiException {
        com.squareup.okhttp.Call call = updateAggregationAccountUsingPutValidateBeforeCall(aggregationAccount, aggregationAccountId, null, null);
        Type localVarReturnType = new TypeToken<AggregationAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an aggregation account (asynchronously)
     * Update the information for an aggregation account.
     * @param aggregationAccount aggregation_account (required)
     * @param aggregationAccountId UUID aggregation_account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAggregationAccountUsingPutAsync(Object aggregationAccount, UUID aggregationAccountId, final ApiCallback<AggregationAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAggregationAccountUsingPutValidateBeforeCall(aggregationAccount, aggregationAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregationAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
