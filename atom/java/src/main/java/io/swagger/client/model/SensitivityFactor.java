/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * SensitivityFactor
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-06-14T14:44:02.139-04:00")
public class SensitivityFactor {
  @SerializedName("ticker")
  private String ticker = null;

  @SerializedName("change_amount")
  private BigDecimal changeAmount = null;

  @SerializedName("change_duration")
  private Integer changeDuration = null;

  @SerializedName("lag")
  private Integer lag = null;

  public SensitivityFactor ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

   /**
   * The symbol of the instrument being changed in the scenario
   * @return ticker
  **/
  @ApiModelProperty(required = true, value = "The symbol of the instrument being changed in the scenario")
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }

  public SensitivityFactor changeAmount(BigDecimal changeAmount) {
    this.changeAmount = changeAmount;
    return this;
  }

   /**
   * A positive or negative percentage price change for the ticker
   * minimum: -1
   * @return changeAmount
  **/
  @ApiModelProperty(required = true, value = "A positive or negative percentage price change for the ticker")
  public BigDecimal getChangeAmount() {
    return changeAmount;
  }

  public void setChangeAmount(BigDecimal changeAmount) {
    this.changeAmount = changeAmount;
  }

  public SensitivityFactor changeDuration(Integer changeDuration) {
    this.changeDuration = changeDuration;
    return this;
  }

   /**
   * The number of time periods over which the scenario price change is to occur
   * minimum: 0
   * @return changeDuration
  **/
  @ApiModelProperty(required = true, value = "The number of time periods over which the scenario price change is to occur")
  public Integer getChangeDuration() {
    return changeDuration;
  }

  public void setChangeDuration(Integer changeDuration) {
    this.changeDuration = changeDuration;
  }

  public SensitivityFactor lag(Integer lag) {
    this.lag = lag;
    return this;
  }

   /**
   * Number of periods to lag between factor return and resulting portfolio return
   * minimum: 0
   * @return lag
  **/
  @ApiModelProperty(value = "Number of periods to lag between factor return and resulting portfolio return")
  public Integer getLag() {
    return lag;
  }

  public void setLag(Integer lag) {
    this.lag = lag;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensitivityFactor sensitivityFactor = (SensitivityFactor) o;
    return Objects.equals(this.ticker, sensitivityFactor.ticker) &&
        Objects.equals(this.changeAmount, sensitivityFactor.changeAmount) &&
        Objects.equals(this.changeDuration, sensitivityFactor.changeDuration) &&
        Objects.equals(this.lag, sensitivityFactor.lag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticker, changeAmount, changeDuration, lag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensitivityFactor {\n");
    
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    changeAmount: ").append(toIndentedString(changeAmount)).append("\n");
    sb.append("    changeDuration: ").append(toIndentedString(changeDuration)).append("\n");
    sb.append("    lag: ").append(toIndentedString(lag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

