# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FinancialPicture(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'show_change': 'bool',
        'show_history': 'bool'
    }

    attribute_map = {
        'client_id': 'client_id',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'show_change': 'show_change',
        'show_history': 'show_history'
    }

    def __init__(self, client_id=None, start_date=None, end_date=None, show_change=False, show_history=False):  # noqa: E501
        """FinancialPicture - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._start_date = None
        self._end_date = None
        self._show_change = None
        self._show_history = None
        self.discriminator = None

        self.client_id = client_id
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if show_change is not None:
            self.show_change = show_change
        if show_history is not None:
            self.show_history = show_history

    @property
    def client_id(self):
        """Gets the client_id of this FinancialPicture.  # noqa: E501

        The ID of a client's financial picture  # noqa: E501

        :return: The client_id of this FinancialPicture.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FinancialPicture.

        The ID of a client's financial picture  # noqa: E501

        :param client_id: The client_id of this FinancialPicture.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def start_date(self):
        """Gets the start_date of this FinancialPicture.  # noqa: E501

        Start date of the financial picture analysis. Defaults to earliest date there is data.  # noqa: E501

        :return: The start_date of this FinancialPicture.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this FinancialPicture.

        Start date of the financial picture analysis. Defaults to earliest date there is data.  # noqa: E501

        :param start_date: The start_date of this FinancialPicture.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this FinancialPicture.  # noqa: E501

        End date of the financial picture analysis. Defaults to latest date there is data.  # noqa: E501

        :return: The end_date of this FinancialPicture.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this FinancialPicture.

        End date of the financial picture analysis. Defaults to latest date there is data.  # noqa: E501

        :param end_date: The end_date of this FinancialPicture.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def show_change(self):
        """Gets the show_change of this FinancialPicture.  # noqa: E501

        Indicates whether to return cumulative changes in the user’s total assets, total liabilities, and net worth over time, within the specified date range. Defaults to FALSE which indicates it will not return these changes.  # noqa: E501

        :return: The show_change of this FinancialPicture.  # noqa: E501
        :rtype: bool
        """
        return self._show_change

    @show_change.setter
    def show_change(self, show_change):
        """Sets the show_change of this FinancialPicture.

        Indicates whether to return cumulative changes in the user’s total assets, total liabilities, and net worth over time, within the specified date range. Defaults to FALSE which indicates it will not return these changes.  # noqa: E501

        :param show_change: The show_change of this FinancialPicture.  # noqa: E501
        :type: bool
        """

        self._show_change = show_change

    @property
    def show_history(self):
        """Gets the show_history of this FinancialPicture.  # noqa: E501

        Indicates whether to return a daily history of the user’s financial picture within the specified date range. Defaults to FALSE which indicates it will not return daily historical records.  # noqa: E501

        :return: The show_history of this FinancialPicture.  # noqa: E501
        :rtype: bool
        """
        return self._show_history

    @show_history.setter
    def show_history(self, show_history):
        """Sets the show_history of this FinancialPicture.

        Indicates whether to return a daily history of the user’s financial picture within the specified date range. Defaults to FALSE which indicates it will not return daily historical records.  # noqa: E501

        :param show_history: The show_history of this FinancialPicture.  # noqa: E501
        :type: bool
        """

        self._show_history = show_history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialPicture, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialPicture):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
