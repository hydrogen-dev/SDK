/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// FinancialPictureRequest
    /// </summary>
    [DataContract]
    public partial class FinancialPictureRequest :  IEquatable<FinancialPictureRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialPictureRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="showHistory">showHistory (default to false).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="showCategoryBreakdown">showCategoryBreakdown (default to true).</param>
        /// <param name="showChange">showChange (default to false).</param>
        /// <param name="householdId">householdId.</param>
        /// <param name="createLog">createLog (default to false).</param>
        public FinancialPictureRequest(string currencyCode = default(string), Guid? clientId = default(Guid?), bool? showHistory = false, DateTime? endDate = default(DateTime?), string currencyConversion = default(string), DateTime? startDate = default(DateTime?), bool? showCategoryBreakdown = true, bool? showChange = false, Guid? householdId = default(Guid?), bool? createLog = false)
        {
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "showHistory" provided
            if (showHistory == null)
            {
                this.ShowHistory = false;
            }
            else
            {
                this.ShowHistory = showHistory;
            }
            this.EndDate = endDate;
            this.CurrencyConversion = currencyConversion;
            this.StartDate = startDate;
            // use default value if no "showCategoryBreakdown" provided
            if (showCategoryBreakdown == null)
            {
                this.ShowCategoryBreakdown = true;
            }
            else
            {
                this.ShowCategoryBreakdown = showCategoryBreakdown;
            }
            // use default value if no "showChange" provided
            if (showChange == null)
            {
                this.ShowChange = false;
            }
            else
            {
                this.ShowChange = showChange;
            }
            this.HouseholdId = householdId;
            // use default value if no "createLog" provided
            if (createLog == null)
            {
                this.CreateLog = false;
            }
            else
            {
                this.CreateLog = createLog;
            }
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ShowHistory
        /// </summary>
        [DataMember(Name="show_history", EmitDefaultValue=false)]
        public bool? ShowHistory { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets ShowCategoryBreakdown
        /// </summary>
        [DataMember(Name="show_category_breakdown", EmitDefaultValue=false)]
        public bool? ShowCategoryBreakdown { get; set; }

        /// <summary>
        /// Gets or Sets ShowChange
        /// </summary>
        [DataMember(Name="show_change", EmitDefaultValue=false)]
        public bool? ShowChange { get; set; }

        /// <summary>
        /// Gets or Sets HouseholdId
        /// </summary>
        [DataMember(Name="household_id", EmitDefaultValue=false)]
        public Guid? HouseholdId { get; set; }

        /// <summary>
        /// Gets or Sets CreateLog
        /// </summary>
        [DataMember(Name="create_log", EmitDefaultValue=false)]
        public bool? CreateLog { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialPictureRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ShowHistory: ").Append(ShowHistory).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ShowCategoryBreakdown: ").Append(ShowCategoryBreakdown).Append("\n");
            sb.Append("  ShowChange: ").Append(ShowChange).Append("\n");
            sb.Append("  HouseholdId: ").Append(HouseholdId).Append("\n");
            sb.Append("  CreateLog: ").Append(CreateLog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialPictureRequest);
        }

        /// <summary>
        /// Returns true if FinancialPictureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialPictureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialPictureRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ShowHistory == input.ShowHistory ||
                    (this.ShowHistory != null &&
                    this.ShowHistory.Equals(input.ShowHistory))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.ShowCategoryBreakdown == input.ShowCategoryBreakdown ||
                    (this.ShowCategoryBreakdown != null &&
                    this.ShowCategoryBreakdown.Equals(input.ShowCategoryBreakdown))
                ) && 
                (
                    this.ShowChange == input.ShowChange ||
                    (this.ShowChange != null &&
                    this.ShowChange.Equals(input.ShowChange))
                ) && 
                (
                    this.HouseholdId == input.HouseholdId ||
                    (this.HouseholdId != null &&
                    this.HouseholdId.Equals(input.HouseholdId))
                ) && 
                (
                    this.CreateLog == input.CreateLog ||
                    (this.CreateLog != null &&
                    this.CreateLog.Equals(input.CreateLog))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ShowHistory != null)
                    hashCode = hashCode * 59 + this.ShowHistory.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.ShowCategoryBreakdown != null)
                    hashCode = hashCode * 59 + this.ShowCategoryBreakdown.GetHashCode();
                if (this.ShowChange != null)
                    hashCode = hashCode * 59 + this.ShowChange.GetHashCode();
                if (this.HouseholdId != null)
                    hashCode = hashCode * 59 + this.HouseholdId.GetHashCode();
                if (this.CreateLog != null)
                    hashCode = hashCode * 59 + this.CreateLog.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
