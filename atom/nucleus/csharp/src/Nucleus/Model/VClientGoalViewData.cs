/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// VClientGoalViewData
    /// </summary>
    [DataContract]
    public partial class VClientGoalViewData :  IEquatable<VClientGoalViewData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VClientGoalViewData" /> class.
        /// </summary>
        /// <param name="clientAssetSize">clientAssetSize.</param>
        /// <param name="clientAssetSizeDate">clientAssetSizeDate.</param>
        /// <param name="clientFirstName">clientFirstName.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="clientLastName">clientLastName.</param>
        /// <param name="clientViewGoalData">clientViewGoalData.</param>
        public VClientGoalViewData(double? clientAssetSize = default(double?), DateTime? clientAssetSizeDate = default(DateTime?), string clientFirstName = default(string), Guid? clientId = default(Guid?), string clientLastName = default(string), List<ClientViewGoalData> clientViewGoalData = default(List<ClientViewGoalData>))
        {
            this.ClientAssetSize = clientAssetSize;
            this.ClientAssetSizeDate = clientAssetSizeDate;
            this.ClientFirstName = clientFirstName;
            this.ClientId = clientId;
            this.ClientLastName = clientLastName;
            this.ClientViewGoalData = clientViewGoalData;
        }
        
        /// <summary>
        /// Gets or Sets ClientAssetSize
        /// </summary>
        [DataMember(Name="client_asset_size", EmitDefaultValue=false)]
        public double? ClientAssetSize { get; set; }

        /// <summary>
        /// Gets or Sets ClientAssetSizeDate
        /// </summary>
        [DataMember(Name="client_asset_size_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ClientAssetSizeDate { get; set; }

        /// <summary>
        /// Gets or Sets ClientFirstName
        /// </summary>
        [DataMember(Name="client_first_name", EmitDefaultValue=false)]
        public string ClientFirstName { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientLastName
        /// </summary>
        [DataMember(Name="client_last_name", EmitDefaultValue=false)]
        public string ClientLastName { get; set; }

        /// <summary>
        /// Gets or Sets ClientViewGoalData
        /// </summary>
        [DataMember(Name="client_view_goal_data", EmitDefaultValue=false)]
        public List<ClientViewGoalData> ClientViewGoalData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VClientGoalViewData {\n");
            sb.Append("  ClientAssetSize: ").Append(ClientAssetSize).Append("\n");
            sb.Append("  ClientAssetSizeDate: ").Append(ClientAssetSizeDate).Append("\n");
            sb.Append("  ClientFirstName: ").Append(ClientFirstName).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientLastName: ").Append(ClientLastName).Append("\n");
            sb.Append("  ClientViewGoalData: ").Append(ClientViewGoalData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VClientGoalViewData);
        }

        /// <summary>
        /// Returns true if VClientGoalViewData instances are equal
        /// </summary>
        /// <param name="input">Instance of VClientGoalViewData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VClientGoalViewData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientAssetSize == input.ClientAssetSize ||
                    (this.ClientAssetSize != null &&
                    this.ClientAssetSize.Equals(input.ClientAssetSize))
                ) && 
                (
                    this.ClientAssetSizeDate == input.ClientAssetSizeDate ||
                    (this.ClientAssetSizeDate != null &&
                    this.ClientAssetSizeDate.Equals(input.ClientAssetSizeDate))
                ) && 
                (
                    this.ClientFirstName == input.ClientFirstName ||
                    (this.ClientFirstName != null &&
                    this.ClientFirstName.Equals(input.ClientFirstName))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientLastName == input.ClientLastName ||
                    (this.ClientLastName != null &&
                    this.ClientLastName.Equals(input.ClientLastName))
                ) && 
                (
                    this.ClientViewGoalData == input.ClientViewGoalData ||
                    this.ClientViewGoalData != null &&
                    this.ClientViewGoalData.SequenceEqual(input.ClientViewGoalData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientAssetSize != null)
                    hashCode = hashCode * 59 + this.ClientAssetSize.GetHashCode();
                if (this.ClientAssetSizeDate != null)
                    hashCode = hashCode * 59 + this.ClientAssetSizeDate.GetHashCode();
                if (this.ClientFirstName != null)
                    hashCode = hashCode * 59 + this.ClientFirstName.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientLastName != null)
                    hashCode = hashCode * 59 + this.ClientLastName.GetHashCode();
                if (this.ClientViewGoalData != null)
                    hashCode = hashCode * 59 + this.ClientViewGoalData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
