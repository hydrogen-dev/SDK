/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PagePortfolio', 'model/PagePortfolioAssetSizeLog', 'model/PagePortfolioComment', 'model/PagePortfolioGoal', 'model/PagePortfolioHoldingLog', 'model/PagePortfolioTransaction', 'model/Portfolio', 'model/PortfolioAssetSizeLog', 'model/PortfolioComment', 'model/PortfolioGoal', 'model/PortfolioHoldingLog', 'model/PortfolioTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PagePortfolio'), require('../model/PagePortfolioAssetSizeLog'), require('../model/PagePortfolioComment'), require('../model/PagePortfolioGoal'), require('../model/PagePortfolioHoldingLog'), require('../model/PagePortfolioTransaction'), require('../model/Portfolio'), require('../model/PortfolioAssetSizeLog'), require('../model/PortfolioComment'), require('../model/PortfolioGoal'), require('../model/PortfolioHoldingLog'), require('../model/PortfolioTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.PortfolioApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.PagePortfolio, root.HydrogenNucleusApi.PagePortfolioAssetSizeLog, root.HydrogenNucleusApi.PagePortfolioComment, root.HydrogenNucleusApi.PagePortfolioGoal, root.HydrogenNucleusApi.PagePortfolioHoldingLog, root.HydrogenNucleusApi.PagePortfolioTransaction, root.HydrogenNucleusApi.Portfolio, root.HydrogenNucleusApi.PortfolioAssetSizeLog, root.HydrogenNucleusApi.PortfolioComment, root.HydrogenNucleusApi.PortfolioGoal, root.HydrogenNucleusApi.PortfolioHoldingLog, root.HydrogenNucleusApi.PortfolioTransaction);
  }
}(this, function(ApiClient, PagePortfolio, PagePortfolioAssetSizeLog, PagePortfolioComment, PagePortfolioGoal, PagePortfolioHoldingLog, PagePortfolioTransaction, Portfolio, PortfolioAssetSizeLog, PortfolioComment, PortfolioGoal, PortfolioHoldingLog, PortfolioTransaction) {
  'use strict';

  /**
   * Portfolio service.
   * @module api/PortfolioApi
   * @version 1.9.5
   */

  /**
   * Constructs a new PortfolioApi. 
   * @alias module:api/PortfolioApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPortfolioAssetSizeUsingPost operation.
     * @callback module:api/PortfolioApi~createPortfolioAssetSizeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioAssetSizeLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio asset size
     * Create a new asset size record for a portfolio.
     * @param {module:model/PortfolioAssetSizeLog} portfolioAssetSizeLogRequest portfolioAssetSizeLogRequest
     * @param {module:api/PortfolioApi~createPortfolioAssetSizeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioAssetSizeLog}
     */
    this.createPortfolioAssetSizeUsingPost = function(portfolioAssetSizeLogRequest, callback) {
      var postBody = portfolioAssetSizeLogRequest;

      // verify the required parameter 'portfolioAssetSizeLogRequest' is set
      if (portfolioAssetSizeLogRequest === undefined || portfolioAssetSizeLogRequest === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSizeLogRequest' when calling createPortfolioAssetSizeUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioAssetSizeLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioCommentUsingPost operation.
     * @callback module:api/PortfolioApi~createPortfolioCommentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio commentary
     * Create a new comment for a portfolio defined for your firm.
     * @param {module:model/PortfolioComment} portfolioComment portfolioComment
     * @param {module:api/PortfolioApi~createPortfolioCommentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioComment}
     */
    this.createPortfolioCommentUsingPost = function(portfolioComment, callback) {
      var postBody = portfolioComment;

      // verify the required parameter 'portfolioComment' is set
      if (portfolioComment === undefined || portfolioComment === null) {
        throw new Error("Missing the required parameter 'portfolioComment' when calling createPortfolioCommentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioComment;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioGoalUsingPost operation.
     * @callback module:api/PortfolioApi~createPortfolioGoalUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioGoal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an portfolio goal
     * Create an portfolio goal.
     * @param {module:model/PortfolioGoal} portfolioGoal portfolioGoal
     * @param {module:api/PortfolioApi~createPortfolioGoalUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioGoal}
     */
    this.createPortfolioGoalUsingPost = function(portfolioGoal, callback) {
      var postBody = portfolioGoal;

      // verify the required parameter 'portfolioGoal' is set
      if (portfolioGoal === undefined || portfolioGoal === null) {
        throw new Error("Missing the required parameter 'portfolioGoal' when calling createPortfolioGoalUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioGoal;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_goal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioHoldingUsingPost operation.
     * @callback module:api/PortfolioApi~createPortfolioHoldingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioHoldingLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio holding
     * Create a new holding record for a portfolio.
     * @param {module:model/PortfolioHoldingLog} portfolioHoldinLogRequest portfolioHoldinLogRequest
     * @param {module:api/PortfolioApi~createPortfolioHoldingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioHoldingLog}
     */
    this.createPortfolioHoldingUsingPost = function(portfolioHoldinLogRequest, callback) {
      var postBody = portfolioHoldinLogRequest;

      // verify the required parameter 'portfolioHoldinLogRequest' is set
      if (portfolioHoldinLogRequest === undefined || portfolioHoldinLogRequest === null) {
        throw new Error("Missing the required parameter 'portfolioHoldinLogRequest' when calling createPortfolioHoldingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioHoldingLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioTransactionUsingPost operation.
     * @callback module:api/PortfolioApi~createPortfolioTransactionUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio transaction
     * Create a new transaction record for a portfolio.
     * @param {module:model/PortfolioTransaction} portfolioTransactionRequest portfolioTransactionRequest
     * @param {module:api/PortfolioApi~createPortfolioTransactionUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioTransaction}
     */
    this.createPortfolioTransactionUsingPost = function(portfolioTransactionRequest, callback) {
      var postBody = portfolioTransactionRequest;

      // verify the required parameter 'portfolioTransactionRequest' is set
      if (portfolioTransactionRequest === undefined || portfolioTransactionRequest === null) {
        throw new Error("Missing the required parameter 'portfolioTransactionRequest' when calling createPortfolioTransactionUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioUsingPost operation.
     * @callback module:api/PortfolioApi~createPortfolioUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio
     * Create a new portfolio for an account.
     * @param {module:model/Portfolio} portfolioRequest portfolioRequest
     * @param {module:api/PortfolioApi~createPortfolioUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.createPortfolioUsingPost = function(portfolioRequest, callback) {
      var postBody = portfolioRequest;

      // verify the required parameter 'portfolioRequest' is set
      if (portfolioRequest === undefined || portfolioRequest === null) {
        throw new Error("Missing the required parameter 'portfolioRequest' when calling createPortfolioUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioAssetSizeUsingDelete operation.
     * @callback module:api/PortfolioApi~deletePortfolioAssetSizeUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio asset size
     * Permanently delete a portfolio asset size record for a portfolio.
     * @param {String} portfolioAssetSizeId UUID portfolio_asset_size_id
     * @param {module:api/PortfolioApi~deletePortfolioAssetSizeUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioAssetSizeUsingDelete = function(portfolioAssetSizeId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioAssetSizeId' is set
      if (portfolioAssetSizeId === undefined || portfolioAssetSizeId === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSizeId' when calling deletePortfolioAssetSizeUsingDelete");
      }


      var pathParams = {
        'portfolio_asset_size_id': portfolioAssetSizeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioCommentUsingDelete operation.
     * @callback module:api/PortfolioApi~deletePortfolioCommentUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio commentary
     * Permanently delete a portfolio comment for a portfolio.
     * @param {String} portfolioCommentId UUID portfolio_comment_id
     * @param {module:api/PortfolioApi~deletePortfolioCommentUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioCommentUsingDelete = function(portfolioCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioCommentId' is set
      if (portfolioCommentId === undefined || portfolioCommentId === null) {
        throw new Error("Missing the required parameter 'portfolioCommentId' when calling deletePortfolioCommentUsingDelete");
      }


      var pathParams = {
        'portfolio_comment_id': portfolioCommentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment/{portfolio_comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioGoalUsingDelete operation.
     * @callback module:api/PortfolioApi~deletePortfolioGoalUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an portfolio goal
     * Permanently delete an portfolio-goal mapping.
     * @param {String} portfolioGoalId UUID portfolio_goal_id
     * @param {module:api/PortfolioApi~deletePortfolioGoalUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioGoalUsingDelete = function(portfolioGoalId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioGoalId' is set
      if (portfolioGoalId === undefined || portfolioGoalId === null) {
        throw new Error("Missing the required parameter 'portfolioGoalId' when calling deletePortfolioGoalUsingDelete");
      }


      var pathParams = {
        'portfolio_goal_id': portfolioGoalId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_goal/{portfolio_goal_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioHoldingUsingDelete operation.
     * @callback module:api/PortfolioApi~deletePortfolioHoldingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio holding
     * Permanently delete a portfolio holding record for a portfolio.
     * @param {String} portfolioHoldingId UUID portfolio_holding_id
     * @param {module:api/PortfolioApi~deletePortfolioHoldingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioHoldingUsingDelete = function(portfolioHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioHoldingId' is set
      if (portfolioHoldingId === undefined || portfolioHoldingId === null) {
        throw new Error("Missing the required parameter 'portfolioHoldingId' when calling deletePortfolioHoldingUsingDelete");
      }


      var pathParams = {
        'portfolio_holding_id': portfolioHoldingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding/{portfolio_holding_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioTransactionUsingDelete operation.
     * @callback module:api/PortfolioApi~deletePortfolioTransactionUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio transaction
     * Permanently delete a portfolio transaction record for a portfolio.
     * @param {String} portfolioTransactionId UUID portfolio_transaction_id
     * @param {module:api/PortfolioApi~deletePortfolioTransactionUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioTransactionUsingDelete = function(portfolioTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioTransactionId' is set
      if (portfolioTransactionId === undefined || portfolioTransactionId === null) {
        throw new Error("Missing the required parameter 'portfolioTransactionId' when calling deletePortfolioTransactionUsingDelete");
      }


      var pathParams = {
        'portfolio_transaction_id': portfolioTransactionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioUsingDelete operation.
     * @callback module:api/PortfolioApi~deletePortfolioUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio
     * Permanently delete a portfolio for an account.
     * @param {String} portfolioId UUID portfolio_id
     * @param {module:api/PortfolioApi~deletePortfolioUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioUsingDelete = function(portfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling deletePortfolioUsingDelete");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioAggregatedDataUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioAggregatedDataUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an portfolio aggregate data
     * Retrieve the information for a securities associated with a portfolio.
     * @param {String} portfolioId Portfolio Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showAssetClass true or false (default to true)
     * @param {Boolean} opts.showCategory true or false (default to true)
     * @param {Boolean} opts.showIndustry true or false (default to true)
     * @param {Boolean} opts.showSector true or false (default to true)
     * @param {Boolean} opts.showSecurityClass true or false (default to true)
     * @param {module:api/PortfolioApi~getPortfolioAggregatedDataUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getPortfolioAggregatedDataUsingGet = function(portfolioId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioAggregatedDataUsingGet");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
        'show_asset_class': opts['showAssetClass'],
        'show_category': opts['showCategory'],
        'show_industry': opts['showIndustry'],
        'show_sector': opts['showSector'],
        'show_security_class': opts['showSecurityClass']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/aggregate_data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioAllUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolios
     * Get the information for all portfolios assigned to all of your firm’s accounts. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/PortfolioApi~getPortfolioAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolio}
     */
    this.getPortfolioAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolio;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioAssetSizeAllUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioAssetSizeAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioAssetSizeLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio asset size
     * Retrieve the information for a portfolio asset size record for a portfolio. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/PortfolioApi~getPortfolioAssetSizeAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioAssetSizeLog}
     */
    this.getPortfolioAssetSizeAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioAssetSizeLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioAssetSizeUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioAssetSizeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioAssetSizeLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio asset size
     * Retrieve the information for a portfolio asset size record for a portfolio.
     * @param {String} portfolioAssetSizeId portfolio_asset_size_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion currency_conversion
     * @param {module:api/PortfolioApi~getPortfolioAssetSizeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioAssetSizeLog}
     */
    this.getPortfolioAssetSizeUsingGet = function(portfolioAssetSizeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioAssetSizeId' is set
      if (portfolioAssetSizeId === undefined || portfolioAssetSizeId === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSizeId' when calling getPortfolioAssetSizeUsingGet");
      }


      var pathParams = {
        'portfolio_asset_size_id': portfolioAssetSizeId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PortfolioAssetSizeLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioCommentAllUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioCommentAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio commentary
     * List all comments for all portfolios defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/PortfolioApi~getPortfolioCommentAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioComment}
     */
    this.getPortfolioCommentAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioComment;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioCommentUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioCommentUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio commentary
     * Retrieve the information for a portfolio comment for a portfolio.
     * @param {String} portfolioCommentId UUID portfolio_comment_id
     * @param {module:api/PortfolioApi~getPortfolioCommentUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioComment}
     */
    this.getPortfolioCommentUsingGet = function(portfolioCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioCommentId' is set
      if (portfolioCommentId === undefined || portfolioCommentId === null) {
        throw new Error("Missing the required parameter 'portfolioCommentId' when calling getPortfolioCommentUsingGet");
      }


      var pathParams = {
        'portfolio_comment_id': portfolioCommentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PortfolioComment;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment/{portfolio_comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioGoalAllUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioGoalAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioGoal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio goals
     * Get information for all portfolio-goal mappings defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/PortfolioApi~getPortfolioGoalAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioGoal}
     */
    this.getPortfolioGoalAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioGoal;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_goal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioGoalUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioGoalUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioGoal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an portfolio goal
     * Retrieve the information for a specific portfolio-goal mapping.
     * @param {String} portfolioGoalId UUID portfolio_goal_id
     * @param {module:api/PortfolioApi~getPortfolioGoalUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioGoal}
     */
    this.getPortfolioGoalUsingGet = function(portfolioGoalId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioGoalId' is set
      if (portfolioGoalId === undefined || portfolioGoalId === null) {
        throw new Error("Missing the required parameter 'portfolioGoalId' when calling getPortfolioGoalUsingGet");
      }


      var pathParams = {
        'portfolio_goal_id': portfolioGoalId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PortfolioGoal;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_goal/{portfolio_goal_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioHoldingAllUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioHoldingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioHoldingLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio holdings
     * Get the information for all holding records for all portfolios defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/PortfolioApi~getPortfolioHoldingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioHoldingLog}
     */
    this.getPortfolioHoldingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioHoldingLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioHoldingUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioHoldingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioHoldingLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio holding
     * Retrieve the information for a portfolio holding record for a portfolio.
     * @param {String} portfolioHoldingId UUID portfolio_holding_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/PortfolioApi~getPortfolioHoldingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioHoldingLog}
     */
    this.getPortfolioHoldingUsingGet = function(portfolioHoldingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioHoldingId' is set
      if (portfolioHoldingId === undefined || portfolioHoldingId === null) {
        throw new Error("Missing the required parameter 'portfolioHoldingId' when calling getPortfolioHoldingUsingGet");
      }


      var pathParams = {
        'portfolio_holding_id': portfolioHoldingId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PortfolioHoldingLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding/{portfolio_holding_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioTransactionAllUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioTransactionAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagePortfolioTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio transactions
     * Get the information for all transaction records for all portfolios defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/PortfolioApi~getPortfolioTransactionAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagePortfolioTransaction}
     */
    this.getPortfolioTransactionAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PagePortfolioTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioTransactionUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioTransactionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio transaction
     * Retrieve the information for a portfolio transaction record for a portfolio. 
     * @param {String} portfolioTransactionId UUID portfolio_transaction_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/PortfolioApi~getPortfolioTransactionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioTransaction}
     */
    this.getPortfolioTransactionUsingGet = function(portfolioTransactionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioTransactionId' is set
      if (portfolioTransactionId === undefined || portfolioTransactionId === null) {
        throw new Error("Missing the required parameter 'portfolioTransactionId' when calling getPortfolioTransactionUsingGet");
      }


      var pathParams = {
        'portfolio_transaction_id': portfolioTransactionId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PortfolioTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioUsingGet operation.
     * @callback module:api/PortfolioApi~getPortfolioUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio
     * Retrieve a portfolio for an account.
     * @param {String} portfolioId UUID portfolio_id
     * @param {module:api/PortfolioApi~getPortfolioUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.getPortfolioUsingGet = function(portfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioUsingGet");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioAssetSizeUsingPut operation.
     * @callback module:api/PortfolioApi~updatePortfolioAssetSizeUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioAssetSizeLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio asset size
     * Update the information for a portfolio asset size record for a portfolio.
     * @param {module:model/PortfolioAssetSizeLog} portfolioAssetSize portfolio_asset_size
     * @param {String} portfolioAssetSizeId UUID portfolio_asset_size_id
     * @param {module:api/PortfolioApi~updatePortfolioAssetSizeUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioAssetSizeLog}
     */
    this.updatePortfolioAssetSizeUsingPut = function(portfolioAssetSize, portfolioAssetSizeId, callback) {
      var postBody = portfolioAssetSize;

      // verify the required parameter 'portfolioAssetSize' is set
      if (portfolioAssetSize === undefined || portfolioAssetSize === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSize' when calling updatePortfolioAssetSizeUsingPut");
      }

      // verify the required parameter 'portfolioAssetSizeId' is set
      if (portfolioAssetSizeId === undefined || portfolioAssetSizeId === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSizeId' when calling updatePortfolioAssetSizeUsingPut");
      }


      var pathParams = {
        'portfolio_asset_size_id': portfolioAssetSizeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioAssetSizeLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioCommentUsingPut operation.
     * @callback module:api/PortfolioApi~updatePortfolioCommentUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio comment
     * Update the information for a portfolio comment for a portfolio.
     * @param {module:model/PortfolioComment} portfolioComment portfolio_comment
     * @param {String} portfolioCommentId UUID portfolio_comment_id
     * @param {module:api/PortfolioApi~updatePortfolioCommentUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioComment}
     */
    this.updatePortfolioCommentUsingPut = function(portfolioComment, portfolioCommentId, callback) {
      var postBody = portfolioComment;

      // verify the required parameter 'portfolioComment' is set
      if (portfolioComment === undefined || portfolioComment === null) {
        throw new Error("Missing the required parameter 'portfolioComment' when calling updatePortfolioCommentUsingPut");
      }

      // verify the required parameter 'portfolioCommentId' is set
      if (portfolioCommentId === undefined || portfolioCommentId === null) {
        throw new Error("Missing the required parameter 'portfolioCommentId' when calling updatePortfolioCommentUsingPut");
      }


      var pathParams = {
        'portfolio_comment_id': portfolioCommentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioComment;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment/{portfolio_comment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioGoalUsingPut operation.
     * @callback module:api/PortfolioApi~updatePortfolioGoalUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioGoal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an portfolio goal
     * Update the information for an portfolio-goal mapping.
     * @param {module:model/PortfolioGoal} portfolioGoal portfolio_goal
     * @param {String} portfolioGoalId UUID portfolio_goal_id
     * @param {module:api/PortfolioApi~updatePortfolioGoalUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioGoal}
     */
    this.updatePortfolioGoalUsingPut = function(portfolioGoal, portfolioGoalId, callback) {
      var postBody = portfolioGoal;

      // verify the required parameter 'portfolioGoal' is set
      if (portfolioGoal === undefined || portfolioGoal === null) {
        throw new Error("Missing the required parameter 'portfolioGoal' when calling updatePortfolioGoalUsingPut");
      }

      // verify the required parameter 'portfolioGoalId' is set
      if (portfolioGoalId === undefined || portfolioGoalId === null) {
        throw new Error("Missing the required parameter 'portfolioGoalId' when calling updatePortfolioGoalUsingPut");
      }


      var pathParams = {
        'portfolio_goal_id': portfolioGoalId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioGoal;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_goal/{portfolio_goal_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioHoldingUsingPut operation.
     * @callback module:api/PortfolioApi~updatePortfolioHoldingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioHoldingLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio holding
     * Update the information for a portfolio holding record for a portfolio.
     * @param {module:model/PortfolioHoldingLog} portfolioHolding portfolio_holding
     * @param {String} portfolioHoldingId UUID portfolio_holding_id
     * @param {module:api/PortfolioApi~updatePortfolioHoldingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioHoldingLog}
     */
    this.updatePortfolioHoldingUsingPut = function(portfolioHolding, portfolioHoldingId, callback) {
      var postBody = portfolioHolding;

      // verify the required parameter 'portfolioHolding' is set
      if (portfolioHolding === undefined || portfolioHolding === null) {
        throw new Error("Missing the required parameter 'portfolioHolding' when calling updatePortfolioHoldingUsingPut");
      }

      // verify the required parameter 'portfolioHoldingId' is set
      if (portfolioHoldingId === undefined || portfolioHoldingId === null) {
        throw new Error("Missing the required parameter 'portfolioHoldingId' when calling updatePortfolioHoldingUsingPut");
      }


      var pathParams = {
        'portfolio_holding_id': portfolioHoldingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioHoldingLog;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding/{portfolio_holding_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioTransactionUsingPut operation.
     * @callback module:api/PortfolioApi~updatePortfolioTransactionUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio transaction
     * Update the information for a portfolio transaction record for a portfolio.
     * @param {module:model/PortfolioTransaction} portfolioTransaction portfolio_transaction
     * @param {String} portfolioTransactionId UUID portfolio_transaction_id
     * @param {module:api/PortfolioApi~updatePortfolioTransactionUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioTransaction}
     */
    this.updatePortfolioTransactionUsingPut = function(portfolioTransaction, portfolioTransactionId, callback) {
      var postBody = portfolioTransaction;

      // verify the required parameter 'portfolioTransaction' is set
      if (portfolioTransaction === undefined || portfolioTransaction === null) {
        throw new Error("Missing the required parameter 'portfolioTransaction' when calling updatePortfolioTransactionUsingPut");
      }

      // verify the required parameter 'portfolioTransactionId' is set
      if (portfolioTransactionId === undefined || portfolioTransactionId === null) {
        throw new Error("Missing the required parameter 'portfolioTransactionId' when calling updatePortfolioTransactionUsingPut");
      }


      var pathParams = {
        'portfolio_transaction_id': portfolioTransactionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PortfolioTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioUsingPut operation.
     * @callback module:api/PortfolioApi~updatePortfolioUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio
     * Update a portfolio for an account.
     * @param {module:model/Portfolio} portfolio portfolio
     * @param {String} portfolioId UUID portfolio_id
     * @param {module:api/PortfolioApi~updatePortfolioUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.updatePortfolioUsingPut = function(portfolio, portfolioId, callback) {
      var postBody = portfolio;

      // verify the required parameter 'portfolio' is set
      if (portfolio === undefined || portfolio === null) {
        throw new Error("Missing the required parameter 'portfolio' when calling updatePortfolioUsingPut");
      }

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling updatePortfolioUsingPut");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
