/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGoalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a goal track record
        /// </summary>
        /// <remarks>
        /// Create a goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>GoalTrack</returns>
        GoalTrack CreateGoalTrackUsingPost (GoalTrack goalTrack);

        /// <summary>
        /// Create a goal track record
        /// </summary>
        /// <remarks>
        /// Create a goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>ApiResponse of GoalTrack</returns>
        ApiResponse<GoalTrack> CreateGoalTrackUsingPostWithHttpInfo (GoalTrack goalTrack);
        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a new goal for your firm that clients can customize for themselves.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>Goal</returns>
        Goal CreateGoalUsingPost (Goal goalRequest);

        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a new goal for your firm that clients can customize for themselves.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>ApiResponse of Goal</returns>
        ApiResponse<Goal> CreateGoalUsingPostWithHttpInfo (Goal goalRequest);
        /// <summary>
        /// Delete a goal track record
        /// </summary>
        /// <remarks>
        /// Permanently delete an goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns></returns>
        void DeleteGoalTrackUsingDelete (Guid? goalTrackId);

        /// <summary>
        /// Delete a goal track record
        /// </summary>
        /// <remarks>
        /// Permanently delete an goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGoalTrackUsingDeleteWithHttpInfo (Guid? goalTrackId);
        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Permanently delete a goal for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns></returns>
        void DeleteGoalUsingDelete (Guid? goalId);

        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Permanently delete a goal for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGoalUsingDeleteWithHttpInfo (Guid? goalId);
        /// <summary>
        /// List all goals
        /// </summary>
        /// <remarks>
        /// Get the details for all goals defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageGoal</returns>
        PageGoal GetGoalAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all goals
        /// </summary>
        /// <remarks>
        /// Get the details for all goals defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageGoal</returns>
        ApiResponse<PageGoal> GetGoalAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List goal asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a goal for a specified client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        List<AvailableDateDoubleVO> GetGoalAssetSizeAllUsingGet (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List goal asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a goal for a specified client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        ApiResponse<List<AvailableDateDoubleVO>> GetGoalAssetSizeAllUsingGetWithHttpInfo (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List goal holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        PagePortfolioHoldingAgg GetGoalHoldingAllUsingGet (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List goal holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        ApiResponse<PagePortfolioHoldingAgg> GetGoalHoldingAllUsingGetWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all goal track records
        /// </summary>
        /// <remarks>
        /// Get information for all goal track records stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>PageGoalTrack</returns>
        PageGoalTrack GetGoalTrackAllUsingGet (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all goal track records
        /// </summary>
        /// <remarks>
        /// Get information for all goal track records stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>ApiResponse of PageGoalTrack</returns>
        ApiResponse<PageGoalTrack> GetGoalTrackAllUsingGetWithHttpInfo (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// Retrieve a goal track record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>GoalTrack</returns>
        GoalTrack GetGoalTrackUsingGet (Guid? goalTrackId);

        /// <summary>
        /// Retrieve a goal track record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>ApiResponse of GoalTrack</returns>
        ApiResponse<GoalTrack> GetGoalTrackUsingGetWithHttpInfo (Guid? goalTrackId);
        /// <summary>
        /// List goal transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetGoalTransactionAllUsingGet (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List goal transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetGoalTransactionAllUsingGetWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve a goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Goal</returns>
        Goal GetGoalUsingGet (Guid? goalId);

        /// <summary>
        /// Retrieve a goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>ApiResponse of Goal</returns>
        ApiResponse<Goal> GetGoalUsingGetWithHttpInfo (Guid? goalId);
        /// <summary>
        /// Update a goal track record
        /// </summary>
        /// <remarks>
        /// Update the information for a goal track record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>GoalTrack</returns>
        GoalTrack UpdateGoalTrackUsingPut (Object goalTrack, Guid? goalTrackId);

        /// <summary>
        /// Update a goal track record
        /// </summary>
        /// <remarks>
        /// Update the information for a goal track record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>ApiResponse of GoalTrack</returns>
        ApiResponse<GoalTrack> UpdateGoalTrackUsingPutWithHttpInfo (Object goalTrack, Guid? goalTrackId);
        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// Update a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Goal</returns>
        Goal UpdateGoalUsingPut (Object goal, Guid? goalId);

        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// Update a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>ApiResponse of Goal</returns>
        ApiResponse<Goal> UpdateGoalUsingPutWithHttpInfo (Object goal, Guid? goalId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a goal track record
        /// </summary>
        /// <remarks>
        /// Create a goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>Task of GoalTrack</returns>
        System.Threading.Tasks.Task<GoalTrack> CreateGoalTrackUsingPostAsync (GoalTrack goalTrack);

        /// <summary>
        /// Create a goal track record
        /// </summary>
        /// <remarks>
        /// Create a goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>Task of ApiResponse (GoalTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalTrack>> CreateGoalTrackUsingPostAsyncWithHttpInfo (GoalTrack goalTrack);
        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a new goal for your firm that clients can customize for themselves.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>Task of Goal</returns>
        System.Threading.Tasks.Task<Goal> CreateGoalUsingPostAsync (Goal goalRequest);

        /// <summary>
        /// Create a goal
        /// </summary>
        /// <remarks>
        /// Create a new goal for your firm that clients can customize for themselves.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>Task of ApiResponse (Goal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Goal>> CreateGoalUsingPostAsyncWithHttpInfo (Goal goalRequest);
        /// <summary>
        /// Delete a goal track record
        /// </summary>
        /// <remarks>
        /// Permanently delete an goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGoalTrackUsingDeleteAsync (Guid? goalTrackId);

        /// <summary>
        /// Delete a goal track record
        /// </summary>
        /// <remarks>
        /// Permanently delete an goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGoalTrackUsingDeleteAsyncWithHttpInfo (Guid? goalTrackId);
        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Permanently delete a goal for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGoalUsingDeleteAsync (Guid? goalId);

        /// <summary>
        /// Delete a goal
        /// </summary>
        /// <remarks>
        /// Permanently delete a goal for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGoalUsingDeleteAsyncWithHttpInfo (Guid? goalId);
        /// <summary>
        /// List all goals
        /// </summary>
        /// <remarks>
        /// Get the details for all goals defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageGoal</returns>
        System.Threading.Tasks.Task<PageGoal> GetGoalAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all goals
        /// </summary>
        /// <remarks>
        /// Get the details for all goals defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageGoal>> GetGoalAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List goal asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a goal for a specified client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetGoalAssetSizeAllUsingGetAsync (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List goal asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a goal for a specified client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetGoalAssetSizeAllUsingGetAsyncWithHttpInfo (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List goal holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetGoalHoldingAllUsingGetAsync (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List goal holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetGoalHoldingAllUsingGetAsyncWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all goal track records
        /// </summary>
        /// <remarks>
        /// Get information for all goal track records stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of PageGoalTrack</returns>
        System.Threading.Tasks.Task<PageGoalTrack> GetGoalTrackAllUsingGetAsync (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all goal track records
        /// </summary>
        /// <remarks>
        /// Get information for all goal track records stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of ApiResponse (PageGoalTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageGoalTrack>> GetGoalTrackAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// Retrieve a goal track record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of GoalTrack</returns>
        System.Threading.Tasks.Task<GoalTrack> GetGoalTrackUsingGetAsync (Guid? goalTrackId);

        /// <summary>
        /// Retrieve a goal track record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific goal track record for a goal under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of ApiResponse (GoalTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalTrack>> GetGoalTrackUsingGetAsyncWithHttpInfo (Guid? goalTrackId);
        /// <summary>
        /// List goal transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetGoalTransactionAllUsingGetAsync (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List goal transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under portfolios associated with a particular goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetGoalTransactionAllUsingGetAsyncWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve a goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of Goal</returns>
        System.Threading.Tasks.Task<Goal> GetGoalUsingGetAsync (Guid? goalId);

        /// <summary>
        /// Retrieve a goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of ApiResponse (Goal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Goal>> GetGoalUsingGetAsyncWithHttpInfo (Guid? goalId);
        /// <summary>
        /// Update a goal track record
        /// </summary>
        /// <remarks>
        /// Update the information for a goal track record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of GoalTrack</returns>
        System.Threading.Tasks.Task<GoalTrack> UpdateGoalTrackUsingPutAsync (Object goalTrack, Guid? goalTrackId);

        /// <summary>
        /// Update a goal track record
        /// </summary>
        /// <remarks>
        /// Update the information for a goal track record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of ApiResponse (GoalTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<GoalTrack>> UpdateGoalTrackUsingPutAsyncWithHttpInfo (Object goalTrack, Guid? goalTrackId);
        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// Update a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of Goal</returns>
        System.Threading.Tasks.Task<Goal> UpdateGoalUsingPutAsync (Object goal, Guid? goalId);

        /// <summary>
        /// Update a goal
        /// </summary>
        /// <remarks>
        /// Update a goal defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of ApiResponse (Goal)</returns>
        System.Threading.Tasks.Task<ApiResponse<Goal>> UpdateGoalUsingPutAsyncWithHttpInfo (Object goal, Guid? goalId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GoalApi : IGoalApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GoalApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GoalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GoalApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a goal track record Create a goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>GoalTrack</returns>
        public GoalTrack CreateGoalTrackUsingPost (GoalTrack goalTrack)
        {
             ApiResponse<GoalTrack> localVarResponse = CreateGoalTrackUsingPostWithHttpInfo(goalTrack);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a goal track record Create a goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>ApiResponse of GoalTrack</returns>
        public ApiResponse< GoalTrack > CreateGoalTrackUsingPostWithHttpInfo (GoalTrack goalTrack)
        {
            // verify the required parameter 'goalTrack' is set
            if (goalTrack == null)
                throw new ApiException(400, "Missing required parameter 'goalTrack' when calling GoalApi->CreateGoalTrackUsingPost");

            var localVarPath = "/nucleus/v1/goal_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrack != null && goalTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoalTrackUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalTrack)));
        }

        /// <summary>
        /// Create a goal track record Create a goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>Task of GoalTrack</returns>
        public async System.Threading.Tasks.Task<GoalTrack> CreateGoalTrackUsingPostAsync (GoalTrack goalTrack)
        {
             ApiResponse<GoalTrack> localVarResponse = await CreateGoalTrackUsingPostAsyncWithHttpInfo(goalTrack);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a goal track record Create a goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goalTrack</param>
        /// <returns>Task of ApiResponse (GoalTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GoalTrack>> CreateGoalTrackUsingPostAsyncWithHttpInfo (GoalTrack goalTrack)
        {
            // verify the required parameter 'goalTrack' is set
            if (goalTrack == null)
                throw new ApiException(400, "Missing required parameter 'goalTrack' when calling GoalApi->CreateGoalTrackUsingPost");

            var localVarPath = "/nucleus/v1/goal_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrack != null && goalTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoalTrackUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalTrack)));
        }

        /// <summary>
        /// Create a goal Create a new goal for your firm that clients can customize for themselves.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>Goal</returns>
        public Goal CreateGoalUsingPost (Goal goalRequest)
        {
             ApiResponse<Goal> localVarResponse = CreateGoalUsingPostWithHttpInfo(goalRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a goal Create a new goal for your firm that clients can customize for themselves.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>ApiResponse of Goal</returns>
        public ApiResponse< Goal > CreateGoalUsingPostWithHttpInfo (Goal goalRequest)
        {
            // verify the required parameter 'goalRequest' is set
            if (goalRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalRequest' when calling GoalApi->CreateGoalUsingPost");

            var localVarPath = "/nucleus/v1/goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalRequest != null && goalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Goal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Goal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Goal)));
        }

        /// <summary>
        /// Create a goal Create a new goal for your firm that clients can customize for themselves.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>Task of Goal</returns>
        public async System.Threading.Tasks.Task<Goal> CreateGoalUsingPostAsync (Goal goalRequest)
        {
             ApiResponse<Goal> localVarResponse = await CreateGoalUsingPostAsyncWithHttpInfo(goalRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a goal Create a new goal for your firm that clients can customize for themselves.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalRequest">goalRequest</param>
        /// <returns>Task of ApiResponse (Goal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Goal>> CreateGoalUsingPostAsyncWithHttpInfo (Goal goalRequest)
        {
            // verify the required parameter 'goalRequest' is set
            if (goalRequest == null)
                throw new ApiException(400, "Missing required parameter 'goalRequest' when calling GoalApi->CreateGoalUsingPost");

            var localVarPath = "/nucleus/v1/goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalRequest != null && goalRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateGoalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Goal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Goal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Goal)));
        }

        /// <summary>
        /// Delete a goal track record Permanently delete an goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns></returns>
        public void DeleteGoalTrackUsingDelete (Guid? goalTrackId)
        {
             DeleteGoalTrackUsingDeleteWithHttpInfo(goalTrackId);
        }

        /// <summary>
        /// Delete a goal track record Permanently delete an goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGoalTrackUsingDeleteWithHttpInfo (Guid? goalTrackId)
        {
            // verify the required parameter 'goalTrackId' is set
            if (goalTrackId == null)
                throw new ApiException(400, "Missing required parameter 'goalTrackId' when calling GoalApi->DeleteGoalTrackUsingDelete");

            var localVarPath = "/nucleus/v1/goal_track/{goal_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrackId != null) localVarPathParams.Add("goal_track_id", this.Configuration.ApiClient.ParameterToString(goalTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoalTrackUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a goal track record Permanently delete an goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGoalTrackUsingDeleteAsync (Guid? goalTrackId)
        {
             await DeleteGoalTrackUsingDeleteAsyncWithHttpInfo(goalTrackId);

        }

        /// <summary>
        /// Delete a goal track record Permanently delete an goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGoalTrackUsingDeleteAsyncWithHttpInfo (Guid? goalTrackId)
        {
            // verify the required parameter 'goalTrackId' is set
            if (goalTrackId == null)
                throw new ApiException(400, "Missing required parameter 'goalTrackId' when calling GoalApi->DeleteGoalTrackUsingDelete");

            var localVarPath = "/nucleus/v1/goal_track/{goal_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrackId != null) localVarPathParams.Add("goal_track_id", this.Configuration.ApiClient.ParameterToString(goalTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoalTrackUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a goal Permanently delete a goal for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns></returns>
        public void DeleteGoalUsingDelete (Guid? goalId)
        {
             DeleteGoalUsingDeleteWithHttpInfo(goalId);
        }

        /// <summary>
        /// Delete a goal Permanently delete a goal for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGoalUsingDeleteWithHttpInfo (Guid? goalId)
        {
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->DeleteGoalUsingDelete");

            var localVarPath = "/nucleus/v1/goal/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoalUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a goal Permanently delete a goal for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGoalUsingDeleteAsync (Guid? goalId)
        {
             await DeleteGoalUsingDeleteAsyncWithHttpInfo(goalId);

        }

        /// <summary>
        /// Delete a goal Permanently delete a goal for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGoalUsingDeleteAsyncWithHttpInfo (Guid? goalId)
        {
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->DeleteGoalUsingDelete");

            var localVarPath = "/nucleus/v1/goal/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGoalUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all goals Get the details for all goals defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageGoal</returns>
        public PageGoal GetGoalAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageGoal> localVarResponse = GetGoalAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all goals Get the details for all goals defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageGoal</returns>
        public ApiResponse< PageGoal > GetGoalAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageGoal)));
        }

        /// <summary>
        /// List all goals Get the details for all goals defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageGoal</returns>
        public async System.Threading.Tasks.Task<PageGoal> GetGoalAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageGoal> localVarResponse = await GetGoalAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all goals Get the details for all goals defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageGoal>> GetGoalAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageGoal)));
        }

        /// <summary>
        /// List goal asset sizes Get a list of asset sizes per date for a goal for a specified client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        public List<AvailableDateDoubleVO> GetGoalAssetSizeAllUsingGet (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = GetGoalAssetSizeAllUsingGetWithHttpInfo(clientId, goalId, currencyConversion, endDate, getLatest, portfolioGoal, sortType, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List goal asset sizes Get a list of asset sizes per date for a goal for a specified client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        public ApiResponse< List<AvailableDateDoubleVO> > GetGoalAssetSizeAllUsingGetWithHttpInfo (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling GoalApi->GetGoalAssetSizeAllUsingGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalAssetSizeAllUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// List goal asset sizes Get a list of asset sizes per date for a goal for a specified client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetGoalAssetSizeAllUsingGetAsync (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = await GetGoalAssetSizeAllUsingGetAsyncWithHttpInfo(clientId, goalId, currencyConversion, endDate, getLatest, portfolioGoal, sortType, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List goal asset sizes Get a list of asset sizes per date for a goal for a specified client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="getLatest">get_latest (optional, default to false)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetGoalAssetSizeAllUsingGetAsyncWithHttpInfo (Guid? clientId, Guid? goalId, string currencyConversion = null, DateTime? endDate = null, bool? getLatest = null, bool? portfolioGoal = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling GoalApi->GetGoalAssetSizeAllUsingGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalAssetSizeAllUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// List goal holdings Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        public PagePortfolioHoldingAgg GetGoalHoldingAllUsingGet (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = GetGoalHoldingAllUsingGetWithHttpInfo(clientId, goalId, ascending, currencyConversion, endDate, filter, orderBy, page, portfolioGoal, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List goal holdings Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        public ApiResponse< PagePortfolioHoldingAgg > GetGoalHoldingAllUsingGetWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling GoalApi->GetGoalHoldingAllUsingGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalHoldingAllUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// List goal holdings Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        public async System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetGoalHoldingAllUsingGetAsync (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = await GetGoalHoldingAllUsingGetAsyncWithHttpInfo(clientId, goalId, ascending, currencyConversion, endDate, filter, orderBy, page, portfolioGoal, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List goal holdings Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetGoalHoldingAllUsingGetAsyncWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling GoalApi->GetGoalHoldingAllUsingGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalHoldingAllUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// List all goal track records Get information for all goal track records stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>PageGoalTrack</returns>
        public PageGoalTrack GetGoalTrackAllUsingGet (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PageGoalTrack> localVarResponse = GetGoalTrackAllUsingGetWithHttpInfo(ascending, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all goal track records Get information for all goal track records stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>ApiResponse of PageGoalTrack</returns>
        public ApiResponse< PageGoalTrack > GetGoalTrackAllUsingGetWithHttpInfo (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {

            var localVarPath = "/nucleus/v1/goal_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalTrackAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageGoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageGoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageGoalTrack)));
        }

        /// <summary>
        /// List all goal track records Get information for all goal track records stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of PageGoalTrack</returns>
        public async System.Threading.Tasks.Task<PageGoalTrack> GetGoalTrackAllUsingGetAsync (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PageGoalTrack> localVarResponse = await GetGoalTrackAllUsingGetAsyncWithHttpInfo(ascending, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all goal track records Get information for all goal track records stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of ApiResponse (PageGoalTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageGoalTrack>> GetGoalTrackAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {

            var localVarPath = "/nucleus/v1/goal_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalTrackAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageGoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageGoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageGoalTrack)));
        }

        /// <summary>
        /// Retrieve a goal track record Retrieve the information for a specific goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>GoalTrack</returns>
        public GoalTrack GetGoalTrackUsingGet (Guid? goalTrackId)
        {
             ApiResponse<GoalTrack> localVarResponse = GetGoalTrackUsingGetWithHttpInfo(goalTrackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a goal track record Retrieve the information for a specific goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>ApiResponse of GoalTrack</returns>
        public ApiResponse< GoalTrack > GetGoalTrackUsingGetWithHttpInfo (Guid? goalTrackId)
        {
            // verify the required parameter 'goalTrackId' is set
            if (goalTrackId == null)
                throw new ApiException(400, "Missing required parameter 'goalTrackId' when calling GoalApi->GetGoalTrackUsingGet");

            var localVarPath = "/nucleus/v1/goal_track/{goal_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrackId != null) localVarPathParams.Add("goal_track_id", this.Configuration.ApiClient.ParameterToString(goalTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalTrackUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalTrack)));
        }

        /// <summary>
        /// Retrieve a goal track record Retrieve the information for a specific goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of GoalTrack</returns>
        public async System.Threading.Tasks.Task<GoalTrack> GetGoalTrackUsingGetAsync (Guid? goalTrackId)
        {
             ApiResponse<GoalTrack> localVarResponse = await GetGoalTrackUsingGetAsyncWithHttpInfo(goalTrackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a goal track record Retrieve the information for a specific goal track record for a goal under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of ApiResponse (GoalTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GoalTrack>> GetGoalTrackUsingGetAsyncWithHttpInfo (Guid? goalTrackId)
        {
            // verify the required parameter 'goalTrackId' is set
            if (goalTrackId == null)
                throw new ApiException(400, "Missing required parameter 'goalTrackId' when calling GoalApi->GetGoalTrackUsingGet");

            var localVarPath = "/nucleus/v1/goal_track/{goal_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrackId != null) localVarPathParams.Add("goal_track_id", this.Configuration.ApiClient.ParameterToString(goalTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalTrackUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalTrack)));
        }

        /// <summary>
        /// List goal transactions Get the information for all transactions under portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetGoalTransactionAllUsingGet (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetGoalTransactionAllUsingGetWithHttpInfo(clientId, goalId, ascending, currencyConversion, endDate, filter, orderBy, page, portfolioGoal, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List goal transactions Get the information for all transactions under portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetGoalTransactionAllUsingGetWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling GoalApi->GetGoalTransactionAllUsingGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List goal transactions Get the information for all transactions under portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetGoalTransactionAllUsingGetAsync (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetGoalTransactionAllUsingGetAsyncWithHttpInfo(clientId, goalId, ascending, currencyConversion, endDate, filter, orderBy, page, portfolioGoal, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List goal transactions Get the information for all transactions under portfolios associated with a particular goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetGoalTransactionAllUsingGetAsyncWithHttpInfo (Guid? clientId, Guid? goalId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, bool? portfolioGoal = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling GoalApi->GetGoalTransactionAllUsingGet");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// Retrieve a goal Retrieve the information for a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Goal</returns>
        public Goal GetGoalUsingGet (Guid? goalId)
        {
             ApiResponse<Goal> localVarResponse = GetGoalUsingGetWithHttpInfo(goalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a goal Retrieve the information for a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>ApiResponse of Goal</returns>
        public ApiResponse< Goal > GetGoalUsingGetWithHttpInfo (Guid? goalId)
        {
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Goal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Goal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Goal)));
        }

        /// <summary>
        /// Retrieve a goal Retrieve the information for a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of Goal</returns>
        public async System.Threading.Tasks.Task<Goal> GetGoalUsingGetAsync (Guid? goalId)
        {
             ApiResponse<Goal> localVarResponse = await GetGoalUsingGetAsyncWithHttpInfo(goalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a goal Retrieve the information for a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of ApiResponse (Goal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Goal>> GetGoalUsingGetAsyncWithHttpInfo (Guid? goalId)
        {
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->GetGoalUsingGet");

            var localVarPath = "/nucleus/v1/goal/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGoalUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Goal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Goal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Goal)));
        }

        /// <summary>
        /// Update a goal track record Update the information for a goal track record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>GoalTrack</returns>
        public GoalTrack UpdateGoalTrackUsingPut (Object goalTrack, Guid? goalTrackId)
        {
             ApiResponse<GoalTrack> localVarResponse = UpdateGoalTrackUsingPutWithHttpInfo(goalTrack, goalTrackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal track record Update the information for a goal track record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>ApiResponse of GoalTrack</returns>
        public ApiResponse< GoalTrack > UpdateGoalTrackUsingPutWithHttpInfo (Object goalTrack, Guid? goalTrackId)
        {
            // verify the required parameter 'goalTrack' is set
            if (goalTrack == null)
                throw new ApiException(400, "Missing required parameter 'goalTrack' when calling GoalApi->UpdateGoalTrackUsingPut");
            // verify the required parameter 'goalTrackId' is set
            if (goalTrackId == null)
                throw new ApiException(400, "Missing required parameter 'goalTrackId' when calling GoalApi->UpdateGoalTrackUsingPut");

            var localVarPath = "/nucleus/v1/goal_track/{goal_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrackId != null) localVarPathParams.Add("goal_track_id", this.Configuration.ApiClient.ParameterToString(goalTrackId)); // path parameter
            if (goalTrack != null && goalTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoalTrackUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalTrack)));
        }

        /// <summary>
        /// Update a goal track record Update the information for a goal track record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of GoalTrack</returns>
        public async System.Threading.Tasks.Task<GoalTrack> UpdateGoalTrackUsingPutAsync (Object goalTrack, Guid? goalTrackId)
        {
             ApiResponse<GoalTrack> localVarResponse = await UpdateGoalTrackUsingPutAsyncWithHttpInfo(goalTrack, goalTrackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a goal track record Update the information for a goal track record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goalTrack">goal_track</param>
        /// <param name="goalTrackId">UUID goal_track_id</param>
        /// <returns>Task of ApiResponse (GoalTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GoalTrack>> UpdateGoalTrackUsingPutAsyncWithHttpInfo (Object goalTrack, Guid? goalTrackId)
        {
            // verify the required parameter 'goalTrack' is set
            if (goalTrack == null)
                throw new ApiException(400, "Missing required parameter 'goalTrack' when calling GoalApi->UpdateGoalTrackUsingPut");
            // verify the required parameter 'goalTrackId' is set
            if (goalTrackId == null)
                throw new ApiException(400, "Missing required parameter 'goalTrackId' when calling GoalApi->UpdateGoalTrackUsingPut");

            var localVarPath = "/nucleus/v1/goal_track/{goal_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalTrackId != null) localVarPathParams.Add("goal_track_id", this.Configuration.ApiClient.ParameterToString(goalTrackId)); // path parameter
            if (goalTrack != null && goalTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goalTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goalTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoalTrackUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GoalTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GoalTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GoalTrack)));
        }

        /// <summary>
        /// Update a goal Update a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Goal</returns>
        public Goal UpdateGoalUsingPut (Object goal, Guid? goalId)
        {
             ApiResponse<Goal> localVarResponse = UpdateGoalUsingPutWithHttpInfo(goal, goalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a goal Update a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>ApiResponse of Goal</returns>
        public ApiResponse< Goal > UpdateGoalUsingPutWithHttpInfo (Object goal, Guid? goalId)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalApi->UpdateGoalUsingPut");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->UpdateGoalUsingPut");

            var localVarPath = "/nucleus/v1/goal/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoalUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Goal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Goal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Goal)));
        }

        /// <summary>
        /// Update a goal Update a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of Goal</returns>
        public async System.Threading.Tasks.Task<Goal> UpdateGoalUsingPutAsync (Object goal, Guid? goalId)
        {
             ApiResponse<Goal> localVarResponse = await UpdateGoalUsingPutAsyncWithHttpInfo(goal, goalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a goal Update a goal defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="goal">goal</param>
        /// <param name="goalId">UUID goal_id</param>
        /// <returns>Task of ApiResponse (Goal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Goal>> UpdateGoalUsingPutAsyncWithHttpInfo (Object goal, Guid? goalId)
        {
            // verify the required parameter 'goal' is set
            if (goal == null)
                throw new ApiException(400, "Missing required parameter 'goal' when calling GoalApi->UpdateGoalUsingPut");
            // verify the required parameter 'goalId' is set
            if (goalId == null)
                throw new ApiException(400, "Missing required parameter 'goalId' when calling GoalApi->UpdateGoalUsingPut");

            var localVarPath = "/nucleus/v1/goal/{goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (goalId != null) localVarPathParams.Add("goal_id", this.Configuration.ApiClient.ParameterToString(goalId)); // path parameter
            if (goal != null && goal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(goal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = goal; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateGoalUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Goal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Goal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Goal)));
        }

    }
}
