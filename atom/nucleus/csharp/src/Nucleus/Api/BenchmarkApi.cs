/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBenchmarkApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a benchmark
        /// </summary>
        /// <remarks>
        /// Create a new benchmark for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>Benchmark</returns>
        Benchmark CreateBenchmarkUsingPost (Benchmark benchmark);

        /// <summary>
        /// Create a benchmark
        /// </summary>
        /// <remarks>
        /// Create a new benchmark for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>ApiResponse of Benchmark</returns>
        ApiResponse<Benchmark> CreateBenchmarkUsingPostWithHttpInfo (Benchmark benchmark);
        /// <summary>
        /// Delete a benchmark
        /// </summary>
        /// <remarks>
        /// Permanently delete a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns></returns>
        void DeleteBenchmarkUsingDelete (Guid? benchmarkId);

        /// <summary>
        /// Delete a benchmark
        /// </summary>
        /// <remarks>
        /// Permanently delete a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBenchmarkUsingDeleteWithHttpInfo (Guid? benchmarkId);
        /// <summary>
        /// List all benchmarks
        /// </summary>
        /// <remarks>
        /// Get details for all benchmarks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBenchmark</returns>
        PageBenchmark GetBenchmarkAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all benchmarks
        /// </summary>
        /// <remarks>
        /// Get details for all benchmarks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBenchmark</returns>
        ApiResponse<PageBenchmark> GetBenchmarkAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all benchmark asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;DateDoubleVO&gt;</returns>
        List<DateDoubleVO> GetBenchmarkAssetSizeAllUsingGet (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all benchmark asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;DateDoubleVO&gt;</returns>
        ApiResponse<List<DateDoubleVO>> GetBenchmarkAssetSizeAllUsingGetWithHttpInfo (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve a benchmark
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Benchmark</returns>
        Benchmark GetBenchmarkUsingGet (Guid? benchmarkId);

        /// <summary>
        /// Retrieve a benchmark
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>ApiResponse of Benchmark</returns>
        ApiResponse<Benchmark> GetBenchmarkUsingGetWithHttpInfo (Guid? benchmarkId);
        /// <summary>
        /// Update a benchmark
        /// </summary>
        /// <remarks>
        /// Updated the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Benchmark</returns>
        Benchmark UpdateBenchmarkUsingPut (Object benchmark, Guid? benchmarkId);

        /// <summary>
        /// Update a benchmark
        /// </summary>
        /// <remarks>
        /// Updated the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>ApiResponse of Benchmark</returns>
        ApiResponse<Benchmark> UpdateBenchmarkUsingPutWithHttpInfo (Object benchmark, Guid? benchmarkId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a benchmark
        /// </summary>
        /// <remarks>
        /// Create a new benchmark for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>Task of Benchmark</returns>
        System.Threading.Tasks.Task<Benchmark> CreateBenchmarkUsingPostAsync (Benchmark benchmark);

        /// <summary>
        /// Create a benchmark
        /// </summary>
        /// <remarks>
        /// Create a new benchmark for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>Task of ApiResponse (Benchmark)</returns>
        System.Threading.Tasks.Task<ApiResponse<Benchmark>> CreateBenchmarkUsingPostAsyncWithHttpInfo (Benchmark benchmark);
        /// <summary>
        /// Delete a benchmark
        /// </summary>
        /// <remarks>
        /// Permanently delete a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBenchmarkUsingDeleteAsync (Guid? benchmarkId);

        /// <summary>
        /// Delete a benchmark
        /// </summary>
        /// <remarks>
        /// Permanently delete a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBenchmarkUsingDeleteAsyncWithHttpInfo (Guid? benchmarkId);
        /// <summary>
        /// List all benchmarks
        /// </summary>
        /// <remarks>
        /// Get details for all benchmarks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBenchmark</returns>
        System.Threading.Tasks.Task<PageBenchmark> GetBenchmarkAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all benchmarks
        /// </summary>
        /// <remarks>
        /// Get details for all benchmarks defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBenchmark)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageBenchmark>> GetBenchmarkAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all benchmark asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;DateDoubleVO&gt;</returns>
        System.Threading.Tasks.Task<List<DateDoubleVO>> GetBenchmarkAssetSizeAllUsingGetAsync (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all benchmark asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateDoubleVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DateDoubleVO>>> GetBenchmarkAssetSizeAllUsingGetAsyncWithHttpInfo (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve a benchmark
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of Benchmark</returns>
        System.Threading.Tasks.Task<Benchmark> GetBenchmarkUsingGetAsync (Guid? benchmarkId);

        /// <summary>
        /// Retrieve a benchmark
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of ApiResponse (Benchmark)</returns>
        System.Threading.Tasks.Task<ApiResponse<Benchmark>> GetBenchmarkUsingGetAsyncWithHttpInfo (Guid? benchmarkId);
        /// <summary>
        /// Update a benchmark
        /// </summary>
        /// <remarks>
        /// Updated the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of Benchmark</returns>
        System.Threading.Tasks.Task<Benchmark> UpdateBenchmarkUsingPutAsync (Object benchmark, Guid? benchmarkId);

        /// <summary>
        /// Update a benchmark
        /// </summary>
        /// <remarks>
        /// Updated the information for a benchmark.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of ApiResponse (Benchmark)</returns>
        System.Threading.Tasks.Task<ApiResponse<Benchmark>> UpdateBenchmarkUsingPutAsyncWithHttpInfo (Object benchmark, Guid? benchmarkId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BenchmarkApi : IBenchmarkApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BenchmarkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BenchmarkApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BenchmarkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BenchmarkApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a benchmark Create a new benchmark for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>Benchmark</returns>
        public Benchmark CreateBenchmarkUsingPost (Benchmark benchmark)
        {
             ApiResponse<Benchmark> localVarResponse = CreateBenchmarkUsingPostWithHttpInfo(benchmark);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a benchmark Create a new benchmark for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>ApiResponse of Benchmark</returns>
        public ApiResponse< Benchmark > CreateBenchmarkUsingPostWithHttpInfo (Benchmark benchmark)
        {
            // verify the required parameter 'benchmark' is set
            if (benchmark == null)
                throw new ApiException(400, "Missing required parameter 'benchmark' when calling BenchmarkApi->CreateBenchmarkUsingPost");

            var localVarPath = "/nucleus/v1/benchmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmark != null && benchmark.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(benchmark); // http body (model) parameter
            }
            else
            {
                localVarPostBody = benchmark; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBenchmarkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Benchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Benchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Benchmark)));
        }

        /// <summary>
        /// Create a benchmark Create a new benchmark for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>Task of Benchmark</returns>
        public async System.Threading.Tasks.Task<Benchmark> CreateBenchmarkUsingPostAsync (Benchmark benchmark)
        {
             ApiResponse<Benchmark> localVarResponse = await CreateBenchmarkUsingPostAsyncWithHttpInfo(benchmark);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a benchmark Create a new benchmark for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <returns>Task of ApiResponse (Benchmark)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Benchmark>> CreateBenchmarkUsingPostAsyncWithHttpInfo (Benchmark benchmark)
        {
            // verify the required parameter 'benchmark' is set
            if (benchmark == null)
                throw new ApiException(400, "Missing required parameter 'benchmark' when calling BenchmarkApi->CreateBenchmarkUsingPost");

            var localVarPath = "/nucleus/v1/benchmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmark != null && benchmark.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(benchmark); // http body (model) parameter
            }
            else
            {
                localVarPostBody = benchmark; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBenchmarkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Benchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Benchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Benchmark)));
        }

        /// <summary>
        /// Delete a benchmark Permanently delete a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns></returns>
        public void DeleteBenchmarkUsingDelete (Guid? benchmarkId)
        {
             DeleteBenchmarkUsingDeleteWithHttpInfo(benchmarkId);
        }

        /// <summary>
        /// Delete a benchmark Permanently delete a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBenchmarkUsingDeleteWithHttpInfo (Guid? benchmarkId)
        {
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->DeleteBenchmarkUsingDelete");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBenchmarkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a benchmark Permanently delete a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBenchmarkUsingDeleteAsync (Guid? benchmarkId)
        {
             await DeleteBenchmarkUsingDeleteAsyncWithHttpInfo(benchmarkId);

        }

        /// <summary>
        /// Delete a benchmark Permanently delete a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBenchmarkUsingDeleteAsyncWithHttpInfo (Guid? benchmarkId)
        {
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->DeleteBenchmarkUsingDelete");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBenchmarkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all benchmarks Get details for all benchmarks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBenchmark</returns>
        public PageBenchmark GetBenchmarkAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBenchmark> localVarResponse = GetBenchmarkAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all benchmarks Get details for all benchmarks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBenchmark</returns>
        public ApiResponse< PageBenchmark > GetBenchmarkAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/benchmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBenchmarkAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBenchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBenchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBenchmark)));
        }

        /// <summary>
        /// List all benchmarks Get details for all benchmarks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBenchmark</returns>
        public async System.Threading.Tasks.Task<PageBenchmark> GetBenchmarkAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBenchmark> localVarResponse = await GetBenchmarkAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all benchmarks Get details for all benchmarks defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBenchmark)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageBenchmark>> GetBenchmarkAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/benchmark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBenchmarkAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBenchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBenchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBenchmark)));
        }

        /// <summary>
        /// List all benchmark asset sizes Get a list of asset sizes by date for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;DateDoubleVO&gt;</returns>
        public List<DateDoubleVO> GetBenchmarkAssetSizeAllUsingGet (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<DateDoubleVO>> localVarResponse = GetBenchmarkAssetSizeAllUsingGetWithHttpInfo(benchmarkId, endDate, sortType, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all benchmark asset sizes Get a list of asset sizes by date for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;DateDoubleVO&gt;</returns>
        public ApiResponse< List<DateDoubleVO> > GetBenchmarkAssetSizeAllUsingGetWithHttpInfo (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->GetBenchmarkAssetSizeAllUsingGet");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBenchmarkAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateDoubleVO>)));
        }

        /// <summary>
        /// List all benchmark asset sizes Get a list of asset sizes by date for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;DateDoubleVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DateDoubleVO>> GetBenchmarkAssetSizeAllUsingGetAsync (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<DateDoubleVO>> localVarResponse = await GetBenchmarkAssetSizeAllUsingGetAsyncWithHttpInfo(benchmarkId, endDate, sortType, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all benchmark asset sizes Get a list of asset sizes by date for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="sortType">sort_type (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateDoubleVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DateDoubleVO>>> GetBenchmarkAssetSizeAllUsingGetAsyncWithHttpInfo (Guid? benchmarkId, DateTime? endDate = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->GetBenchmarkAssetSizeAllUsingGet");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBenchmarkAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateDoubleVO>)));
        }

        /// <summary>
        /// Retrieve a benchmark Retrieve the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Benchmark</returns>
        public Benchmark GetBenchmarkUsingGet (Guid? benchmarkId)
        {
             ApiResponse<Benchmark> localVarResponse = GetBenchmarkUsingGetWithHttpInfo(benchmarkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a benchmark Retrieve the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>ApiResponse of Benchmark</returns>
        public ApiResponse< Benchmark > GetBenchmarkUsingGetWithHttpInfo (Guid? benchmarkId)
        {
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->GetBenchmarkUsingGet");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBenchmarkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Benchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Benchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Benchmark)));
        }

        /// <summary>
        /// Retrieve a benchmark Retrieve the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of Benchmark</returns>
        public async System.Threading.Tasks.Task<Benchmark> GetBenchmarkUsingGetAsync (Guid? benchmarkId)
        {
             ApiResponse<Benchmark> localVarResponse = await GetBenchmarkUsingGetAsyncWithHttpInfo(benchmarkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a benchmark Retrieve the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of ApiResponse (Benchmark)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Benchmark>> GetBenchmarkUsingGetAsyncWithHttpInfo (Guid? benchmarkId)
        {
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->GetBenchmarkUsingGet");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBenchmarkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Benchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Benchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Benchmark)));
        }

        /// <summary>
        /// Update a benchmark Updated the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Benchmark</returns>
        public Benchmark UpdateBenchmarkUsingPut (Object benchmark, Guid? benchmarkId)
        {
             ApiResponse<Benchmark> localVarResponse = UpdateBenchmarkUsingPutWithHttpInfo(benchmark, benchmarkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a benchmark Updated the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>ApiResponse of Benchmark</returns>
        public ApiResponse< Benchmark > UpdateBenchmarkUsingPutWithHttpInfo (Object benchmark, Guid? benchmarkId)
        {
            // verify the required parameter 'benchmark' is set
            if (benchmark == null)
                throw new ApiException(400, "Missing required parameter 'benchmark' when calling BenchmarkApi->UpdateBenchmarkUsingPut");
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->UpdateBenchmarkUsingPut");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter
            if (benchmark != null && benchmark.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(benchmark); // http body (model) parameter
            }
            else
            {
                localVarPostBody = benchmark; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBenchmarkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Benchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Benchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Benchmark)));
        }

        /// <summary>
        /// Update a benchmark Updated the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of Benchmark</returns>
        public async System.Threading.Tasks.Task<Benchmark> UpdateBenchmarkUsingPutAsync (Object benchmark, Guid? benchmarkId)
        {
             ApiResponse<Benchmark> localVarResponse = await UpdateBenchmarkUsingPutAsyncWithHttpInfo(benchmark, benchmarkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a benchmark Updated the information for a benchmark.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="benchmark">benchmark</param>
        /// <param name="benchmarkId">UUID benchmark_id</param>
        /// <returns>Task of ApiResponse (Benchmark)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Benchmark>> UpdateBenchmarkUsingPutAsyncWithHttpInfo (Object benchmark, Guid? benchmarkId)
        {
            // verify the required parameter 'benchmark' is set
            if (benchmark == null)
                throw new ApiException(400, "Missing required parameter 'benchmark' when calling BenchmarkApi->UpdateBenchmarkUsingPut");
            // verify the required parameter 'benchmarkId' is set
            if (benchmarkId == null)
                throw new ApiException(400, "Missing required parameter 'benchmarkId' when calling BenchmarkApi->UpdateBenchmarkUsingPut");

            var localVarPath = "/nucleus/v1/benchmark/{benchmark_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (benchmarkId != null) localVarPathParams.Add("benchmark_id", this.Configuration.ApiClient.ParameterToString(benchmarkId)); // path parameter
            if (benchmark != null && benchmark.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(benchmark); // http body (model) parameter
            }
            else
            {
                localVarPostBody = benchmark; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBenchmarkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Benchmark>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Benchmark) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Benchmark)));
        }

    }
}
