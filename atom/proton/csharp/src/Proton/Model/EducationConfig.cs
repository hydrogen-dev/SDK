/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// EducationConfig
    /// </summary>
    [DataContract]
    public partial class EducationConfig :  IEquatable<EducationConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EducationConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EducationConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EducationConfig" /> class.
        /// </summary>
        /// <param name="totalAnnualCost">totalAnnualCost (required).</param>
        /// <param name="startAge">startAge (required).</param>
        /// <param name="endAge">endAge (required).</param>
        public EducationConfig(decimal? totalAnnualCost = default(decimal?), int? startAge = default(int?), int? endAge = default(int?))
        {
            // to ensure "totalAnnualCost" is required (not null)
            if (totalAnnualCost == null)
            {
                throw new InvalidDataException("totalAnnualCost is a required property for EducationConfig and cannot be null");
            }
            else
            {
                this.TotalAnnualCost = totalAnnualCost;
            }
            // to ensure "startAge" is required (not null)
            if (startAge == null)
            {
                throw new InvalidDataException("startAge is a required property for EducationConfig and cannot be null");
            }
            else
            {
                this.StartAge = startAge;
            }
            // to ensure "endAge" is required (not null)
            if (endAge == null)
            {
                throw new InvalidDataException("endAge is a required property for EducationConfig and cannot be null");
            }
            else
            {
                this.EndAge = endAge;
            }
        }
        
        /// <summary>
        /// Gets or Sets TotalAnnualCost
        /// </summary>
        [DataMember(Name="total_annual_cost", EmitDefaultValue=false)]
        public decimal? TotalAnnualCost { get; set; }

        /// <summary>
        /// Gets or Sets StartAge
        /// </summary>
        [DataMember(Name="start_age", EmitDefaultValue=false)]
        public int? StartAge { get; set; }

        /// <summary>
        /// Gets or Sets EndAge
        /// </summary>
        [DataMember(Name="end_age", EmitDefaultValue=false)]
        public int? EndAge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EducationConfig {\n");
            sb.Append("  TotalAnnualCost: ").Append(TotalAnnualCost).Append("\n");
            sb.Append("  StartAge: ").Append(StartAge).Append("\n");
            sb.Append("  EndAge: ").Append(EndAge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EducationConfig);
        }

        /// <summary>
        /// Returns true if EducationConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of EducationConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EducationConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalAnnualCost == input.TotalAnnualCost ||
                    (this.TotalAnnualCost != null &&
                    this.TotalAnnualCost.Equals(input.TotalAnnualCost))
                ) && 
                (
                    this.StartAge == input.StartAge ||
                    (this.StartAge != null &&
                    this.StartAge.Equals(input.StartAge))
                ) && 
                (
                    this.EndAge == input.EndAge ||
                    (this.EndAge != null &&
                    this.EndAge.Equals(input.EndAge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalAnnualCost != null)
                    hashCode = hashCode * 59 + this.TotalAnnualCost.GetHashCode();
                if (this.StartAge != null)
                    hashCode = hashCode * 59 + this.StartAge.GetHashCode();
                if (this.EndAge != null)
                    hashCode = hashCode * 59 + this.EndAge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TotalAnnualCost (decimal?) minimum
            if(this.TotalAnnualCost < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalAnnualCost, must be a value greater than or equal to 0.", new [] { "TotalAnnualCost" });
            }

            // StartAge (int?) minimum
            if(this.StartAge < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartAge, must be a value greater than or equal to 0.", new [] { "StartAge" });
            }

            // EndAge (int?) minimum
            if(this.EndAge < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EndAge, must be a value greater than or equal to 0.", new [] { "EndAge" });
            }

            yield break;
        }
    }

}
