# coding: utf-8

"""
    Hydrogen Proton API

    Financial engineering module of Hydrogen Atom  # noqa: E501

    OpenAPI spec version: 1.9.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from proton_api.configuration import Configuration


class EducationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_annual_cost': 'float',
        'start_age': 'int',
        'end_age': 'int'
    }

    attribute_map = {
        'total_annual_cost': 'total_annual_cost',
        'start_age': 'start_age',
        'end_age': 'end_age'
    }

    def __init__(self, total_annual_cost=None, start_age=None, end_age=None, _configuration=None):  # noqa: E501
        """EducationConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_annual_cost = None
        self._start_age = None
        self._end_age = None
        self.discriminator = None

        self.total_annual_cost = total_annual_cost
        self.start_age = start_age
        self.end_age = end_age

    @property
    def total_annual_cost(self):
        """Gets the total_annual_cost of this EducationConfig.  # noqa: E501


        :return: The total_annual_cost of this EducationConfig.  # noqa: E501
        :rtype: float
        """
        return self._total_annual_cost

    @total_annual_cost.setter
    def total_annual_cost(self, total_annual_cost):
        """Sets the total_annual_cost of this EducationConfig.


        :param total_annual_cost: The total_annual_cost of this EducationConfig.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and total_annual_cost is None:
            raise ValueError("Invalid value for `total_annual_cost`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                total_annual_cost is not None and total_annual_cost < 0):  # noqa: E501
            raise ValueError("Invalid value for `total_annual_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_annual_cost = total_annual_cost

    @property
    def start_age(self):
        """Gets the start_age of this EducationConfig.  # noqa: E501


        :return: The start_age of this EducationConfig.  # noqa: E501
        :rtype: int
        """
        return self._start_age

    @start_age.setter
    def start_age(self, start_age):
        """Sets the start_age of this EducationConfig.


        :param start_age: The start_age of this EducationConfig.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and start_age is None:
            raise ValueError("Invalid value for `start_age`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                start_age is not None and start_age < 0):  # noqa: E501
            raise ValueError("Invalid value for `start_age`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_age = start_age

    @property
    def end_age(self):
        """Gets the end_age of this EducationConfig.  # noqa: E501


        :return: The end_age of this EducationConfig.  # noqa: E501
        :rtype: int
        """
        return self._end_age

    @end_age.setter
    def end_age(self, end_age):
        """Sets the end_age of this EducationConfig.


        :param end_age: The end_age of this EducationConfig.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and end_age is None:
            raise ValueError("Invalid value for `end_age`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                end_age is not None and end_age < 0):  # noqa: E501
            raise ValueError("Invalid value for `end_age`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_age = end_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EducationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EducationConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EducationConfig):
            return True

        return self.to_dict() != other.to_dict()
