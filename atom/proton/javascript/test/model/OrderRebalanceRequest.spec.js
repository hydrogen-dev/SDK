/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderRebalanceRequest', function() {
      beforeEach(function() {
        instance = new HydrogenProtonApi.OrderRebalanceRequest();
      });

      it('should create an instance of OrderRebalanceRequest', function() {
        // TODO: update the code to test OrderRebalanceRequest
        expect(instance).to.be.a(HydrogenProtonApi.OrderRebalanceRequest);
      });

      it('should have the property nonFractional (base name: "non_fractional")', function() {
        // TODO: update the code to test the property nonFractional
        expect(instance).to.have.property('nonFractional');
        // expect(instance.nonFractional).to.be(expectedValueLiteral);
      });

      it('should have the property orderScope (base name: "order_scope")', function() {
        // TODO: update the code to test the property orderScope
        expect(instance).to.have.property('orderScope');
        // expect(instance.orderScope).to.be(expectedValueLiteral);
      });

      it('should have the property buyThreshold (base name: "buy_threshold")', function() {
        // TODO: update the code to test the property buyThreshold
        expect(instance).to.have.property('buyThreshold');
        // expect(instance.buyThreshold).to.be(expectedValueLiteral);
      });

      it('should have the property commitOrders (base name: "commit_orders")', function() {
        // TODO: update the code to test the property commitOrders
        expect(instance).to.have.property('commitOrders');
        // expect(instance.commitOrders).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "account_id")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property portThreshold (base name: "port_threshold")', function() {
        // TODO: update the code to test the property portThreshold
        expect(instance).to.have.property('portThreshold');
        // expect(instance.portThreshold).to.be(expectedValueLiteral);
      });

      it('should have the property useCashAvailable (base name: "use_cash_available")', function() {
        // TODO: update the code to test the property useCashAvailable
        expect(instance).to.have.property('useCashAvailable');
        // expect(instance.useCashAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property useStrategic (base name: "use_strategic")', function() {
        // TODO: update the code to test the property useStrategic
        expect(instance).to.have.property('useStrategic');
        // expect(instance.useStrategic).to.be(expectedValueLiteral);
      });

      it('should have the property sellTransactionCodeId (base name: "sell_transaction_code_id")', function() {
        // TODO: update the code to test the property sellTransactionCodeId
        expect(instance).to.have.property('sellTransactionCodeId');
        // expect(instance.sellTransactionCodeId).to.be(expectedValueLiteral);
      });

      it('should have the property buyTransactionCodeId (base name: "buy_transaction_code_id")', function() {
        // TODO: update the code to test the property buyTransactionCodeId
        expect(instance).to.have.property('buyTransactionCodeId');
        // expect(instance.buyTransactionCodeId).to.be(expectedValueLiteral);
      });

      it('should have the property cashPortfolioId (base name: "cash_portfolio_id")', function() {
        // TODO: update the code to test the property cashPortfolioId
        expect(instance).to.have.property('cashPortfolioId');
        // expect(instance.cashPortfolioId).to.be(expectedValueLiteral);
      });

      it('should have the property restrictionsOn (base name: "restrictions_on")', function() {
        // TODO: update the code to test the property restrictionsOn
        expect(instance).to.have.property('restrictionsOn');
        // expect(instance.restrictionsOn).to.be(expectedValueLiteral);
      });

      it('should have the property sellThreshold (base name: "sell_threshold")', function() {
        // TODO: update the code to test the property sellThreshold
        expect(instance).to.have.property('sellThreshold');
        // expect(instance.sellThreshold).to.be(expectedValueLiteral);
      });

      it('should have the property portfolioId (base name: "portfolio_id")', function() {
        // TODO: update the code to test the property portfolioId
        expect(instance).to.have.property('portfolioId');
        // expect(instance.portfolioId).to.be(expectedValueLiteral);
      });

    });
  });

}));
