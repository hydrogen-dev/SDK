/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Proton.Client;
using Proton.ModelEntity;

namespace Proton.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessFinancialManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Business Financial Health Check
        /// </summary>
        /// <remarks>
        /// Calculate a series of financial ratios to assess business financial health
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> BusinessFinancialHealthCheck (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest);

        /// <summary>
        /// Business Financial Health Check
        /// </summary>
        /// <remarks>
        /// Calculate a series of financial ratios to assess business financial health
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> BusinessFinancialHealthCheckWithHttpInfo (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest);
        /// <summary>
        /// Cash Analysis
        /// </summary>
        /// <remarks>
        /// Analyze cash activity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> CashAnalysis (CashAnalysisRequest cashAnalysisRequest);

        /// <summary>
        /// Cash Analysis
        /// </summary>
        /// <remarks>
        /// Analyze cash activity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> CashAnalysisWithHttpInfo (CashAnalysisRequest cashAnalysisRequest);
        /// <summary>
        /// Customer Analysis
        /// </summary>
        /// <remarks>
        /// Analyze customer revenues over a time period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> CustomerAnalysis (CustomerAnalysisRequest customerAnalysisRequest);

        /// <summary>
        /// Customer Analysis
        /// </summary>
        /// <remarks>
        /// Analyze customer revenues over a time period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> CustomerAnalysisWithHttpInfo (CustomerAnalysisRequest customerAnalysisRequest);
        /// <summary>
        /// Financial Statement Analysis
        /// </summary>
        /// <remarks>
        /// Analyze financial statement accounting data for a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> FinancialStatementAnalysis (FinancialStatementAnalysisRequest financialStatementAnalysisRequest);

        /// <summary>
        /// Financial Statement Analysis
        /// </summary>
        /// <remarks>
        /// Analyze financial statement accounting data for a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> FinancialStatementAnalysisWithHttpInfo (FinancialStatementAnalysisRequest financialStatementAnalysisRequest);
        /// <summary>
        /// Invoice Analysis
        /// </summary>
        /// <remarks>
        /// Analyze invoices to understand the context of money owed and paid to a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> InvoiceAnalysis (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest);

        /// <summary>
        /// Invoice Analysis
        /// </summary>
        /// <remarks>
        /// Analyze invoices to understand the context of money owed and paid to a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> InvoiceAnalysisWithHttpInfo (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Business Financial Health Check
        /// </summary>
        /// <remarks>
        /// Calculate a series of financial ratios to assess business financial health
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> BusinessFinancialHealthCheckAsync (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest);

        /// <summary>
        /// Business Financial Health Check
        /// </summary>
        /// <remarks>
        /// Calculate a series of financial ratios to assess business financial health
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> BusinessFinancialHealthCheckAsyncWithHttpInfo (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest);
        /// <summary>
        /// Cash Analysis
        /// </summary>
        /// <remarks>
        /// Analyze cash activity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> CashAnalysisAsync (CashAnalysisRequest cashAnalysisRequest);

        /// <summary>
        /// Cash Analysis
        /// </summary>
        /// <remarks>
        /// Analyze cash activity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> CashAnalysisAsyncWithHttpInfo (CashAnalysisRequest cashAnalysisRequest);
        /// <summary>
        /// Customer Analysis
        /// </summary>
        /// <remarks>
        /// Analyze customer revenues over a time period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> CustomerAnalysisAsync (CustomerAnalysisRequest customerAnalysisRequest);

        /// <summary>
        /// Customer Analysis
        /// </summary>
        /// <remarks>
        /// Analyze customer revenues over a time period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> CustomerAnalysisAsyncWithHttpInfo (CustomerAnalysisRequest customerAnalysisRequest);
        /// <summary>
        /// Financial Statement Analysis
        /// </summary>
        /// <remarks>
        /// Analyze financial statement accounting data for a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> FinancialStatementAnalysisAsync (FinancialStatementAnalysisRequest financialStatementAnalysisRequest);

        /// <summary>
        /// Financial Statement Analysis
        /// </summary>
        /// <remarks>
        /// Analyze financial statement accounting data for a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> FinancialStatementAnalysisAsyncWithHttpInfo (FinancialStatementAnalysisRequest financialStatementAnalysisRequest);
        /// <summary>
        /// Invoice Analysis
        /// </summary>
        /// <remarks>
        /// Analyze invoices to understand the context of money owed and paid to a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> InvoiceAnalysisAsync (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest);

        /// <summary>
        /// Invoice Analysis
        /// </summary>
        /// <remarks>
        /// Analyze invoices to understand the context of money owed and paid to a business
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> InvoiceAnalysisAsyncWithHttpInfo (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessFinancialManagementApi : IBusinessFinancialManagementApi
    {
        private Proton.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessFinancialManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessFinancialManagementApi(String basePath)
        {
            this.Configuration = new Proton.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessFinancialManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessFinancialManagementApi(Proton.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Proton.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Proton.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Proton.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Business Financial Health Check Calculate a series of financial ratios to assess business financial health
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> BusinessFinancialHealthCheck (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = BusinessFinancialHealthCheckWithHttpInfo(businessFinancialHealthCheckRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Business Financial Health Check Calculate a series of financial ratios to assess business financial health
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > BusinessFinancialHealthCheckWithHttpInfo (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest)
        {
            // verify the required parameter 'businessFinancialHealthCheckRequest' is set
            if (businessFinancialHealthCheckRequest == null)
                throw new ApiException(400, "Missing required parameter 'businessFinancialHealthCheckRequest' when calling BusinessFinancialManagementApi->BusinessFinancialHealthCheck");

            var localVarPath = "/business/financial_health_check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (businessFinancialHealthCheckRequest != null && businessFinancialHealthCheckRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessFinancialHealthCheckRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessFinancialHealthCheckRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessFinancialHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Business Financial Health Check Calculate a series of financial ratios to assess business financial health
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> BusinessFinancialHealthCheckAsync (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await BusinessFinancialHealthCheckAsyncWithHttpInfo(businessFinancialHealthCheckRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Business Financial Health Check Calculate a series of financial ratios to assess business financial health
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessFinancialHealthCheckRequest">Request payload for Business Financial Health Check</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> BusinessFinancialHealthCheckAsyncWithHttpInfo (BusinessFinancialHealthCheckRequest businessFinancialHealthCheckRequest)
        {
            // verify the required parameter 'businessFinancialHealthCheckRequest' is set
            if (businessFinancialHealthCheckRequest == null)
                throw new ApiException(400, "Missing required parameter 'businessFinancialHealthCheckRequest' when calling BusinessFinancialManagementApi->BusinessFinancialHealthCheck");

            var localVarPath = "/business/financial_health_check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (businessFinancialHealthCheckRequest != null && businessFinancialHealthCheckRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessFinancialHealthCheckRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessFinancialHealthCheckRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessFinancialHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Cash Analysis Analyze cash activity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> CashAnalysis (CashAnalysisRequest cashAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = CashAnalysisWithHttpInfo(cashAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cash Analysis Analyze cash activity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > CashAnalysisWithHttpInfo (CashAnalysisRequest cashAnalysisRequest)
        {
            // verify the required parameter 'cashAnalysisRequest' is set
            if (cashAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'cashAnalysisRequest' when calling BusinessFinancialManagementApi->CashAnalysis");

            var localVarPath = "/business/cash_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (cashAnalysisRequest != null && cashAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cashAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cashAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Cash Analysis Analyze cash activity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> CashAnalysisAsync (CashAnalysisRequest cashAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await CashAnalysisAsyncWithHttpInfo(cashAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cash Analysis Analyze cash activity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashAnalysisRequest">Request payload for Cash Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> CashAnalysisAsyncWithHttpInfo (CashAnalysisRequest cashAnalysisRequest)
        {
            // verify the required parameter 'cashAnalysisRequest' is set
            if (cashAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'cashAnalysisRequest' when calling BusinessFinancialManagementApi->CashAnalysis");

            var localVarPath = "/business/cash_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (cashAnalysisRequest != null && cashAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cashAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cashAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Customer Analysis Analyze customer revenues over a time period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> CustomerAnalysis (CustomerAnalysisRequest customerAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = CustomerAnalysisWithHttpInfo(customerAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Customer Analysis Analyze customer revenues over a time period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > CustomerAnalysisWithHttpInfo (CustomerAnalysisRequest customerAnalysisRequest)
        {
            // verify the required parameter 'customerAnalysisRequest' is set
            if (customerAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'customerAnalysisRequest' when calling BusinessFinancialManagementApi->CustomerAnalysis");

            var localVarPath = "/business/customer_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (customerAnalysisRequest != null && customerAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customerAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Customer Analysis Analyze customer revenues over a time period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> CustomerAnalysisAsync (CustomerAnalysisRequest customerAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await CustomerAnalysisAsyncWithHttpInfo(customerAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Customer Analysis Analyze customer revenues over a time period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAnalysisRequest">Request payload for Customer Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> CustomerAnalysisAsyncWithHttpInfo (CustomerAnalysisRequest customerAnalysisRequest)
        {
            // verify the required parameter 'customerAnalysisRequest' is set
            if (customerAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'customerAnalysisRequest' when calling BusinessFinancialManagementApi->CustomerAnalysis");

            var localVarPath = "/business/customer_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (customerAnalysisRequest != null && customerAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customerAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CustomerAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Financial Statement Analysis Analyze financial statement accounting data for a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> FinancialStatementAnalysis (FinancialStatementAnalysisRequest financialStatementAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = FinancialStatementAnalysisWithHttpInfo(financialStatementAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Financial Statement Analysis Analyze financial statement accounting data for a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > FinancialStatementAnalysisWithHttpInfo (FinancialStatementAnalysisRequest financialStatementAnalysisRequest)
        {
            // verify the required parameter 'financialStatementAnalysisRequest' is set
            if (financialStatementAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'financialStatementAnalysisRequest' when calling BusinessFinancialManagementApi->FinancialStatementAnalysis");

            var localVarPath = "/business/financial_statement_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (financialStatementAnalysisRequest != null && financialStatementAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(financialStatementAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = financialStatementAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinancialStatementAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Financial Statement Analysis Analyze financial statement accounting data for a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> FinancialStatementAnalysisAsync (FinancialStatementAnalysisRequest financialStatementAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await FinancialStatementAnalysisAsyncWithHttpInfo(financialStatementAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Financial Statement Analysis Analyze financial statement accounting data for a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialStatementAnalysisRequest">Request payload for Financial Statement Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> FinancialStatementAnalysisAsyncWithHttpInfo (FinancialStatementAnalysisRequest financialStatementAnalysisRequest)
        {
            // verify the required parameter 'financialStatementAnalysisRequest' is set
            if (financialStatementAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'financialStatementAnalysisRequest' when calling BusinessFinancialManagementApi->FinancialStatementAnalysis");

            var localVarPath = "/business/financial_statement_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (financialStatementAnalysisRequest != null && financialStatementAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(financialStatementAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = financialStatementAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinancialStatementAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Invoice Analysis Analyze invoices to understand the context of money owed and paid to a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> InvoiceAnalysis (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = InvoiceAnalysisWithHttpInfo(invoiceAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invoice Analysis Analyze invoices to understand the context of money owed and paid to a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > InvoiceAnalysisWithHttpInfo (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest)
        {
            // verify the required parameter 'invoiceAnalysisRequest' is set
            if (invoiceAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'invoiceAnalysisRequest' when calling BusinessFinancialManagementApi->InvoiceAnalysis");

            var localVarPath = "/business/invoice_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (invoiceAnalysisRequest != null && invoiceAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Invoice Analysis Analyze invoices to understand the context of money owed and paid to a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> InvoiceAnalysisAsync (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await InvoiceAnalysisAsyncWithHttpInfo(invoiceAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invoice Analysis Analyze invoices to understand the context of money owed and paid to a business
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceAnalysisRequest">Request payload for Invoice Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> InvoiceAnalysisAsyncWithHttpInfo (BusinessInvoiceAnalysisRequest invoiceAnalysisRequest)
        {
            // verify the required parameter 'invoiceAnalysisRequest' is set
            if (invoiceAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'invoiceAnalysisRequest' when calling BusinessFinancialManagementApi->InvoiceAnalysis");

            var localVarPath = "/business/invoice_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (invoiceAnalysisRequest != null && invoiceAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvoiceAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

    }
}
