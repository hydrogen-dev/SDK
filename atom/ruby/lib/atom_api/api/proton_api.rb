=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'uri'

module AtomApi
  class ProtonApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Annuity calculator - accumulation horizon
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AnnuityAccumulationResponse]
    def annuity_calculator_accumulation_horizon(payload, opts = {})
      data, _status_code, _headers = annuity_calculator_accumulation_horizon_with_http_info(payload, opts)
      data
    end

    # Annuity calculator - accumulation horizon
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnnuityAccumulationResponse, Fixnum, Hash)>] AnnuityAccumulationResponse data, response status code and response headers
    def annuity_calculator_accumulation_horizon_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.annuity_calculator_accumulation_horizon ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.annuity_calculator_accumulation_horizon"
      end
      # resource path
      local_var_path = '/proton/v1/annuity_calculator/accumulation_horizon'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnnuityAccumulationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#annuity_calculator_accumulation_horizon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Annuity calculator - annuity amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AnnuityAmountResponse]
    def annuity_calculator_annuity_amount(payload, opts = {})
      data, _status_code, _headers = annuity_calculator_annuity_amount_with_http_info(payload, opts)
      data
    end

    # Annuity calculator - annuity amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnnuityAmountResponse, Fixnum, Hash)>] AnnuityAmountResponse data, response status code and response headers
    def annuity_calculator_annuity_amount_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.annuity_calculator_annuity_amount ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.annuity_calculator_annuity_amount"
      end
      # resource path
      local_var_path = '/proton/v1/annuity_calculator/annuity_amount'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnnuityAmountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#annuity_calculator_annuity_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Annuity calculator - decumulation horizon
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AnnuityDecumulationResponse]
    def annuity_calculator_decumulation_horizon(payload, opts = {})
      data, _status_code, _headers = annuity_calculator_decumulation_horizon_with_http_info(payload, opts)
      data
    end

    # Annuity calculator - decumulation horizon
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnnuityDecumulationResponse, Fixnum, Hash)>] AnnuityDecumulationResponse data, response status code and response headers
    def annuity_calculator_decumulation_horizon_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.annuity_calculator_decumulation_horizon ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.annuity_calculator_decumulation_horizon"
      end
      # resource path
      local_var_path = '/proton/v1/annuity_calculator/decumulation_horizon'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnnuityDecumulationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#annuity_calculator_decumulation_horizon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Annuity calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AnnuityDepositamountResponse]
    def annuity_calculator_deposit_amount(payload, opts = {})
      data, _status_code, _headers = annuity_calculator_deposit_amount_with_http_info(payload, opts)
      data
    end

    # Annuity calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnnuityDepositamountResponse, Fixnum, Hash)>] AnnuityDepositamountResponse data, response status code and response headers
    def annuity_calculator_deposit_amount_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.annuity_calculator_deposit_amount ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.annuity_calculator_deposit_amount"
      end
      # resource path
      local_var_path = '/proton/v1/annuity_calculator/deposit_amount'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnnuityDepositamountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#annuity_calculator_deposit_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Annuity calculator - initial balance
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AnnuityInitialbalanceResponse]
    def annuity_calculator_initial_balance(payload, opts = {})
      data, _status_code, _headers = annuity_calculator_initial_balance_with_http_info(payload, opts)
      data
    end

    # Annuity calculator - initial balance
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnnuityInitialbalanceResponse, Fixnum, Hash)>] AnnuityInitialbalanceResponse data, response status code and response headers
    def annuity_calculator_initial_balance_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.annuity_calculator_initial_balance ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.annuity_calculator_initial_balance"
      end
      # resource path
      local_var_path = '/proton/v1/annuity_calculator/initial_balance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnnuityInitialbalanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#annuity_calculator_initial_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Dimensional risk score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [DimRiskScoreResponse]
    def dimensional_risk_score(payload, opts = {})
      data, _status_code, _headers = dimensional_risk_score_with_http_info(payload, opts)
      data
    end

    # Dimensional risk score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DimRiskScoreResponse, Fixnum, Hash)>] DimRiskScoreResponse data, response status code and response headers
    def dimensional_risk_score_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.dimensional_risk_score ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.dimensional_risk_score"
      end
      # resource path
      local_var_path = '/proton/v1/dimensional_risk_score'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DimRiskScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#dimensional_risk_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Education calculator - total annual cost
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [EducationCalculatorAnnualcostResponse]
    def education_calculator_annual_cost(payload, opts = {})
      data, _status_code, _headers = education_calculator_annual_cost_with_http_info(payload, opts)
      data
    end

    # Education calculator - total annual cost
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationCalculatorAnnualcostResponse, Fixnum, Hash)>] EducationCalculatorAnnualcostResponse data, response status code and response headers
    def education_calculator_annual_cost_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.education_calculator_annual_cost ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.education_calculator_annual_cost"
      end
      # resource path
      local_var_path = '/proton/v1/education_calculator/annual_cost'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationCalculatorAnnualcostResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#education_calculator_annual_cost\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Education calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [EducationCalculatorDepositamountResponse]
    def education_calculator_deposit_amount(payload, opts = {})
      data, _status_code, _headers = education_calculator_deposit_amount_with_http_info(payload, opts)
      data
    end

    # Education calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationCalculatorDepositamountResponse, Fixnum, Hash)>] EducationCalculatorDepositamountResponse data, response status code and response headers
    def education_calculator_deposit_amount_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.education_calculator_deposit_amount ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.education_calculator_deposit_amount"
      end
      # resource path
      local_var_path = '/proton/v1/education_calculator/deposit_amount'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationCalculatorDepositamountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#education_calculator_deposit_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Education calculator - percent covered
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [EducationCalculatorPctcoveredResponse]
    def education_calculator_percent_covered(payload, opts = {})
      data, _status_code, _headers = education_calculator_percent_covered_with_http_info(payload, opts)
      data
    end

    # Education calculator - percent covered
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EducationCalculatorPctcoveredResponse, Fixnum, Hash)>] EducationCalculatorPctcoveredResponse data, response status code and response headers
    def education_calculator_percent_covered_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.education_calculator_percent_covered ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.education_calculator_percent_covered"
      end
      # resource path
      local_var_path = '/proton/v1/education_calculator/percent_covered'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EducationCalculatorPctcoveredResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#education_calculator_percent_covered\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Emergency fund calculator
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [EmergencyFundResponse]
    def emergency_fund_calculator(payload, opts = {})
      data, _status_code, _headers = emergency_fund_calculator_with_http_info(payload, opts)
      data
    end

    # Emergency fund calculator
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmergencyFundResponse, Fixnum, Hash)>] EmergencyFundResponse data, response status code and response headers
    def emergency_fund_calculator_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.emergency_fund_calculator ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.emergency_fund_calculator"
      end
      # resource path
      local_var_path = '/proton/v1/emergency_fund_calculator'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmergencyFundResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#emergency_fund_calculator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Event study
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [EventStudyResponse]
    def event_study(payload, opts = {})
      data, _status_code, _headers = event_study_with_http_info(payload, opts)
      data
    end

    # Event study
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventStudyResponse, Fixnum, Hash)>] EventStudyResponse data, response status code and response headers
    def event_study_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.event_study ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.event_study"
      end
      # resource path
      local_var_path = '/proton/v1/event_study'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EventStudyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#event_study\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Financial health check
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [HealthCheckResponse]
    def financial_health_check(payload, opts = {})
      data, _status_code, _headers = financial_health_check_with_http_info(payload, opts)
      data
    end

    # Financial health check
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(HealthCheckResponse, Fixnum, Hash)>] HealthCheckResponse data, response status code and response headers
    def financial_health_check_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.financial_health_check ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.financial_health_check"
      end
      # resource path
      local_var_path = '/proton/v1/financial_health_check'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HealthCheckResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#financial_health_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Goal accumulation allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GoalAllocationResponse]
    def goal_accumulation_allocation(payload, opts = {})
      data, _status_code, _headers = goal_accumulation_allocation_with_http_info(payload, opts)
      data
    end

    # Goal accumulation allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalAllocationResponse, Fixnum, Hash)>] GoalAllocationResponse data, response status code and response headers
    def goal_accumulation_allocation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.goal_accumulation_allocation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.goal_accumulation_allocation"
      end
      # resource path
      local_var_path = '/proton/v1/goal_accumulation/allocation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#goal_accumulation_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Goal accumulation recommendation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GoalRecommendationResponse]
    def goal_accumulation_recommendation(payload, opts = {})
      data, _status_code, _headers = goal_accumulation_recommendation_with_http_info(payload, opts)
      data
    end

    # Goal accumulation recommendation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalRecommendationResponse, Fixnum, Hash)>] GoalRecommendationResponse data, response status code and response headers
    def goal_accumulation_recommendation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.goal_accumulation_recommendation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.goal_accumulation_recommendation"
      end
      # resource path
      local_var_path = '/proton/v1/goal_accumulation/recommendation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalRecommendationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#goal_accumulation_recommendation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Goal accumulation status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GoalStatusResponse]
    def goal_accumulation_status(payload, opts = {})
      data, _status_code, _headers = goal_accumulation_status_with_http_info(payload, opts)
      data
    end

    # Goal accumulation status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalStatusResponse, Fixnum, Hash)>] GoalStatusResponse data, response status code and response headers
    def goal_accumulation_status_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.goal_accumulation_status ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.goal_accumulation_status"
      end
      # resource path
      local_var_path = '/proton/v1/goal_accumulation/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#goal_accumulation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Goal decumulation allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GoalAllocationResponse]
    def goal_decumulation_allocation(payload, opts = {})
      data, _status_code, _headers = goal_decumulation_allocation_with_http_info(payload, opts)
      data
    end

    # Goal decumulation allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalAllocationResponse, Fixnum, Hash)>] GoalAllocationResponse data, response status code and response headers
    def goal_decumulation_allocation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.goal_decumulation_allocation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.goal_decumulation_allocation"
      end
      # resource path
      local_var_path = '/proton/v1/goal_decumulation/allocation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#goal_decumulation_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Goal decumulation recommendation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GoalRecommendationResponse]
    def goal_decumulation_recommendation(payload, opts = {})
      data, _status_code, _headers = goal_decumulation_recommendation_with_http_info(payload, opts)
      data
    end

    # Goal decumulation recommendation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalRecommendationResponse, Fixnum, Hash)>] GoalRecommendationResponse data, response status code and response headers
    def goal_decumulation_recommendation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.goal_decumulation_recommendation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.goal_decumulation_recommendation"
      end
      # resource path
      local_var_path = '/proton/v1/goal_decumulation/recommendation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalRecommendationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#goal_decumulation_recommendation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Goal decumulation status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GoalStatusResponse]
    def goal_decumulation_status(payload, opts = {})
      data, _status_code, _headers = goal_decumulation_status_with_http_info(payload, opts)
      data
    end

    # Goal decumulation status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalStatusResponse, Fixnum, Hash)>] GoalStatusResponse data, response status code and response headers
    def goal_decumulation_status_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.goal_decumulation_status ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.goal_decumulation_status"
      end
      # resource path
      local_var_path = '/proton/v1/goal_decumulation/status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#goal_decumulation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Life insurance needs calculator
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [LifeInsuranceNeedsResponse]
    def life_insurance_needs_calculator(payload, opts = {})
      data, _status_code, _headers = life_insurance_needs_calculator_with_http_info(payload, opts)
      data
    end

    # Life insurance needs calculator
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LifeInsuranceNeedsResponse, Fixnum, Hash)>] LifeInsuranceNeedsResponse data, response status code and response headers
    def life_insurance_needs_calculator_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.life_insurance_needs_calculator ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.life_insurance_needs_calculator"
      end
      # resource path
      local_var_path = '/proton/v1/life_insurance/needs_calculator'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LifeInsuranceNeedsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#life_insurance_needs_calculator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Model backtest
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [BacktestResponse]
    def model_backtest(payload, opts = {})
      data, _status_code, _headers = model_backtest_with_http_info(payload, opts)
      data
    end

    # Model backtest
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BacktestResponse, Fixnum, Hash)>] BacktestResponse data, response status code and response headers
    def model_backtest_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.model_backtest ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.model_backtest"
      end
      # resource path
      local_var_path = '/proton/v1/backtest'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BacktestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#model_backtest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Monte Carlo
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [MonteCarloResponse]
    def monte_carlo(payload, opts = {})
      data, _status_code, _headers = monte_carlo_with_http_info(payload, opts)
      data
    end

    # Monte Carlo
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MonteCarloResponse, Fixnum, Hash)>] MonteCarloResponse data, response status code and response headers
    def monte_carlo_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.monte_carlo ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.monte_carlo"
      end
      # resource path
      local_var_path = '/proton/v1/monte_carlo'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MonteCarloResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#monte_carlo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mortgage calculator - down payment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [MortgageCalculatorDownpaymentResponse]
    def mortgage_calculator_down_payment(payload, opts = {})
      data, _status_code, _headers = mortgage_calculator_down_payment_with_http_info(payload, opts)
      data
    end

    # Mortgage calculator - down payment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MortgageCalculatorDownpaymentResponse, Fixnum, Hash)>] MortgageCalculatorDownpaymentResponse data, response status code and response headers
    def mortgage_calculator_down_payment_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.mortgage_calculator_down_payment ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.mortgage_calculator_down_payment"
      end
      # resource path
      local_var_path = '/proton/v1/mortgage_calculator/down_payment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MortgageCalculatorDownpaymentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#mortgage_calculator_down_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mortgage calculator - home price
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [MortgageCalculatorHomepriceResponse]
    def mortgage_calculator_home_price(payload, opts = {})
      data, _status_code, _headers = mortgage_calculator_home_price_with_http_info(payload, opts)
      data
    end

    # Mortgage calculator - home price
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MortgageCalculatorHomepriceResponse, Fixnum, Hash)>] MortgageCalculatorHomepriceResponse data, response status code and response headers
    def mortgage_calculator_home_price_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.mortgage_calculator_home_price ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.mortgage_calculator_home_price"
      end
      # resource path
      local_var_path = '/proton/v1/mortgage_calculator/home_price'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MortgageCalculatorHomepriceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#mortgage_calculator_home_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mortgage calculator - periodic payment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [MortgageCalculatorPeriodicpaymentResponse]
    def mortgage_calculator_periodic_payment(payload, opts = {})
      data, _status_code, _headers = mortgage_calculator_periodic_payment_with_http_info(payload, opts)
      data
    end

    # Mortgage calculator - periodic payment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MortgageCalculatorPeriodicpaymentResponse, Fixnum, Hash)>] MortgageCalculatorPeriodicpaymentResponse data, response status code and response headers
    def mortgage_calculator_periodic_payment_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.mortgage_calculator_periodic_payment ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.mortgage_calculator_periodic_payment"
      end
      # resource path
      local_var_path = '/proton/v1/mortgage_calculator/periodic_payment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MortgageCalculatorPeriodicpaymentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#mortgage_calculator_periodic_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Mean-variance optimization
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [MvoResponse]
    def mvo(payload, opts = {})
      data, _status_code, _headers = mvo_with_http_info(payload, opts)
      data
    end

    # Mean-variance optimization
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MvoResponse, Fixnum, Hash)>] MvoResponse data, response status code and response headers
    def mvo_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.mvo ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.mvo"
      end
      # resource path
      local_var_path = '/proton/v1/mvo'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MvoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#mvo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Portfolio diversification score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PfloDiversificationScoreResponse]
    def portfolio_diversification_score(payload, opts = {})
      data, _status_code, _headers = portfolio_diversification_score_with_http_info(payload, opts)
      data
    end

    # Portfolio diversification score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PfloDiversificationScoreResponse, Fixnum, Hash)>] PfloDiversificationScoreResponse data, response status code and response headers
    def portfolio_diversification_score_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.portfolio_diversification_score ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.portfolio_diversification_score"
      end
      # resource path
      local_var_path = '/proton/v1/diversification_score'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PfloDiversificationScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#portfolio_diversification_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Portfolio optimization score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PfloOptimizationScoreResponse]
    def portfolio_optimization_score(payload, opts = {})
      data, _status_code, _headers = portfolio_optimization_score_with_http_info(payload, opts)
      data
    end

    # Portfolio optimization score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PfloOptimizationScoreResponse, Fixnum, Hash)>] PfloOptimizationScoreResponse data, response status code and response headers
    def portfolio_optimization_score_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.portfolio_optimization_score ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.portfolio_optimization_score"
      end
      # resource path
      local_var_path = '/proton/v1/portfolio_optimization_score'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PfloOptimizationScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#portfolio_optimization_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Portfolio what-if
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PortfolioWhatIfResponse]
    def portfolio_what_if(payload, opts = {})
      data, _status_code, _headers = portfolio_what_if_with_http_info(payload, opts)
      data
    end

    # Portfolio what-if
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortfolioWhatIfResponse, Fixnum, Hash)>] PortfolioWhatIfResponse data, response status code and response headers
    def portfolio_what_if_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.portfolio_what_if ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.portfolio_what_if"
      end
      # resource path
      local_var_path = '/proton/v1/portfolio_what_if'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortfolioWhatIfResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#portfolio_what_if\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Purchase calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PurchaseCalculatorDepositamountResponse]
    def purchase_calculator_deposit_amount(payload, opts = {})
      data, _status_code, _headers = purchase_calculator_deposit_amount_with_http_info(payload, opts)
      data
    end

    # Purchase calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PurchaseCalculatorDepositamountResponse, Fixnum, Hash)>] PurchaseCalculatorDepositamountResponse data, response status code and response headers
    def purchase_calculator_deposit_amount_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.purchase_calculator_deposit_amount ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.purchase_calculator_deposit_amount"
      end
      # resource path
      local_var_path = '/proton/v1/purchase_calculator/deposit_amount'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PurchaseCalculatorDepositamountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#purchase_calculator_deposit_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Purchase calculator - horizon
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PurchaseCalculatorPurchasehorizonResponse]
    def purchase_calculator_horizon(payload, opts = {})
      data, _status_code, _headers = purchase_calculator_horizon_with_http_info(payload, opts)
      data
    end

    # Purchase calculator - horizon
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PurchaseCalculatorPurchasehorizonResponse, Fixnum, Hash)>] PurchaseCalculatorPurchasehorizonResponse data, response status code and response headers
    def purchase_calculator_horizon_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.purchase_calculator_horizon ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.purchase_calculator_horizon"
      end
      # resource path
      local_var_path = '/proton/v1/purchase_calculator/horizon'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PurchaseCalculatorPurchasehorizonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#purchase_calculator_horizon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Purchase calculator - purchase amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PurchaseCalculatorPurchaseamountResponse]
    def purchase_calculator_purchase_amount(payload, opts = {})
      data, _status_code, _headers = purchase_calculator_purchase_amount_with_http_info(payload, opts)
      data
    end

    # Purchase calculator - purchase amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PurchaseCalculatorPurchaseamountResponse, Fixnum, Hash)>] PurchaseCalculatorPurchaseamountResponse data, response status code and response headers
    def purchase_calculator_purchase_amount_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.purchase_calculator_purchase_amount ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.purchase_calculator_purchase_amount"
      end
      # resource path
      local_var_path = '/proton/v1/purchase_calculator/amount'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PurchaseCalculatorPurchaseamountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#purchase_calculator_purchase_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rebalancing
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [RebalanceResponse]
    def rebalancing_signal(payload, opts = {})
      data, _status_code, _headers = rebalancing_signal_with_http_info(payload, opts)
      data
    end

    # Rebalancing
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RebalanceResponse, Fixnum, Hash)>] RebalanceResponse data, response status code and response headers
    def rebalancing_signal_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.rebalancing_signal ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.rebalancing_signal"
      end
      # resource path
      local_var_path = '/proton/v1/rebalancing_signal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RebalanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#rebalancing_signal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retirement calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [RetirementCalculatorDepositamountResponse]
    def retirement_calculator_deposit_amount(payload, opts = {})
      data, _status_code, _headers = retirement_calculator_deposit_amount_with_http_info(payload, opts)
      data
    end

    # Retirement calculator - deposit amount
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetirementCalculatorDepositamountResponse, Fixnum, Hash)>] RetirementCalculatorDepositamountResponse data, response status code and response headers
    def retirement_calculator_deposit_amount_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.retirement_calculator_deposit_amount ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.retirement_calculator_deposit_amount"
      end
      # resource path
      local_var_path = '/proton/v1/retirement_calculator/deposit_amount'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RetirementCalculatorDepositamountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#retirement_calculator_deposit_amount\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retirement calculator - expenses
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [RetirementCalculatorExpensesResponse]
    def retirement_calculator_expenses(payload, opts = {})
      data, _status_code, _headers = retirement_calculator_expenses_with_http_info(payload, opts)
      data
    end

    # Retirement calculator - expenses
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetirementCalculatorExpensesResponse, Fixnum, Hash)>] RetirementCalculatorExpensesResponse data, response status code and response headers
    def retirement_calculator_expenses_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.retirement_calculator_expenses ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.retirement_calculator_expenses"
      end
      # resource path
      local_var_path = '/proton/v1/retirement_calculator/expenses'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RetirementCalculatorExpensesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#retirement_calculator_expenses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retirement calculator - percent of costs covered
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [RetirementCalculatorPctcoveredResponse]
    def retirement_calculator_percent_covered(payload, opts = {})
      data, _status_code, _headers = retirement_calculator_percent_covered_with_http_info(payload, opts)
      data
    end

    # Retirement calculator - percent of costs covered
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetirementCalculatorPctcoveredResponse, Fixnum, Hash)>] RetirementCalculatorPctcoveredResponse data, response status code and response headers
    def retirement_calculator_percent_covered_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.retirement_calculator_percent_covered ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.retirement_calculator_percent_covered"
      end
      # resource path
      local_var_path = '/proton/v1/retirement_calculator/percent_covered'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RetirementCalculatorPctcoveredResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#retirement_calculator_percent_covered\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Risk allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [RiskAllocationResponse]
    def risk_allocation(payload, opts = {})
      data, _status_code, _headers = risk_allocation_with_http_info(payload, opts)
      data
    end

    # Risk allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RiskAllocationResponse, Fixnum, Hash)>] RiskAllocationResponse data, response status code and response headers
    def risk_allocation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.risk_allocation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.risk_allocation"
      end
      # resource path
      local_var_path = '/proton/v1/risk_allocation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RiskAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#risk_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Risk score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [RiskScoreResponse]
    def risk_score(payload, opts = {})
      data, _status_code, _headers = risk_score_with_http_info(payload, opts)
      data
    end

    # Risk score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RiskScoreResponse, Fixnum, Hash)>] RiskScoreResponse data, response status code and response headers
    def risk_score_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.risk_score ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.risk_score"
      end
      # resource path
      local_var_path = '/proton/v1/risk_score'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RiskScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#risk_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Savings calculator
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SavingsCalculatorResponse]
    def savings_calculator(payload, opts = {})
      data, _status_code, _headers = savings_calculator_with_http_info(payload, opts)
      data
    end

    # Savings calculator
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SavingsCalculatorResponse, Fixnum, Hash)>] SavingsCalculatorResponse data, response status code and response headers
    def savings_calculator_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.savings_calculator ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.savings_calculator"
      end
      # resource path
      local_var_path = '/proton/v1/savings_calculator'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SavingsCalculatorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#savings_calculator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Scenario analysis
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [ScenarioAnalysisResponse]
    def scenario_analysis(payload, opts = {})
      data, _status_code, _headers = scenario_analysis_with_http_info(payload, opts)
      data
    end

    # Scenario analysis
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScenarioAnalysisResponse, Fixnum, Hash)>] ScenarioAnalysisResponse data, response status code and response headers
    def scenario_analysis_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.scenario_analysis ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.scenario_analysis"
      end
      # resource path
      local_var_path = '/proton/v1/scenario_analysis'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScenarioAnalysisResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#scenario_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sensitivity analysis
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SensitivityAnalysisResponse]
    def sensitivity_analysis(payload, opts = {})
      data, _status_code, _headers = sensitivity_analysis_with_http_info(payload, opts)
      data
    end

    # Sensitivity analysis
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SensitivityAnalysisResponse, Fixnum, Hash)>] SensitivityAnalysisResponse data, response status code and response headers
    def sensitivity_analysis_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.sensitivity_analysis ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.sensitivity_analysis"
      end
      # resource path
      local_var_path = '/proton/v1/sensitivity_analysis'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SensitivityAnalysisResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#sensitivity_analysis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Variable annuity
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [VariableAnnuityResponse]
    def variable_annuity(payload, opts = {})
      data, _status_code, _headers = variable_annuity_with_http_info(payload, opts)
      data
    end

    # Variable annuity
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VariableAnnuityResponse, Fixnum, Hash)>] VariableAnnuityResponse data, response status code and response headers
    def variable_annuity_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtonApi.variable_annuity ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ProtonApi.variable_annuity"
      end
      # resource path
      local_var_path = '/proton/v1/variable_annuity'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VariableAnnuityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtonApi#variable_annuity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
