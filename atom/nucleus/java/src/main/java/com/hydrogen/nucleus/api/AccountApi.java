/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.Account;
import com.hydrogen.nucleus.model.AccountAllocationMapping;
import com.hydrogen.nucleus.model.AccountPermissionVO;
import com.hydrogen.nucleus.model.AccountStatus;
import com.hydrogen.nucleus.model.AccountType;
import com.hydrogen.nucleus.model.AclClientPermissionVO;
import com.hydrogen.nucleus.model.AvailableDateDoubleVO;
import org.threeten.bp.LocalDate;
import com.hydrogen.nucleus.model.PageAccount;
import com.hydrogen.nucleus.model.PageAccountAllocationMapping;
import com.hydrogen.nucleus.model.PageAccountPermissionVO;
import com.hydrogen.nucleus.model.PageAccountStatus;
import com.hydrogen.nucleus.model.PageAccountType;
import com.hydrogen.nucleus.model.PagePortfolioHoldingAgg;
import com.hydrogen.nucleus.model.PagePortfolioTransaction;
import com.hydrogen.nucleus.model.Portfolio;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient apiClient;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAccountAllocationMappingUsingPost
     * @param allocRequest allocRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAccountAllocationMappingUsingPostCall(AccountAllocationMapping allocRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = allocRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAccountAllocationMappingUsingPostValidateBeforeCall(AccountAllocationMapping allocRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocRequest' is set
        if (allocRequest == null) {
            throw new ApiException("Missing the required parameter 'allocRequest' when calling createAccountAllocationMappingUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAccountAllocationMappingUsingPostCall(allocRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account allocation
     * Create an account-allocation mapping for an account.
     * @param allocRequest allocRequest (required)
     * @return AccountAllocationMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountAllocationMapping createAccountAllocationMappingUsingPost(AccountAllocationMapping allocRequest) throws ApiException {
        ApiResponse<AccountAllocationMapping> resp = createAccountAllocationMappingUsingPostWithHttpInfo(allocRequest);
        return resp.getData();
    }

    /**
     * Create an account allocation
     * Create an account-allocation mapping for an account.
     * @param allocRequest allocRequest (required)
     * @return ApiResponse&lt;AccountAllocationMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountAllocationMapping> createAccountAllocationMappingUsingPostWithHttpInfo(AccountAllocationMapping allocRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAccountAllocationMappingUsingPostValidateBeforeCall(allocRequest, null, null);
        Type localVarReturnType = new TypeToken<AccountAllocationMapping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account allocation (asynchronously)
     * Create an account-allocation mapping for an account.
     * @param allocRequest allocRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountAllocationMappingUsingPostAsync(AccountAllocationMapping allocRequest, final ApiCallback<AccountAllocationMapping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountAllocationMappingUsingPostValidateBeforeCall(allocRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountAllocationMapping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAccountStatusUsingPost
     * @param accountStatusRequest accountStatusRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAccountStatusUsingPostCall(AccountStatus accountStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountStatusRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAccountStatusUsingPostValidateBeforeCall(AccountStatus accountStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountStatusRequest' is set
        if (accountStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'accountStatusRequest' when calling createAccountStatusUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAccountStatusUsingPostCall(accountStatusRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account status
     * Create an account status record for an account.
     * @param accountStatusRequest accountStatusRequest (required)
     * @return AccountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountStatus createAccountStatusUsingPost(AccountStatus accountStatusRequest) throws ApiException {
        ApiResponse<AccountStatus> resp = createAccountStatusUsingPostWithHttpInfo(accountStatusRequest);
        return resp.getData();
    }

    /**
     * Create an account status
     * Create an account status record for an account.
     * @param accountStatusRequest accountStatusRequest (required)
     * @return ApiResponse&lt;AccountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountStatus> createAccountStatusUsingPostWithHttpInfo(AccountStatus accountStatusRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAccountStatusUsingPostValidateBeforeCall(accountStatusRequest, null, null);
        Type localVarReturnType = new TypeToken<AccountStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account status (asynchronously)
     * Create an account status record for an account.
     * @param accountStatusRequest accountStatusRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountStatusUsingPostAsync(AccountStatus accountStatusRequest, final ApiCallback<AccountStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountStatusUsingPostValidateBeforeCall(accountStatusRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAccountTypeUsingPost
     * @param accountTypeRequest accountTypeRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAccountTypeUsingPostCall(AccountType accountTypeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountTypeRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAccountTypeUsingPostValidateBeforeCall(AccountType accountTypeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountTypeRequest' is set
        if (accountTypeRequest == null) {
            throw new ApiException("Missing the required parameter 'accountTypeRequest' when calling createAccountTypeUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAccountTypeUsingPostCall(accountTypeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account type
     * Create a new account type for your firm.
     * @param accountTypeRequest accountTypeRequest (required)
     * @return AccountType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountType createAccountTypeUsingPost(AccountType accountTypeRequest) throws ApiException {
        ApiResponse<AccountType> resp = createAccountTypeUsingPostWithHttpInfo(accountTypeRequest);
        return resp.getData();
    }

    /**
     * Create an account type
     * Create a new account type for your firm.
     * @param accountTypeRequest accountTypeRequest (required)
     * @return ApiResponse&lt;AccountType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountType> createAccountTypeUsingPostWithHttpInfo(AccountType accountTypeRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAccountTypeUsingPostValidateBeforeCall(accountTypeRequest, null, null);
        Type localVarReturnType = new TypeToken<AccountType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account type (asynchronously)
     * Create a new account type for your firm.
     * @param accountTypeRequest accountTypeRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountTypeUsingPostAsync(AccountType accountTypeRequest, final ApiCallback<AccountType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountTypeUsingPostValidateBeforeCall(accountTypeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAccountUsingPost
     * @param account account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAccountUsingPostCall(Account account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = account;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAccountUsingPostValidateBeforeCall(Account account, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling createAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAccountUsingPostCall(account, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an account
     * Create an account under a client.
     * @param account account (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Account createAccountUsingPost(Account account) throws ApiException {
        ApiResponse<Account> resp = createAccountUsingPostWithHttpInfo(account);
        return resp.getData();
    }

    /**
     * Create an account
     * Create an account under a client.
     * @param account account (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Account> createAccountUsingPostWithHttpInfo(Account account) throws ApiException {
        com.squareup.okhttp.Call call = createAccountUsingPostValidateBeforeCall(account, null, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account (asynchronously)
     * Create an account under a client.
     * @param account account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountUsingPostAsync(Account account, final ApiCallback<Account> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountUsingPostValidateBeforeCall(account, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAccountAllocationMappingUsingDelete
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountAllocationMappingUsingDeleteCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}"
            .replaceAll("\\{" + "account_allocation_id" + "\\}", apiClient.escapeString(accountAllocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountAllocationMappingUsingDeleteValidateBeforeCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountAllocationId' is set
        if (accountAllocationId == null) {
            throw new ApiException("Missing the required parameter 'accountAllocationId' when calling deleteAccountAllocationMappingUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountAllocationMappingUsingDeleteCall(accountAllocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account allocation
     * Permanently delete an account-allocation mapping for an account.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountAllocationMappingUsingDelete(UUID accountAllocationId) throws ApiException {
        deleteAccountAllocationMappingUsingDeleteWithHttpInfo(accountAllocationId);
    }

    /**
     * Delete an account allocation
     * Permanently delete an account-allocation mapping for an account.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountAllocationMappingUsingDeleteWithHttpInfo(UUID accountAllocationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountAllocationMappingUsingDeleteValidateBeforeCall(accountAllocationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account allocation (asynchronously)
     * Permanently delete an account-allocation mapping for an account.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountAllocationMappingUsingDeleteAsync(UUID accountAllocationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountAllocationMappingUsingDeleteValidateBeforeCall(accountAllocationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountPermissionUsingDELETE
     * @param accountId account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountPermissionUsingDELETECall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountPermissionUsingDELETEValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountPermissionUsingDELETE(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountPermissionUsingDELETECall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account permission
     * Delete an account permission
     * @param accountId account_id (required)
     * @return AccountPermissionVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPermissionVO deleteAccountPermissionUsingDELETE(UUID accountId) throws ApiException {
        ApiResponse<AccountPermissionVO> resp = deleteAccountPermissionUsingDELETEWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Delete an account permission
     * Delete an account permission
     * @param accountId account_id (required)
     * @return ApiResponse&lt;AccountPermissionVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPermissionVO> deleteAccountPermissionUsingDELETEWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountPermissionUsingDELETEValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an account permission (asynchronously)
     * Delete an account permission
     * @param accountId account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountPermissionUsingDELETEAsync(UUID accountId, final ApiCallback<AccountPermissionVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountPermissionUsingDELETEValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAccountStatusUsingDelete
     * @param accountStatusId UUID account_status_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountStatusUsingDeleteCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status/{account_status_id}"
            .replaceAll("\\{" + "account_status_id" + "\\}", apiClient.escapeString(accountStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountStatusUsingDeleteValidateBeforeCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountStatusId' is set
        if (accountStatusId == null) {
            throw new ApiException("Missing the required parameter 'accountStatusId' when calling deleteAccountStatusUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountStatusUsingDeleteCall(accountStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account status
     * Permanently delete an account status record from an account’s history.
     * @param accountStatusId UUID account_status_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountStatusUsingDelete(UUID accountStatusId) throws ApiException {
        deleteAccountStatusUsingDeleteWithHttpInfo(accountStatusId);
    }

    /**
     * Delete an account status
     * Permanently delete an account status record from an account’s history.
     * @param accountStatusId UUID account_status_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountStatusUsingDeleteWithHttpInfo(UUID accountStatusId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountStatusUsingDeleteValidateBeforeCall(accountStatusId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account status (asynchronously)
     * Permanently delete an account status record from an account’s history.
     * @param accountStatusId UUID account_status_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountStatusUsingDeleteAsync(UUID accountStatusId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountStatusUsingDeleteValidateBeforeCall(accountStatusId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountTypeUsingDelete
     * @param accountTypeId UUID account_type_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountTypeUsingDeleteCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type/{account_type_id}"
            .replaceAll("\\{" + "account_type_id" + "\\}", apiClient.escapeString(accountTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountTypeUsingDeleteValidateBeforeCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountTypeId' is set
        if (accountTypeId == null) {
            throw new ApiException("Missing the required parameter 'accountTypeId' when calling deleteAccountTypeUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountTypeUsingDeleteCall(accountTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account type
     * Permanently delete a possible account type defined for your firm.
     * @param accountTypeId UUID account_type_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountTypeUsingDelete(UUID accountTypeId) throws ApiException {
        deleteAccountTypeUsingDeleteWithHttpInfo(accountTypeId);
    }

    /**
     * Delete an account type
     * Permanently delete a possible account type defined for your firm.
     * @param accountTypeId UUID account_type_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountTypeUsingDeleteWithHttpInfo(UUID accountTypeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountTypeUsingDeleteValidateBeforeCall(accountTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account type (asynchronously)
     * Permanently delete a possible account type defined for your firm.
     * @param accountTypeId UUID account_type_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountTypeUsingDeleteAsync(UUID accountTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountTypeUsingDeleteValidateBeforeCall(accountTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountUsingDelete
     * @param accountId UUID account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountUsingDeleteCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountUsingDeleteValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAccountUsingDeleteCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an account
     * Permanently delete an account under a client.
     * @param accountId UUID account_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountUsingDelete(UUID accountId) throws ApiException {
        deleteAccountUsingDeleteWithHttpInfo(accountId);
    }

    /**
     * Delete an account
     * Permanently delete an account under a client.
     * @param accountId UUID account_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountUsingDeleteWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountUsingDeleteValidateBeforeCall(accountId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account (asynchronously)
     * Permanently delete an account under a client.
     * @param accountId UUID account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountUsingDeleteAsync(UUID accountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountUsingDeleteValidateBeforeCall(accountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccountAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all accounts
     * Get information for all accounts for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccount getAccountAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAccount> resp = getAccountAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all accounts
     * Get information for all accounts for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccount> getAccountAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all accounts (asynchronously)
     * Get information for all accounts for all clients defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAllocationMappingAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountAllocationMappingAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAllocationMappingAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountAllocationMappingAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account allocations
     * Get information for all account-allocation mappings for all accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAccountAllocationMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountAllocationMapping getAccountAllocationMappingAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAccountAllocationMapping> resp = getAccountAllocationMappingAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all account allocations
     * Get information for all account-allocation mappings for all accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAccountAllocationMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountAllocationMapping> getAccountAllocationMappingAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAllocationMappingAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAccountAllocationMapping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account allocations (asynchronously)
     * Get information for all account-allocation mappings for all accounts defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAllocationMappingAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAccountAllocationMapping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAllocationMappingAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountAllocationMapping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAllocationMappingUsingGet
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountAllocationMappingUsingGetCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}"
            .replaceAll("\\{" + "account_allocation_id" + "\\}", apiClient.escapeString(accountAllocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAllocationMappingUsingGetValidateBeforeCall(UUID accountAllocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountAllocationId' is set
        if (accountAllocationId == null) {
            throw new ApiException("Missing the required parameter 'accountAllocationId' when calling getAccountAllocationMappingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountAllocationMappingUsingGetCall(accountAllocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account allocation
     * Retrieve the information for a specific account-allocation mapping for an account.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @return AccountAllocationMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountAllocationMapping getAccountAllocationMappingUsingGet(UUID accountAllocationId) throws ApiException {
        ApiResponse<AccountAllocationMapping> resp = getAccountAllocationMappingUsingGetWithHttpInfo(accountAllocationId);
        return resp.getData();
    }

    /**
     * Retrieve an account allocation
     * Retrieve the information for a specific account-allocation mapping for an account.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @return ApiResponse&lt;AccountAllocationMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountAllocationMapping> getAccountAllocationMappingUsingGetWithHttpInfo(UUID accountAllocationId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAllocationMappingUsingGetValidateBeforeCall(accountAllocationId, null, null);
        Type localVarReturnType = new TypeToken<AccountAllocationMapping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account allocation (asynchronously)
     * Retrieve the information for a specific account-allocation mapping for an account.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAllocationMappingUsingGetAsync(UUID accountAllocationId, final ApiCallback<AccountAllocationMapping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAllocationMappingUsingGetValidateBeforeCall(accountAllocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountAllocationMapping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAssetSizeAggAllUsingGet
     * @param accountId Account Id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountAssetSizeAggAllUsingGetCall(UUID accountId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/asset_size"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (excludeSubledger != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_subledger", excludeSubledger));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_type", sortType));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAssetSizeAggAllUsingGetValidateBeforeCall(UUID accountId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountAssetSizeAggAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountAssetSizeAggAllUsingGetCall(accountId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account asset sizes
     * Get a list of asset sizes by date for an account.
     * @param accountId Account Id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional)
     * @return List&lt;AvailableDateDoubleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AvailableDateDoubleVO> getAccountAssetSizeAggAllUsingGet(UUID accountId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        ApiResponse<List<AvailableDateDoubleVO>> resp = getAccountAssetSizeAggAllUsingGetWithHttpInfo(accountId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
        return resp.getData();
    }

    /**
     * List all account asset sizes
     * Get a list of asset sizes by date for an account.
     * @param accountId Account Id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional)
     * @return ApiResponse&lt;List&lt;AvailableDateDoubleVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AvailableDateDoubleVO>> getAccountAssetSizeAggAllUsingGetWithHttpInfo(UUID accountId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAssetSizeAggAllUsingGetValidateBeforeCall(accountId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account asset sizes (asynchronously)
     * Get a list of asset sizes by date for an account.
     * @param accountId Account Id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAssetSizeAggAllUsingGetAsync(UUID accountId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ApiCallback<List<AvailableDateDoubleVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAssetSizeAggAllUsingGetValidateBeforeCall(accountId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountOverviewUsingGet
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountOverviewUsingGetCall(UUID accountId, Boolean ascending, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/account_overview"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountOverviewUsingGetValidateBeforeCall(UUID accountId, Boolean ascending, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountOverviewUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountOverviewUsingGetCall(accountId, ascending, orderBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all Account overview
     * 
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAccountOverviewUsingGet(UUID accountId, Boolean ascending, String orderBy) throws ApiException {
        ApiResponse<Object> resp = getAccountOverviewUsingGetWithHttpInfo(accountId, ascending, orderBy);
        return resp.getData();
    }

    /**
     * List all Account overview
     * 
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAccountOverviewUsingGetWithHttpInfo(UUID accountId, Boolean ascending, String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = getAccountOverviewUsingGetValidateBeforeCall(accountId, ascending, orderBy, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Account overview (asynchronously)
     * 
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param orderBy order_by (optional, default to update_date)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountOverviewUsingGetAsync(UUID accountId, Boolean ascending, String orderBy, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountOverviewUsingGetValidateBeforeCall(accountId, ascending, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountPermissionUsingGET
     * @param accountId account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountPermissionUsingGETCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountPermissionUsingGETValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountPermissionUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountPermissionUsingGETCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an account permission
     * Get an account permission
     * @param accountId account_id (required)
     * @return AccountPermissionVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPermissionVO getAccountPermissionUsingGET(UUID accountId) throws ApiException {
        ApiResponse<AccountPermissionVO> resp = getAccountPermissionUsingGETWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get an account permission
     * Get an account permission
     * @param accountId account_id (required)
     * @return ApiResponse&lt;AccountPermissionVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPermissionVO> getAccountPermissionUsingGETWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPermissionUsingGETValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an account permission (asynchronously)
     * Get an account permission
     * @param accountId account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountPermissionUsingGETAsync(UUID accountId, final ApiCallback<AccountPermissionVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPermissionUsingGETValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountStatusAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountStatusAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountStatusAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountStatusAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account statuses
     * Get the account status history information for all accounts.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAccountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountStatus getAccountStatusAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAccountStatus> resp = getAccountStatusAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all account statuses
     * Get the account status history information for all accounts.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAccountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountStatus> getAccountStatusAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAccountStatusAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAccountStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account statuses (asynchronously)
     * Get the account status history information for all accounts.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountStatusAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAccountStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountStatusAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountStatusUsingGet
     * @param accountStatusId UUID account_status_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountStatusUsingGetCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status/{account_status_id}"
            .replaceAll("\\{" + "account_status_id" + "\\}", apiClient.escapeString(accountStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountStatusUsingGetValidateBeforeCall(UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountStatusId' is set
        if (accountStatusId == null) {
            throw new ApiException("Missing the required parameter 'accountStatusId' when calling getAccountStatusUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountStatusUsingGetCall(accountStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account status
     * Retrieve the information for a specific account status record for an account.
     * @param accountStatusId UUID account_status_id (required)
     * @return AccountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountStatus getAccountStatusUsingGet(UUID accountStatusId) throws ApiException {
        ApiResponse<AccountStatus> resp = getAccountStatusUsingGetWithHttpInfo(accountStatusId);
        return resp.getData();
    }

    /**
     * Retrieve an account status
     * Retrieve the information for a specific account status record for an account.
     * @param accountStatusId UUID account_status_id (required)
     * @return ApiResponse&lt;AccountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountStatus> getAccountStatusUsingGetWithHttpInfo(UUID accountStatusId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountStatusUsingGetValidateBeforeCall(accountStatusId, null, null);
        Type localVarReturnType = new TypeToken<AccountStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account status (asynchronously)
     * Retrieve the information for a specific account status record for an account.
     * @param accountStatusId UUID account_status_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountStatusUsingGetAsync(UUID accountStatusId, final ApiCallback<AccountStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountStatusUsingGetValidateBeforeCall(accountStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountTypeAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountTypeAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountTypeAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAccountTypeAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account types
     * List all account types defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAccountType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountType getAccountTypeAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAccountType> resp = getAccountTypeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all account types
     * List all account types defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAccountType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountType> getAccountTypeAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAccountTypeAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAccountType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account types (asynchronously)
     * List all account types defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountTypeAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAccountType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountTypeAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountTypeUsingGet
     * @param accountTypeId UUID account_type_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountTypeUsingGetCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type/{account_type_id}"
            .replaceAll("\\{" + "account_type_id" + "\\}", apiClient.escapeString(accountTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountTypeUsingGetValidateBeforeCall(UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountTypeId' is set
        if (accountTypeId == null) {
            throw new ApiException("Missing the required parameter 'accountTypeId' when calling getAccountTypeUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountTypeUsingGetCall(accountTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an Account Type
     * Get an account types defined for your firm.
     * @param accountTypeId UUID account_type_id (required)
     * @return AccountType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountType getAccountTypeUsingGet(UUID accountTypeId) throws ApiException {
        ApiResponse<AccountType> resp = getAccountTypeUsingGetWithHttpInfo(accountTypeId);
        return resp.getData();
    }

    /**
     * Get an Account Type
     * Get an account types defined for your firm.
     * @param accountTypeId UUID account_type_id (required)
     * @return ApiResponse&lt;AccountType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountType> getAccountTypeUsingGetWithHttpInfo(UUID accountTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountTypeUsingGetValidateBeforeCall(accountTypeId, null, null);
        Type localVarReturnType = new TypeToken<AccountType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an Account Type (asynchronously)
     * Get an account types defined for your firm.
     * @param accountTypeId UUID account_type_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountTypeUsingGetAsync(UUID accountTypeId, final ApiCallback<AccountType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountTypeUsingGetValidateBeforeCall(accountTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountUsingGet
     * @param accountId UUID account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountUsingGetCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountUsingGetValidateBeforeCall(UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountUsingGetCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an account
     * Retrieve the information for a specific account associated with a client.
     * @param accountId UUID account_id (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Account getAccountUsingGet(UUID accountId) throws ApiException {
        ApiResponse<Account> resp = getAccountUsingGetWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Retrieve an account
     * Retrieve the information for a specific account associated with a client.
     * @param accountId UUID account_id (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Account> getAccountUsingGetWithHttpInfo(UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountUsingGetValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an account (asynchronously)
     * Retrieve the information for a specific account associated with a client.
     * @param accountId UUID account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountUsingGetAsync(UUID accountId, final ApiCallback<Account> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountUsingGetValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAccountPermissionUsingGET
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAccountPermissionUsingGETCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAccountPermissionUsingGETValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllAccountPermissionUsingGETCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account permission
     * List all account permission
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAccountPermissionVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountPermissionVO getAllAccountPermissionUsingGET(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAccountPermissionVO> resp = getAllAccountPermissionUsingGETWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all account permission
     * List all account permission
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAccountPermissionVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountPermissionVO> getAllAccountPermissionUsingGETWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAllAccountPermissionUsingGETValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAccountPermissionVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account permission (asynchronously)
     * List all account permission
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAccountPermissionUsingGETAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAccountPermissionVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAccountPermissionUsingGETValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountPermissionVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioHoldingAggAllUsingGet
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioHoldingAggAllUsingGetCall(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/holding"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioHoldingAggAllUsingGetValidateBeforeCall(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getPortfolioHoldingAggAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioHoldingAggAllUsingGetCall(accountId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account holdings
     * Get information for all the securities that are currently being held by an account.
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @return PagePortfolioHoldingAgg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioHoldingAgg getPortfolioHoldingAggAllUsingGet(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        ApiResponse<PagePortfolioHoldingAgg> resp = getPortfolioHoldingAggAllUsingGetWithHttpInfo(accountId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all account holdings
     * Get information for all the securities that are currently being held by an account.
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @return ApiResponse&lt;PagePortfolioHoldingAgg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioHoldingAgg> getPortfolioHoldingAggAllUsingGetWithHttpInfo(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioHoldingAggAllUsingGetValidateBeforeCall(accountId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingAgg>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account holdings (asynchronously)
     * Get information for all the securities that are currently being held by an account.
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioHoldingAggAllUsingGetAsync(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate, final ApiCallback<PagePortfolioHoldingAgg> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioHoldingAggAllUsingGetValidateBeforeCall(accountId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingAgg>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioTransactionAggAllUsingGet
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioTransactionAggAllUsingGetCall(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/transaction"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioTransactionAggAllUsingGetValidateBeforeCall(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getPortfolioTransactionAggAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioTransactionAggAllUsingGetCall(accountId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all account transactions
     * Get the information for all transactions for an account.
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @return PagePortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioTransaction getPortfolioTransactionAggAllUsingGet(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        ApiResponse<PagePortfolioTransaction> resp = getPortfolioTransactionAggAllUsingGetWithHttpInfo(accountId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all account transactions
     * Get the information for all transactions for an account.
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @return ApiResponse&lt;PagePortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioTransaction> getPortfolioTransactionAggAllUsingGetWithHttpInfo(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioTransactionAggAllUsingGetValidateBeforeCall(accountId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all account transactions (asynchronously)
     * Get the information for all transactions for an account.
     * @param accountId UUID account_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date  (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioTransactionAggAllUsingGetAsync(UUID accountId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate, final ApiCallback<PagePortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioTransactionAggAllUsingGetValidateBeforeCall(accountId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertAccountAndRelatedPermissionUsingPOST
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertAccountAndRelatedPermissionUsingPOSTCall(AclClientPermissionVO aclClientPermissionVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aclClientPermissionVO;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertAccountAndRelatedPermissionUsingPOSTValidateBeforeCall(AclClientPermissionVO aclClientPermissionVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'aclClientPermissionVO' is set
        if (aclClientPermissionVO == null) {
            throw new ApiException("Missing the required parameter 'aclClientPermissionVO' when calling insertAccountAndRelatedPermissionUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = insertAccountAndRelatedPermissionUsingPOSTCall(aclClientPermissionVO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create an account permission
     * create an account permission
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @return AccountPermissionVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPermissionVO insertAccountAndRelatedPermissionUsingPOST(AclClientPermissionVO aclClientPermissionVO) throws ApiException {
        ApiResponse<AccountPermissionVO> resp = insertAccountAndRelatedPermissionUsingPOSTWithHttpInfo(aclClientPermissionVO);
        return resp.getData();
    }

    /**
     * create an account permission
     * create an account permission
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @return ApiResponse&lt;AccountPermissionVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPermissionVO> insertAccountAndRelatedPermissionUsingPOSTWithHttpInfo(AclClientPermissionVO aclClientPermissionVO) throws ApiException {
        com.squareup.okhttp.Call call = insertAccountAndRelatedPermissionUsingPOSTValidateBeforeCall(aclClientPermissionVO, null, null);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create an account permission (asynchronously)
     * create an account permission
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertAccountAndRelatedPermissionUsingPOSTAsync(AclClientPermissionVO aclClientPermissionVO, final ApiCallback<AccountPermissionVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertAccountAndRelatedPermissionUsingPOSTValidateBeforeCall(aclClientPermissionVO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscribeAccountUsingPost
     * @param accountId UUID account_id (required)
     * @param allocRequest allocRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscribeAccountUsingPostCall(UUID accountId, AccountAllocationMapping allocRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = allocRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}/subscribe"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeAccountUsingPostValidateBeforeCall(UUID accountId, AccountAllocationMapping allocRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling subscribeAccountUsingPost(Async)");
        }
        
        // verify the required parameter 'allocRequest' is set
        if (allocRequest == null) {
            throw new ApiException("Missing the required parameter 'allocRequest' when calling subscribeAccountUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = subscribeAccountUsingPostCall(accountId, allocRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribe an account
     * After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
     * @param accountId UUID account_id (required)
     * @param allocRequest allocRequest (required)
     * @return List&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Portfolio> subscribeAccountUsingPost(UUID accountId, AccountAllocationMapping allocRequest) throws ApiException {
        ApiResponse<List<Portfolio>> resp = subscribeAccountUsingPostWithHttpInfo(accountId, allocRequest);
        return resp.getData();
    }

    /**
     * Subscribe an account
     * After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
     * @param accountId UUID account_id (required)
     * @param allocRequest allocRequest (required)
     * @return ApiResponse&lt;List&lt;Portfolio&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Portfolio>> subscribeAccountUsingPostWithHttpInfo(UUID accountId, AccountAllocationMapping allocRequest) throws ApiException {
        com.squareup.okhttp.Call call = subscribeAccountUsingPostValidateBeforeCall(accountId, allocRequest, null, null);
        Type localVarReturnType = new TypeToken<List<Portfolio>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe an account (asynchronously)
     * After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
     * @param accountId UUID account_id (required)
     * @param allocRequest allocRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeAccountUsingPostAsync(UUID accountId, AccountAllocationMapping allocRequest, final ApiCallback<List<Portfolio>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeAccountUsingPostValidateBeforeCall(accountId, allocRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Portfolio>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountAllocationMappingUsingPut
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param accountAllocationMapping account_allocation_mapping (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAccountAllocationMappingUsingPutCall(UUID accountAllocationId, Object accountAllocationMapping, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountAllocationMapping;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}"
            .replaceAll("\\{" + "account_allocation_id" + "\\}", apiClient.escapeString(accountAllocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountAllocationMappingUsingPutValidateBeforeCall(UUID accountAllocationId, Object accountAllocationMapping, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountAllocationId' is set
        if (accountAllocationId == null) {
            throw new ApiException("Missing the required parameter 'accountAllocationId' when calling updateAccountAllocationMappingUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountAllocationMappingUsingPutCall(accountAllocationId, accountAllocationMapping, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account allocation
     * Update the information for an account-allocation mapping.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param accountAllocationMapping account_allocation_mapping (optional)
     * @return AccountAllocationMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountAllocationMapping updateAccountAllocationMappingUsingPut(UUID accountAllocationId, Object accountAllocationMapping) throws ApiException {
        ApiResponse<AccountAllocationMapping> resp = updateAccountAllocationMappingUsingPutWithHttpInfo(accountAllocationId, accountAllocationMapping);
        return resp.getData();
    }

    /**
     * Update an account allocation
     * Update the information for an account-allocation mapping.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param accountAllocationMapping account_allocation_mapping (optional)
     * @return ApiResponse&lt;AccountAllocationMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountAllocationMapping> updateAccountAllocationMappingUsingPutWithHttpInfo(UUID accountAllocationId, Object accountAllocationMapping) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountAllocationMappingUsingPutValidateBeforeCall(accountAllocationId, accountAllocationMapping, null, null);
        Type localVarReturnType = new TypeToken<AccountAllocationMapping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account allocation (asynchronously)
     * Update the information for an account-allocation mapping.
     * @param accountAllocationId UUID account_allocation_id (required)
     * @param accountAllocationMapping account_allocation_mapping (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAccountAllocationMappingUsingPutAsync(UUID accountAllocationId, Object accountAllocationMapping, final ApiCallback<AccountAllocationMapping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountAllocationMappingUsingPutValidateBeforeCall(accountAllocationId, accountAllocationMapping, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountAllocationMapping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountStatusUsingPut
     * @param accountStatus account_status (required)
     * @param accountStatusId UUID account_status_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAccountStatusUsingPutCall(Object accountStatus, UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountStatus;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_status/{account_status_id}"
            .replaceAll("\\{" + "account_status_id" + "\\}", apiClient.escapeString(accountStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountStatusUsingPutValidateBeforeCall(Object accountStatus, UUID accountStatusId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountStatus' is set
        if (accountStatus == null) {
            throw new ApiException("Missing the required parameter 'accountStatus' when calling updateAccountStatusUsingPut(Async)");
        }
        
        // verify the required parameter 'accountStatusId' is set
        if (accountStatusId == null) {
            throw new ApiException("Missing the required parameter 'accountStatusId' when calling updateAccountStatusUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountStatusUsingPutCall(accountStatus, accountStatusId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account status
     * Update an account status record for an account.
     * @param accountStatus account_status (required)
     * @param accountStatusId UUID account_status_id (required)
     * @return AccountStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountStatus updateAccountStatusUsingPut(Object accountStatus, UUID accountStatusId) throws ApiException {
        ApiResponse<AccountStatus> resp = updateAccountStatusUsingPutWithHttpInfo(accountStatus, accountStatusId);
        return resp.getData();
    }

    /**
     * Update an account status
     * Update an account status record for an account.
     * @param accountStatus account_status (required)
     * @param accountStatusId UUID account_status_id (required)
     * @return ApiResponse&lt;AccountStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountStatus> updateAccountStatusUsingPutWithHttpInfo(Object accountStatus, UUID accountStatusId) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountStatusUsingPutValidateBeforeCall(accountStatus, accountStatusId, null, null);
        Type localVarReturnType = new TypeToken<AccountStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account status (asynchronously)
     * Update an account status record for an account.
     * @param accountStatus account_status (required)
     * @param accountStatusId UUID account_status_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAccountStatusUsingPutAsync(Object accountStatus, UUID accountStatusId, final ApiCallback<AccountStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountStatusUsingPutValidateBeforeCall(accountStatus, accountStatusId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountTypeUsingPut
     * @param accountType account_type (required)
     * @param accountTypeId UUID account_type_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAccountTypeUsingPutCall(Object accountType, UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountType;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_type/{account_type_id}"
            .replaceAll("\\{" + "account_type_id" + "\\}", apiClient.escapeString(accountTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountTypeUsingPutValidateBeforeCall(Object accountType, UUID accountTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountType' is set
        if (accountType == null) {
            throw new ApiException("Missing the required parameter 'accountType' when calling updateAccountTypeUsingPut(Async)");
        }
        
        // verify the required parameter 'accountTypeId' is set
        if (accountTypeId == null) {
            throw new ApiException("Missing the required parameter 'accountTypeId' when calling updateAccountTypeUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountTypeUsingPutCall(accountType, accountTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account type
     * Update the information for a possible account type defined for your firm.
     * @param accountType account_type (required)
     * @param accountTypeId UUID account_type_id (required)
     * @return AccountType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountType updateAccountTypeUsingPut(Object accountType, UUID accountTypeId) throws ApiException {
        ApiResponse<AccountType> resp = updateAccountTypeUsingPutWithHttpInfo(accountType, accountTypeId);
        return resp.getData();
    }

    /**
     * Update an account type
     * Update the information for a possible account type defined for your firm.
     * @param accountType account_type (required)
     * @param accountTypeId UUID account_type_id (required)
     * @return ApiResponse&lt;AccountType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountType> updateAccountTypeUsingPutWithHttpInfo(Object accountType, UUID accountTypeId) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountTypeUsingPutValidateBeforeCall(accountType, accountTypeId, null, null);
        Type localVarReturnType = new TypeToken<AccountType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account type (asynchronously)
     * Update the information for a possible account type defined for your firm.
     * @param accountType account_type (required)
     * @param accountTypeId UUID account_type_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAccountTypeUsingPutAsync(Object accountType, UUID accountTypeId, final ApiCallback<AccountType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountTypeUsingPutValidateBeforeCall(accountType, accountTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAccountUsingPut
     * @param account account (required)
     * @param accountId UUID account_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAccountUsingPutCall(Object account, UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = account;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAccountUsingPutValidateBeforeCall(Object account, UUID accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'account' is set
        if (account == null) {
            throw new ApiException("Missing the required parameter 'account' when calling updateAccountUsingPut(Async)");
        }
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAccountUsingPutCall(account, accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account
     * Update the information for an account.
     * @param account account (required)
     * @param accountId UUID account_id (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Account updateAccountUsingPut(Object account, UUID accountId) throws ApiException {
        ApiResponse<Account> resp = updateAccountUsingPutWithHttpInfo(account, accountId);
        return resp.getData();
    }

    /**
     * Update an account
     * Update the information for an account.
     * @param account account (required)
     * @param accountId UUID account_id (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Account> updateAccountUsingPutWithHttpInfo(Object account, UUID accountId) throws ApiException {
        com.squareup.okhttp.Call call = updateAccountUsingPutValidateBeforeCall(account, accountId, null, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account (asynchronously)
     * Update the information for an account.
     * @param account account (required)
     * @param accountId UUID account_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAccountUsingPutAsync(Object account, UUID accountId, final ApiCallback<Account> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAccountUsingPutValidateBeforeCall(account, accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientAccountPermissionUsingPUT
     * @param accountId account_id (required)
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientAccountPermissionUsingPUTCall(UUID accountId, Object aclClientPermissionVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aclClientPermissionVO;

        // create path and map variables
        String localVarPath = "/nucleus/v1/account_permission/{account_id}"
            .replaceAll("\\{" + "account_id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientAccountPermissionUsingPUTValidateBeforeCall(UUID accountId, Object aclClientPermissionVO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateClientAccountPermissionUsingPUT(Async)");
        }
        
        // verify the required parameter 'aclClientPermissionVO' is set
        if (aclClientPermissionVO == null) {
            throw new ApiException("Missing the required parameter 'aclClientPermissionVO' when calling updateClientAccountPermissionUsingPUT(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientAccountPermissionUsingPUTCall(accountId, aclClientPermissionVO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an account permission
     * Update an account permission
     * @param accountId account_id (required)
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @return AccountPermissionVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPermissionVO updateClientAccountPermissionUsingPUT(UUID accountId, Object aclClientPermissionVO) throws ApiException {
        ApiResponse<AccountPermissionVO> resp = updateClientAccountPermissionUsingPUTWithHttpInfo(accountId, aclClientPermissionVO);
        return resp.getData();
    }

    /**
     * Update an account permission
     * Update an account permission
     * @param accountId account_id (required)
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @return ApiResponse&lt;AccountPermissionVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPermissionVO> updateClientAccountPermissionUsingPUTWithHttpInfo(UUID accountId, Object aclClientPermissionVO) throws ApiException {
        com.squareup.okhttp.Call call = updateClientAccountPermissionUsingPUTValidateBeforeCall(accountId, aclClientPermissionVO, null, null);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an account permission (asynchronously)
     * Update an account permission
     * @param accountId account_id (required)
     * @param aclClientPermissionVO aclClientPermissionVO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientAccountPermissionUsingPUTAsync(UUID accountId, Object aclClientPermissionVO, final ApiCallback<AccountPermissionVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientAccountPermissionUsingPUTValidateBeforeCall(accountId, aclClientPermissionVO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPermissionVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
