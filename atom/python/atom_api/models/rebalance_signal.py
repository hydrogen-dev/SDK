# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RebalanceSignal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'ticker': 'str',
        'signal': 'str',
        'amount': 'float',
        'type': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'ticker': 'ticker',
        'signal': 'signal',
        'amount': 'amount',
        'type': 'type'
    }

    def __init__(self, _date=None, ticker=None, signal=None, amount=None, type=None):  # noqa: E501
        """RebalanceSignal - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._ticker = None
        self._signal = None
        self._amount = None
        self._type = None
        self.discriminator = None

        self._date = _date
        self.ticker = ticker
        self.signal = signal
        self.amount = amount
        self.type = type

    @property
    def _date(self):
        """Gets the _date of this RebalanceSignal.  # noqa: E501

        The date of the given rebalancing signal.  # noqa: E501

        :return: The _date of this RebalanceSignal.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this RebalanceSignal.

        The date of the given rebalancing signal.  # noqa: E501

        :param _date: The _date of this RebalanceSignal.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def ticker(self):
        """Gets the ticker of this RebalanceSignal.  # noqa: E501

        The unique identifier of a given security.  # noqa: E501

        :return: The ticker of this RebalanceSignal.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this RebalanceSignal.

        The unique identifier of a given security.  # noqa: E501

        :param ticker: The ticker of this RebalanceSignal.  # noqa: E501
        :type: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def signal(self):
        """Gets the signal of this RebalanceSignal.  # noqa: E501

        The trade action, either BUY or SELL.  # noqa: E501

        :return: The signal of this RebalanceSignal.  # noqa: E501
        :rtype: str
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this RebalanceSignal.

        The trade action, either BUY or SELL.  # noqa: E501

        :param signal: The signal of this RebalanceSignal.  # noqa: E501
        :type: str
        """
        if signal is None:
            raise ValueError("Invalid value for `signal`, must not be `None`")  # noqa: E501
        allowed_values = ["SELL", "BUY"]  # noqa: E501
        if signal not in allowed_values:
            raise ValueError(
                "Invalid value for `signal` ({0}), must be one of {1}"  # noqa: E501
                .format(signal, allowed_values)
            )

        self._signal = signal

    @property
    def amount(self):
        """Gets the amount of this RebalanceSignal.  # noqa: E501

        The amount of the trade as a percentage. For example, amount = 0.02 translates to selling 2% of a given ticker.  # noqa: E501

        :return: The amount of this RebalanceSignal.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RebalanceSignal.

        The amount of the trade as a percentage. For example, amount = 0.02 translates to selling 2% of a given ticker.  # noqa: E501

        :param amount: The amount of this RebalanceSignal.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def type(self):
        """Gets the type of this RebalanceSignal.  # noqa: E501

        The type of trade signal. 1 = period-based, 2 = drift-based, and 4 = downside protection.  # noqa: E501

        :return: The type of this RebalanceSignal.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RebalanceSignal.

        The type of trade signal. 1 = period-based, 2 = drift-based, and 4 = downside protection.  # noqa: E501

        :param type: The type of this RebalanceSignal.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RebalanceSignal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RebalanceSignal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
