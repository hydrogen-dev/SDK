=begin
#Hydrogen Proton API

#Financial engineering module of Hydrogen Atom

OpenAPI spec version: 1.9.2
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module ProtonApi
  class RatioTargets1
    attr_accessor :return_on_equity

    attr_accessor :return_on_assets

    attr_accessor :debt_to_equity

    attr_accessor :profit_margin

    attr_accessor :debt_ratio

    attr_accessor :asset_turnover

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'return_on_equity' => :'return_on_equity',
        :'return_on_assets' => :'return_on_assets',
        :'debt_to_equity' => :'debt_to_equity',
        :'profit_margin' => :'profit_margin',
        :'debt_ratio' => :'debt_ratio',
        :'asset_turnover' => :'asset_turnover'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'return_on_equity' => :'Float',
        :'return_on_assets' => :'Float',
        :'debt_to_equity' => :'Float',
        :'profit_margin' => :'Float',
        :'debt_ratio' => :'Float',
        :'asset_turnover' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'return_on_equity')
        self.return_on_equity = attributes[:'return_on_equity']
      else
        self.return_on_equity = 0.15
      end

      if attributes.has_key?(:'return_on_assets')
        self.return_on_assets = attributes[:'return_on_assets']
      else
        self.return_on_assets = 0.05
      end

      if attributes.has_key?(:'debt_to_equity')
        self.debt_to_equity = attributes[:'debt_to_equity']
      else
        self.debt_to_equity = 1.5
      end

      if attributes.has_key?(:'profit_margin')
        self.profit_margin = attributes[:'profit_margin']
      else
        self.profit_margin = 0.1
      end

      if attributes.has_key?(:'debt_ratio')
        self.debt_ratio = attributes[:'debt_ratio']
      else
        self.debt_ratio = 0.5
      end

      if attributes.has_key?(:'asset_turnover')
        self.asset_turnover = attributes[:'asset_turnover']
      else
        self.asset_turnover = 1.0
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@return_on_equity.nil? && @return_on_equity < 0
        invalid_properties.push('invalid value for "return_on_equity", must be greater than or equal to 0.')
      end

      if !@return_on_assets.nil? && @return_on_assets < 0
        invalid_properties.push('invalid value for "return_on_assets", must be greater than or equal to 0.')
      end

      if !@debt_to_equity.nil? && @debt_to_equity < 0
        invalid_properties.push('invalid value for "debt_to_equity", must be greater than or equal to 0.')
      end

      if !@profit_margin.nil? && @profit_margin < 0
        invalid_properties.push('invalid value for "profit_margin", must be greater than or equal to 0.')
      end

      if !@debt_ratio.nil? && @debt_ratio < 0
        invalid_properties.push('invalid value for "debt_ratio", must be greater than or equal to 0.')
      end

      if !@asset_turnover.nil? && @asset_turnover < 0
        invalid_properties.push('invalid value for "asset_turnover", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@return_on_equity.nil? && @return_on_equity < 0
      return false if !@return_on_assets.nil? && @return_on_assets < 0
      return false if !@debt_to_equity.nil? && @debt_to_equity < 0
      return false if !@profit_margin.nil? && @profit_margin < 0
      return false if !@debt_ratio.nil? && @debt_ratio < 0
      return false if !@asset_turnover.nil? && @asset_turnover < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] return_on_equity Value to be assigned
    def return_on_equity=(return_on_equity)
      if !return_on_equity.nil? && return_on_equity < 0
        fail ArgumentError, 'invalid value for "return_on_equity", must be greater than or equal to 0.'
      end

      @return_on_equity = return_on_equity
    end

    # Custom attribute writer method with validation
    # @param [Object] return_on_assets Value to be assigned
    def return_on_assets=(return_on_assets)
      if !return_on_assets.nil? && return_on_assets < 0
        fail ArgumentError, 'invalid value for "return_on_assets", must be greater than or equal to 0.'
      end

      @return_on_assets = return_on_assets
    end

    # Custom attribute writer method with validation
    # @param [Object] debt_to_equity Value to be assigned
    def debt_to_equity=(debt_to_equity)
      if !debt_to_equity.nil? && debt_to_equity < 0
        fail ArgumentError, 'invalid value for "debt_to_equity", must be greater than or equal to 0.'
      end

      @debt_to_equity = debt_to_equity
    end

    # Custom attribute writer method with validation
    # @param [Object] profit_margin Value to be assigned
    def profit_margin=(profit_margin)
      if !profit_margin.nil? && profit_margin < 0
        fail ArgumentError, 'invalid value for "profit_margin", must be greater than or equal to 0.'
      end

      @profit_margin = profit_margin
    end

    # Custom attribute writer method with validation
    # @param [Object] debt_ratio Value to be assigned
    def debt_ratio=(debt_ratio)
      if !debt_ratio.nil? && debt_ratio < 0
        fail ArgumentError, 'invalid value for "debt_ratio", must be greater than or equal to 0.'
      end

      @debt_ratio = debt_ratio
    end

    # Custom attribute writer method with validation
    # @param [Object] asset_turnover Value to be assigned
    def asset_turnover=(asset_turnover)
      if !asset_turnover.nil? && asset_turnover < 0
        fail ArgumentError, 'invalid value for "asset_turnover", must be greater than or equal to 0.'
      end

      @asset_turnover = asset_turnover
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          return_on_equity == o.return_on_equity &&
          return_on_assets == o.return_on_assets &&
          debt_to_equity == o.debt_to_equity &&
          profit_margin == o.profit_margin &&
          debt_ratio == o.debt_ratio &&
          asset_turnover == o.asset_turnover
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [return_on_equity, return_on_assets, debt_to_equity, profit_margin, debt_ratio, asset_turnover].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        value
      when :Date
        value
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ProtonApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end
# Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end
# Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
