# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.cash_flow_analysis_response_history import CashFlowAnalysisResponseHistory  # noqa: F401,E501
from atom_api.models.cash_flow_analysis_response_income_summary import CashFlowAnalysisResponseIncomeSummary  # noqa: F401,E501
from atom_api.models.cash_flow_analysis_response_net_summary import CashFlowAnalysisResponseNetSummary  # noqa: F401,E501
from atom_api.models.cash_flow_analysis_response_spending_details import CashFlowAnalysisResponseSpendingDetails  # noqa: F401,E501
from atom_api.models.cash_flow_analysis_response_spending_summary import CashFlowAnalysisResponseSpendingSummary  # noqa: F401,E501


class CashFlowAnalysisResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'income_summary': 'CashFlowAnalysisResponseIncomeSummary',
        'spending_summary': 'CashFlowAnalysisResponseSpendingSummary',
        'net_summary': 'CashFlowAnalysisResponseNetSummary',
        'history': 'list[CashFlowAnalysisResponseHistory]',
        'benchmark_history': 'list[CashFlowAnalysisResponseHistory]',
        'spending_details': 'CashFlowAnalysisResponseSpendingDetails'
    }

    attribute_map = {
        'currency_code': 'currency_code',
        'income_summary': 'income_summary',
        'spending_summary': 'spending_summary',
        'net_summary': 'net_summary',
        'history': 'history',
        'benchmark_history': 'benchmark_history',
        'spending_details': 'spending_details'
    }

    def __init__(self, currency_code=None, income_summary=None, spending_summary=None, net_summary=None, history=None, benchmark_history=None, spending_details=None):  # noqa: E501
        """CashFlowAnalysisResponse - a model defined in Swagger"""  # noqa: E501

        self._currency_code = None
        self._income_summary = None
        self._spending_summary = None
        self._net_summary = None
        self._history = None
        self._benchmark_history = None
        self._spending_details = None
        self.discriminator = None

        self.currency_code = currency_code
        self.income_summary = income_summary
        self.spending_summary = spending_summary
        self.net_summary = net_summary
        if history is not None:
            self.history = history
        if benchmark_history is not None:
            self.benchmark_history = benchmark_history
        if spending_details is not None:
            self.spending_details = spending_details

    @property
    def currency_code(self):
        """Gets the currency_code of this CashFlowAnalysisResponse.  # noqa: E501

        Currency associated with monetary response values  # noqa: E501

        :return: The currency_code of this CashFlowAnalysisResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CashFlowAnalysisResponse.

        Currency associated with monetary response values  # noqa: E501

        :param currency_code: The currency_code of this CashFlowAnalysisResponse.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def income_summary(self):
        """Gets the income_summary of this CashFlowAnalysisResponse.  # noqa: E501


        :return: The income_summary of this CashFlowAnalysisResponse.  # noqa: E501
        :rtype: CashFlowAnalysisResponseIncomeSummary
        """
        return self._income_summary

    @income_summary.setter
    def income_summary(self, income_summary):
        """Sets the income_summary of this CashFlowAnalysisResponse.


        :param income_summary: The income_summary of this CashFlowAnalysisResponse.  # noqa: E501
        :type: CashFlowAnalysisResponseIncomeSummary
        """
        if income_summary is None:
            raise ValueError("Invalid value for `income_summary`, must not be `None`")  # noqa: E501

        self._income_summary = income_summary

    @property
    def spending_summary(self):
        """Gets the spending_summary of this CashFlowAnalysisResponse.  # noqa: E501


        :return: The spending_summary of this CashFlowAnalysisResponse.  # noqa: E501
        :rtype: CashFlowAnalysisResponseSpendingSummary
        """
        return self._spending_summary

    @spending_summary.setter
    def spending_summary(self, spending_summary):
        """Sets the spending_summary of this CashFlowAnalysisResponse.


        :param spending_summary: The spending_summary of this CashFlowAnalysisResponse.  # noqa: E501
        :type: CashFlowAnalysisResponseSpendingSummary
        """
        if spending_summary is None:
            raise ValueError("Invalid value for `spending_summary`, must not be `None`")  # noqa: E501

        self._spending_summary = spending_summary

    @property
    def net_summary(self):
        """Gets the net_summary of this CashFlowAnalysisResponse.  # noqa: E501


        :return: The net_summary of this CashFlowAnalysisResponse.  # noqa: E501
        :rtype: CashFlowAnalysisResponseNetSummary
        """
        return self._net_summary

    @net_summary.setter
    def net_summary(self, net_summary):
        """Sets the net_summary of this CashFlowAnalysisResponse.


        :param net_summary: The net_summary of this CashFlowAnalysisResponse.  # noqa: E501
        :type: CashFlowAnalysisResponseNetSummary
        """
        if net_summary is None:
            raise ValueError("Invalid value for `net_summary`, must not be `None`")  # noqa: E501

        self._net_summary = net_summary

    @property
    def history(self):
        """Gets the history of this CashFlowAnalysisResponse.  # noqa: E501

        Cash flow values over time during the base period  # noqa: E501

        :return: The history of this CashFlowAnalysisResponse.  # noqa: E501
        :rtype: list[CashFlowAnalysisResponseHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this CashFlowAnalysisResponse.

        Cash flow values over time during the base period  # noqa: E501

        :param history: The history of this CashFlowAnalysisResponse.  # noqa: E501
        :type: list[CashFlowAnalysisResponseHistory]
        """

        self._history = history

    @property
    def benchmark_history(self):
        """Gets the benchmark_history of this CashFlowAnalysisResponse.  # noqa: E501

        Cash flow values over time during the benchmark period  # noqa: E501

        :return: The benchmark_history of this CashFlowAnalysisResponse.  # noqa: E501
        :rtype: list[CashFlowAnalysisResponseHistory]
        """
        return self._benchmark_history

    @benchmark_history.setter
    def benchmark_history(self, benchmark_history):
        """Sets the benchmark_history of this CashFlowAnalysisResponse.

        Cash flow values over time during the benchmark period  # noqa: E501

        :param benchmark_history: The benchmark_history of this CashFlowAnalysisResponse.  # noqa: E501
        :type: list[CashFlowAnalysisResponseHistory]
        """

        self._benchmark_history = benchmark_history

    @property
    def spending_details(self):
        """Gets the spending_details of this CashFlowAnalysisResponse.  # noqa: E501


        :return: The spending_details of this CashFlowAnalysisResponse.  # noqa: E501
        :rtype: CashFlowAnalysisResponseSpendingDetails
        """
        return self._spending_details

    @spending_details.setter
    def spending_details(self, spending_details):
        """Sets the spending_details of this CashFlowAnalysisResponse.


        :param spending_details: The spending_details of this CashFlowAnalysisResponse.  # noqa: E501
        :type: CashFlowAnalysisResponseSpendingDetails
        """

        self._spending_details = spending_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CashFlowAnalysisResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CashFlowAnalysisResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
